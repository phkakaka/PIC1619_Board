

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 28 06:23:43 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	dabs	1,0x7E,2
   128  0000                     
   129                           ; Version 1.45
   130                           ; Generated 16/11/2017 GMT
   131                           ; 
   132                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   133                           ; All rights reserved.
   134                           ; 
   135                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   136                           ; 
   137                           ; Redistribution and use in source and binary forms, with or without modification, are
   138                           ; permitted provided that the following conditions are met:
   139                           ; 
   140                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   141                           ;        conditions and the following disclaimer.
   142                           ; 
   143                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   144                           ;        of conditions and the following disclaimer in the documentation and/or other
   145                           ;        materials provided with the distribution.
   146                           ; 
   147                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   148                           ;        software without specific prior written permission.
   149                           ; 
   150                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   151                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   152                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   153                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   154                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   155                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   156                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   157                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   158                           ; 
   159                           ; 
   160                           ; Code-generator required, PIC16F1619 Definitions
   161                           ; 
   162                           ; SFR Addresses
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0111                     	;# 
   220  0112                     	;# 
   221  0113                     	;# 
   222  0114                     	;# 
   223  0115                     	;# 
   224  0116                     	;# 
   225  0117                     	;# 
   226  0118                     	;# 
   227  0119                     	;# 
   228  011C                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  018E                     	;# 
   232  0191                     	;# 
   233  0191                     	;# 
   234  0192                     	;# 
   235  0193                     	;# 
   236  0193                     	;# 
   237  0194                     	;# 
   238  0195                     	;# 
   239  0196                     	;# 
   240  0197                     	;# 
   241  0199                     	;# 
   242  0199                     	;# 
   243  0199                     	;# 
   244  019A                     	;# 
   245  019A                     	;# 
   246  019A                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019C                     	;# 
   253  019C                     	;# 
   254  019C                     	;# 
   255  019D                     	;# 
   256  019D                     	;# 
   257  019D                     	;# 
   258  019E                     	;# 
   259  019E                     	;# 
   260  019E                     	;# 
   261  019F                     	;# 
   262  019F                     	;# 
   263  019F                     	;# 
   264  019F                     	;# 
   265  019F                     	;# 
   266  020C                     	;# 
   267  020D                     	;# 
   268  020E                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  028C                     	;# 
   286  028D                     	;# 
   287  028E                     	;# 
   288  0291                     	;# 
   289  0291                     	;# 
   290  0292                     	;# 
   291  0293                     	;# 
   292  0294                     	;# 
   293  0298                     	;# 
   294  0298                     	;# 
   295  0299                     	;# 
   296  029A                     	;# 
   297  029B                     	;# 
   298  029E                     	;# 
   299  030C                     	;# 
   300  030D                     	;# 
   301  030E                     	;# 
   302  038C                     	;# 
   303  038D                     	;# 
   304  038E                     	;# 
   305  0391                     	;# 
   306  0392                     	;# 
   307  0393                     	;# 
   308  0394                     	;# 
   309  0395                     	;# 
   310  0396                     	;# 
   311  0397                     	;# 
   312  0398                     	;# 
   313  0399                     	;# 
   314  040E                     	;# 
   315  0413                     	;# 
   316  0413                     	;# 
   317  0414                     	;# 
   318  0414                     	;# 
   319  0415                     	;# 
   320  0416                     	;# 
   321  0417                     	;# 
   322  0418                     	;# 
   323  041A                     	;# 
   324  041A                     	;# 
   325  041B                     	;# 
   326  041B                     	;# 
   327  041C                     	;# 
   328  041D                     	;# 
   329  041E                     	;# 
   330  041F                     	;# 
   331  0493                     	;# 
   332  0494                     	;# 
   333  0495                     	;# 
   334  0496                     	;# 
   335  049A                     	;# 
   336  049B                     	;# 
   337  049C                     	;# 
   338  049D                     	;# 
   339  058C                     	;# 
   340  058C                     	;# 
   341  058D                     	;# 
   342  058E                     	;# 
   343  058E                     	;# 
   344  058F                     	;# 
   345  0590                     	;# 
   346  0590                     	;# 
   347  0591                     	;# 
   348  0592                     	;# 
   349  0592                     	;# 
   350  0593                     	;# 
   351  0594                     	;# 
   352  0594                     	;# 
   353  0595                     	;# 
   354  0596                     	;# 
   355  0596                     	;# 
   356  0597                     	;# 
   357  0598                     	;# 
   358  0599                     	;# 
   359  059A                     	;# 
   360  059B                     	;# 
   361  059B                     	;# 
   362  059C                     	;# 
   363  059D                     	;# 
   364  060C                     	;# 
   365  060C                     	;# 
   366  060D                     	;# 
   367  060E                     	;# 
   368  060F                     	;# 
   369  060F                     	;# 
   370  0610                     	;# 
   371  0611                     	;# 
   372  0612                     	;# 
   373  0613                     	;# 
   374  0614                     	;# 
   375  0617                     	;# 
   376  0618                     	;# 
   377  0619                     	;# 
   378  061A                     	;# 
   379  061B                     	;# 
   380  061C                     	;# 
   381  0691                     	;# 
   382  0692                     	;# 
   383  0693                     	;# 
   384  0694                     	;# 
   385  0695                     	;# 
   386  0696                     	;# 
   387  0697                     	;# 
   388  0699                     	;# 
   389  069A                     	;# 
   390  0711                     	;# 
   391  0712                     	;# 
   392  0713                     	;# 
   393  0714                     	;# 
   394  0715                     	;# 
   395  0718                     	;# 
   396  0718                     	;# 
   397  0719                     	;# 
   398  071A                     	;# 
   399  071A                     	;# 
   400  071B                     	;# 
   401  071C                     	;# 
   402  071D                     	;# 
   403  0791                     	;# 
   404  0791                     	;# 
   405  0792                     	;# 
   406  0793                     	;# 
   407  0793                     	;# 
   408  0794                     	;# 
   409  0795                     	;# 
   410  0795                     	;# 
   411  0796                     	;# 
   412  0797                     	;# 
   413  0797                     	;# 
   414  0798                     	;# 
   415  0799                     	;# 
   416  079A                     	;# 
   417  080C                     	;# 
   418  080C                     	;# 
   419  080D                     	;# 
   420  080E                     	;# 
   421  080E                     	;# 
   422  080F                     	;# 
   423  0810                     	;# 
   424  0810                     	;# 
   425  0811                     	;# 
   426  0812                     	;# 
   427  0812                     	;# 
   428  0813                     	;# 
   429  0814                     	;# 
   430  0815                     	;# 
   431  0816                     	;# 
   432  0817                     	;# 
   433  0818                     	;# 
   434  0819                     	;# 
   435  081A                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081C                     	;# 
   440  081D                     	;# 
   441  088C                     	;# 
   442  088D                     	;# 
   443  088E                     	;# 
   444  088F                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0893                     	;# 
   451  0894                     	;# 
   452  0895                     	;# 
   453  0896                     	;# 
   454  0897                     	;# 
   455  0897                     	;# 
   456  0898                     	;# 
   457  0899                     	;# 
   458  0D8C                     	;# 
   459  0D8C                     	;# 
   460  0D8D                     	;# 
   461  0D8E                     	;# 
   462  0D8F                     	;# 
   463  0D8F                     	;# 
   464  0D90                     	;# 
   465  0D91                     	;# 
   466  0D92                     	;# 
   467  0D92                     	;# 
   468  0D93                     	;# 
   469  0D94                     	;# 
   470  0D95                     	;# 
   471  0D95                     	;# 
   472  0D96                     	;# 
   473  0D97                     	;# 
   474  0D98                     	;# 
   475  0D99                     	;# 
   476  0D9A                     	;# 
   477  0D9B                     	;# 
   478  0D9C                     	;# 
   479  0D9D                     	;# 
   480  0D9E                     	;# 
   481  0D9E                     	;# 
   482  0D9F                     	;# 
   483  0DA0                     	;# 
   484  0DA1                     	;# 
   485  0DA1                     	;# 
   486  0DA2                     	;# 
   487  0DA3                     	;# 
   488  0DA4                     	;# 
   489  0DA4                     	;# 
   490  0DA5                     	;# 
   491  0DA6                     	;# 
   492  0DA7                     	;# 
   493  0DA7                     	;# 
   494  0DA8                     	;# 
   495  0DA9                     	;# 
   496  0DAA                     	;# 
   497  0DAB                     	;# 
   498  0DAC                     	;# 
   499  0DAD                     	;# 
   500  0DAE                     	;# 
   501  0DAF                     	;# 
   502  0E0F                     	;# 
   503  0E10                     	;# 
   504  0E11                     	;# 
   505  0E12                     	;# 
   506  0E13                     	;# 
   507  0E14                     	;# 
   508  0E15                     	;# 
   509  0E16                     	;# 
   510  0E17                     	;# 
   511  0E18                     	;# 
   512  0E19                     	;# 
   513  0E1A                     	;# 
   514  0E1B                     	;# 
   515  0E1C                     	;# 
   516  0E1D                     	;# 
   517  0E1E                     	;# 
   518  0E1F                     	;# 
   519  0E20                     	;# 
   520  0E21                     	;# 
   521  0E22                     	;# 
   522  0E23                     	;# 
   523  0E24                     	;# 
   524  0E25                     	;# 
   525  0E26                     	;# 
   526  0E27                     	;# 
   527  0E28                     	;# 
   528  0E29                     	;# 
   529  0E2A                     	;# 
   530  0E2B                     	;# 
   531  0E2C                     	;# 
   532  0E2D                     	;# 
   533  0E2E                     	;# 
   534  0E90                     	;# 
   535  0E91                     	;# 
   536  0E92                     	;# 
   537  0E94                     	;# 
   538  0E95                     	;# 
   539  0E9C                     	;# 
   540  0E9D                     	;# 
   541  0E9E                     	;# 
   542  0E9F                     	;# 
   543  0EA0                     	;# 
   544  0EA1                     	;# 
   545  0EA2                     	;# 
   546  0EA3                     	;# 
   547  0EA4                     	;# 
   548  0EA5                     	;# 
   549  0EA6                     	;# 
   550  0EA7                     	;# 
   551  0F0F                     	;# 
   552  0F10                     	;# 
   553  0F11                     	;# 
   554  0F12                     	;# 
   555  0F13                     	;# 
   556  0F14                     	;# 
   557  0F15                     	;# 
   558  0F16                     	;# 
   559  0F17                     	;# 
   560  0F18                     	;# 
   561  0F19                     	;# 
   562  0F1A                     	;# 
   563  0F1B                     	;# 
   564  0F1C                     	;# 
   565  0F1D                     	;# 
   566  0F1E                     	;# 
   567  0F1F                     	;# 
   568  0F20                     	;# 
   569  0F21                     	;# 
   570  0F22                     	;# 
   571  0F23                     	;# 
   572  0F24                     	;# 
   573  0F25                     	;# 
   574  0F26                     	;# 
   575  0F27                     	;# 
   576  0F28                     	;# 
   577  0F29                     	;# 
   578  0F2A                     	;# 
   579  0F2B                     	;# 
   580  0F2C                     	;# 
   581  0F2D                     	;# 
   582  0F2E                     	;# 
   583  0F2F                     	;# 
   584  0F30                     	;# 
   585  0F31                     	;# 
   586  0F32                     	;# 
   587  0F33                     	;# 
   588  0F34                     	;# 
   589  0F35                     	;# 
   590  0F36                     	;# 
   591  0F37                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0013                     	;# 
   622  0014                     	;# 
   623  0015                     	;# 
   624  0016                     	;# 
   625  0016                     	;# 
   626  0017                     	;# 
   627  0018                     	;# 
   628  0019                     	;# 
   629  001A                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  001D                     	;# 
   635  001E                     	;# 
   636  001F                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0093                     	;# 
   644  0094                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0098                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  009F                     	;# 
   656  010C                     	;# 
   657  010D                     	;# 
   658  010E                     	;# 
   659  0111                     	;# 
   660  0112                     	;# 
   661  0113                     	;# 
   662  0114                     	;# 
   663  0115                     	;# 
   664  0116                     	;# 
   665  0117                     	;# 
   666  0118                     	;# 
   667  0119                     	;# 
   668  011C                     	;# 
   669  018C                     	;# 
   670  018D                     	;# 
   671  018E                     	;# 
   672  0191                     	;# 
   673  0191                     	;# 
   674  0192                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0194                     	;# 
   678  0195                     	;# 
   679  0196                     	;# 
   680  0197                     	;# 
   681  0199                     	;# 
   682  0199                     	;# 
   683  0199                     	;# 
   684  019A                     	;# 
   685  019A                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019C                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019D                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019E                     	;# 
   700  019E                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  019F                     	;# 
   704  019F                     	;# 
   705  019F                     	;# 
   706  020C                     	;# 
   707  020D                     	;# 
   708  020E                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0216                     	;# 
   722  0216                     	;# 
   723  0217                     	;# 
   724  0217                     	;# 
   725  028C                     	;# 
   726  028D                     	;# 
   727  028E                     	;# 
   728  0291                     	;# 
   729  0291                     	;# 
   730  0292                     	;# 
   731  0293                     	;# 
   732  0294                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029B                     	;# 
   738  029E                     	;# 
   739  030C                     	;# 
   740  030D                     	;# 
   741  030E                     	;# 
   742  038C                     	;# 
   743  038D                     	;# 
   744  038E                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  0397                     	;# 
   752  0398                     	;# 
   753  0399                     	;# 
   754  040E                     	;# 
   755  0413                     	;# 
   756  0413                     	;# 
   757  0414                     	;# 
   758  0414                     	;# 
   759  0415                     	;# 
   760  0416                     	;# 
   761  0417                     	;# 
   762  0418                     	;# 
   763  041A                     	;# 
   764  041A                     	;# 
   765  041B                     	;# 
   766  041B                     	;# 
   767  041C                     	;# 
   768  041D                     	;# 
   769  041E                     	;# 
   770  041F                     	;# 
   771  0493                     	;# 
   772  0494                     	;# 
   773  0495                     	;# 
   774  0496                     	;# 
   775  049A                     	;# 
   776  049B                     	;# 
   777  049C                     	;# 
   778  049D                     	;# 
   779  058C                     	;# 
   780  058C                     	;# 
   781  058D                     	;# 
   782  058E                     	;# 
   783  058E                     	;# 
   784  058F                     	;# 
   785  0590                     	;# 
   786  0590                     	;# 
   787  0591                     	;# 
   788  0592                     	;# 
   789  0592                     	;# 
   790  0593                     	;# 
   791  0594                     	;# 
   792  0594                     	;# 
   793  0595                     	;# 
   794  0596                     	;# 
   795  0596                     	;# 
   796  0597                     	;# 
   797  0598                     	;# 
   798  0599                     	;# 
   799  059A                     	;# 
   800  059B                     	;# 
   801  059B                     	;# 
   802  059C                     	;# 
   803  059D                     	;# 
   804  060C                     	;# 
   805  060C                     	;# 
   806  060D                     	;# 
   807  060E                     	;# 
   808  060F                     	;# 
   809  060F                     	;# 
   810  0610                     	;# 
   811  0611                     	;# 
   812  0612                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0617                     	;# 
   816  0618                     	;# 
   817  0619                     	;# 
   818  061A                     	;# 
   819  061B                     	;# 
   820  061C                     	;# 
   821  0691                     	;# 
   822  0692                     	;# 
   823  0693                     	;# 
   824  0694                     	;# 
   825  0695                     	;# 
   826  0696                     	;# 
   827  0697                     	;# 
   828  0699                     	;# 
   829  069A                     	;# 
   830  0711                     	;# 
   831  0712                     	;# 
   832  0713                     	;# 
   833  0714                     	;# 
   834  0715                     	;# 
   835  0718                     	;# 
   836  0718                     	;# 
   837  0719                     	;# 
   838  071A                     	;# 
   839  071A                     	;# 
   840  071B                     	;# 
   841  071C                     	;# 
   842  071D                     	;# 
   843  0791                     	;# 
   844  0791                     	;# 
   845  0792                     	;# 
   846  0793                     	;# 
   847  0793                     	;# 
   848  0794                     	;# 
   849  0795                     	;# 
   850  0795                     	;# 
   851  0796                     	;# 
   852  0797                     	;# 
   853  0797                     	;# 
   854  0798                     	;# 
   855  0799                     	;# 
   856  079A                     	;# 
   857  080C                     	;# 
   858  080C                     	;# 
   859  080D                     	;# 
   860  080E                     	;# 
   861  080E                     	;# 
   862  080F                     	;# 
   863  0810                     	;# 
   864  0810                     	;# 
   865  0811                     	;# 
   866  0812                     	;# 
   867  0812                     	;# 
   868  0813                     	;# 
   869  0814                     	;# 
   870  0815                     	;# 
   871  0816                     	;# 
   872  0817                     	;# 
   873  0818                     	;# 
   874  0819                     	;# 
   875  081A                     	;# 
   876  081A                     	;# 
   877  081B                     	;# 
   878  081C                     	;# 
   879  081C                     	;# 
   880  081D                     	;# 
   881  088C                     	;# 
   882  088D                     	;# 
   883  088E                     	;# 
   884  088F                     	;# 
   885  088F                     	;# 
   886  0890                     	;# 
   887  0891                     	;# 
   888  0892                     	;# 
   889  0893                     	;# 
   890  0893                     	;# 
   891  0894                     	;# 
   892  0895                     	;# 
   893  0896                     	;# 
   894  0897                     	;# 
   895  0897                     	;# 
   896  0898                     	;# 
   897  0899                     	;# 
   898  0D8C                     	;# 
   899  0D8C                     	;# 
   900  0D8D                     	;# 
   901  0D8E                     	;# 
   902  0D8F                     	;# 
   903  0D8F                     	;# 
   904  0D90                     	;# 
   905  0D91                     	;# 
   906  0D92                     	;# 
   907  0D92                     	;# 
   908  0D93                     	;# 
   909  0D94                     	;# 
   910  0D95                     	;# 
   911  0D95                     	;# 
   912  0D96                     	;# 
   913  0D97                     	;# 
   914  0D98                     	;# 
   915  0D99                     	;# 
   916  0D9A                     	;# 
   917  0D9B                     	;# 
   918  0D9C                     	;# 
   919  0D9D                     	;# 
   920  0D9E                     	;# 
   921  0D9E                     	;# 
   922  0D9F                     	;# 
   923  0DA0                     	;# 
   924  0DA1                     	;# 
   925  0DA1                     	;# 
   926  0DA2                     	;# 
   927  0DA3                     	;# 
   928  0DA4                     	;# 
   929  0DA4                     	;# 
   930  0DA5                     	;# 
   931  0DA6                     	;# 
   932  0DA7                     	;# 
   933  0DA7                     	;# 
   934  0DA8                     	;# 
   935  0DA9                     	;# 
   936  0DAA                     	;# 
   937  0DAB                     	;# 
   938  0DAC                     	;# 
   939  0DAD                     	;# 
   940  0DAE                     	;# 
   941  0DAF                     	;# 
   942  0E0F                     	;# 
   943  0E10                     	;# 
   944  0E11                     	;# 
   945  0E12                     	;# 
   946  0E13                     	;# 
   947  0E14                     	;# 
   948  0E15                     	;# 
   949  0E16                     	;# 
   950  0E17                     	;# 
   951  0E18                     	;# 
   952  0E19                     	;# 
   953  0E1A                     	;# 
   954  0E1B                     	;# 
   955  0E1C                     	;# 
   956  0E1D                     	;# 
   957  0E1E                     	;# 
   958  0E1F                     	;# 
   959  0E20                     	;# 
   960  0E21                     	;# 
   961  0E22                     	;# 
   962  0E23                     	;# 
   963  0E24                     	;# 
   964  0E25                     	;# 
   965  0E26                     	;# 
   966  0E27                     	;# 
   967  0E28                     	;# 
   968  0E29                     	;# 
   969  0E2A                     	;# 
   970  0E2B                     	;# 
   971  0E2C                     	;# 
   972  0E2D                     	;# 
   973  0E2E                     	;# 
   974  0E90                     	;# 
   975  0E91                     	;# 
   976  0E92                     	;# 
   977  0E94                     	;# 
   978  0E95                     	;# 
   979  0E9C                     	;# 
   980  0E9D                     	;# 
   981  0E9E                     	;# 
   982  0E9F                     	;# 
   983  0EA0                     	;# 
   984  0EA1                     	;# 
   985  0EA2                     	;# 
   986  0EA3                     	;# 
   987  0EA4                     	;# 
   988  0EA5                     	;# 
   989  0EA6                     	;# 
   990  0EA7                     	;# 
   991  0F0F                     	;# 
   992  0F10                     	;# 
   993  0F11                     	;# 
   994  0F12                     	;# 
   995  0F13                     	;# 
   996  0F14                     	;# 
   997  0F15                     	;# 
   998  0F16                     	;# 
   999  0F17                     	;# 
  1000  0F18                     	;# 
  1001  0F19                     	;# 
  1002  0F1A                     	;# 
  1003  0F1B                     	;# 
  1004  0F1C                     	;# 
  1005  0F1D                     	;# 
  1006  0F1E                     	;# 
  1007  0F1F                     	;# 
  1008  0F20                     	;# 
  1009  0F21                     	;# 
  1010  0F22                     	;# 
  1011  0F23                     	;# 
  1012  0F24                     	;# 
  1013  0F25                     	;# 
  1014  0F26                     	;# 
  1015  0F27                     	;# 
  1016  0F28                     	;# 
  1017  0F29                     	;# 
  1018  0F2A                     	;# 
  1019  0F2B                     	;# 
  1020  0F2C                     	;# 
  1021  0F2D                     	;# 
  1022  0F2E                     	;# 
  1023  0F2F                     	;# 
  1024  0F30                     	;# 
  1025  0F31                     	;# 
  1026  0F32                     	;# 
  1027  0F33                     	;# 
  1028  0F34                     	;# 
  1029  0F35                     	;# 
  1030  0F36                     	;# 
  1031  0F37                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0014                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001A                     	;# 
  1071  001B                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  001D                     	;# 
  1075  001E                     	;# 
  1076  001F                     	;# 
  1077  008C                     	;# 
  1078  008D                     	;# 
  1079  008E                     	;# 
  1080  0090                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0098                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  009F                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011C                     	;# 
  1109  018C                     	;# 
  1110  018D                     	;# 
  1111  018E                     	;# 
  1112  0191                     	;# 
  1113  0191                     	;# 
  1114  0192                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0194                     	;# 
  1118  0195                     	;# 
  1119  0196                     	;# 
  1120  0197                     	;# 
  1121  0199                     	;# 
  1122  0199                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019A                     	;# 
  1126  019A                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019C                     	;# 
  1135  019D                     	;# 
  1136  019D                     	;# 
  1137  019D                     	;# 
  1138  019E                     	;# 
  1139  019E                     	;# 
  1140  019E                     	;# 
  1141  019F                     	;# 
  1142  019F                     	;# 
  1143  019F                     	;# 
  1144  019F                     	;# 
  1145  019F                     	;# 
  1146  020C                     	;# 
  1147  020D                     	;# 
  1148  020E                     	;# 
  1149  0211                     	;# 
  1150  0211                     	;# 
  1151  0212                     	;# 
  1152  0212                     	;# 
  1153  0213                     	;# 
  1154  0213                     	;# 
  1155  0214                     	;# 
  1156  0214                     	;# 
  1157  0215                     	;# 
  1158  0215                     	;# 
  1159  0215                     	;# 
  1160  0215                     	;# 
  1161  0216                     	;# 
  1162  0216                     	;# 
  1163  0217                     	;# 
  1164  0217                     	;# 
  1165  028C                     	;# 
  1166  028D                     	;# 
  1167  028E                     	;# 
  1168  0291                     	;# 
  1169  0291                     	;# 
  1170  0292                     	;# 
  1171  0293                     	;# 
  1172  0294                     	;# 
  1173  0298                     	;# 
  1174  0298                     	;# 
  1175  0299                     	;# 
  1176  029A                     	;# 
  1177  029B                     	;# 
  1178  029E                     	;# 
  1179  030C                     	;# 
  1180  030D                     	;# 
  1181  030E                     	;# 
  1182  038C                     	;# 
  1183  038D                     	;# 
  1184  038E                     	;# 
  1185  0391                     	;# 
  1186  0392                     	;# 
  1187  0393                     	;# 
  1188  0394                     	;# 
  1189  0395                     	;# 
  1190  0396                     	;# 
  1191  0397                     	;# 
  1192  0398                     	;# 
  1193  0399                     	;# 
  1194  040E                     	;# 
  1195  0413                     	;# 
  1196  0413                     	;# 
  1197  0414                     	;# 
  1198  0414                     	;# 
  1199  0415                     	;# 
  1200  0416                     	;# 
  1201  0417                     	;# 
  1202  0418                     	;# 
  1203  041A                     	;# 
  1204  041A                     	;# 
  1205  041B                     	;# 
  1206  041B                     	;# 
  1207  041C                     	;# 
  1208  041D                     	;# 
  1209  041E                     	;# 
  1210  041F                     	;# 
  1211  0493                     	;# 
  1212  0494                     	;# 
  1213  0495                     	;# 
  1214  0496                     	;# 
  1215  049A                     	;# 
  1216  049B                     	;# 
  1217  049C                     	;# 
  1218  049D                     	;# 
  1219  058C                     	;# 
  1220  058C                     	;# 
  1221  058D                     	;# 
  1222  058E                     	;# 
  1223  058E                     	;# 
  1224  058F                     	;# 
  1225  0590                     	;# 
  1226  0590                     	;# 
  1227  0591                     	;# 
  1228  0592                     	;# 
  1229  0592                     	;# 
  1230  0593                     	;# 
  1231  0594                     	;# 
  1232  0594                     	;# 
  1233  0595                     	;# 
  1234  0596                     	;# 
  1235  0596                     	;# 
  1236  0597                     	;# 
  1237  0598                     	;# 
  1238  0599                     	;# 
  1239  059A                     	;# 
  1240  059B                     	;# 
  1241  059B                     	;# 
  1242  059C                     	;# 
  1243  059D                     	;# 
  1244  060C                     	;# 
  1245  060C                     	;# 
  1246  060D                     	;# 
  1247  060E                     	;# 
  1248  060F                     	;# 
  1249  060F                     	;# 
  1250  0610                     	;# 
  1251  0611                     	;# 
  1252  0612                     	;# 
  1253  0613                     	;# 
  1254  0614                     	;# 
  1255  0617                     	;# 
  1256  0618                     	;# 
  1257  0619                     	;# 
  1258  061A                     	;# 
  1259  061B                     	;# 
  1260  061C                     	;# 
  1261  0691                     	;# 
  1262  0692                     	;# 
  1263  0693                     	;# 
  1264  0694                     	;# 
  1265  0695                     	;# 
  1266  0696                     	;# 
  1267  0697                     	;# 
  1268  0699                     	;# 
  1269  069A                     	;# 
  1270  0711                     	;# 
  1271  0712                     	;# 
  1272  0713                     	;# 
  1273  0714                     	;# 
  1274  0715                     	;# 
  1275  0718                     	;# 
  1276  0718                     	;# 
  1277  0719                     	;# 
  1278  071A                     	;# 
  1279  071A                     	;# 
  1280  071B                     	;# 
  1281  071C                     	;# 
  1282  071D                     	;# 
  1283  0791                     	;# 
  1284  0791                     	;# 
  1285  0792                     	;# 
  1286  0793                     	;# 
  1287  0793                     	;# 
  1288  0794                     	;# 
  1289  0795                     	;# 
  1290  0795                     	;# 
  1291  0796                     	;# 
  1292  0797                     	;# 
  1293  0797                     	;# 
  1294  0798                     	;# 
  1295  0799                     	;# 
  1296  079A                     	;# 
  1297  080C                     	;# 
  1298  080C                     	;# 
  1299  080D                     	;# 
  1300  080E                     	;# 
  1301  080E                     	;# 
  1302  080F                     	;# 
  1303  0810                     	;# 
  1304  0810                     	;# 
  1305  0811                     	;# 
  1306  0812                     	;# 
  1307  0812                     	;# 
  1308  0813                     	;# 
  1309  0814                     	;# 
  1310  0815                     	;# 
  1311  0816                     	;# 
  1312  0817                     	;# 
  1313  0818                     	;# 
  1314  0819                     	;# 
  1315  081A                     	;# 
  1316  081A                     	;# 
  1317  081B                     	;# 
  1318  081C                     	;# 
  1319  081C                     	;# 
  1320  081D                     	;# 
  1321  088C                     	;# 
  1322  088D                     	;# 
  1323  088E                     	;# 
  1324  088F                     	;# 
  1325  088F                     	;# 
  1326  0890                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0894                     	;# 
  1332  0895                     	;# 
  1333  0896                     	;# 
  1334  0897                     	;# 
  1335  0897                     	;# 
  1336  0898                     	;# 
  1337  0899                     	;# 
  1338  0D8C                     	;# 
  1339  0D8C                     	;# 
  1340  0D8D                     	;# 
  1341  0D8E                     	;# 
  1342  0D8F                     	;# 
  1343  0D8F                     	;# 
  1344  0D90                     	;# 
  1345  0D91                     	;# 
  1346  0D92                     	;# 
  1347  0D92                     	;# 
  1348  0D93                     	;# 
  1349  0D94                     	;# 
  1350  0D95                     	;# 
  1351  0D95                     	;# 
  1352  0D96                     	;# 
  1353  0D97                     	;# 
  1354  0D98                     	;# 
  1355  0D99                     	;# 
  1356  0D9A                     	;# 
  1357  0D9B                     	;# 
  1358  0D9C                     	;# 
  1359  0D9D                     	;# 
  1360  0D9E                     	;# 
  1361  0D9E                     	;# 
  1362  0D9F                     	;# 
  1363  0DA0                     	;# 
  1364  0DA1                     	;# 
  1365  0DA1                     	;# 
  1366  0DA2                     	;# 
  1367  0DA3                     	;# 
  1368  0DA4                     	;# 
  1369  0DA4                     	;# 
  1370  0DA5                     	;# 
  1371  0DA6                     	;# 
  1372  0DA7                     	;# 
  1373  0DA7                     	;# 
  1374  0DA8                     	;# 
  1375  0DA9                     	;# 
  1376  0DAA                     	;# 
  1377  0DAB                     	;# 
  1378  0DAC                     	;# 
  1379  0DAD                     	;# 
  1380  0DAE                     	;# 
  1381  0DAF                     	;# 
  1382  0E0F                     	;# 
  1383  0E10                     	;# 
  1384  0E11                     	;# 
  1385  0E12                     	;# 
  1386  0E13                     	;# 
  1387  0E14                     	;# 
  1388  0E15                     	;# 
  1389  0E16                     	;# 
  1390  0E17                     	;# 
  1391  0E18                     	;# 
  1392  0E19                     	;# 
  1393  0E1A                     	;# 
  1394  0E1B                     	;# 
  1395  0E1C                     	;# 
  1396  0E1D                     	;# 
  1397  0E1E                     	;# 
  1398  0E1F                     	;# 
  1399  0E20                     	;# 
  1400  0E21                     	;# 
  1401  0E22                     	;# 
  1402  0E23                     	;# 
  1403  0E24                     	;# 
  1404  0E25                     	;# 
  1405  0E26                     	;# 
  1406  0E27                     	;# 
  1407  0E28                     	;# 
  1408  0E29                     	;# 
  1409  0E2A                     	;# 
  1410  0E2B                     	;# 
  1411  0E2C                     	;# 
  1412  0E2D                     	;# 
  1413  0E2E                     	;# 
  1414  0E90                     	;# 
  1415  0E91                     	;# 
  1416  0E92                     	;# 
  1417  0E94                     	;# 
  1418  0E95                     	;# 
  1419  0E9C                     	;# 
  1420  0E9D                     	;# 
  1421  0E9E                     	;# 
  1422  0E9F                     	;# 
  1423  0EA0                     	;# 
  1424  0EA1                     	;# 
  1425  0EA2                     	;# 
  1426  0EA3                     	;# 
  1427  0EA4                     	;# 
  1428  0EA5                     	;# 
  1429  0EA6                     	;# 
  1430  0EA7                     	;# 
  1431  0F0F                     	;# 
  1432  0F10                     	;# 
  1433  0F11                     	;# 
  1434  0F12                     	;# 
  1435  0F13                     	;# 
  1436  0F14                     	;# 
  1437  0F15                     	;# 
  1438  0F16                     	;# 
  1439  0F17                     	;# 
  1440  0F18                     	;# 
  1441  0F19                     	;# 
  1442  0F1A                     	;# 
  1443  0F1B                     	;# 
  1444  0F1C                     	;# 
  1445  0F1D                     	;# 
  1446  0F1E                     	;# 
  1447  0F1F                     	;# 
  1448  0F20                     	;# 
  1449  0F21                     	;# 
  1450  0F22                     	;# 
  1451  0F23                     	;# 
  1452  0F24                     	;# 
  1453  0F25                     	;# 
  1454  0F26                     	;# 
  1455  0F27                     	;# 
  1456  0F28                     	;# 
  1457  0F29                     	;# 
  1458  0F2A                     	;# 
  1459  0F2B                     	;# 
  1460  0F2C                     	;# 
  1461  0F2D                     	;# 
  1462  0F2E                     	;# 
  1463  0F2F                     	;# 
  1464  0F30                     	;# 
  1465  0F31                     	;# 
  1466  0F32                     	;# 
  1467  0F33                     	;# 
  1468  0F34                     	;# 
  1469  0F35                     	;# 
  1470  0F36                     	;# 
  1471  0F37                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0010                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0014                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  001D                     	;# 
  1515  001E                     	;# 
  1516  001F                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0094                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0098                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011C                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  0199                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019A                     	;# 
  1566  019A                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019C                     	;# 
  1575  019D                     	;# 
  1576  019D                     	;# 
  1577  019D                     	;# 
  1578  019E                     	;# 
  1579  019E                     	;# 
  1580  019E                     	;# 
  1581  019F                     	;# 
  1582  019F                     	;# 
  1583  019F                     	;# 
  1584  019F                     	;# 
  1585  019F                     	;# 
  1586  020C                     	;# 
  1587  020D                     	;# 
  1588  020E                     	;# 
  1589  0211                     	;# 
  1590  0211                     	;# 
  1591  0212                     	;# 
  1592  0212                     	;# 
  1593  0213                     	;# 
  1594  0213                     	;# 
  1595  0214                     	;# 
  1596  0214                     	;# 
  1597  0215                     	;# 
  1598  0215                     	;# 
  1599  0215                     	;# 
  1600  0215                     	;# 
  1601  0216                     	;# 
  1602  0216                     	;# 
  1603  0217                     	;# 
  1604  0217                     	;# 
  1605  028C                     	;# 
  1606  028D                     	;# 
  1607  028E                     	;# 
  1608  0291                     	;# 
  1609  0291                     	;# 
  1610  0292                     	;# 
  1611  0293                     	;# 
  1612  0294                     	;# 
  1613  0298                     	;# 
  1614  0298                     	;# 
  1615  0299                     	;# 
  1616  029A                     	;# 
  1617  029B                     	;# 
  1618  029E                     	;# 
  1619  030C                     	;# 
  1620  030D                     	;# 
  1621  030E                     	;# 
  1622  038C                     	;# 
  1623  038D                     	;# 
  1624  038E                     	;# 
  1625  0391                     	;# 
  1626  0392                     	;# 
  1627  0393                     	;# 
  1628  0394                     	;# 
  1629  0395                     	;# 
  1630  0396                     	;# 
  1631  0397                     	;# 
  1632  0398                     	;# 
  1633  0399                     	;# 
  1634  040E                     	;# 
  1635  0413                     	;# 
  1636  0413                     	;# 
  1637  0414                     	;# 
  1638  0414                     	;# 
  1639  0415                     	;# 
  1640  0416                     	;# 
  1641  0417                     	;# 
  1642  0418                     	;# 
  1643  041A                     	;# 
  1644  041A                     	;# 
  1645  041B                     	;# 
  1646  041B                     	;# 
  1647  041C                     	;# 
  1648  041D                     	;# 
  1649  041E                     	;# 
  1650  041F                     	;# 
  1651  0493                     	;# 
  1652  0494                     	;# 
  1653  0495                     	;# 
  1654  0496                     	;# 
  1655  049A                     	;# 
  1656  049B                     	;# 
  1657  049C                     	;# 
  1658  049D                     	;# 
  1659  058C                     	;# 
  1660  058C                     	;# 
  1661  058D                     	;# 
  1662  058E                     	;# 
  1663  058E                     	;# 
  1664  058F                     	;# 
  1665  0590                     	;# 
  1666  0590                     	;# 
  1667  0591                     	;# 
  1668  0592                     	;# 
  1669  0592                     	;# 
  1670  0593                     	;# 
  1671  0594                     	;# 
  1672  0594                     	;# 
  1673  0595                     	;# 
  1674  0596                     	;# 
  1675  0596                     	;# 
  1676  0597                     	;# 
  1677  0598                     	;# 
  1678  0599                     	;# 
  1679  059A                     	;# 
  1680  059B                     	;# 
  1681  059B                     	;# 
  1682  059C                     	;# 
  1683  059D                     	;# 
  1684  060C                     	;# 
  1685  060C                     	;# 
  1686  060D                     	;# 
  1687  060E                     	;# 
  1688  060F                     	;# 
  1689  060F                     	;# 
  1690  0610                     	;# 
  1691  0611                     	;# 
  1692  0612                     	;# 
  1693  0613                     	;# 
  1694  0614                     	;# 
  1695  0617                     	;# 
  1696  0618                     	;# 
  1697  0619                     	;# 
  1698  061A                     	;# 
  1699  061B                     	;# 
  1700  061C                     	;# 
  1701  0691                     	;# 
  1702  0692                     	;# 
  1703  0693                     	;# 
  1704  0694                     	;# 
  1705  0695                     	;# 
  1706  0696                     	;# 
  1707  0697                     	;# 
  1708  0699                     	;# 
  1709  069A                     	;# 
  1710  0711                     	;# 
  1711  0712                     	;# 
  1712  0713                     	;# 
  1713  0714                     	;# 
  1714  0715                     	;# 
  1715  0718                     	;# 
  1716  0718                     	;# 
  1717  0719                     	;# 
  1718  071A                     	;# 
  1719  071A                     	;# 
  1720  071B                     	;# 
  1721  071C                     	;# 
  1722  071D                     	;# 
  1723  0791                     	;# 
  1724  0791                     	;# 
  1725  0792                     	;# 
  1726  0793                     	;# 
  1727  0793                     	;# 
  1728  0794                     	;# 
  1729  0795                     	;# 
  1730  0795                     	;# 
  1731  0796                     	;# 
  1732  0797                     	;# 
  1733  0797                     	;# 
  1734  0798                     	;# 
  1735  0799                     	;# 
  1736  079A                     	;# 
  1737  080C                     	;# 
  1738  080C                     	;# 
  1739  080D                     	;# 
  1740  080E                     	;# 
  1741  080E                     	;# 
  1742  080F                     	;# 
  1743  0810                     	;# 
  1744  0810                     	;# 
  1745  0811                     	;# 
  1746  0812                     	;# 
  1747  0812                     	;# 
  1748  0813                     	;# 
  1749  0814                     	;# 
  1750  0815                     	;# 
  1751  0816                     	;# 
  1752  0817                     	;# 
  1753  0818                     	;# 
  1754  0819                     	;# 
  1755  081A                     	;# 
  1756  081A                     	;# 
  1757  081B                     	;# 
  1758  081C                     	;# 
  1759  081C                     	;# 
  1760  081D                     	;# 
  1761  088C                     	;# 
  1762  088D                     	;# 
  1763  088E                     	;# 
  1764  088F                     	;# 
  1765  088F                     	;# 
  1766  0890                     	;# 
  1767  0891                     	;# 
  1768  0892                     	;# 
  1769  0893                     	;# 
  1770  0893                     	;# 
  1771  0894                     	;# 
  1772  0895                     	;# 
  1773  0896                     	;# 
  1774  0897                     	;# 
  1775  0897                     	;# 
  1776  0898                     	;# 
  1777  0899                     	;# 
  1778  0D8C                     	;# 
  1779  0D8C                     	;# 
  1780  0D8D                     	;# 
  1781  0D8E                     	;# 
  1782  0D8F                     	;# 
  1783  0D8F                     	;# 
  1784  0D90                     	;# 
  1785  0D91                     	;# 
  1786  0D92                     	;# 
  1787  0D92                     	;# 
  1788  0D93                     	;# 
  1789  0D94                     	;# 
  1790  0D95                     	;# 
  1791  0D95                     	;# 
  1792  0D96                     	;# 
  1793  0D97                     	;# 
  1794  0D98                     	;# 
  1795  0D99                     	;# 
  1796  0D9A                     	;# 
  1797  0D9B                     	;# 
  1798  0D9C                     	;# 
  1799  0D9D                     	;# 
  1800  0D9E                     	;# 
  1801  0D9E                     	;# 
  1802  0D9F                     	;# 
  1803  0DA0                     	;# 
  1804  0DA1                     	;# 
  1805  0DA1                     	;# 
  1806  0DA2                     	;# 
  1807  0DA3                     	;# 
  1808  0DA4                     	;# 
  1809  0DA4                     	;# 
  1810  0DA5                     	;# 
  1811  0DA6                     	;# 
  1812  0DA7                     	;# 
  1813  0DA7                     	;# 
  1814  0DA8                     	;# 
  1815  0DA9                     	;# 
  1816  0DAA                     	;# 
  1817  0DAB                     	;# 
  1818  0DAC                     	;# 
  1819  0DAD                     	;# 
  1820  0DAE                     	;# 
  1821  0DAF                     	;# 
  1822  0E0F                     	;# 
  1823  0E10                     	;# 
  1824  0E11                     	;# 
  1825  0E12                     	;# 
  1826  0E13                     	;# 
  1827  0E14                     	;# 
  1828  0E15                     	;# 
  1829  0E16                     	;# 
  1830  0E17                     	;# 
  1831  0E18                     	;# 
  1832  0E19                     	;# 
  1833  0E1A                     	;# 
  1834  0E1B                     	;# 
  1835  0E1C                     	;# 
  1836  0E1D                     	;# 
  1837  0E1E                     	;# 
  1838  0E1F                     	;# 
  1839  0E20                     	;# 
  1840  0E21                     	;# 
  1841  0E22                     	;# 
  1842  0E23                     	;# 
  1843  0E24                     	;# 
  1844  0E25                     	;# 
  1845  0E26                     	;# 
  1846  0E27                     	;# 
  1847  0E28                     	;# 
  1848  0E29                     	;# 
  1849  0E2A                     	;# 
  1850  0E2B                     	;# 
  1851  0E2C                     	;# 
  1852  0E2D                     	;# 
  1853  0E2E                     	;# 
  1854  0E90                     	;# 
  1855  0E91                     	;# 
  1856  0E92                     	;# 
  1857  0E94                     	;# 
  1858  0E95                     	;# 
  1859  0E9C                     	;# 
  1860  0E9D                     	;# 
  1861  0E9E                     	;# 
  1862  0E9F                     	;# 
  1863  0EA0                     	;# 
  1864  0EA1                     	;# 
  1865  0EA2                     	;# 
  1866  0EA3                     	;# 
  1867  0EA4                     	;# 
  1868  0EA5                     	;# 
  1869  0EA6                     	;# 
  1870  0EA7                     	;# 
  1871  0F0F                     	;# 
  1872  0F10                     	;# 
  1873  0F11                     	;# 
  1874  0F12                     	;# 
  1875  0F13                     	;# 
  1876  0F14                     	;# 
  1877  0F15                     	;# 
  1878  0F16                     	;# 
  1879  0F17                     	;# 
  1880  0F18                     	;# 
  1881  0F19                     	;# 
  1882  0F1A                     	;# 
  1883  0F1B                     	;# 
  1884  0F1C                     	;# 
  1885  0F1D                     	;# 
  1886  0F1E                     	;# 
  1887  0F1F                     	;# 
  1888  0F20                     	;# 
  1889  0F21                     	;# 
  1890  0F22                     	;# 
  1891  0F23                     	;# 
  1892  0F24                     	;# 
  1893  0F25                     	;# 
  1894  0F26                     	;# 
  1895  0F27                     	;# 
  1896  0F28                     	;# 
  1897  0F29                     	;# 
  1898  0F2A                     	;# 
  1899  0F2B                     	;# 
  1900  0F2C                     	;# 
  1901  0F2D                     	;# 
  1902  0F2E                     	;# 
  1903  0F2F                     	;# 
  1904  0F30                     	;# 
  1905  0F31                     	;# 
  1906  0F32                     	;# 
  1907  0F33                     	;# 
  1908  0F34                     	;# 
  1909  0F35                     	;# 
  1910  0F36                     	;# 
  1911  0F37                     	;# 
  1912  0FE4                     	;# 
  1913  0FE5                     	;# 
  1914  0FE6                     	;# 
  1915  0FE7                     	;# 
  1916  0FE8                     	;# 
  1917  0FE9                     	;# 
  1918  0FEA                     	;# 
  1919  0FEB                     	;# 
  1920  0FED                     	;# 
  1921  0FEE                     	;# 
  1922  0FEF                     	;# 
  1923  0000                     	;# 
  1924  0001                     	;# 
  1925  0002                     	;# 
  1926  0003                     	;# 
  1927  0004                     	;# 
  1928  0005                     	;# 
  1929  0006                     	;# 
  1930  0007                     	;# 
  1931  0008                     	;# 
  1932  0009                     	;# 
  1933  000A                     	;# 
  1934  000B                     	;# 
  1935  000C                     	;# 
  1936  000D                     	;# 
  1937  000E                     	;# 
  1938  0010                     	;# 
  1939  0011                     	;# 
  1940  0012                     	;# 
  1941  0013                     	;# 
  1942  0014                     	;# 
  1943  0015                     	;# 
  1944  0016                     	;# 
  1945  0016                     	;# 
  1946  0017                     	;# 
  1947  0018                     	;# 
  1948  0019                     	;# 
  1949  001A                     	;# 
  1950  001A                     	;# 
  1951  001B                     	;# 
  1952  001B                     	;# 
  1953  001C                     	;# 
  1954  001D                     	;# 
  1955  001E                     	;# 
  1956  001F                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0093                     	;# 
  1964  0094                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0098                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  009F                     	;# 
  1976  010C                     	;# 
  1977  010D                     	;# 
  1978  010E                     	;# 
  1979  0111                     	;# 
  1980  0112                     	;# 
  1981  0113                     	;# 
  1982  0114                     	;# 
  1983  0115                     	;# 
  1984  0116                     	;# 
  1985  0117                     	;# 
  1986  0118                     	;# 
  1987  0119                     	;# 
  1988  011C                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  0199                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019A                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019B                     	;# 
  2012  019C                     	;# 
  2013  019C                     	;# 
  2014  019C                     	;# 
  2015  019D                     	;# 
  2016  019D                     	;# 
  2017  019D                     	;# 
  2018  019E                     	;# 
  2019  019E                     	;# 
  2020  019E                     	;# 
  2021  019F                     	;# 
  2022  019F                     	;# 
  2023  019F                     	;# 
  2024  019F                     	;# 
  2025  019F                     	;# 
  2026  020C                     	;# 
  2027  020D                     	;# 
  2028  020E                     	;# 
  2029  0211                     	;# 
  2030  0211                     	;# 
  2031  0212                     	;# 
  2032  0212                     	;# 
  2033  0213                     	;# 
  2034  0213                     	;# 
  2035  0214                     	;# 
  2036  0214                     	;# 
  2037  0215                     	;# 
  2038  0215                     	;# 
  2039  0215                     	;# 
  2040  0215                     	;# 
  2041  0216                     	;# 
  2042  0216                     	;# 
  2043  0217                     	;# 
  2044  0217                     	;# 
  2045  028C                     	;# 
  2046  028D                     	;# 
  2047  028E                     	;# 
  2048  0291                     	;# 
  2049  0291                     	;# 
  2050  0292                     	;# 
  2051  0293                     	;# 
  2052  0294                     	;# 
  2053  0298                     	;# 
  2054  0298                     	;# 
  2055  0299                     	;# 
  2056  029A                     	;# 
  2057  029B                     	;# 
  2058  029E                     	;# 
  2059  030C                     	;# 
  2060  030D                     	;# 
  2061  030E                     	;# 
  2062  038C                     	;# 
  2063  038D                     	;# 
  2064  038E                     	;# 
  2065  0391                     	;# 
  2066  0392                     	;# 
  2067  0393                     	;# 
  2068  0394                     	;# 
  2069  0395                     	;# 
  2070  0396                     	;# 
  2071  0397                     	;# 
  2072  0398                     	;# 
  2073  0399                     	;# 
  2074  040E                     	;# 
  2075  0413                     	;# 
  2076  0413                     	;# 
  2077  0414                     	;# 
  2078  0414                     	;# 
  2079  0415                     	;# 
  2080  0416                     	;# 
  2081  0417                     	;# 
  2082  0418                     	;# 
  2083  041A                     	;# 
  2084  041A                     	;# 
  2085  041B                     	;# 
  2086  041B                     	;# 
  2087  041C                     	;# 
  2088  041D                     	;# 
  2089  041E                     	;# 
  2090  041F                     	;# 
  2091  0493                     	;# 
  2092  0494                     	;# 
  2093  0495                     	;# 
  2094  0496                     	;# 
  2095  049A                     	;# 
  2096  049B                     	;# 
  2097  049C                     	;# 
  2098  049D                     	;# 
  2099  058C                     	;# 
  2100  058C                     	;# 
  2101  058D                     	;# 
  2102  058E                     	;# 
  2103  058E                     	;# 
  2104  058F                     	;# 
  2105  0590                     	;# 
  2106  0590                     	;# 
  2107  0591                     	;# 
  2108  0592                     	;# 
  2109  0592                     	;# 
  2110  0593                     	;# 
  2111  0594                     	;# 
  2112  0594                     	;# 
  2113  0595                     	;# 
  2114  0596                     	;# 
  2115  0596                     	;# 
  2116  0597                     	;# 
  2117  0598                     	;# 
  2118  0599                     	;# 
  2119  059A                     	;# 
  2120  059B                     	;# 
  2121  059B                     	;# 
  2122  059C                     	;# 
  2123  059D                     	;# 
  2124  060C                     	;# 
  2125  060C                     	;# 
  2126  060D                     	;# 
  2127  060E                     	;# 
  2128  060F                     	;# 
  2129  060F                     	;# 
  2130  0610                     	;# 
  2131  0611                     	;# 
  2132  0612                     	;# 
  2133  0613                     	;# 
  2134  0614                     	;# 
  2135  0617                     	;# 
  2136  0618                     	;# 
  2137  0619                     	;# 
  2138  061A                     	;# 
  2139  061B                     	;# 
  2140  061C                     	;# 
  2141  0691                     	;# 
  2142  0692                     	;# 
  2143  0693                     	;# 
  2144  0694                     	;# 
  2145  0695                     	;# 
  2146  0696                     	;# 
  2147  0697                     	;# 
  2148  0699                     	;# 
  2149  069A                     	;# 
  2150  0711                     	;# 
  2151  0712                     	;# 
  2152  0713                     	;# 
  2153  0714                     	;# 
  2154  0715                     	;# 
  2155  0718                     	;# 
  2156  0718                     	;# 
  2157  0719                     	;# 
  2158  071A                     	;# 
  2159  071A                     	;# 
  2160  071B                     	;# 
  2161  071C                     	;# 
  2162  071D                     	;# 
  2163  0791                     	;# 
  2164  0791                     	;# 
  2165  0792                     	;# 
  2166  0793                     	;# 
  2167  0793                     	;# 
  2168  0794                     	;# 
  2169  0795                     	;# 
  2170  0795                     	;# 
  2171  0796                     	;# 
  2172  0797                     	;# 
  2173  0797                     	;# 
  2174  0798                     	;# 
  2175  0799                     	;# 
  2176  079A                     	;# 
  2177  080C                     	;# 
  2178  080C                     	;# 
  2179  080D                     	;# 
  2180  080E                     	;# 
  2181  080E                     	;# 
  2182  080F                     	;# 
  2183  0810                     	;# 
  2184  0810                     	;# 
  2185  0811                     	;# 
  2186  0812                     	;# 
  2187  0812                     	;# 
  2188  0813                     	;# 
  2189  0814                     	;# 
  2190  0815                     	;# 
  2191  0816                     	;# 
  2192  0817                     	;# 
  2193  0818                     	;# 
  2194  0819                     	;# 
  2195  081A                     	;# 
  2196  081A                     	;# 
  2197  081B                     	;# 
  2198  081C                     	;# 
  2199  081C                     	;# 
  2200  081D                     	;# 
  2201  088C                     	;# 
  2202  088D                     	;# 
  2203  088E                     	;# 
  2204  088F                     	;# 
  2205  088F                     	;# 
  2206  0890                     	;# 
  2207  0891                     	;# 
  2208  0892                     	;# 
  2209  0893                     	;# 
  2210  0893                     	;# 
  2211  0894                     	;# 
  2212  0895                     	;# 
  2213  0896                     	;# 
  2214  0897                     	;# 
  2215  0897                     	;# 
  2216  0898                     	;# 
  2217  0899                     	;# 
  2218  0D8C                     	;# 
  2219  0D8C                     	;# 
  2220  0D8D                     	;# 
  2221  0D8E                     	;# 
  2222  0D8F                     	;# 
  2223  0D8F                     	;# 
  2224  0D90                     	;# 
  2225  0D91                     	;# 
  2226  0D92                     	;# 
  2227  0D92                     	;# 
  2228  0D93                     	;# 
  2229  0D94                     	;# 
  2230  0D95                     	;# 
  2231  0D95                     	;# 
  2232  0D96                     	;# 
  2233  0D97                     	;# 
  2234  0D98                     	;# 
  2235  0D99                     	;# 
  2236  0D9A                     	;# 
  2237  0D9B                     	;# 
  2238  0D9C                     	;# 
  2239  0D9D                     	;# 
  2240  0D9E                     	;# 
  2241  0D9E                     	;# 
  2242  0D9F                     	;# 
  2243  0DA0                     	;# 
  2244  0DA1                     	;# 
  2245  0DA1                     	;# 
  2246  0DA2                     	;# 
  2247  0DA3                     	;# 
  2248  0DA4                     	;# 
  2249  0DA4                     	;# 
  2250  0DA5                     	;# 
  2251  0DA6                     	;# 
  2252  0DA7                     	;# 
  2253  0DA7                     	;# 
  2254  0DA8                     	;# 
  2255  0DA9                     	;# 
  2256  0DAA                     	;# 
  2257  0DAB                     	;# 
  2258  0DAC                     	;# 
  2259  0DAD                     	;# 
  2260  0DAE                     	;# 
  2261  0DAF                     	;# 
  2262  0E0F                     	;# 
  2263  0E10                     	;# 
  2264  0E11                     	;# 
  2265  0E12                     	;# 
  2266  0E13                     	;# 
  2267  0E14                     	;# 
  2268  0E15                     	;# 
  2269  0E16                     	;# 
  2270  0E17                     	;# 
  2271  0E18                     	;# 
  2272  0E19                     	;# 
  2273  0E1A                     	;# 
  2274  0E1B                     	;# 
  2275  0E1C                     	;# 
  2276  0E1D                     	;# 
  2277  0E1E                     	;# 
  2278  0E1F                     	;# 
  2279  0E20                     	;# 
  2280  0E21                     	;# 
  2281  0E22                     	;# 
  2282  0E23                     	;# 
  2283  0E24                     	;# 
  2284  0E25                     	;# 
  2285  0E26                     	;# 
  2286  0E27                     	;# 
  2287  0E28                     	;# 
  2288  0E29                     	;# 
  2289  0E2A                     	;# 
  2290  0E2B                     	;# 
  2291  0E2C                     	;# 
  2292  0E2D                     	;# 
  2293  0E2E                     	;# 
  2294  0E90                     	;# 
  2295  0E91                     	;# 
  2296  0E92                     	;# 
  2297  0E94                     	;# 
  2298  0E95                     	;# 
  2299  0E9C                     	;# 
  2300  0E9D                     	;# 
  2301  0E9E                     	;# 
  2302  0E9F                     	;# 
  2303  0EA0                     	;# 
  2304  0EA1                     	;# 
  2305  0EA2                     	;# 
  2306  0EA3                     	;# 
  2307  0EA4                     	;# 
  2308  0EA5                     	;# 
  2309  0EA6                     	;# 
  2310  0EA7                     	;# 
  2311  0F0F                     	;# 
  2312  0F10                     	;# 
  2313  0F11                     	;# 
  2314  0F12                     	;# 
  2315  0F13                     	;# 
  2316  0F14                     	;# 
  2317  0F15                     	;# 
  2318  0F16                     	;# 
  2319  0F17                     	;# 
  2320  0F18                     	;# 
  2321  0F19                     	;# 
  2322  0F1A                     	;# 
  2323  0F1B                     	;# 
  2324  0F1C                     	;# 
  2325  0F1D                     	;# 
  2326  0F1E                     	;# 
  2327  0F1F                     	;# 
  2328  0F20                     	;# 
  2329  0F21                     	;# 
  2330  0F22                     	;# 
  2331  0F23                     	;# 
  2332  0F24                     	;# 
  2333  0F25                     	;# 
  2334  0F26                     	;# 
  2335  0F27                     	;# 
  2336  0F28                     	;# 
  2337  0F29                     	;# 
  2338  0F2A                     	;# 
  2339  0F2B                     	;# 
  2340  0F2C                     	;# 
  2341  0F2D                     	;# 
  2342  0F2E                     	;# 
  2343  0F2F                     	;# 
  2344  0F30                     	;# 
  2345  0F31                     	;# 
  2346  0F32                     	;# 
  2347  0F33                     	;# 
  2348  0F34                     	;# 
  2349  0F35                     	;# 
  2350  0F36                     	;# 
  2351  0F37                     	;# 
  2352  0FE4                     	;# 
  2353  0FE5                     	;# 
  2354  0FE6                     	;# 
  2355  0FE7                     	;# 
  2356  0FE8                     	;# 
  2357  0FE9                     	;# 
  2358  0FEA                     	;# 
  2359  0FEB                     	;# 
  2360  0FED                     	;# 
  2361  0FEE                     	;# 
  2362  0FEF                     	;# 
  2363  0000                     	;# 
  2364  0001                     	;# 
  2365  0002                     	;# 
  2366  0003                     	;# 
  2367  0004                     	;# 
  2368  0005                     	;# 
  2369  0006                     	;# 
  2370  0007                     	;# 
  2371  0008                     	;# 
  2372  0009                     	;# 
  2373  000A                     	;# 
  2374  000B                     	;# 
  2375  000C                     	;# 
  2376  000D                     	;# 
  2377  000E                     	;# 
  2378  0010                     	;# 
  2379  0011                     	;# 
  2380  0012                     	;# 
  2381  0013                     	;# 
  2382  0014                     	;# 
  2383  0015                     	;# 
  2384  0016                     	;# 
  2385  0016                     	;# 
  2386  0017                     	;# 
  2387  0018                     	;# 
  2388  0019                     	;# 
  2389  001A                     	;# 
  2390  001A                     	;# 
  2391  001B                     	;# 
  2392  001B                     	;# 
  2393  001C                     	;# 
  2394  001D                     	;# 
  2395  001E                     	;# 
  2396  001F                     	;# 
  2397  008C                     	;# 
  2398  008D                     	;# 
  2399  008E                     	;# 
  2400  0090                     	;# 
  2401  0091                     	;# 
  2402  0092                     	;# 
  2403  0093                     	;# 
  2404  0094                     	;# 
  2405  0095                     	;# 
  2406  0096                     	;# 
  2407  0098                     	;# 
  2408  0099                     	;# 
  2409  009A                     	;# 
  2410  009B                     	;# 
  2411  009B                     	;# 
  2412  009C                     	;# 
  2413  009D                     	;# 
  2414  009E                     	;# 
  2415  009F                     	;# 
  2416  010C                     	;# 
  2417  010D                     	;# 
  2418  010E                     	;# 
  2419  0111                     	;# 
  2420  0112                     	;# 
  2421  0113                     	;# 
  2422  0114                     	;# 
  2423  0115                     	;# 
  2424  0116                     	;# 
  2425  0117                     	;# 
  2426  0118                     	;# 
  2427  0119                     	;# 
  2428  011C                     	;# 
  2429  018C                     	;# 
  2430  018D                     	;# 
  2431  018E                     	;# 
  2432  0191                     	;# 
  2433  0191                     	;# 
  2434  0192                     	;# 
  2435  0193                     	;# 
  2436  0193                     	;# 
  2437  0194                     	;# 
  2438  0195                     	;# 
  2439  0196                     	;# 
  2440  0197                     	;# 
  2441  0199                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  019A                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019C                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019D                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019E                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  020C                     	;# 
  2467  020D                     	;# 
  2468  020E                     	;# 
  2469  0211                     	;# 
  2470  0211                     	;# 
  2471  0212                     	;# 
  2472  0212                     	;# 
  2473  0213                     	;# 
  2474  0213                     	;# 
  2475  0214                     	;# 
  2476  0214                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0216                     	;# 
  2482  0216                     	;# 
  2483  0217                     	;# 
  2484  0217                     	;# 
  2485  028C                     	;# 
  2486  028D                     	;# 
  2487  028E                     	;# 
  2488  0291                     	;# 
  2489  0291                     	;# 
  2490  0292                     	;# 
  2491  0293                     	;# 
  2492  0294                     	;# 
  2493  0298                     	;# 
  2494  0298                     	;# 
  2495  0299                     	;# 
  2496  029A                     	;# 
  2497  029B                     	;# 
  2498  029E                     	;# 
  2499  030C                     	;# 
  2500  030D                     	;# 
  2501  030E                     	;# 
  2502  038C                     	;# 
  2503  038D                     	;# 
  2504  038E                     	;# 
  2505  0391                     	;# 
  2506  0392                     	;# 
  2507  0393                     	;# 
  2508  0394                     	;# 
  2509  0395                     	;# 
  2510  0396                     	;# 
  2511  0397                     	;# 
  2512  0398                     	;# 
  2513  0399                     	;# 
  2514  040E                     	;# 
  2515  0413                     	;# 
  2516  0413                     	;# 
  2517  0414                     	;# 
  2518  0414                     	;# 
  2519  0415                     	;# 
  2520  0416                     	;# 
  2521  0417                     	;# 
  2522  0418                     	;# 
  2523  041A                     	;# 
  2524  041A                     	;# 
  2525  041B                     	;# 
  2526  041B                     	;# 
  2527  041C                     	;# 
  2528  041D                     	;# 
  2529  041E                     	;# 
  2530  041F                     	;# 
  2531  0493                     	;# 
  2532  0494                     	;# 
  2533  0495                     	;# 
  2534  0496                     	;# 
  2535  049A                     	;# 
  2536  049B                     	;# 
  2537  049C                     	;# 
  2538  049D                     	;# 
  2539  058C                     	;# 
  2540  058C                     	;# 
  2541  058D                     	;# 
  2542  058E                     	;# 
  2543  058E                     	;# 
  2544  058F                     	;# 
  2545  0590                     	;# 
  2546  0590                     	;# 
  2547  0591                     	;# 
  2548  0592                     	;# 
  2549  0592                     	;# 
  2550  0593                     	;# 
  2551  0594                     	;# 
  2552  0594                     	;# 
  2553  0595                     	;# 
  2554  0596                     	;# 
  2555  0596                     	;# 
  2556  0597                     	;# 
  2557  0598                     	;# 
  2558  0599                     	;# 
  2559  059A                     	;# 
  2560  059B                     	;# 
  2561  059B                     	;# 
  2562  059C                     	;# 
  2563  059D                     	;# 
  2564  060C                     	;# 
  2565  060C                     	;# 
  2566  060D                     	;# 
  2567  060E                     	;# 
  2568  060F                     	;# 
  2569  060F                     	;# 
  2570  0610                     	;# 
  2571  0611                     	;# 
  2572  0612                     	;# 
  2573  0613                     	;# 
  2574  0614                     	;# 
  2575  0617                     	;# 
  2576  0618                     	;# 
  2577  0619                     	;# 
  2578  061A                     	;# 
  2579  061B                     	;# 
  2580  061C                     	;# 
  2581  0691                     	;# 
  2582  0692                     	;# 
  2583  0693                     	;# 
  2584  0694                     	;# 
  2585  0695                     	;# 
  2586  0696                     	;# 
  2587  0697                     	;# 
  2588  0699                     	;# 
  2589  069A                     	;# 
  2590  0711                     	;# 
  2591  0712                     	;# 
  2592  0713                     	;# 
  2593  0714                     	;# 
  2594  0715                     	;# 
  2595  0718                     	;# 
  2596  0718                     	;# 
  2597  0719                     	;# 
  2598  071A                     	;# 
  2599  071A                     	;# 
  2600  071B                     	;# 
  2601  071C                     	;# 
  2602  071D                     	;# 
  2603  0791                     	;# 
  2604  0791                     	;# 
  2605  0792                     	;# 
  2606  0793                     	;# 
  2607  0793                     	;# 
  2608  0794                     	;# 
  2609  0795                     	;# 
  2610  0795                     	;# 
  2611  0796                     	;# 
  2612  0797                     	;# 
  2613  0797                     	;# 
  2614  0798                     	;# 
  2615  0799                     	;# 
  2616  079A                     	;# 
  2617  080C                     	;# 
  2618  080C                     	;# 
  2619  080D                     	;# 
  2620  080E                     	;# 
  2621  080E                     	;# 
  2622  080F                     	;# 
  2623  0810                     	;# 
  2624  0810                     	;# 
  2625  0811                     	;# 
  2626  0812                     	;# 
  2627  0812                     	;# 
  2628  0813                     	;# 
  2629  0814                     	;# 
  2630  0815                     	;# 
  2631  0816                     	;# 
  2632  0817                     	;# 
  2633  0818                     	;# 
  2634  0819                     	;# 
  2635  081A                     	;# 
  2636  081A                     	;# 
  2637  081B                     	;# 
  2638  081C                     	;# 
  2639  081C                     	;# 
  2640  081D                     	;# 
  2641  088C                     	;# 
  2642  088D                     	;# 
  2643  088E                     	;# 
  2644  088F                     	;# 
  2645  088F                     	;# 
  2646  0890                     	;# 
  2647  0891                     	;# 
  2648  0892                     	;# 
  2649  0893                     	;# 
  2650  0893                     	;# 
  2651  0894                     	;# 
  2652  0895                     	;# 
  2653  0896                     	;# 
  2654  0897                     	;# 
  2655  0897                     	;# 
  2656  0898                     	;# 
  2657  0899                     	;# 
  2658  0D8C                     	;# 
  2659  0D8C                     	;# 
  2660  0D8D                     	;# 
  2661  0D8E                     	;# 
  2662  0D8F                     	;# 
  2663  0D8F                     	;# 
  2664  0D90                     	;# 
  2665  0D91                     	;# 
  2666  0D92                     	;# 
  2667  0D92                     	;# 
  2668  0D93                     	;# 
  2669  0D94                     	;# 
  2670  0D95                     	;# 
  2671  0D95                     	;# 
  2672  0D96                     	;# 
  2673  0D97                     	;# 
  2674  0D98                     	;# 
  2675  0D99                     	;# 
  2676  0D9A                     	;# 
  2677  0D9B                     	;# 
  2678  0D9C                     	;# 
  2679  0D9D                     	;# 
  2680  0D9E                     	;# 
  2681  0D9E                     	;# 
  2682  0D9F                     	;# 
  2683  0DA0                     	;# 
  2684  0DA1                     	;# 
  2685  0DA1                     	;# 
  2686  0DA2                     	;# 
  2687  0DA3                     	;# 
  2688  0DA4                     	;# 
  2689  0DA4                     	;# 
  2690  0DA5                     	;# 
  2691  0DA6                     	;# 
  2692  0DA7                     	;# 
  2693  0DA7                     	;# 
  2694  0DA8                     	;# 
  2695  0DA9                     	;# 
  2696  0DAA                     	;# 
  2697  0DAB                     	;# 
  2698  0DAC                     	;# 
  2699  0DAD                     	;# 
  2700  0DAE                     	;# 
  2701  0DAF                     	;# 
  2702  0E0F                     	;# 
  2703  0E10                     	;# 
  2704  0E11                     	;# 
  2705  0E12                     	;# 
  2706  0E13                     	;# 
  2707  0E14                     	;# 
  2708  0E15                     	;# 
  2709  0E16                     	;# 
  2710  0E17                     	;# 
  2711  0E18                     	;# 
  2712  0E19                     	;# 
  2713  0E1A                     	;# 
  2714  0E1B                     	;# 
  2715  0E1C                     	;# 
  2716  0E1D                     	;# 
  2717  0E1E                     	;# 
  2718  0E1F                     	;# 
  2719  0E20                     	;# 
  2720  0E21                     	;# 
  2721  0E22                     	;# 
  2722  0E23                     	;# 
  2723  0E24                     	;# 
  2724  0E25                     	;# 
  2725  0E26                     	;# 
  2726  0E27                     	;# 
  2727  0E28                     	;# 
  2728  0E29                     	;# 
  2729  0E2A                     	;# 
  2730  0E2B                     	;# 
  2731  0E2C                     	;# 
  2732  0E2D                     	;# 
  2733  0E2E                     	;# 
  2734  0E90                     	;# 
  2735  0E91                     	;# 
  2736  0E92                     	;# 
  2737  0E94                     	;# 
  2738  0E95                     	;# 
  2739  0E9C                     	;# 
  2740  0E9D                     	;# 
  2741  0E9E                     	;# 
  2742  0E9F                     	;# 
  2743  0EA0                     	;# 
  2744  0EA1                     	;# 
  2745  0EA2                     	;# 
  2746  0EA3                     	;# 
  2747  0EA4                     	;# 
  2748  0EA5                     	;# 
  2749  0EA6                     	;# 
  2750  0EA7                     	;# 
  2751  0F0F                     	;# 
  2752  0F10                     	;# 
  2753  0F11                     	;# 
  2754  0F12                     	;# 
  2755  0F13                     	;# 
  2756  0F14                     	;# 
  2757  0F15                     	;# 
  2758  0F16                     	;# 
  2759  0F17                     	;# 
  2760  0F18                     	;# 
  2761  0F19                     	;# 
  2762  0F1A                     	;# 
  2763  0F1B                     	;# 
  2764  0F1C                     	;# 
  2765  0F1D                     	;# 
  2766  0F1E                     	;# 
  2767  0F1F                     	;# 
  2768  0F20                     	;# 
  2769  0F21                     	;# 
  2770  0F22                     	;# 
  2771  0F23                     	;# 
  2772  0F24                     	;# 
  2773  0F25                     	;# 
  2774  0F26                     	;# 
  2775  0F27                     	;# 
  2776  0F28                     	;# 
  2777  0F29                     	;# 
  2778  0F2A                     	;# 
  2779  0F2B                     	;# 
  2780  0F2C                     	;# 
  2781  0F2D                     	;# 
  2782  0F2E                     	;# 
  2783  0F2F                     	;# 
  2784  0F30                     	;# 
  2785  0F31                     	;# 
  2786  0F32                     	;# 
  2787  0F33                     	;# 
  2788  0F34                     	;# 
  2789  0F35                     	;# 
  2790  0F36                     	;# 
  2791  0F37                     	;# 
  2792  0FE4                     	;# 
  2793  0FE5                     	;# 
  2794  0FE6                     	;# 
  2795  0FE7                     	;# 
  2796  0FE8                     	;# 
  2797  0FE9                     	;# 
  2798  0FEA                     	;# 
  2799  0FEB                     	;# 
  2800  0FED                     	;# 
  2801  0FEE                     	;# 
  2802  0FEF                     	;# 
  2803  0000                     	;# 
  2804  0001                     	;# 
  2805  0002                     	;# 
  2806  0003                     	;# 
  2807  0004                     	;# 
  2808  0005                     	;# 
  2809  0006                     	;# 
  2810  0007                     	;# 
  2811  0008                     	;# 
  2812  0009                     	;# 
  2813  000A                     	;# 
  2814  000B                     	;# 
  2815  000C                     	;# 
  2816  000D                     	;# 
  2817  000E                     	;# 
  2818  0010                     	;# 
  2819  0011                     	;# 
  2820  0012                     	;# 
  2821  0013                     	;# 
  2822  0014                     	;# 
  2823  0015                     	;# 
  2824  0016                     	;# 
  2825  0016                     	;# 
  2826  0017                     	;# 
  2827  0018                     	;# 
  2828  0019                     	;# 
  2829  001A                     	;# 
  2830  001A                     	;# 
  2831  001B                     	;# 
  2832  001B                     	;# 
  2833  001C                     	;# 
  2834  001D                     	;# 
  2835  001E                     	;# 
  2836  001F                     	;# 
  2837  008C                     	;# 
  2838  008D                     	;# 
  2839  008E                     	;# 
  2840  0090                     	;# 
  2841  0091                     	;# 
  2842  0092                     	;# 
  2843  0093                     	;# 
  2844  0094                     	;# 
  2845  0095                     	;# 
  2846  0096                     	;# 
  2847  0098                     	;# 
  2848  0099                     	;# 
  2849  009A                     	;# 
  2850  009B                     	;# 
  2851  009B                     	;# 
  2852  009C                     	;# 
  2853  009D                     	;# 
  2854  009E                     	;# 
  2855  009F                     	;# 
  2856  010C                     	;# 
  2857  010D                     	;# 
  2858  010E                     	;# 
  2859  0111                     	;# 
  2860  0112                     	;# 
  2861  0113                     	;# 
  2862  0114                     	;# 
  2863  0115                     	;# 
  2864  0116                     	;# 
  2865  0117                     	;# 
  2866  0118                     	;# 
  2867  0119                     	;# 
  2868  011C                     	;# 
  2869  018C                     	;# 
  2870  018D                     	;# 
  2871  018E                     	;# 
  2872  0191                     	;# 
  2873  0191                     	;# 
  2874  0192                     	;# 
  2875  0193                     	;# 
  2876  0193                     	;# 
  2877  0194                     	;# 
  2878  0195                     	;# 
  2879  0196                     	;# 
  2880  0197                     	;# 
  2881  0199                     	;# 
  2882  0199                     	;# 
  2883  0199                     	;# 
  2884  019A                     	;# 
  2885  019A                     	;# 
  2886  019A                     	;# 
  2887  019B                     	;# 
  2888  019B                     	;# 
  2889  019B                     	;# 
  2890  019B                     	;# 
  2891  019B                     	;# 
  2892  019C                     	;# 
  2893  019C                     	;# 
  2894  019C                     	;# 
  2895  019D                     	;# 
  2896  019D                     	;# 
  2897  019D                     	;# 
  2898  019E                     	;# 
  2899  019E                     	;# 
  2900  019E                     	;# 
  2901  019F                     	;# 
  2902  019F                     	;# 
  2903  019F                     	;# 
  2904  019F                     	;# 
  2905  019F                     	;# 
  2906  020C                     	;# 
  2907  020D                     	;# 
  2908  020E                     	;# 
  2909  0211                     	;# 
  2910  0211                     	;# 
  2911  0212                     	;# 
  2912  0212                     	;# 
  2913  0213                     	;# 
  2914  0213                     	;# 
  2915  0214                     	;# 
  2916  0214                     	;# 
  2917  0215                     	;# 
  2918  0215                     	;# 
  2919  0215                     	;# 
  2920  0215                     	;# 
  2921  0216                     	;# 
  2922  0216                     	;# 
  2923  0217                     	;# 
  2924  0217                     	;# 
  2925  028C                     	;# 
  2926  028D                     	;# 
  2927  028E                     	;# 
  2928  0291                     	;# 
  2929  0291                     	;# 
  2930  0292                     	;# 
  2931  0293                     	;# 
  2932  0294                     	;# 
  2933  0298                     	;# 
  2934  0298                     	;# 
  2935  0299                     	;# 
  2936  029A                     	;# 
  2937  029B                     	;# 
  2938  029E                     	;# 
  2939  030C                     	;# 
  2940  030D                     	;# 
  2941  030E                     	;# 
  2942  038C                     	;# 
  2943  038D                     	;# 
  2944  038E                     	;# 
  2945  0391                     	;# 
  2946  0392                     	;# 
  2947  0393                     	;# 
  2948  0394                     	;# 
  2949  0395                     	;# 
  2950  0396                     	;# 
  2951  0397                     	;# 
  2952  0398                     	;# 
  2953  0399                     	;# 
  2954  040E                     	;# 
  2955  0413                     	;# 
  2956  0413                     	;# 
  2957  0414                     	;# 
  2958  0414                     	;# 
  2959  0415                     	;# 
  2960  0416                     	;# 
  2961  0417                     	;# 
  2962  0418                     	;# 
  2963  041A                     	;# 
  2964  041A                     	;# 
  2965  041B                     	;# 
  2966  041B                     	;# 
  2967  041C                     	;# 
  2968  041D                     	;# 
  2969  041E                     	;# 
  2970  041F                     	;# 
  2971  0493                     	;# 
  2972  0494                     	;# 
  2973  0495                     	;# 
  2974  0496                     	;# 
  2975  049A                     	;# 
  2976  049B                     	;# 
  2977  049C                     	;# 
  2978  049D                     	;# 
  2979  058C                     	;# 
  2980  058C                     	;# 
  2981  058D                     	;# 
  2982  058E                     	;# 
  2983  058E                     	;# 
  2984  058F                     	;# 
  2985  0590                     	;# 
  2986  0590                     	;# 
  2987  0591                     	;# 
  2988  0592                     	;# 
  2989  0592                     	;# 
  2990  0593                     	;# 
  2991  0594                     	;# 
  2992  0594                     	;# 
  2993  0595                     	;# 
  2994  0596                     	;# 
  2995  0596                     	;# 
  2996  0597                     	;# 
  2997  0598                     	;# 
  2998  0599                     	;# 
  2999  059A                     	;# 
  3000  059B                     	;# 
  3001  059B                     	;# 
  3002  059C                     	;# 
  3003  059D                     	;# 
  3004  060C                     	;# 
  3005  060C                     	;# 
  3006  060D                     	;# 
  3007  060E                     	;# 
  3008  060F                     	;# 
  3009  060F                     	;# 
  3010  0610                     	;# 
  3011  0611                     	;# 
  3012  0612                     	;# 
  3013  0613                     	;# 
  3014  0614                     	;# 
  3015  0617                     	;# 
  3016  0618                     	;# 
  3017  0619                     	;# 
  3018  061A                     	;# 
  3019  061B                     	;# 
  3020  061C                     	;# 
  3021  0691                     	;# 
  3022  0692                     	;# 
  3023  0693                     	;# 
  3024  0694                     	;# 
  3025  0695                     	;# 
  3026  0696                     	;# 
  3027  0697                     	;# 
  3028  0699                     	;# 
  3029  069A                     	;# 
  3030  0711                     	;# 
  3031  0712                     	;# 
  3032  0713                     	;# 
  3033  0714                     	;# 
  3034  0715                     	;# 
  3035  0718                     	;# 
  3036  0718                     	;# 
  3037  0719                     	;# 
  3038  071A                     	;# 
  3039  071A                     	;# 
  3040  071B                     	;# 
  3041  071C                     	;# 
  3042  071D                     	;# 
  3043  0791                     	;# 
  3044  0791                     	;# 
  3045  0792                     	;# 
  3046  0793                     	;# 
  3047  0793                     	;# 
  3048  0794                     	;# 
  3049  0795                     	;# 
  3050  0795                     	;# 
  3051  0796                     	;# 
  3052  0797                     	;# 
  3053  0797                     	;# 
  3054  0798                     	;# 
  3055  0799                     	;# 
  3056  079A                     	;# 
  3057  080C                     	;# 
  3058  080C                     	;# 
  3059  080D                     	;# 
  3060  080E                     	;# 
  3061  080E                     	;# 
  3062  080F                     	;# 
  3063  0810                     	;# 
  3064  0810                     	;# 
  3065  0811                     	;# 
  3066  0812                     	;# 
  3067  0812                     	;# 
  3068  0813                     	;# 
  3069  0814                     	;# 
  3070  0815                     	;# 
  3071  0816                     	;# 
  3072  0817                     	;# 
  3073  0818                     	;# 
  3074  0819                     	;# 
  3075  081A                     	;# 
  3076  081A                     	;# 
  3077  081B                     	;# 
  3078  081C                     	;# 
  3079  081C                     	;# 
  3080  081D                     	;# 
  3081  088C                     	;# 
  3082  088D                     	;# 
  3083  088E                     	;# 
  3084  088F                     	;# 
  3085  088F                     	;# 
  3086  0890                     	;# 
  3087  0891                     	;# 
  3088  0892                     	;# 
  3089  0893                     	;# 
  3090  0893                     	;# 
  3091  0894                     	;# 
  3092  0895                     	;# 
  3093  0896                     	;# 
  3094  0897                     	;# 
  3095  0897                     	;# 
  3096  0898                     	;# 
  3097  0899                     	;# 
  3098  0D8C                     	;# 
  3099  0D8C                     	;# 
  3100  0D8D                     	;# 
  3101  0D8E                     	;# 
  3102  0D8F                     	;# 
  3103  0D8F                     	;# 
  3104  0D90                     	;# 
  3105  0D91                     	;# 
  3106  0D92                     	;# 
  3107  0D92                     	;# 
  3108  0D93                     	;# 
  3109  0D94                     	;# 
  3110  0D95                     	;# 
  3111  0D95                     	;# 
  3112  0D96                     	;# 
  3113  0D97                     	;# 
  3114  0D98                     	;# 
  3115  0D99                     	;# 
  3116  0D9A                     	;# 
  3117  0D9B                     	;# 
  3118  0D9C                     	;# 
  3119  0D9D                     	;# 
  3120  0D9E                     	;# 
  3121  0D9E                     	;# 
  3122  0D9F                     	;# 
  3123  0DA0                     	;# 
  3124  0DA1                     	;# 
  3125  0DA1                     	;# 
  3126  0DA2                     	;# 
  3127  0DA3                     	;# 
  3128  0DA4                     	;# 
  3129  0DA4                     	;# 
  3130  0DA5                     	;# 
  3131  0DA6                     	;# 
  3132  0DA7                     	;# 
  3133  0DA7                     	;# 
  3134  0DA8                     	;# 
  3135  0DA9                     	;# 
  3136  0DAA                     	;# 
  3137  0DAB                     	;# 
  3138  0DAC                     	;# 
  3139  0DAD                     	;# 
  3140  0DAE                     	;# 
  3141  0DAF                     	;# 
  3142  0E0F                     	;# 
  3143  0E10                     	;# 
  3144  0E11                     	;# 
  3145  0E12                     	;# 
  3146  0E13                     	;# 
  3147  0E14                     	;# 
  3148  0E15                     	;# 
  3149  0E16                     	;# 
  3150  0E17                     	;# 
  3151  0E18                     	;# 
  3152  0E19                     	;# 
  3153  0E1A                     	;# 
  3154  0E1B                     	;# 
  3155  0E1C                     	;# 
  3156  0E1D                     	;# 
  3157  0E1E                     	;# 
  3158  0E1F                     	;# 
  3159  0E20                     	;# 
  3160  0E21                     	;# 
  3161  0E22                     	;# 
  3162  0E23                     	;# 
  3163  0E24                     	;# 
  3164  0E25                     	;# 
  3165  0E26                     	;# 
  3166  0E27                     	;# 
  3167  0E28                     	;# 
  3168  0E29                     	;# 
  3169  0E2A                     	;# 
  3170  0E2B                     	;# 
  3171  0E2C                     	;# 
  3172  0E2D                     	;# 
  3173  0E2E                     	;# 
  3174  0E90                     	;# 
  3175  0E91                     	;# 
  3176  0E92                     	;# 
  3177  0E94                     	;# 
  3178  0E95                     	;# 
  3179  0E9C                     	;# 
  3180  0E9D                     	;# 
  3181  0E9E                     	;# 
  3182  0E9F                     	;# 
  3183  0EA0                     	;# 
  3184  0EA1                     	;# 
  3185  0EA2                     	;# 
  3186  0EA3                     	;# 
  3187  0EA4                     	;# 
  3188  0EA5                     	;# 
  3189  0EA6                     	;# 
  3190  0EA7                     	;# 
  3191  0F0F                     	;# 
  3192  0F10                     	;# 
  3193  0F11                     	;# 
  3194  0F12                     	;# 
  3195  0F13                     	;# 
  3196  0F14                     	;# 
  3197  0F15                     	;# 
  3198  0F16                     	;# 
  3199  0F17                     	;# 
  3200  0F18                     	;# 
  3201  0F19                     	;# 
  3202  0F1A                     	;# 
  3203  0F1B                     	;# 
  3204  0F1C                     	;# 
  3205  0F1D                     	;# 
  3206  0F1E                     	;# 
  3207  0F1F                     	;# 
  3208  0F20                     	;# 
  3209  0F21                     	;# 
  3210  0F22                     	;# 
  3211  0F23                     	;# 
  3212  0F24                     	;# 
  3213  0F25                     	;# 
  3214  0F26                     	;# 
  3215  0F27                     	;# 
  3216  0F28                     	;# 
  3217  0F29                     	;# 
  3218  0F2A                     	;# 
  3219  0F2B                     	;# 
  3220  0F2C                     	;# 
  3221  0F2D                     	;# 
  3222  0F2E                     	;# 
  3223  0F2F                     	;# 
  3224  0F30                     	;# 
  3225  0F31                     	;# 
  3226  0F32                     	;# 
  3227  0F33                     	;# 
  3228  0F34                     	;# 
  3229  0F35                     	;# 
  3230  0F36                     	;# 
  3231  0F37                     	;# 
  3232  0FE4                     	;# 
  3233  0FE5                     	;# 
  3234  0FE6                     	;# 
  3235  0FE7                     	;# 
  3236  0FE8                     	;# 
  3237  0FE9                     	;# 
  3238  0FEA                     	;# 
  3239  0FEB                     	;# 
  3240  0FED                     	;# 
  3241  0FEE                     	;# 
  3242  0FEF                     	;# 
  3243  0000                     	;# 
  3244  0001                     	;# 
  3245  0002                     	;# 
  3246  0003                     	;# 
  3247  0004                     	;# 
  3248  0005                     	;# 
  3249  0006                     	;# 
  3250  0007                     	;# 
  3251  0008                     	;# 
  3252  0009                     	;# 
  3253  000A                     	;# 
  3254  000B                     	;# 
  3255  000C                     	;# 
  3256  000D                     	;# 
  3257  000E                     	;# 
  3258  0010                     	;# 
  3259  0011                     	;# 
  3260  0012                     	;# 
  3261  0013                     	;# 
  3262  0014                     	;# 
  3263  0015                     	;# 
  3264  0016                     	;# 
  3265  0016                     	;# 
  3266  0017                     	;# 
  3267  0018                     	;# 
  3268  0019                     	;# 
  3269  001A                     	;# 
  3270  001A                     	;# 
  3271  001B                     	;# 
  3272  001B                     	;# 
  3273  001C                     	;# 
  3274  001D                     	;# 
  3275  001E                     	;# 
  3276  001F                     	;# 
  3277  008C                     	;# 
  3278  008D                     	;# 
  3279  008E                     	;# 
  3280  0090                     	;# 
  3281  0091                     	;# 
  3282  0092                     	;# 
  3283  0093                     	;# 
  3284  0094                     	;# 
  3285  0095                     	;# 
  3286  0096                     	;# 
  3287  0098                     	;# 
  3288  0099                     	;# 
  3289  009A                     	;# 
  3290  009B                     	;# 
  3291  009B                     	;# 
  3292  009C                     	;# 
  3293  009D                     	;# 
  3294  009E                     	;# 
  3295  009F                     	;# 
  3296  010C                     	;# 
  3297  010D                     	;# 
  3298  010E                     	;# 
  3299  0111                     	;# 
  3300  0112                     	;# 
  3301  0113                     	;# 
  3302  0114                     	;# 
  3303  0115                     	;# 
  3304  0116                     	;# 
  3305  0117                     	;# 
  3306  0118                     	;# 
  3307  0119                     	;# 
  3308  011C                     	;# 
  3309  018C                     	;# 
  3310  018D                     	;# 
  3311  018E                     	;# 
  3312  0191                     	;# 
  3313  0191                     	;# 
  3314  0192                     	;# 
  3315  0193                     	;# 
  3316  0193                     	;# 
  3317  0194                     	;# 
  3318  0195                     	;# 
  3319  0196                     	;# 
  3320  0197                     	;# 
  3321  0199                     	;# 
  3322  0199                     	;# 
  3323  0199                     	;# 
  3324  019A                     	;# 
  3325  019A                     	;# 
  3326  019A                     	;# 
  3327  019B                     	;# 
  3328  019B                     	;# 
  3329  019B                     	;# 
  3330  019B                     	;# 
  3331  019B                     	;# 
  3332  019C                     	;# 
  3333  019C                     	;# 
  3334  019C                     	;# 
  3335  019D                     	;# 
  3336  019D                     	;# 
  3337  019D                     	;# 
  3338  019E                     	;# 
  3339  019E                     	;# 
  3340  019E                     	;# 
  3341  019F                     	;# 
  3342  019F                     	;# 
  3343  019F                     	;# 
  3344  019F                     	;# 
  3345  019F                     	;# 
  3346  020C                     	;# 
  3347  020D                     	;# 
  3348  020E                     	;# 
  3349  0211                     	;# 
  3350  0211                     	;# 
  3351  0212                     	;# 
  3352  0212                     	;# 
  3353  0213                     	;# 
  3354  0213                     	;# 
  3355  0214                     	;# 
  3356  0214                     	;# 
  3357  0215                     	;# 
  3358  0215                     	;# 
  3359  0215                     	;# 
  3360  0215                     	;# 
  3361  0216                     	;# 
  3362  0216                     	;# 
  3363  0217                     	;# 
  3364  0217                     	;# 
  3365  028C                     	;# 
  3366  028D                     	;# 
  3367  028E                     	;# 
  3368  0291                     	;# 
  3369  0291                     	;# 
  3370  0292                     	;# 
  3371  0293                     	;# 
  3372  0294                     	;# 
  3373  0298                     	;# 
  3374  0298                     	;# 
  3375  0299                     	;# 
  3376  029A                     	;# 
  3377  029B                     	;# 
  3378  029E                     	;# 
  3379  030C                     	;# 
  3380  030D                     	;# 
  3381  030E                     	;# 
  3382  038C                     	;# 
  3383  038D                     	;# 
  3384  038E                     	;# 
  3385  0391                     	;# 
  3386  0392                     	;# 
  3387  0393                     	;# 
  3388  0394                     	;# 
  3389  0395                     	;# 
  3390  0396                     	;# 
  3391  0397                     	;# 
  3392  0398                     	;# 
  3393  0399                     	;# 
  3394  040E                     	;# 
  3395  0413                     	;# 
  3396  0413                     	;# 
  3397  0414                     	;# 
  3398  0414                     	;# 
  3399  0415                     	;# 
  3400  0416                     	;# 
  3401  0417                     	;# 
  3402  0418                     	;# 
  3403  041A                     	;# 
  3404  041A                     	;# 
  3405  041B                     	;# 
  3406  041B                     	;# 
  3407  041C                     	;# 
  3408  041D                     	;# 
  3409  041E                     	;# 
  3410  041F                     	;# 
  3411  0493                     	;# 
  3412  0494                     	;# 
  3413  0495                     	;# 
  3414  0496                     	;# 
  3415  049A                     	;# 
  3416  049B                     	;# 
  3417  049C                     	;# 
  3418  049D                     	;# 
  3419  058C                     	;# 
  3420  058C                     	;# 
  3421  058D                     	;# 
  3422  058E                     	;# 
  3423  058E                     	;# 
  3424  058F                     	;# 
  3425  0590                     	;# 
  3426  0590                     	;# 
  3427  0591                     	;# 
  3428  0592                     	;# 
  3429  0592                     	;# 
  3430  0593                     	;# 
  3431  0594                     	;# 
  3432  0594                     	;# 
  3433  0595                     	;# 
  3434  0596                     	;# 
  3435  0596                     	;# 
  3436  0597                     	;# 
  3437  0598                     	;# 
  3438  0599                     	;# 
  3439  059A                     	;# 
  3440  059B                     	;# 
  3441  059B                     	;# 
  3442  059C                     	;# 
  3443  059D                     	;# 
  3444  060C                     	;# 
  3445  060C                     	;# 
  3446  060D                     	;# 
  3447  060E                     	;# 
  3448  060F                     	;# 
  3449  060F                     	;# 
  3450  0610                     	;# 
  3451  0611                     	;# 
  3452  0612                     	;# 
  3453  0613                     	;# 
  3454  0614                     	;# 
  3455  0617                     	;# 
  3456  0618                     	;# 
  3457  0619                     	;# 
  3458  061A                     	;# 
  3459  061B                     	;# 
  3460  061C                     	;# 
  3461  0691                     	;# 
  3462  0692                     	;# 
  3463  0693                     	;# 
  3464  0694                     	;# 
  3465  0695                     	;# 
  3466  0696                     	;# 
  3467  0697                     	;# 
  3468  0699                     	;# 
  3469  069A                     	;# 
  3470  0711                     	;# 
  3471  0712                     	;# 
  3472  0713                     	;# 
  3473  0714                     	;# 
  3474  0715                     	;# 
  3475  0718                     	;# 
  3476  0718                     	;# 
  3477  0719                     	;# 
  3478  071A                     	;# 
  3479  071A                     	;# 
  3480  071B                     	;# 
  3481  071C                     	;# 
  3482  071D                     	;# 
  3483  0791                     	;# 
  3484  0791                     	;# 
  3485  0792                     	;# 
  3486  0793                     	;# 
  3487  0793                     	;# 
  3488  0794                     	;# 
  3489  0795                     	;# 
  3490  0795                     	;# 
  3491  0796                     	;# 
  3492  0797                     	;# 
  3493  0797                     	;# 
  3494  0798                     	;# 
  3495  0799                     	;# 
  3496  079A                     	;# 
  3497  080C                     	;# 
  3498  080C                     	;# 
  3499  080D                     	;# 
  3500  080E                     	;# 
  3501  080E                     	;# 
  3502  080F                     	;# 
  3503  0810                     	;# 
  3504  0810                     	;# 
  3505  0811                     	;# 
  3506  0812                     	;# 
  3507  0812                     	;# 
  3508  0813                     	;# 
  3509  0814                     	;# 
  3510  0815                     	;# 
  3511  0816                     	;# 
  3512  0817                     	;# 
  3513  0818                     	;# 
  3514  0819                     	;# 
  3515  081A                     	;# 
  3516  081A                     	;# 
  3517  081B                     	;# 
  3518  081C                     	;# 
  3519  081C                     	;# 
  3520  081D                     	;# 
  3521  088C                     	;# 
  3522  088D                     	;# 
  3523  088E                     	;# 
  3524  088F                     	;# 
  3525  088F                     	;# 
  3526  0890                     	;# 
  3527  0891                     	;# 
  3528  0892                     	;# 
  3529  0893                     	;# 
  3530  0893                     	;# 
  3531  0894                     	;# 
  3532  0895                     	;# 
  3533  0896                     	;# 
  3534  0897                     	;# 
  3535  0897                     	;# 
  3536  0898                     	;# 
  3537  0899                     	;# 
  3538  0D8C                     	;# 
  3539  0D8C                     	;# 
  3540  0D8D                     	;# 
  3541  0D8E                     	;# 
  3542  0D8F                     	;# 
  3543  0D8F                     	;# 
  3544  0D90                     	;# 
  3545  0D91                     	;# 
  3546  0D92                     	;# 
  3547  0D92                     	;# 
  3548  0D93                     	;# 
  3549  0D94                     	;# 
  3550  0D95                     	;# 
  3551  0D95                     	;# 
  3552  0D96                     	;# 
  3553  0D97                     	;# 
  3554  0D98                     	;# 
  3555  0D99                     	;# 
  3556  0D9A                     	;# 
  3557  0D9B                     	;# 
  3558  0D9C                     	;# 
  3559  0D9D                     	;# 
  3560  0D9E                     	;# 
  3561  0D9E                     	;# 
  3562  0D9F                     	;# 
  3563  0DA0                     	;# 
  3564  0DA1                     	;# 
  3565  0DA1                     	;# 
  3566  0DA2                     	;# 
  3567  0DA3                     	;# 
  3568  0DA4                     	;# 
  3569  0DA4                     	;# 
  3570  0DA5                     	;# 
  3571  0DA6                     	;# 
  3572  0DA7                     	;# 
  3573  0DA7                     	;# 
  3574  0DA8                     	;# 
  3575  0DA9                     	;# 
  3576  0DAA                     	;# 
  3577  0DAB                     	;# 
  3578  0DAC                     	;# 
  3579  0DAD                     	;# 
  3580  0DAE                     	;# 
  3581  0DAF                     	;# 
  3582  0E0F                     	;# 
  3583  0E10                     	;# 
  3584  0E11                     	;# 
  3585  0E12                     	;# 
  3586  0E13                     	;# 
  3587  0E14                     	;# 
  3588  0E15                     	;# 
  3589  0E16                     	;# 
  3590  0E17                     	;# 
  3591  0E18                     	;# 
  3592  0E19                     	;# 
  3593  0E1A                     	;# 
  3594  0E1B                     	;# 
  3595  0E1C                     	;# 
  3596  0E1D                     	;# 
  3597  0E1E                     	;# 
  3598  0E1F                     	;# 
  3599  0E20                     	;# 
  3600  0E21                     	;# 
  3601  0E22                     	;# 
  3602  0E23                     	;# 
  3603  0E24                     	;# 
  3604  0E25                     	;# 
  3605  0E26                     	;# 
  3606  0E27                     	;# 
  3607  0E28                     	;# 
  3608  0E29                     	;# 
  3609  0E2A                     	;# 
  3610  0E2B                     	;# 
  3611  0E2C                     	;# 
  3612  0E2D                     	;# 
  3613  0E2E                     	;# 
  3614  0E90                     	;# 
  3615  0E91                     	;# 
  3616  0E92                     	;# 
  3617  0E94                     	;# 
  3618  0E95                     	;# 
  3619  0E9C                     	;# 
  3620  0E9D                     	;# 
  3621  0E9E                     	;# 
  3622  0E9F                     	;# 
  3623  0EA0                     	;# 
  3624  0EA1                     	;# 
  3625  0EA2                     	;# 
  3626  0EA3                     	;# 
  3627  0EA4                     	;# 
  3628  0EA5                     	;# 
  3629  0EA6                     	;# 
  3630  0EA7                     	;# 
  3631  0F0F                     	;# 
  3632  0F10                     	;# 
  3633  0F11                     	;# 
  3634  0F12                     	;# 
  3635  0F13                     	;# 
  3636  0F14                     	;# 
  3637  0F15                     	;# 
  3638  0F16                     	;# 
  3639  0F17                     	;# 
  3640  0F18                     	;# 
  3641  0F19                     	;# 
  3642  0F1A                     	;# 
  3643  0F1B                     	;# 
  3644  0F1C                     	;# 
  3645  0F1D                     	;# 
  3646  0F1E                     	;# 
  3647  0F1F                     	;# 
  3648  0F20                     	;# 
  3649  0F21                     	;# 
  3650  0F22                     	;# 
  3651  0F23                     	;# 
  3652  0F24                     	;# 
  3653  0F25                     	;# 
  3654  0F26                     	;# 
  3655  0F27                     	;# 
  3656  0F28                     	;# 
  3657  0F29                     	;# 
  3658  0F2A                     	;# 
  3659  0F2B                     	;# 
  3660  0F2C                     	;# 
  3661  0F2D                     	;# 
  3662  0F2E                     	;# 
  3663  0F2F                     	;# 
  3664  0F30                     	;# 
  3665  0F31                     	;# 
  3666  0F32                     	;# 
  3667  0F33                     	;# 
  3668  0F34                     	;# 
  3669  0F35                     	;# 
  3670  0F36                     	;# 
  3671  0F37                     	;# 
  3672  0FE4                     	;# 
  3673  0FE5                     	;# 
  3674  0FE6                     	;# 
  3675  0FE7                     	;# 
  3676  0FE8                     	;# 
  3677  0FE9                     	;# 
  3678  0FEA                     	;# 
  3679  0FEB                     	;# 
  3680  0FED                     	;# 
  3681  0FEE                     	;# 
  3682  0FEF                     	;# 
  3683  0000                     	;# 
  3684  0001                     	;# 
  3685  0002                     	;# 
  3686  0003                     	;# 
  3687  0004                     	;# 
  3688  0005                     	;# 
  3689  0006                     	;# 
  3690  0007                     	;# 
  3691  0008                     	;# 
  3692  0009                     	;# 
  3693  000A                     	;# 
  3694  000B                     	;# 
  3695  000C                     	;# 
  3696  000D                     	;# 
  3697  000E                     	;# 
  3698  0010                     	;# 
  3699  0011                     	;# 
  3700  0012                     	;# 
  3701  0013                     	;# 
  3702  0014                     	;# 
  3703  0015                     	;# 
  3704  0016                     	;# 
  3705  0016                     	;# 
  3706  0017                     	;# 
  3707  0018                     	;# 
  3708  0019                     	;# 
  3709  001A                     	;# 
  3710  001A                     	;# 
  3711  001B                     	;# 
  3712  001B                     	;# 
  3713  001C                     	;# 
  3714  001D                     	;# 
  3715  001E                     	;# 
  3716  001F                     	;# 
  3717  008C                     	;# 
  3718  008D                     	;# 
  3719  008E                     	;# 
  3720  0090                     	;# 
  3721  0091                     	;# 
  3722  0092                     	;# 
  3723  0093                     	;# 
  3724  0094                     	;# 
  3725  0095                     	;# 
  3726  0096                     	;# 
  3727  0098                     	;# 
  3728  0099                     	;# 
  3729  009A                     	;# 
  3730  009B                     	;# 
  3731  009B                     	;# 
  3732  009C                     	;# 
  3733  009D                     	;# 
  3734  009E                     	;# 
  3735  009F                     	;# 
  3736  010C                     	;# 
  3737  010D                     	;# 
  3738  010E                     	;# 
  3739  0111                     	;# 
  3740  0112                     	;# 
  3741  0113                     	;# 
  3742  0114                     	;# 
  3743  0115                     	;# 
  3744  0116                     	;# 
  3745  0117                     	;# 
  3746  0118                     	;# 
  3747  0119                     	;# 
  3748  011C                     	;# 
  3749  018C                     	;# 
  3750  018D                     	;# 
  3751  018E                     	;# 
  3752  0191                     	;# 
  3753  0191                     	;# 
  3754  0192                     	;# 
  3755  0193                     	;# 
  3756  0193                     	;# 
  3757  0194                     	;# 
  3758  0195                     	;# 
  3759  0196                     	;# 
  3760  0197                     	;# 
  3761  0199                     	;# 
  3762  0199                     	;# 
  3763  0199                     	;# 
  3764  019A                     	;# 
  3765  019A                     	;# 
  3766  019A                     	;# 
  3767  019B                     	;# 
  3768  019B                     	;# 
  3769  019B                     	;# 
  3770  019B                     	;# 
  3771  019B                     	;# 
  3772  019C                     	;# 
  3773  019C                     	;# 
  3774  019C                     	;# 
  3775  019D                     	;# 
  3776  019D                     	;# 
  3777  019D                     	;# 
  3778  019E                     	;# 
  3779  019E                     	;# 
  3780  019E                     	;# 
  3781  019F                     	;# 
  3782  019F                     	;# 
  3783  019F                     	;# 
  3784  019F                     	;# 
  3785  019F                     	;# 
  3786  020C                     	;# 
  3787  020D                     	;# 
  3788  020E                     	;# 
  3789  0211                     	;# 
  3790  0211                     	;# 
  3791  0212                     	;# 
  3792  0212                     	;# 
  3793  0213                     	;# 
  3794  0213                     	;# 
  3795  0214                     	;# 
  3796  0214                     	;# 
  3797  0215                     	;# 
  3798  0215                     	;# 
  3799  0215                     	;# 
  3800  0215                     	;# 
  3801  0216                     	;# 
  3802  0216                     	;# 
  3803  0217                     	;# 
  3804  0217                     	;# 
  3805  028C                     	;# 
  3806  028D                     	;# 
  3807  028E                     	;# 
  3808  0291                     	;# 
  3809  0291                     	;# 
  3810  0292                     	;# 
  3811  0293                     	;# 
  3812  0294                     	;# 
  3813  0298                     	;# 
  3814  0298                     	;# 
  3815  0299                     	;# 
  3816  029A                     	;# 
  3817  029B                     	;# 
  3818  029E                     	;# 
  3819  030C                     	;# 
  3820  030D                     	;# 
  3821  030E                     	;# 
  3822  038C                     	;# 
  3823  038D                     	;# 
  3824  038E                     	;# 
  3825  0391                     	;# 
  3826  0392                     	;# 
  3827  0393                     	;# 
  3828  0394                     	;# 
  3829  0395                     	;# 
  3830  0396                     	;# 
  3831  0397                     	;# 
  3832  0398                     	;# 
  3833  0399                     	;# 
  3834  040E                     	;# 
  3835  0413                     	;# 
  3836  0413                     	;# 
  3837  0414                     	;# 
  3838  0414                     	;# 
  3839  0415                     	;# 
  3840  0416                     	;# 
  3841  0417                     	;# 
  3842  0418                     	;# 
  3843  041A                     	;# 
  3844  041A                     	;# 
  3845  041B                     	;# 
  3846  041B                     	;# 
  3847  041C                     	;# 
  3848  041D                     	;# 
  3849  041E                     	;# 
  3850  041F                     	;# 
  3851  0493                     	;# 
  3852  0494                     	;# 
  3853  0495                     	;# 
  3854  0496                     	;# 
  3855  049A                     	;# 
  3856  049B                     	;# 
  3857  049C                     	;# 
  3858  049D                     	;# 
  3859  058C                     	;# 
  3860  058C                     	;# 
  3861  058D                     	;# 
  3862  058E                     	;# 
  3863  058E                     	;# 
  3864  058F                     	;# 
  3865  0590                     	;# 
  3866  0590                     	;# 
  3867  0591                     	;# 
  3868  0592                     	;# 
  3869  0592                     	;# 
  3870  0593                     	;# 
  3871  0594                     	;# 
  3872  0594                     	;# 
  3873  0595                     	;# 
  3874  0596                     	;# 
  3875  0596                     	;# 
  3876  0597                     	;# 
  3877  0598                     	;# 
  3878  0599                     	;# 
  3879  059A                     	;# 
  3880  059B                     	;# 
  3881  059B                     	;# 
  3882  059C                     	;# 
  3883  059D                     	;# 
  3884  060C                     	;# 
  3885  060C                     	;# 
  3886  060D                     	;# 
  3887  060E                     	;# 
  3888  060F                     	;# 
  3889  060F                     	;# 
  3890  0610                     	;# 
  3891  0611                     	;# 
  3892  0612                     	;# 
  3893  0613                     	;# 
  3894  0614                     	;# 
  3895  0617                     	;# 
  3896  0618                     	;# 
  3897  0619                     	;# 
  3898  061A                     	;# 
  3899  061B                     	;# 
  3900  061C                     	;# 
  3901  0691                     	;# 
  3902  0692                     	;# 
  3903  0693                     	;# 
  3904  0694                     	;# 
  3905  0695                     	;# 
  3906  0696                     	;# 
  3907  0697                     	;# 
  3908  0699                     	;# 
  3909  069A                     	;# 
  3910  0711                     	;# 
  3911  0712                     	;# 
  3912  0713                     	;# 
  3913  0714                     	;# 
  3914  0715                     	;# 
  3915  0718                     	;# 
  3916  0718                     	;# 
  3917  0719                     	;# 
  3918  071A                     	;# 
  3919  071A                     	;# 
  3920  071B                     	;# 
  3921  071C                     	;# 
  3922  071D                     	;# 
  3923  0791                     	;# 
  3924  0791                     	;# 
  3925  0792                     	;# 
  3926  0793                     	;# 
  3927  0793                     	;# 
  3928  0794                     	;# 
  3929  0795                     	;# 
  3930  0795                     	;# 
  3931  0796                     	;# 
  3932  0797                     	;# 
  3933  0797                     	;# 
  3934  0798                     	;# 
  3935  0799                     	;# 
  3936  079A                     	;# 
  3937  080C                     	;# 
  3938  080C                     	;# 
  3939  080D                     	;# 
  3940  080E                     	;# 
  3941  080E                     	;# 
  3942  080F                     	;# 
  3943  0810                     	;# 
  3944  0810                     	;# 
  3945  0811                     	;# 
  3946  0812                     	;# 
  3947  0812                     	;# 
  3948  0813                     	;# 
  3949  0814                     	;# 
  3950  0815                     	;# 
  3951  0816                     	;# 
  3952  0817                     	;# 
  3953  0818                     	;# 
  3954  0819                     	;# 
  3955  081A                     	;# 
  3956  081A                     	;# 
  3957  081B                     	;# 
  3958  081C                     	;# 
  3959  081C                     	;# 
  3960  081D                     	;# 
  3961  088C                     	;# 
  3962  088D                     	;# 
  3963  088E                     	;# 
  3964  088F                     	;# 
  3965  088F                     	;# 
  3966  0890                     	;# 
  3967  0891                     	;# 
  3968  0892                     	;# 
  3969  0893                     	;# 
  3970  0893                     	;# 
  3971  0894                     	;# 
  3972  0895                     	;# 
  3973  0896                     	;# 
  3974  0897                     	;# 
  3975  0897                     	;# 
  3976  0898                     	;# 
  3977  0899                     	;# 
  3978  0D8C                     	;# 
  3979  0D8C                     	;# 
  3980  0D8D                     	;# 
  3981  0D8E                     	;# 
  3982  0D8F                     	;# 
  3983  0D8F                     	;# 
  3984  0D90                     	;# 
  3985  0D91                     	;# 
  3986  0D92                     	;# 
  3987  0D92                     	;# 
  3988  0D93                     	;# 
  3989  0D94                     	;# 
  3990  0D95                     	;# 
  3991  0D95                     	;# 
  3992  0D96                     	;# 
  3993  0D97                     	;# 
  3994  0D98                     	;# 
  3995  0D99                     	;# 
  3996  0D9A                     	;# 
  3997  0D9B                     	;# 
  3998  0D9C                     	;# 
  3999  0D9D                     	;# 
  4000  0D9E                     	;# 
  4001  0D9E                     	;# 
  4002  0D9F                     	;# 
  4003  0DA0                     	;# 
  4004  0DA1                     	;# 
  4005  0DA1                     	;# 
  4006  0DA2                     	;# 
  4007  0DA3                     	;# 
  4008  0DA4                     	;# 
  4009  0DA4                     	;# 
  4010  0DA5                     	;# 
  4011  0DA6                     	;# 
  4012  0DA7                     	;# 
  4013  0DA7                     	;# 
  4014  0DA8                     	;# 
  4015  0DA9                     	;# 
  4016  0DAA                     	;# 
  4017  0DAB                     	;# 
  4018  0DAC                     	;# 
  4019  0DAD                     	;# 
  4020  0DAE                     	;# 
  4021  0DAF                     	;# 
  4022  0E0F                     	;# 
  4023  0E10                     	;# 
  4024  0E11                     	;# 
  4025  0E12                     	;# 
  4026  0E13                     	;# 
  4027  0E14                     	;# 
  4028  0E15                     	;# 
  4029  0E16                     	;# 
  4030  0E17                     	;# 
  4031  0E18                     	;# 
  4032  0E19                     	;# 
  4033  0E1A                     	;# 
  4034  0E1B                     	;# 
  4035  0E1C                     	;# 
  4036  0E1D                     	;# 
  4037  0E1E                     	;# 
  4038  0E1F                     	;# 
  4039  0E20                     	;# 
  4040  0E21                     	;# 
  4041  0E22                     	;# 
  4042  0E23                     	;# 
  4043  0E24                     	;# 
  4044  0E25                     	;# 
  4045  0E26                     	;# 
  4046  0E27                     	;# 
  4047  0E28                     	;# 
  4048  0E29                     	;# 
  4049  0E2A                     	;# 
  4050  0E2B                     	;# 
  4051  0E2C                     	;# 
  4052  0E2D                     	;# 
  4053  0E2E                     	;# 
  4054  0E90                     	;# 
  4055  0E91                     	;# 
  4056  0E92                     	;# 
  4057  0E94                     	;# 
  4058  0E95                     	;# 
  4059  0E9C                     	;# 
  4060  0E9D                     	;# 
  4061  0E9E                     	;# 
  4062  0E9F                     	;# 
  4063  0EA0                     	;# 
  4064  0EA1                     	;# 
  4065  0EA2                     	;# 
  4066  0EA3                     	;# 
  4067  0EA4                     	;# 
  4068  0EA5                     	;# 
  4069  0EA6                     	;# 
  4070  0EA7                     	;# 
  4071  0F0F                     	;# 
  4072  0F10                     	;# 
  4073  0F11                     	;# 
  4074  0F12                     	;# 
  4075  0F13                     	;# 
  4076  0F14                     	;# 
  4077  0F15                     	;# 
  4078  0F16                     	;# 
  4079  0F17                     	;# 
  4080  0F18                     	;# 
  4081  0F19                     	;# 
  4082  0F1A                     	;# 
  4083  0F1B                     	;# 
  4084  0F1C                     	;# 
  4085  0F1D                     	;# 
  4086  0F1E                     	;# 
  4087  0F1F                     	;# 
  4088  0F20                     	;# 
  4089  0F21                     	;# 
  4090  0F22                     	;# 
  4091  0F23                     	;# 
  4092  0F24                     	;# 
  4093  0F25                     	;# 
  4094  0F26                     	;# 
  4095  0F27                     	;# 
  4096  0F28                     	;# 
  4097  0F29                     	;# 
  4098  0F2A                     	;# 
  4099  0F2B                     	;# 
  4100  0F2C                     	;# 
  4101  0F2D                     	;# 
  4102  0F2E                     	;# 
  4103  0F2F                     	;# 
  4104  0F30                     	;# 
  4105  0F31                     	;# 
  4106  0F32                     	;# 
  4107  0F33                     	;# 
  4108  0F34                     	;# 
  4109  0F35                     	;# 
  4110  0F36                     	;# 
  4111  0F37                     	;# 
  4112  0FE4                     	;# 
  4113  0FE5                     	;# 
  4114  0FE6                     	;# 
  4115  0FE7                     	;# 
  4116  0FE8                     	;# 
  4117  0FE9                     	;# 
  4118  0FEA                     	;# 
  4119  0FEB                     	;# 
  4120  0FED                     	;# 
  4121  0FEE                     	;# 
  4122  0FEF                     	;# 
  4123  0000                     	;# 
  4124  0001                     	;# 
  4125  0002                     	;# 
  4126  0003                     	;# 
  4127  0004                     	;# 
  4128  0005                     	;# 
  4129  0006                     	;# 
  4130  0007                     	;# 
  4131  0008                     	;# 
  4132  0009                     	;# 
  4133  000A                     	;# 
  4134  000B                     	;# 
  4135  000C                     	;# 
  4136  000D                     	;# 
  4137  000E                     	;# 
  4138  0010                     	;# 
  4139  0011                     	;# 
  4140  0012                     	;# 
  4141  0013                     	;# 
  4142  0014                     	;# 
  4143  0015                     	;# 
  4144  0016                     	;# 
  4145  0016                     	;# 
  4146  0017                     	;# 
  4147  0018                     	;# 
  4148  0019                     	;# 
  4149  001A                     	;# 
  4150  001A                     	;# 
  4151  001B                     	;# 
  4152  001B                     	;# 
  4153  001C                     	;# 
  4154  001D                     	;# 
  4155  001E                     	;# 
  4156  001F                     	;# 
  4157  008C                     	;# 
  4158  008D                     	;# 
  4159  008E                     	;# 
  4160  0090                     	;# 
  4161  0091                     	;# 
  4162  0092                     	;# 
  4163  0093                     	;# 
  4164  0094                     	;# 
  4165  0095                     	;# 
  4166  0096                     	;# 
  4167  0098                     	;# 
  4168  0099                     	;# 
  4169  009A                     	;# 
  4170  009B                     	;# 
  4171  009B                     	;# 
  4172  009C                     	;# 
  4173  009D                     	;# 
  4174  009E                     	;# 
  4175  009F                     	;# 
  4176  010C                     	;# 
  4177  010D                     	;# 
  4178  010E                     	;# 
  4179  0111                     	;# 
  4180  0112                     	;# 
  4181  0113                     	;# 
  4182  0114                     	;# 
  4183  0115                     	;# 
  4184  0116                     	;# 
  4185  0117                     	;# 
  4186  0118                     	;# 
  4187  0119                     	;# 
  4188  011C                     	;# 
  4189  018C                     	;# 
  4190  018D                     	;# 
  4191  018E                     	;# 
  4192  0191                     	;# 
  4193  0191                     	;# 
  4194  0192                     	;# 
  4195  0193                     	;# 
  4196  0193                     	;# 
  4197  0194                     	;# 
  4198  0195                     	;# 
  4199  0196                     	;# 
  4200  0197                     	;# 
  4201  0199                     	;# 
  4202  0199                     	;# 
  4203  0199                     	;# 
  4204  019A                     	;# 
  4205  019A                     	;# 
  4206  019A                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019B                     	;# 
  4210  019B                     	;# 
  4211  019B                     	;# 
  4212  019C                     	;# 
  4213  019C                     	;# 
  4214  019C                     	;# 
  4215  019D                     	;# 
  4216  019D                     	;# 
  4217  019D                     	;# 
  4218  019E                     	;# 
  4219  019E                     	;# 
  4220  019E                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  019F                     	;# 
  4224  019F                     	;# 
  4225  019F                     	;# 
  4226  020C                     	;# 
  4227  020D                     	;# 
  4228  020E                     	;# 
  4229  0211                     	;# 
  4230  0211                     	;# 
  4231  0212                     	;# 
  4232  0212                     	;# 
  4233  0213                     	;# 
  4234  0213                     	;# 
  4235  0214                     	;# 
  4236  0214                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0215                     	;# 
  4241  0216                     	;# 
  4242  0216                     	;# 
  4243  0217                     	;# 
  4244  0217                     	;# 
  4245  028C                     	;# 
  4246  028D                     	;# 
  4247  028E                     	;# 
  4248  0291                     	;# 
  4249  0291                     	;# 
  4250  0292                     	;# 
  4251  0293                     	;# 
  4252  0294                     	;# 
  4253  0298                     	;# 
  4254  0298                     	;# 
  4255  0299                     	;# 
  4256  029A                     	;# 
  4257  029B                     	;# 
  4258  029E                     	;# 
  4259  030C                     	;# 
  4260  030D                     	;# 
  4261  030E                     	;# 
  4262  038C                     	;# 
  4263  038D                     	;# 
  4264  038E                     	;# 
  4265  0391                     	;# 
  4266  0392                     	;# 
  4267  0393                     	;# 
  4268  0394                     	;# 
  4269  0395                     	;# 
  4270  0396                     	;# 
  4271  0397                     	;# 
  4272  0398                     	;# 
  4273  0399                     	;# 
  4274  040E                     	;# 
  4275  0413                     	;# 
  4276  0413                     	;# 
  4277  0414                     	;# 
  4278  0414                     	;# 
  4279  0415                     	;# 
  4280  0416                     	;# 
  4281  0417                     	;# 
  4282  0418                     	;# 
  4283  041A                     	;# 
  4284  041A                     	;# 
  4285  041B                     	;# 
  4286  041B                     	;# 
  4287  041C                     	;# 
  4288  041D                     	;# 
  4289  041E                     	;# 
  4290  041F                     	;# 
  4291  0493                     	;# 
  4292  0494                     	;# 
  4293  0495                     	;# 
  4294  0496                     	;# 
  4295  049A                     	;# 
  4296  049B                     	;# 
  4297  049C                     	;# 
  4298  049D                     	;# 
  4299  058C                     	;# 
  4300  058C                     	;# 
  4301  058D                     	;# 
  4302  058E                     	;# 
  4303  058E                     	;# 
  4304  058F                     	;# 
  4305  0590                     	;# 
  4306  0590                     	;# 
  4307  0591                     	;# 
  4308  0592                     	;# 
  4309  0592                     	;# 
  4310  0593                     	;# 
  4311  0594                     	;# 
  4312  0594                     	;# 
  4313  0595                     	;# 
  4314  0596                     	;# 
  4315  0596                     	;# 
  4316  0597                     	;# 
  4317  0598                     	;# 
  4318  0599                     	;# 
  4319  059A                     	;# 
  4320  059B                     	;# 
  4321  059B                     	;# 
  4322  059C                     	;# 
  4323  059D                     	;# 
  4324  060C                     	;# 
  4325  060C                     	;# 
  4326  060D                     	;# 
  4327  060E                     	;# 
  4328  060F                     	;# 
  4329  060F                     	;# 
  4330  0610                     	;# 
  4331  0611                     	;# 
  4332  0612                     	;# 
  4333  0613                     	;# 
  4334  0614                     	;# 
  4335  0617                     	;# 
  4336  0618                     	;# 
  4337  0619                     	;# 
  4338  061A                     	;# 
  4339  061B                     	;# 
  4340  061C                     	;# 
  4341  0691                     	;# 
  4342  0692                     	;# 
  4343  0693                     	;# 
  4344  0694                     	;# 
  4345  0695                     	;# 
  4346  0696                     	;# 
  4347  0697                     	;# 
  4348  0699                     	;# 
  4349  069A                     	;# 
  4350  0711                     	;# 
  4351  0712                     	;# 
  4352  0713                     	;# 
  4353  0714                     	;# 
  4354  0715                     	;# 
  4355  0718                     	;# 
  4356  0718                     	;# 
  4357  0719                     	;# 
  4358  071A                     	;# 
  4359  071A                     	;# 
  4360  071B                     	;# 
  4361  071C                     	;# 
  4362  071D                     	;# 
  4363  0791                     	;# 
  4364  0791                     	;# 
  4365  0792                     	;# 
  4366  0793                     	;# 
  4367  0793                     	;# 
  4368  0794                     	;# 
  4369  0795                     	;# 
  4370  0795                     	;# 
  4371  0796                     	;# 
  4372  0797                     	;# 
  4373  0797                     	;# 
  4374  0798                     	;# 
  4375  0799                     	;# 
  4376  079A                     	;# 
  4377  080C                     	;# 
  4378  080C                     	;# 
  4379  080D                     	;# 
  4380  080E                     	;# 
  4381  080E                     	;# 
  4382  080F                     	;# 
  4383  0810                     	;# 
  4384  0810                     	;# 
  4385  0811                     	;# 
  4386  0812                     	;# 
  4387  0812                     	;# 
  4388  0813                     	;# 
  4389  0814                     	;# 
  4390  0815                     	;# 
  4391  0816                     	;# 
  4392  0817                     	;# 
  4393  0818                     	;# 
  4394  0819                     	;# 
  4395  081A                     	;# 
  4396  081A                     	;# 
  4397  081B                     	;# 
  4398  081C                     	;# 
  4399  081C                     	;# 
  4400  081D                     	;# 
  4401  088C                     	;# 
  4402  088D                     	;# 
  4403  088E                     	;# 
  4404  088F                     	;# 
  4405  088F                     	;# 
  4406  0890                     	;# 
  4407  0891                     	;# 
  4408  0892                     	;# 
  4409  0893                     	;# 
  4410  0893                     	;# 
  4411  0894                     	;# 
  4412  0895                     	;# 
  4413  0896                     	;# 
  4414  0897                     	;# 
  4415  0897                     	;# 
  4416  0898                     	;# 
  4417  0899                     	;# 
  4418  0D8C                     	;# 
  4419  0D8C                     	;# 
  4420  0D8D                     	;# 
  4421  0D8E                     	;# 
  4422  0D8F                     	;# 
  4423  0D8F                     	;# 
  4424  0D90                     	;# 
  4425  0D91                     	;# 
  4426  0D92                     	;# 
  4427  0D92                     	;# 
  4428  0D93                     	;# 
  4429  0D94                     	;# 
  4430  0D95                     	;# 
  4431  0D95                     	;# 
  4432  0D96                     	;# 
  4433  0D97                     	;# 
  4434  0D98                     	;# 
  4435  0D99                     	;# 
  4436  0D9A                     	;# 
  4437  0D9B                     	;# 
  4438  0D9C                     	;# 
  4439  0D9D                     	;# 
  4440  0D9E                     	;# 
  4441  0D9E                     	;# 
  4442  0D9F                     	;# 
  4443  0DA0                     	;# 
  4444  0DA1                     	;# 
  4445  0DA1                     	;# 
  4446  0DA2                     	;# 
  4447  0DA3                     	;# 
  4448  0DA4                     	;# 
  4449  0DA4                     	;# 
  4450  0DA5                     	;# 
  4451  0DA6                     	;# 
  4452  0DA7                     	;# 
  4453  0DA7                     	;# 
  4454  0DA8                     	;# 
  4455  0DA9                     	;# 
  4456  0DAA                     	;# 
  4457  0DAB                     	;# 
  4458  0DAC                     	;# 
  4459  0DAD                     	;# 
  4460  0DAE                     	;# 
  4461  0DAF                     	;# 
  4462  0E0F                     	;# 
  4463  0E10                     	;# 
  4464  0E11                     	;# 
  4465  0E12                     	;# 
  4466  0E13                     	;# 
  4467  0E14                     	;# 
  4468  0E15                     	;# 
  4469  0E16                     	;# 
  4470  0E17                     	;# 
  4471  0E18                     	;# 
  4472  0E19                     	;# 
  4473  0E1A                     	;# 
  4474  0E1B                     	;# 
  4475  0E1C                     	;# 
  4476  0E1D                     	;# 
  4477  0E1E                     	;# 
  4478  0E1F                     	;# 
  4479  0E20                     	;# 
  4480  0E21                     	;# 
  4481  0E22                     	;# 
  4482  0E23                     	;# 
  4483  0E24                     	;# 
  4484  0E25                     	;# 
  4485  0E26                     	;# 
  4486  0E27                     	;# 
  4487  0E28                     	;# 
  4488  0E29                     	;# 
  4489  0E2A                     	;# 
  4490  0E2B                     	;# 
  4491  0E2C                     	;# 
  4492  0E2D                     	;# 
  4493  0E2E                     	;# 
  4494  0E90                     	;# 
  4495  0E91                     	;# 
  4496  0E92                     	;# 
  4497  0E94                     	;# 
  4498  0E95                     	;# 
  4499  0E9C                     	;# 
  4500  0E9D                     	;# 
  4501  0E9E                     	;# 
  4502  0E9F                     	;# 
  4503  0EA0                     	;# 
  4504  0EA1                     	;# 
  4505  0EA2                     	;# 
  4506  0EA3                     	;# 
  4507  0EA4                     	;# 
  4508  0EA5                     	;# 
  4509  0EA6                     	;# 
  4510  0EA7                     	;# 
  4511  0F0F                     	;# 
  4512  0F10                     	;# 
  4513  0F11                     	;# 
  4514  0F12                     	;# 
  4515  0F13                     	;# 
  4516  0F14                     	;# 
  4517  0F15                     	;# 
  4518  0F16                     	;# 
  4519  0F17                     	;# 
  4520  0F18                     	;# 
  4521  0F19                     	;# 
  4522  0F1A                     	;# 
  4523  0F1B                     	;# 
  4524  0F1C                     	;# 
  4525  0F1D                     	;# 
  4526  0F1E                     	;# 
  4527  0F1F                     	;# 
  4528  0F20                     	;# 
  4529  0F21                     	;# 
  4530  0F22                     	;# 
  4531  0F23                     	;# 
  4532  0F24                     	;# 
  4533  0F25                     	;# 
  4534  0F26                     	;# 
  4535  0F27                     	;# 
  4536  0F28                     	;# 
  4537  0F29                     	;# 
  4538  0F2A                     	;# 
  4539  0F2B                     	;# 
  4540  0F2C                     	;# 
  4541  0F2D                     	;# 
  4542  0F2E                     	;# 
  4543  0F2F                     	;# 
  4544  0F30                     	;# 
  4545  0F31                     	;# 
  4546  0F32                     	;# 
  4547  0F33                     	;# 
  4548  0F34                     	;# 
  4549  0F35                     	;# 
  4550  0F36                     	;# 
  4551  0F37                     	;# 
  4552  0FE4                     	;# 
  4553  0FE5                     	;# 
  4554  0FE6                     	;# 
  4555  0FE7                     	;# 
  4556  0FE8                     	;# 
  4557  0FE9                     	;# 
  4558  0FEA                     	;# 
  4559  0FEB                     	;# 
  4560  0FED                     	;# 
  4561  0FEE                     	;# 
  4562  0FEF                     	;# 
  4563  0000                     	;# 
  4564  0001                     	;# 
  4565  0002                     	;# 
  4566  0003                     	;# 
  4567  0004                     	;# 
  4568  0005                     	;# 
  4569  0006                     	;# 
  4570  0007                     	;# 
  4571  0008                     	;# 
  4572  0009                     	;# 
  4573  000A                     	;# 
  4574  000B                     	;# 
  4575  000C                     	;# 
  4576  000D                     	;# 
  4577  000E                     	;# 
  4578  0010                     	;# 
  4579  0011                     	;# 
  4580  0012                     	;# 
  4581  0013                     	;# 
  4582  0014                     	;# 
  4583  0015                     	;# 
  4584  0016                     	;# 
  4585  0016                     	;# 
  4586  0017                     	;# 
  4587  0018                     	;# 
  4588  0019                     	;# 
  4589  001A                     	;# 
  4590  001A                     	;# 
  4591  001B                     	;# 
  4592  001B                     	;# 
  4593  001C                     	;# 
  4594  001D                     	;# 
  4595  001E                     	;# 
  4596  001F                     	;# 
  4597  008C                     	;# 
  4598  008D                     	;# 
  4599  008E                     	;# 
  4600  0090                     	;# 
  4601  0091                     	;# 
  4602  0092                     	;# 
  4603  0093                     	;# 
  4604  0094                     	;# 
  4605  0095                     	;# 
  4606  0096                     	;# 
  4607  0098                     	;# 
  4608  0099                     	;# 
  4609  009A                     	;# 
  4610  009B                     	;# 
  4611  009B                     	;# 
  4612  009C                     	;# 
  4613  009D                     	;# 
  4614  009E                     	;# 
  4615  009F                     	;# 
  4616  010C                     	;# 
  4617  010D                     	;# 
  4618  010E                     	;# 
  4619  0111                     	;# 
  4620  0112                     	;# 
  4621  0113                     	;# 
  4622  0114                     	;# 
  4623  0115                     	;# 
  4624  0116                     	;# 
  4625  0117                     	;# 
  4626  0118                     	;# 
  4627  0119                     	;# 
  4628  011C                     	;# 
  4629  018C                     	;# 
  4630  018D                     	;# 
  4631  018E                     	;# 
  4632  0191                     	;# 
  4633  0191                     	;# 
  4634  0192                     	;# 
  4635  0193                     	;# 
  4636  0193                     	;# 
  4637  0194                     	;# 
  4638  0195                     	;# 
  4639  0196                     	;# 
  4640  0197                     	;# 
  4641  0199                     	;# 
  4642  0199                     	;# 
  4643  0199                     	;# 
  4644  019A                     	;# 
  4645  019A                     	;# 
  4646  019A                     	;# 
  4647  019B                     	;# 
  4648  019B                     	;# 
  4649  019B                     	;# 
  4650  019B                     	;# 
  4651  019B                     	;# 
  4652  019C                     	;# 
  4653  019C                     	;# 
  4654  019C                     	;# 
  4655  019D                     	;# 
  4656  019D                     	;# 
  4657  019D                     	;# 
  4658  019E                     	;# 
  4659  019E                     	;# 
  4660  019E                     	;# 
  4661  019F                     	;# 
  4662  019F                     	;# 
  4663  019F                     	;# 
  4664  019F                     	;# 
  4665  019F                     	;# 
  4666  020C                     	;# 
  4667  020D                     	;# 
  4668  020E                     	;# 
  4669  0211                     	;# 
  4670  0211                     	;# 
  4671  0212                     	;# 
  4672  0212                     	;# 
  4673  0213                     	;# 
  4674  0213                     	;# 
  4675  0214                     	;# 
  4676  0214                     	;# 
  4677  0215                     	;# 
  4678  0215                     	;# 
  4679  0215                     	;# 
  4680  0215                     	;# 
  4681  0216                     	;# 
  4682  0216                     	;# 
  4683  0217                     	;# 
  4684  0217                     	;# 
  4685  028C                     	;# 
  4686  028D                     	;# 
  4687  028E                     	;# 
  4688  0291                     	;# 
  4689  0291                     	;# 
  4690  0292                     	;# 
  4691  0293                     	;# 
  4692  0294                     	;# 
  4693  0298                     	;# 
  4694  0298                     	;# 
  4695  0299                     	;# 
  4696  029A                     	;# 
  4697  029B                     	;# 
  4698  029E                     	;# 
  4699  030C                     	;# 
  4700  030D                     	;# 
  4701  030E                     	;# 
  4702  038C                     	;# 
  4703  038D                     	;# 
  4704  038E                     	;# 
  4705  0391                     	;# 
  4706  0392                     	;# 
  4707  0393                     	;# 
  4708  0394                     	;# 
  4709  0395                     	;# 
  4710  0396                     	;# 
  4711  0397                     	;# 
  4712  0398                     	;# 
  4713  0399                     	;# 
  4714  040E                     	;# 
  4715  0413                     	;# 
  4716  0413                     	;# 
  4717  0414                     	;# 
  4718  0414                     	;# 
  4719  0415                     	;# 
  4720  0416                     	;# 
  4721  0417                     	;# 
  4722  0418                     	;# 
  4723  041A                     	;# 
  4724  041A                     	;# 
  4725  041B                     	;# 
  4726  041B                     	;# 
  4727  041C                     	;# 
  4728  041D                     	;# 
  4729  041E                     	;# 
  4730  041F                     	;# 
  4731  0493                     	;# 
  4732  0494                     	;# 
  4733  0495                     	;# 
  4734  0496                     	;# 
  4735  049A                     	;# 
  4736  049B                     	;# 
  4737  049C                     	;# 
  4738  049D                     	;# 
  4739  058C                     	;# 
  4740  058C                     	;# 
  4741  058D                     	;# 
  4742  058E                     	;# 
  4743  058E                     	;# 
  4744  058F                     	;# 
  4745  0590                     	;# 
  4746  0590                     	;# 
  4747  0591                     	;# 
  4748  0592                     	;# 
  4749  0592                     	;# 
  4750  0593                     	;# 
  4751  0594                     	;# 
  4752  0594                     	;# 
  4753  0595                     	;# 
  4754  0596                     	;# 
  4755  0596                     	;# 
  4756  0597                     	;# 
  4757  0598                     	;# 
  4758  0599                     	;# 
  4759  059A                     	;# 
  4760  059B                     	;# 
  4761  059B                     	;# 
  4762  059C                     	;# 
  4763  059D                     	;# 
  4764  060C                     	;# 
  4765  060C                     	;# 
  4766  060D                     	;# 
  4767  060E                     	;# 
  4768  060F                     	;# 
  4769  060F                     	;# 
  4770  0610                     	;# 
  4771  0611                     	;# 
  4772  0612                     	;# 
  4773  0613                     	;# 
  4774  0614                     	;# 
  4775  0617                     	;# 
  4776  0618                     	;# 
  4777  0619                     	;# 
  4778  061A                     	;# 
  4779  061B                     	;# 
  4780  061C                     	;# 
  4781  0691                     	;# 
  4782  0692                     	;# 
  4783  0693                     	;# 
  4784  0694                     	;# 
  4785  0695                     	;# 
  4786  0696                     	;# 
  4787  0697                     	;# 
  4788  0699                     	;# 
  4789  069A                     	;# 
  4790  0711                     	;# 
  4791  0712                     	;# 
  4792  0713                     	;# 
  4793  0714                     	;# 
  4794  0715                     	;# 
  4795  0718                     	;# 
  4796  0718                     	;# 
  4797  0719                     	;# 
  4798  071A                     	;# 
  4799  071A                     	;# 
  4800  071B                     	;# 
  4801  071C                     	;# 
  4802  071D                     	;# 
  4803  0791                     	;# 
  4804  0791                     	;# 
  4805  0792                     	;# 
  4806  0793                     	;# 
  4807  0793                     	;# 
  4808  0794                     	;# 
  4809  0795                     	;# 
  4810  0795                     	;# 
  4811  0796                     	;# 
  4812  0797                     	;# 
  4813  0797                     	;# 
  4814  0798                     	;# 
  4815  0799                     	;# 
  4816  079A                     	;# 
  4817  080C                     	;# 
  4818  080C                     	;# 
  4819  080D                     	;# 
  4820  080E                     	;# 
  4821  080E                     	;# 
  4822  080F                     	;# 
  4823  0810                     	;# 
  4824  0810                     	;# 
  4825  0811                     	;# 
  4826  0812                     	;# 
  4827  0812                     	;# 
  4828  0813                     	;# 
  4829  0814                     	;# 
  4830  0815                     	;# 
  4831  0816                     	;# 
  4832  0817                     	;# 
  4833  0818                     	;# 
  4834  0819                     	;# 
  4835  081A                     	;# 
  4836  081A                     	;# 
  4837  081B                     	;# 
  4838  081C                     	;# 
  4839  081C                     	;# 
  4840  081D                     	;# 
  4841  088C                     	;# 
  4842  088D                     	;# 
  4843  088E                     	;# 
  4844  088F                     	;# 
  4845  088F                     	;# 
  4846  0890                     	;# 
  4847  0891                     	;# 
  4848  0892                     	;# 
  4849  0893                     	;# 
  4850  0893                     	;# 
  4851  0894                     	;# 
  4852  0895                     	;# 
  4853  0896                     	;# 
  4854  0897                     	;# 
  4855  0897                     	;# 
  4856  0898                     	;# 
  4857  0899                     	;# 
  4858  0D8C                     	;# 
  4859  0D8C                     	;# 
  4860  0D8D                     	;# 
  4861  0D8E                     	;# 
  4862  0D8F                     	;# 
  4863  0D8F                     	;# 
  4864  0D90                     	;# 
  4865  0D91                     	;# 
  4866  0D92                     	;# 
  4867  0D92                     	;# 
  4868  0D93                     	;# 
  4869  0D94                     	;# 
  4870  0D95                     	;# 
  4871  0D95                     	;# 
  4872  0D96                     	;# 
  4873  0D97                     	;# 
  4874  0D98                     	;# 
  4875  0D99                     	;# 
  4876  0D9A                     	;# 
  4877  0D9B                     	;# 
  4878  0D9C                     	;# 
  4879  0D9D                     	;# 
  4880  0D9E                     	;# 
  4881  0D9E                     	;# 
  4882  0D9F                     	;# 
  4883  0DA0                     	;# 
  4884  0DA1                     	;# 
  4885  0DA1                     	;# 
  4886  0DA2                     	;# 
  4887  0DA3                     	;# 
  4888  0DA4                     	;# 
  4889  0DA4                     	;# 
  4890  0DA5                     	;# 
  4891  0DA6                     	;# 
  4892  0DA7                     	;# 
  4893  0DA7                     	;# 
  4894  0DA8                     	;# 
  4895  0DA9                     	;# 
  4896  0DAA                     	;# 
  4897  0DAB                     	;# 
  4898  0DAC                     	;# 
  4899  0DAD                     	;# 
  4900  0DAE                     	;# 
  4901  0DAF                     	;# 
  4902  0E0F                     	;# 
  4903  0E10                     	;# 
  4904  0E11                     	;# 
  4905  0E12                     	;# 
  4906  0E13                     	;# 
  4907  0E14                     	;# 
  4908  0E15                     	;# 
  4909  0E16                     	;# 
  4910  0E17                     	;# 
  4911  0E18                     	;# 
  4912  0E19                     	;# 
  4913  0E1A                     	;# 
  4914  0E1B                     	;# 
  4915  0E1C                     	;# 
  4916  0E1D                     	;# 
  4917  0E1E                     	;# 
  4918  0E1F                     	;# 
  4919  0E20                     	;# 
  4920  0E21                     	;# 
  4921  0E22                     	;# 
  4922  0E23                     	;# 
  4923  0E24                     	;# 
  4924  0E25                     	;# 
  4925  0E26                     	;# 
  4926  0E27                     	;# 
  4927  0E28                     	;# 
  4928  0E29                     	;# 
  4929  0E2A                     	;# 
  4930  0E2B                     	;# 
  4931  0E2C                     	;# 
  4932  0E2D                     	;# 
  4933  0E2E                     	;# 
  4934  0E90                     	;# 
  4935  0E91                     	;# 
  4936  0E92                     	;# 
  4937  0E94                     	;# 
  4938  0E95                     	;# 
  4939  0E9C                     	;# 
  4940  0E9D                     	;# 
  4941  0E9E                     	;# 
  4942  0E9F                     	;# 
  4943  0EA0                     	;# 
  4944  0EA1                     	;# 
  4945  0EA2                     	;# 
  4946  0EA3                     	;# 
  4947  0EA4                     	;# 
  4948  0EA5                     	;# 
  4949  0EA6                     	;# 
  4950  0EA7                     	;# 
  4951  0F0F                     	;# 
  4952  0F10                     	;# 
  4953  0F11                     	;# 
  4954  0F12                     	;# 
  4955  0F13                     	;# 
  4956  0F14                     	;# 
  4957  0F15                     	;# 
  4958  0F16                     	;# 
  4959  0F17                     	;# 
  4960  0F18                     	;# 
  4961  0F19                     	;# 
  4962  0F1A                     	;# 
  4963  0F1B                     	;# 
  4964  0F1C                     	;# 
  4965  0F1D                     	;# 
  4966  0F1E                     	;# 
  4967  0F1F                     	;# 
  4968  0F20                     	;# 
  4969  0F21                     	;# 
  4970  0F22                     	;# 
  4971  0F23                     	;# 
  4972  0F24                     	;# 
  4973  0F25                     	;# 
  4974  0F26                     	;# 
  4975  0F27                     	;# 
  4976  0F28                     	;# 
  4977  0F29                     	;# 
  4978  0F2A                     	;# 
  4979  0F2B                     	;# 
  4980  0F2C                     	;# 
  4981  0F2D                     	;# 
  4982  0F2E                     	;# 
  4983  0F2F                     	;# 
  4984  0F30                     	;# 
  4985  0F31                     	;# 
  4986  0F32                     	;# 
  4987  0F33                     	;# 
  4988  0F34                     	;# 
  4989  0F35                     	;# 
  4990  0F36                     	;# 
  4991  0F37                     	;# 
  4992  0FE4                     	;# 
  4993  0FE5                     	;# 
  4994  0FE6                     	;# 
  4995  0FE7                     	;# 
  4996  0FE8                     	;# 
  4997  0FE9                     	;# 
  4998  0FEA                     	;# 
  4999  0FEB                     	;# 
  5000  0FED                     	;# 
  5001  0FEE                     	;# 
  5002  0FEF                     	;# 
  5003  0000                     	;# 
  5004  0001                     	;# 
  5005  0002                     	;# 
  5006  0003                     	;# 
  5007  0004                     	;# 
  5008  0005                     	;# 
  5009  0006                     	;# 
  5010  0007                     	;# 
  5011  0008                     	;# 
  5012  0009                     	;# 
  5013  000A                     	;# 
  5014  000B                     	;# 
  5015  000C                     	;# 
  5016  000D                     	;# 
  5017  000E                     	;# 
  5018  0010                     	;# 
  5019  0011                     	;# 
  5020  0012                     	;# 
  5021  0013                     	;# 
  5022  0014                     	;# 
  5023  0015                     	;# 
  5024  0016                     	;# 
  5025  0016                     	;# 
  5026  0017                     	;# 
  5027  0018                     	;# 
  5028  0019                     	;# 
  5029  001A                     	;# 
  5030  001A                     	;# 
  5031  001B                     	;# 
  5032  001B                     	;# 
  5033  001C                     	;# 
  5034  001D                     	;# 
  5035  001E                     	;# 
  5036  001F                     	;# 
  5037  008C                     	;# 
  5038  008D                     	;# 
  5039  008E                     	;# 
  5040  0090                     	;# 
  5041  0091                     	;# 
  5042  0092                     	;# 
  5043  0093                     	;# 
  5044  0094                     	;# 
  5045  0095                     	;# 
  5046  0096                     	;# 
  5047  0098                     	;# 
  5048  0099                     	;# 
  5049  009A                     	;# 
  5050  009B                     	;# 
  5051  009B                     	;# 
  5052  009C                     	;# 
  5053  009D                     	;# 
  5054  009E                     	;# 
  5055  009F                     	;# 
  5056  010C                     	;# 
  5057  010D                     	;# 
  5058  010E                     	;# 
  5059  0111                     	;# 
  5060  0112                     	;# 
  5061  0113                     	;# 
  5062  0114                     	;# 
  5063  0115                     	;# 
  5064  0116                     	;# 
  5065  0117                     	;# 
  5066  0118                     	;# 
  5067  0119                     	;# 
  5068  011C                     	;# 
  5069  018C                     	;# 
  5070  018D                     	;# 
  5071  018E                     	;# 
  5072  0191                     	;# 
  5073  0191                     	;# 
  5074  0192                     	;# 
  5075  0193                     	;# 
  5076  0193                     	;# 
  5077  0194                     	;# 
  5078  0195                     	;# 
  5079  0196                     	;# 
  5080  0197                     	;# 
  5081  0199                     	;# 
  5082  0199                     	;# 
  5083  0199                     	;# 
  5084  019A                     	;# 
  5085  019A                     	;# 
  5086  019A                     	;# 
  5087  019B                     	;# 
  5088  019B                     	;# 
  5089  019B                     	;# 
  5090  019B                     	;# 
  5091  019B                     	;# 
  5092  019C                     	;# 
  5093  019C                     	;# 
  5094  019C                     	;# 
  5095  019D                     	;# 
  5096  019D                     	;# 
  5097  019D                     	;# 
  5098  019E                     	;# 
  5099  019E                     	;# 
  5100  019E                     	;# 
  5101  019F                     	;# 
  5102  019F                     	;# 
  5103  019F                     	;# 
  5104  019F                     	;# 
  5105  019F                     	;# 
  5106  020C                     	;# 
  5107  020D                     	;# 
  5108  020E                     	;# 
  5109  0211                     	;# 
  5110  0211                     	;# 
  5111  0212                     	;# 
  5112  0212                     	;# 
  5113  0213                     	;# 
  5114  0213                     	;# 
  5115  0214                     	;# 
  5116  0214                     	;# 
  5117  0215                     	;# 
  5118  0215                     	;# 
  5119  0215                     	;# 
  5120  0215                     	;# 
  5121  0216                     	;# 
  5122  0216                     	;# 
  5123  0217                     	;# 
  5124  0217                     	;# 
  5125  028C                     	;# 
  5126  028D                     	;# 
  5127  028E                     	;# 
  5128  0291                     	;# 
  5129  0291                     	;# 
  5130  0292                     	;# 
  5131  0293                     	;# 
  5132  0294                     	;# 
  5133  0298                     	;# 
  5134  0298                     	;# 
  5135  0299                     	;# 
  5136  029A                     	;# 
  5137  029B                     	;# 
  5138  029E                     	;# 
  5139  030C                     	;# 
  5140  030D                     	;# 
  5141  030E                     	;# 
  5142  038C                     	;# 
  5143  038D                     	;# 
  5144  038E                     	;# 
  5145  0391                     	;# 
  5146  0392                     	;# 
  5147  0393                     	;# 
  5148  0394                     	;# 
  5149  0395                     	;# 
  5150  0396                     	;# 
  5151  0397                     	;# 
  5152  0398                     	;# 
  5153  0399                     	;# 
  5154  040E                     	;# 
  5155  0413                     	;# 
  5156  0413                     	;# 
  5157  0414                     	;# 
  5158  0414                     	;# 
  5159  0415                     	;# 
  5160  0416                     	;# 
  5161  0417                     	;# 
  5162  0418                     	;# 
  5163  041A                     	;# 
  5164  041A                     	;# 
  5165  041B                     	;# 
  5166  041B                     	;# 
  5167  041C                     	;# 
  5168  041D                     	;# 
  5169  041E                     	;# 
  5170  041F                     	;# 
  5171  0493                     	;# 
  5172  0494                     	;# 
  5173  0495                     	;# 
  5174  0496                     	;# 
  5175  049A                     	;# 
  5176  049B                     	;# 
  5177  049C                     	;# 
  5178  049D                     	;# 
  5179  058C                     	;# 
  5180  058C                     	;# 
  5181  058D                     	;# 
  5182  058E                     	;# 
  5183  058E                     	;# 
  5184  058F                     	;# 
  5185  0590                     	;# 
  5186  0590                     	;# 
  5187  0591                     	;# 
  5188  0592                     	;# 
  5189  0592                     	;# 
  5190  0593                     	;# 
  5191  0594                     	;# 
  5192  0594                     	;# 
  5193  0595                     	;# 
  5194  0596                     	;# 
  5195  0596                     	;# 
  5196  0597                     	;# 
  5197  0598                     	;# 
  5198  0599                     	;# 
  5199  059A                     	;# 
  5200  059B                     	;# 
  5201  059B                     	;# 
  5202  059C                     	;# 
  5203  059D                     	;# 
  5204  060C                     	;# 
  5205  060C                     	;# 
  5206  060D                     	;# 
  5207  060E                     	;# 
  5208  060F                     	;# 
  5209  060F                     	;# 
  5210  0610                     	;# 
  5211  0611                     	;# 
  5212  0612                     	;# 
  5213  0613                     	;# 
  5214  0614                     	;# 
  5215  0617                     	;# 
  5216  0618                     	;# 
  5217  0619                     	;# 
  5218  061A                     	;# 
  5219  061B                     	;# 
  5220  061C                     	;# 
  5221  0691                     	;# 
  5222  0692                     	;# 
  5223  0693                     	;# 
  5224  0694                     	;# 
  5225  0695                     	;# 
  5226  0696                     	;# 
  5227  0697                     	;# 
  5228  0699                     	;# 
  5229  069A                     	;# 
  5230  0711                     	;# 
  5231  0712                     	;# 
  5232  0713                     	;# 
  5233  0714                     	;# 
  5234  0715                     	;# 
  5235  0718                     	;# 
  5236  0718                     	;# 
  5237  0719                     	;# 
  5238  071A                     	;# 
  5239  071A                     	;# 
  5240  071B                     	;# 
  5241  071C                     	;# 
  5242  071D                     	;# 
  5243  0791                     	;# 
  5244  0791                     	;# 
  5245  0792                     	;# 
  5246  0793                     	;# 
  5247  0793                     	;# 
  5248  0794                     	;# 
  5249  0795                     	;# 
  5250  0795                     	;# 
  5251  0796                     	;# 
  5252  0797                     	;# 
  5253  0797                     	;# 
  5254  0798                     	;# 
  5255  0799                     	;# 
  5256  079A                     	;# 
  5257  080C                     	;# 
  5258  080C                     	;# 
  5259  080D                     	;# 
  5260  080E                     	;# 
  5261  080E                     	;# 
  5262  080F                     	;# 
  5263  0810                     	;# 
  5264  0810                     	;# 
  5265  0811                     	;# 
  5266  0812                     	;# 
  5267  0812                     	;# 
  5268  0813                     	;# 
  5269  0814                     	;# 
  5270  0815                     	;# 
  5271  0816                     	;# 
  5272  0817                     	;# 
  5273  0818                     	;# 
  5274  0819                     	;# 
  5275  081A                     	;# 
  5276  081A                     	;# 
  5277  081B                     	;# 
  5278  081C                     	;# 
  5279  081C                     	;# 
  5280  081D                     	;# 
  5281  088C                     	;# 
  5282  088D                     	;# 
  5283  088E                     	;# 
  5284  088F                     	;# 
  5285  088F                     	;# 
  5286  0890                     	;# 
  5287  0891                     	;# 
  5288  0892                     	;# 
  5289  0893                     	;# 
  5290  0893                     	;# 
  5291  0894                     	;# 
  5292  0895                     	;# 
  5293  0896                     	;# 
  5294  0897                     	;# 
  5295  0897                     	;# 
  5296  0898                     	;# 
  5297  0899                     	;# 
  5298  0D8C                     	;# 
  5299  0D8C                     	;# 
  5300  0D8D                     	;# 
  5301  0D8E                     	;# 
  5302  0D8F                     	;# 
  5303  0D8F                     	;# 
  5304  0D90                     	;# 
  5305  0D91                     	;# 
  5306  0D92                     	;# 
  5307  0D92                     	;# 
  5308  0D93                     	;# 
  5309  0D94                     	;# 
  5310  0D95                     	;# 
  5311  0D95                     	;# 
  5312  0D96                     	;# 
  5313  0D97                     	;# 
  5314  0D98                     	;# 
  5315  0D99                     	;# 
  5316  0D9A                     	;# 
  5317  0D9B                     	;# 
  5318  0D9C                     	;# 
  5319  0D9D                     	;# 
  5320  0D9E                     	;# 
  5321  0D9E                     	;# 
  5322  0D9F                     	;# 
  5323  0DA0                     	;# 
  5324  0DA1                     	;# 
  5325  0DA1                     	;# 
  5326  0DA2                     	;# 
  5327  0DA3                     	;# 
  5328  0DA4                     	;# 
  5329  0DA4                     	;# 
  5330  0DA5                     	;# 
  5331  0DA6                     	;# 
  5332  0DA7                     	;# 
  5333  0DA7                     	;# 
  5334  0DA8                     	;# 
  5335  0DA9                     	;# 
  5336  0DAA                     	;# 
  5337  0DAB                     	;# 
  5338  0DAC                     	;# 
  5339  0DAD                     	;# 
  5340  0DAE                     	;# 
  5341  0DAF                     	;# 
  5342  0E0F                     	;# 
  5343  0E10                     	;# 
  5344  0E11                     	;# 
  5345  0E12                     	;# 
  5346  0E13                     	;# 
  5347  0E14                     	;# 
  5348  0E15                     	;# 
  5349  0E16                     	;# 
  5350  0E17                     	;# 
  5351  0E18                     	;# 
  5352  0E19                     	;# 
  5353  0E1A                     	;# 
  5354  0E1B                     	;# 
  5355  0E1C                     	;# 
  5356  0E1D                     	;# 
  5357  0E1E                     	;# 
  5358  0E1F                     	;# 
  5359  0E20                     	;# 
  5360  0E21                     	;# 
  5361  0E22                     	;# 
  5362  0E23                     	;# 
  5363  0E24                     	;# 
  5364  0E25                     	;# 
  5365  0E26                     	;# 
  5366  0E27                     	;# 
  5367  0E28                     	;# 
  5368  0E29                     	;# 
  5369  0E2A                     	;# 
  5370  0E2B                     	;# 
  5371  0E2C                     	;# 
  5372  0E2D                     	;# 
  5373  0E2E                     	;# 
  5374  0E90                     	;# 
  5375  0E91                     	;# 
  5376  0E92                     	;# 
  5377  0E94                     	;# 
  5378  0E95                     	;# 
  5379  0E9C                     	;# 
  5380  0E9D                     	;# 
  5381  0E9E                     	;# 
  5382  0E9F                     	;# 
  5383  0EA0                     	;# 
  5384  0EA1                     	;# 
  5385  0EA2                     	;# 
  5386  0EA3                     	;# 
  5387  0EA4                     	;# 
  5388  0EA5                     	;# 
  5389  0EA6                     	;# 
  5390  0EA7                     	;# 
  5391  0F0F                     	;# 
  5392  0F10                     	;# 
  5393  0F11                     	;# 
  5394  0F12                     	;# 
  5395  0F13                     	;# 
  5396  0F14                     	;# 
  5397  0F15                     	;# 
  5398  0F16                     	;# 
  5399  0F17                     	;# 
  5400  0F18                     	;# 
  5401  0F19                     	;# 
  5402  0F1A                     	;# 
  5403  0F1B                     	;# 
  5404  0F1C                     	;# 
  5405  0F1D                     	;# 
  5406  0F1E                     	;# 
  5407  0F1F                     	;# 
  5408  0F20                     	;# 
  5409  0F21                     	;# 
  5410  0F22                     	;# 
  5411  0F23                     	;# 
  5412  0F24                     	;# 
  5413  0F25                     	;# 
  5414  0F26                     	;# 
  5415  0F27                     	;# 
  5416  0F28                     	;# 
  5417  0F29                     	;# 
  5418  0F2A                     	;# 
  5419  0F2B                     	;# 
  5420  0F2C                     	;# 
  5421  0F2D                     	;# 
  5422  0F2E                     	;# 
  5423  0F2F                     	;# 
  5424  0F30                     	;# 
  5425  0F31                     	;# 
  5426  0F32                     	;# 
  5427  0F33                     	;# 
  5428  0F34                     	;# 
  5429  0F35                     	;# 
  5430  0F36                     	;# 
  5431  0F37                     	;# 
  5432  0FE4                     	;# 
  5433  0FE5                     	;# 
  5434  0FE6                     	;# 
  5435  0FE7                     	;# 
  5436  0FE8                     	;# 
  5437  0FE9                     	;# 
  5438  0FEA                     	;# 
  5439  0FEB                     	;# 
  5440  0FED                     	;# 
  5441  0FEE                     	;# 
  5442  0FEF                     	;# 
  5443  0000                     	;# 
  5444  0001                     	;# 
  5445  0002                     	;# 
  5446  0003                     	;# 
  5447  0004                     	;# 
  5448  0005                     	;# 
  5449  0006                     	;# 
  5450  0007                     	;# 
  5451  0008                     	;# 
  5452  0009                     	;# 
  5453  000A                     	;# 
  5454  000B                     	;# 
  5455  000C                     	;# 
  5456  000D                     	;# 
  5457  000E                     	;# 
  5458  0010                     	;# 
  5459  0011                     	;# 
  5460  0012                     	;# 
  5461  0013                     	;# 
  5462  0014                     	;# 
  5463  0015                     	;# 
  5464  0016                     	;# 
  5465  0016                     	;# 
  5466  0017                     	;# 
  5467  0018                     	;# 
  5468  0019                     	;# 
  5469  001A                     	;# 
  5470  001A                     	;# 
  5471  001B                     	;# 
  5472  001B                     	;# 
  5473  001C                     	;# 
  5474  001D                     	;# 
  5475  001E                     	;# 
  5476  001F                     	;# 
  5477  008C                     	;# 
  5478  008D                     	;# 
  5479  008E                     	;# 
  5480  0090                     	;# 
  5481  0091                     	;# 
  5482  0092                     	;# 
  5483  0093                     	;# 
  5484  0094                     	;# 
  5485  0095                     	;# 
  5486  0096                     	;# 
  5487  0098                     	;# 
  5488  0099                     	;# 
  5489  009A                     	;# 
  5490  009B                     	;# 
  5491  009B                     	;# 
  5492  009C                     	;# 
  5493  009D                     	;# 
  5494  009E                     	;# 
  5495  009F                     	;# 
  5496  010C                     	;# 
  5497  010D                     	;# 
  5498  010E                     	;# 
  5499  0111                     	;# 
  5500  0112                     	;# 
  5501  0113                     	;# 
  5502  0114                     	;# 
  5503  0115                     	;# 
  5504  0116                     	;# 
  5505  0117                     	;# 
  5506  0118                     	;# 
  5507  0119                     	;# 
  5508  011C                     	;# 
  5509  018C                     	;# 
  5510  018D                     	;# 
  5511  018E                     	;# 
  5512  0191                     	;# 
  5513  0191                     	;# 
  5514  0192                     	;# 
  5515  0193                     	;# 
  5516  0193                     	;# 
  5517  0194                     	;# 
  5518  0195                     	;# 
  5519  0196                     	;# 
  5520  0197                     	;# 
  5521  0199                     	;# 
  5522  0199                     	;# 
  5523  0199                     	;# 
  5524  019A                     	;# 
  5525  019A                     	;# 
  5526  019A                     	;# 
  5527  019B                     	;# 
  5528  019B                     	;# 
  5529  019B                     	;# 
  5530  019B                     	;# 
  5531  019B                     	;# 
  5532  019C                     	;# 
  5533  019C                     	;# 
  5534  019C                     	;# 
  5535  019D                     	;# 
  5536  019D                     	;# 
  5537  019D                     	;# 
  5538  019E                     	;# 
  5539  019E                     	;# 
  5540  019E                     	;# 
  5541  019F                     	;# 
  5542  019F                     	;# 
  5543  019F                     	;# 
  5544  019F                     	;# 
  5545  019F                     	;# 
  5546  020C                     	;# 
  5547  020D                     	;# 
  5548  020E                     	;# 
  5549  0211                     	;# 
  5550  0211                     	;# 
  5551  0212                     	;# 
  5552  0212                     	;# 
  5553  0213                     	;# 
  5554  0213                     	;# 
  5555  0214                     	;# 
  5556  0214                     	;# 
  5557  0215                     	;# 
  5558  0215                     	;# 
  5559  0215                     	;# 
  5560  0215                     	;# 
  5561  0216                     	;# 
  5562  0216                     	;# 
  5563  0217                     	;# 
  5564  0217                     	;# 
  5565  028C                     	;# 
  5566  028D                     	;# 
  5567  028E                     	;# 
  5568  0291                     	;# 
  5569  0291                     	;# 
  5570  0292                     	;# 
  5571  0293                     	;# 
  5572  0294                     	;# 
  5573  0298                     	;# 
  5574  0298                     	;# 
  5575  0299                     	;# 
  5576  029A                     	;# 
  5577  029B                     	;# 
  5578  029E                     	;# 
  5579  030C                     	;# 
  5580  030D                     	;# 
  5581  030E                     	;# 
  5582  038C                     	;# 
  5583  038D                     	;# 
  5584  038E                     	;# 
  5585  0391                     	;# 
  5586  0392                     	;# 
  5587  0393                     	;# 
  5588  0394                     	;# 
  5589  0395                     	;# 
  5590  0396                     	;# 
  5591  0397                     	;# 
  5592  0398                     	;# 
  5593  0399                     	;# 
  5594  040E                     	;# 
  5595  0413                     	;# 
  5596  0413                     	;# 
  5597  0414                     	;# 
  5598  0414                     	;# 
  5599  0415                     	;# 
  5600  0416                     	;# 
  5601  0417                     	;# 
  5602  0418                     	;# 
  5603  041A                     	;# 
  5604  041A                     	;# 
  5605  041B                     	;# 
  5606  041B                     	;# 
  5607  041C                     	;# 
  5608  041D                     	;# 
  5609  041E                     	;# 
  5610  041F                     	;# 
  5611  0493                     	;# 
  5612  0494                     	;# 
  5613  0495                     	;# 
  5614  0496                     	;# 
  5615  049A                     	;# 
  5616  049B                     	;# 
  5617  049C                     	;# 
  5618  049D                     	;# 
  5619  058C                     	;# 
  5620  058C                     	;# 
  5621  058D                     	;# 
  5622  058E                     	;# 
  5623  058E                     	;# 
  5624  058F                     	;# 
  5625  0590                     	;# 
  5626  0590                     	;# 
  5627  0591                     	;# 
  5628  0592                     	;# 
  5629  0592                     	;# 
  5630  0593                     	;# 
  5631  0594                     	;# 
  5632  0594                     	;# 
  5633  0595                     	;# 
  5634  0596                     	;# 
  5635  0596                     	;# 
  5636  0597                     	;# 
  5637  0598                     	;# 
  5638  0599                     	;# 
  5639  059A                     	;# 
  5640  059B                     	;# 
  5641  059B                     	;# 
  5642  059C                     	;# 
  5643  059D                     	;# 
  5644  060C                     	;# 
  5645  060C                     	;# 
  5646  060D                     	;# 
  5647  060E                     	;# 
  5648  060F                     	;# 
  5649  060F                     	;# 
  5650  0610                     	;# 
  5651  0611                     	;# 
  5652  0612                     	;# 
  5653  0613                     	;# 
  5654  0614                     	;# 
  5655  0617                     	;# 
  5656  0618                     	;# 
  5657  0619                     	;# 
  5658  061A                     	;# 
  5659  061B                     	;# 
  5660  061C                     	;# 
  5661  0691                     	;# 
  5662  0692                     	;# 
  5663  0693                     	;# 
  5664  0694                     	;# 
  5665  0695                     	;# 
  5666  0696                     	;# 
  5667  0697                     	;# 
  5668  0699                     	;# 
  5669  069A                     	;# 
  5670  0711                     	;# 
  5671  0712                     	;# 
  5672  0713                     	;# 
  5673  0714                     	;# 
  5674  0715                     	;# 
  5675  0718                     	;# 
  5676  0718                     	;# 
  5677  0719                     	;# 
  5678  071A                     	;# 
  5679  071A                     	;# 
  5680  071B                     	;# 
  5681  071C                     	;# 
  5682  071D                     	;# 
  5683  0791                     	;# 
  5684  0791                     	;# 
  5685  0792                     	;# 
  5686  0793                     	;# 
  5687  0793                     	;# 
  5688  0794                     	;# 
  5689  0795                     	;# 
  5690  0795                     	;# 
  5691  0796                     	;# 
  5692  0797                     	;# 
  5693  0797                     	;# 
  5694  0798                     	;# 
  5695  0799                     	;# 
  5696  079A                     	;# 
  5697  080C                     	;# 
  5698  080C                     	;# 
  5699  080D                     	;# 
  5700  080E                     	;# 
  5701  080E                     	;# 
  5702  080F                     	;# 
  5703  0810                     	;# 
  5704  0810                     	;# 
  5705  0811                     	;# 
  5706  0812                     	;# 
  5707  0812                     	;# 
  5708  0813                     	;# 
  5709  0814                     	;# 
  5710  0815                     	;# 
  5711  0816                     	;# 
  5712  0817                     	;# 
  5713  0818                     	;# 
  5714  0819                     	;# 
  5715  081A                     	;# 
  5716  081A                     	;# 
  5717  081B                     	;# 
  5718  081C                     	;# 
  5719  081C                     	;# 
  5720  081D                     	;# 
  5721  088C                     	;# 
  5722  088D                     	;# 
  5723  088E                     	;# 
  5724  088F                     	;# 
  5725  088F                     	;# 
  5726  0890                     	;# 
  5727  0891                     	;# 
  5728  0892                     	;# 
  5729  0893                     	;# 
  5730  0893                     	;# 
  5731  0894                     	;# 
  5732  0895                     	;# 
  5733  0896                     	;# 
  5734  0897                     	;# 
  5735  0897                     	;# 
  5736  0898                     	;# 
  5737  0899                     	;# 
  5738  0D8C                     	;# 
  5739  0D8C                     	;# 
  5740  0D8D                     	;# 
  5741  0D8E                     	;# 
  5742  0D8F                     	;# 
  5743  0D8F                     	;# 
  5744  0D90                     	;# 
  5745  0D91                     	;# 
  5746  0D92                     	;# 
  5747  0D92                     	;# 
  5748  0D93                     	;# 
  5749  0D94                     	;# 
  5750  0D95                     	;# 
  5751  0D95                     	;# 
  5752  0D96                     	;# 
  5753  0D97                     	;# 
  5754  0D98                     	;# 
  5755  0D99                     	;# 
  5756  0D9A                     	;# 
  5757  0D9B                     	;# 
  5758  0D9C                     	;# 
  5759  0D9D                     	;# 
  5760  0D9E                     	;# 
  5761  0D9E                     	;# 
  5762  0D9F                     	;# 
  5763  0DA0                     	;# 
  5764  0DA1                     	;# 
  5765  0DA1                     	;# 
  5766  0DA2                     	;# 
  5767  0DA3                     	;# 
  5768  0DA4                     	;# 
  5769  0DA4                     	;# 
  5770  0DA5                     	;# 
  5771  0DA6                     	;# 
  5772  0DA7                     	;# 
  5773  0DA7                     	;# 
  5774  0DA8                     	;# 
  5775  0DA9                     	;# 
  5776  0DAA                     	;# 
  5777  0DAB                     	;# 
  5778  0DAC                     	;# 
  5779  0DAD                     	;# 
  5780  0DAE                     	;# 
  5781  0DAF                     	;# 
  5782  0E0F                     	;# 
  5783  0E10                     	;# 
  5784  0E11                     	;# 
  5785  0E12                     	;# 
  5786  0E13                     	;# 
  5787  0E14                     	;# 
  5788  0E15                     	;# 
  5789  0E16                     	;# 
  5790  0E17                     	;# 
  5791  0E18                     	;# 
  5792  0E19                     	;# 
  5793  0E1A                     	;# 
  5794  0E1B                     	;# 
  5795  0E1C                     	;# 
  5796  0E1D                     	;# 
  5797  0E1E                     	;# 
  5798  0E1F                     	;# 
  5799  0E20                     	;# 
  5800  0E21                     	;# 
  5801  0E22                     	;# 
  5802  0E23                     	;# 
  5803  0E24                     	;# 
  5804  0E25                     	;# 
  5805  0E26                     	;# 
  5806  0E27                     	;# 
  5807  0E28                     	;# 
  5808  0E29                     	;# 
  5809  0E2A                     	;# 
  5810  0E2B                     	;# 
  5811  0E2C                     	;# 
  5812  0E2D                     	;# 
  5813  0E2E                     	;# 
  5814  0E90                     	;# 
  5815  0E91                     	;# 
  5816  0E92                     	;# 
  5817  0E94                     	;# 
  5818  0E95                     	;# 
  5819  0E9C                     	;# 
  5820  0E9D                     	;# 
  5821  0E9E                     	;# 
  5822  0E9F                     	;# 
  5823  0EA0                     	;# 
  5824  0EA1                     	;# 
  5825  0EA2                     	;# 
  5826  0EA3                     	;# 
  5827  0EA4                     	;# 
  5828  0EA5                     	;# 
  5829  0EA6                     	;# 
  5830  0EA7                     	;# 
  5831  0F0F                     	;# 
  5832  0F10                     	;# 
  5833  0F11                     	;# 
  5834  0F12                     	;# 
  5835  0F13                     	;# 
  5836  0F14                     	;# 
  5837  0F15                     	;# 
  5838  0F16                     	;# 
  5839  0F17                     	;# 
  5840  0F18                     	;# 
  5841  0F19                     	;# 
  5842  0F1A                     	;# 
  5843  0F1B                     	;# 
  5844  0F1C                     	;# 
  5845  0F1D                     	;# 
  5846  0F1E                     	;# 
  5847  0F1F                     	;# 
  5848  0F20                     	;# 
  5849  0F21                     	;# 
  5850  0F22                     	;# 
  5851  0F23                     	;# 
  5852  0F24                     	;# 
  5853  0F25                     	;# 
  5854  0F26                     	;# 
  5855  0F27                     	;# 
  5856  0F28                     	;# 
  5857  0F29                     	;# 
  5858  0F2A                     	;# 
  5859  0F2B                     	;# 
  5860  0F2C                     	;# 
  5861  0F2D                     	;# 
  5862  0F2E                     	;# 
  5863  0F2F                     	;# 
  5864  0F30                     	;# 
  5865  0F31                     	;# 
  5866  0F32                     	;# 
  5867  0F33                     	;# 
  5868  0F34                     	;# 
  5869  0F35                     	;# 
  5870  0F36                     	;# 
  5871  0F37                     	;# 
  5872  0FE4                     	;# 
  5873  0FE5                     	;# 
  5874  0FE6                     	;# 
  5875  0FE7                     	;# 
  5876  0FE8                     	;# 
  5877  0FE9                     	;# 
  5878  0FEA                     	;# 
  5879  0FEB                     	;# 
  5880  0FED                     	;# 
  5881  0FEE                     	;# 
  5882  0FEF                     	;# 
  5883  0000                     	;# 
  5884  0001                     	;# 
  5885  0002                     	;# 
  5886  0003                     	;# 
  5887  0004                     	;# 
  5888  0005                     	;# 
  5889  0006                     	;# 
  5890  0007                     	;# 
  5891  0008                     	;# 
  5892  0009                     	;# 
  5893  000A                     	;# 
  5894  000B                     	;# 
  5895  000C                     	;# 
  5896  000D                     	;# 
  5897  000E                     	;# 
  5898  0010                     	;# 
  5899  0011                     	;# 
  5900  0012                     	;# 
  5901  0013                     	;# 
  5902  0014                     	;# 
  5903  0015                     	;# 
  5904  0016                     	;# 
  5905  0016                     	;# 
  5906  0017                     	;# 
  5907  0018                     	;# 
  5908  0019                     	;# 
  5909  001A                     	;# 
  5910  001A                     	;# 
  5911  001B                     	;# 
  5912  001B                     	;# 
  5913  001C                     	;# 
  5914  001D                     	;# 
  5915  001E                     	;# 
  5916  001F                     	;# 
  5917  008C                     	;# 
  5918  008D                     	;# 
  5919  008E                     	;# 
  5920  0090                     	;# 
  5921  0091                     	;# 
  5922  0092                     	;# 
  5923  0093                     	;# 
  5924  0094                     	;# 
  5925  0095                     	;# 
  5926  0096                     	;# 
  5927  0098                     	;# 
  5928  0099                     	;# 
  5929  009A                     	;# 
  5930  009B                     	;# 
  5931  009B                     	;# 
  5932  009C                     	;# 
  5933  009D                     	;# 
  5934  009E                     	;# 
  5935  009F                     	;# 
  5936  010C                     	;# 
  5937  010D                     	;# 
  5938  010E                     	;# 
  5939  0111                     	;# 
  5940  0112                     	;# 
  5941  0113                     	;# 
  5942  0114                     	;# 
  5943  0115                     	;# 
  5944  0116                     	;# 
  5945  0117                     	;# 
  5946  0118                     	;# 
  5947  0119                     	;# 
  5948  011C                     	;# 
  5949  018C                     	;# 
  5950  018D                     	;# 
  5951  018E                     	;# 
  5952  0191                     	;# 
  5953  0191                     	;# 
  5954  0192                     	;# 
  5955  0193                     	;# 
  5956  0193                     	;# 
  5957  0194                     	;# 
  5958  0195                     	;# 
  5959  0196                     	;# 
  5960  0197                     	;# 
  5961  0199                     	;# 
  5962  0199                     	;# 
  5963  0199                     	;# 
  5964  019A                     	;# 
  5965  019A                     	;# 
  5966  019A                     	;# 
  5967  019B                     	;# 
  5968  019B                     	;# 
  5969  019B                     	;# 
  5970  019B                     	;# 
  5971  019B                     	;# 
  5972  019C                     	;# 
  5973  019C                     	;# 
  5974  019C                     	;# 
  5975  019D                     	;# 
  5976  019D                     	;# 
  5977  019D                     	;# 
  5978  019E                     	;# 
  5979  019E                     	;# 
  5980  019E                     	;# 
  5981  019F                     	;# 
  5982  019F                     	;# 
  5983  019F                     	;# 
  5984  019F                     	;# 
  5985  019F                     	;# 
  5986  020C                     	;# 
  5987  020D                     	;# 
  5988  020E                     	;# 
  5989  0211                     	;# 
  5990  0211                     	;# 
  5991  0212                     	;# 
  5992  0212                     	;# 
  5993  0213                     	;# 
  5994  0213                     	;# 
  5995  0214                     	;# 
  5996  0214                     	;# 
  5997  0215                     	;# 
  5998  0215                     	;# 
  5999  0215                     	;# 
  6000  0215                     	;# 
  6001  0216                     	;# 
  6002  0216                     	;# 
  6003  0217                     	;# 
  6004  0217                     	;# 
  6005  028C                     	;# 
  6006  028D                     	;# 
  6007  028E                     	;# 
  6008  0291                     	;# 
  6009  0291                     	;# 
  6010  0292                     	;# 
  6011  0293                     	;# 
  6012  0294                     	;# 
  6013  0298                     	;# 
  6014  0298                     	;# 
  6015  0299                     	;# 
  6016  029A                     	;# 
  6017  029B                     	;# 
  6018  029E                     	;# 
  6019  030C                     	;# 
  6020  030D                     	;# 
  6021  030E                     	;# 
  6022  038C                     	;# 
  6023  038D                     	;# 
  6024  038E                     	;# 
  6025  0391                     	;# 
  6026  0392                     	;# 
  6027  0393                     	;# 
  6028  0394                     	;# 
  6029  0395                     	;# 
  6030  0396                     	;# 
  6031  0397                     	;# 
  6032  0398                     	;# 
  6033  0399                     	;# 
  6034  040E                     	;# 
  6035  0413                     	;# 
  6036  0413                     	;# 
  6037  0414                     	;# 
  6038  0414                     	;# 
  6039  0415                     	;# 
  6040  0416                     	;# 
  6041  0417                     	;# 
  6042  0418                     	;# 
  6043  041A                     	;# 
  6044  041A                     	;# 
  6045  041B                     	;# 
  6046  041B                     	;# 
  6047  041C                     	;# 
  6048  041D                     	;# 
  6049  041E                     	;# 
  6050  041F                     	;# 
  6051  0493                     	;# 
  6052  0494                     	;# 
  6053  0495                     	;# 
  6054  0496                     	;# 
  6055  049A                     	;# 
  6056  049B                     	;# 
  6057  049C                     	;# 
  6058  049D                     	;# 
  6059  058C                     	;# 
  6060  058C                     	;# 
  6061  058D                     	;# 
  6062  058E                     	;# 
  6063  058E                     	;# 
  6064  058F                     	;# 
  6065  0590                     	;# 
  6066  0590                     	;# 
  6067  0591                     	;# 
  6068  0592                     	;# 
  6069  0592                     	;# 
  6070  0593                     	;# 
  6071  0594                     	;# 
  6072  0594                     	;# 
  6073  0595                     	;# 
  6074  0596                     	;# 
  6075  0596                     	;# 
  6076  0597                     	;# 
  6077  0598                     	;# 
  6078  0599                     	;# 
  6079  059A                     	;# 
  6080  059B                     	;# 
  6081  059B                     	;# 
  6082  059C                     	;# 
  6083  059D                     	;# 
  6084  060C                     	;# 
  6085  060C                     	;# 
  6086  060D                     	;# 
  6087  060E                     	;# 
  6088  060F                     	;# 
  6089  060F                     	;# 
  6090  0610                     	;# 
  6091  0611                     	;# 
  6092  0612                     	;# 
  6093  0613                     	;# 
  6094  0614                     	;# 
  6095  0617                     	;# 
  6096  0618                     	;# 
  6097  0619                     	;# 
  6098  061A                     	;# 
  6099  061B                     	;# 
  6100  061C                     	;# 
  6101  0691                     	;# 
  6102  0692                     	;# 
  6103  0693                     	;# 
  6104  0694                     	;# 
  6105  0695                     	;# 
  6106  0696                     	;# 
  6107  0697                     	;# 
  6108  0699                     	;# 
  6109  069A                     	;# 
  6110  0711                     	;# 
  6111  0712                     	;# 
  6112  0713                     	;# 
  6113  0714                     	;# 
  6114  0715                     	;# 
  6115  0718                     	;# 
  6116  0718                     	;# 
  6117  0719                     	;# 
  6118  071A                     	;# 
  6119  071A                     	;# 
  6120  071B                     	;# 
  6121  071C                     	;# 
  6122  071D                     	;# 
  6123  0791                     	;# 
  6124  0791                     	;# 
  6125  0792                     	;# 
  6126  0793                     	;# 
  6127  0793                     	;# 
  6128  0794                     	;# 
  6129  0795                     	;# 
  6130  0795                     	;# 
  6131  0796                     	;# 
  6132  0797                     	;# 
  6133  0797                     	;# 
  6134  0798                     	;# 
  6135  0799                     	;# 
  6136  079A                     	;# 
  6137  080C                     	;# 
  6138  080C                     	;# 
  6139  080D                     	;# 
  6140  080E                     	;# 
  6141  080E                     	;# 
  6142  080F                     	;# 
  6143  0810                     	;# 
  6144  0810                     	;# 
  6145  0811                     	;# 
  6146  0812                     	;# 
  6147  0812                     	;# 
  6148  0813                     	;# 
  6149  0814                     	;# 
  6150  0815                     	;# 
  6151  0816                     	;# 
  6152  0817                     	;# 
  6153  0818                     	;# 
  6154  0819                     	;# 
  6155  081A                     	;# 
  6156  081A                     	;# 
  6157  081B                     	;# 
  6158  081C                     	;# 
  6159  081C                     	;# 
  6160  081D                     	;# 
  6161  088C                     	;# 
  6162  088D                     	;# 
  6163  088E                     	;# 
  6164  088F                     	;# 
  6165  088F                     	;# 
  6166  0890                     	;# 
  6167  0891                     	;# 
  6168  0892                     	;# 
  6169  0893                     	;# 
  6170  0893                     	;# 
  6171  0894                     	;# 
  6172  0895                     	;# 
  6173  0896                     	;# 
  6174  0897                     	;# 
  6175  0897                     	;# 
  6176  0898                     	;# 
  6177  0899                     	;# 
  6178  0D8C                     	;# 
  6179  0D8C                     	;# 
  6180  0D8D                     	;# 
  6181  0D8E                     	;# 
  6182  0D8F                     	;# 
  6183  0D8F                     	;# 
  6184  0D90                     	;# 
  6185  0D91                     	;# 
  6186  0D92                     	;# 
  6187  0D92                     	;# 
  6188  0D93                     	;# 
  6189  0D94                     	;# 
  6190  0D95                     	;# 
  6191  0D95                     	;# 
  6192  0D96                     	;# 
  6193  0D97                     	;# 
  6194  0D98                     	;# 
  6195  0D99                     	;# 
  6196  0D9A                     	;# 
  6197  0D9B                     	;# 
  6198  0D9C                     	;# 
  6199  0D9D                     	;# 
  6200  0D9E                     	;# 
  6201  0D9E                     	;# 
  6202  0D9F                     	;# 
  6203  0DA0                     	;# 
  6204  0DA1                     	;# 
  6205  0DA1                     	;# 
  6206  0DA2                     	;# 
  6207  0DA3                     	;# 
  6208  0DA4                     	;# 
  6209  0DA4                     	;# 
  6210  0DA5                     	;# 
  6211  0DA6                     	;# 
  6212  0DA7                     	;# 
  6213  0DA7                     	;# 
  6214  0DA8                     	;# 
  6215  0DA9                     	;# 
  6216  0DAA                     	;# 
  6217  0DAB                     	;# 
  6218  0DAC                     	;# 
  6219  0DAD                     	;# 
  6220  0DAE                     	;# 
  6221  0DAF                     	;# 
  6222  0E0F                     	;# 
  6223  0E10                     	;# 
  6224  0E11                     	;# 
  6225  0E12                     	;# 
  6226  0E13                     	;# 
  6227  0E14                     	;# 
  6228  0E15                     	;# 
  6229  0E16                     	;# 
  6230  0E17                     	;# 
  6231  0E18                     	;# 
  6232  0E19                     	;# 
  6233  0E1A                     	;# 
  6234  0E1B                     	;# 
  6235  0E1C                     	;# 
  6236  0E1D                     	;# 
  6237  0E1E                     	;# 
  6238  0E1F                     	;# 
  6239  0E20                     	;# 
  6240  0E21                     	;# 
  6241  0E22                     	;# 
  6242  0E23                     	;# 
  6243  0E24                     	;# 
  6244  0E25                     	;# 
  6245  0E26                     	;# 
  6246  0E27                     	;# 
  6247  0E28                     	;# 
  6248  0E29                     	;# 
  6249  0E2A                     	;# 
  6250  0E2B                     	;# 
  6251  0E2C                     	;# 
  6252  0E2D                     	;# 
  6253  0E2E                     	;# 
  6254  0E90                     	;# 
  6255  0E91                     	;# 
  6256  0E92                     	;# 
  6257  0E94                     	;# 
  6258  0E95                     	;# 
  6259  0E9C                     	;# 
  6260  0E9D                     	;# 
  6261  0E9E                     	;# 
  6262  0E9F                     	;# 
  6263  0EA0                     	;# 
  6264  0EA1                     	;# 
  6265  0EA2                     	;# 
  6266  0EA3                     	;# 
  6267  0EA4                     	;# 
  6268  0EA5                     	;# 
  6269  0EA6                     	;# 
  6270  0EA7                     	;# 
  6271  0F0F                     	;# 
  6272  0F10                     	;# 
  6273  0F11                     	;# 
  6274  0F12                     	;# 
  6275  0F13                     	;# 
  6276  0F14                     	;# 
  6277  0F15                     	;# 
  6278  0F16                     	;# 
  6279  0F17                     	;# 
  6280  0F18                     	;# 
  6281  0F19                     	;# 
  6282  0F1A                     	;# 
  6283  0F1B                     	;# 
  6284  0F1C                     	;# 
  6285  0F1D                     	;# 
  6286  0F1E                     	;# 
  6287  0F1F                     	;# 
  6288  0F20                     	;# 
  6289  0F21                     	;# 
  6290  0F22                     	;# 
  6291  0F23                     	;# 
  6292  0F24                     	;# 
  6293  0F25                     	;# 
  6294  0F26                     	;# 
  6295  0F27                     	;# 
  6296  0F28                     	;# 
  6297  0F29                     	;# 
  6298  0F2A                     	;# 
  6299  0F2B                     	;# 
  6300  0F2C                     	;# 
  6301  0F2D                     	;# 
  6302  0F2E                     	;# 
  6303  0F2F                     	;# 
  6304  0F30                     	;# 
  6305  0F31                     	;# 
  6306  0F32                     	;# 
  6307  0F33                     	;# 
  6308  0F34                     	;# 
  6309  0F35                     	;# 
  6310  0F36                     	;# 
  6311  0F37                     	;# 
  6312  0FE4                     	;# 
  6313  0FE5                     	;# 
  6314  0FE6                     	;# 
  6315  0FE7                     	;# 
  6316  0FE8                     	;# 
  6317  0FE9                     	;# 
  6318  0FEA                     	;# 
  6319  0FEB                     	;# 
  6320  0FED                     	;# 
  6321  0FEE                     	;# 
  6322  0FEF                     	;# 
  6323  0000                     	;# 
  6324  0001                     	;# 
  6325  0002                     	;# 
  6326  0003                     	;# 
  6327  0004                     	;# 
  6328  0005                     	;# 
  6329  0006                     	;# 
  6330  0007                     	;# 
  6331  0008                     	;# 
  6332  0009                     	;# 
  6333  000A                     	;# 
  6334  000B                     	;# 
  6335  000C                     	;# 
  6336  000D                     	;# 
  6337  000E                     	;# 
  6338  0010                     	;# 
  6339  0011                     	;# 
  6340  0012                     	;# 
  6341  0013                     	;# 
  6342  0014                     	;# 
  6343  0015                     	;# 
  6344  0016                     	;# 
  6345  0016                     	;# 
  6346  0017                     	;# 
  6347  0018                     	;# 
  6348  0019                     	;# 
  6349  001A                     	;# 
  6350  001A                     	;# 
  6351  001B                     	;# 
  6352  001B                     	;# 
  6353  001C                     	;# 
  6354  001D                     	;# 
  6355  001E                     	;# 
  6356  001F                     	;# 
  6357  008C                     	;# 
  6358  008D                     	;# 
  6359  008E                     	;# 
  6360  0090                     	;# 
  6361  0091                     	;# 
  6362  0092                     	;# 
  6363  0093                     	;# 
  6364  0094                     	;# 
  6365  0095                     	;# 
  6366  0096                     	;# 
  6367  0098                     	;# 
  6368  0099                     	;# 
  6369  009A                     	;# 
  6370  009B                     	;# 
  6371  009B                     	;# 
  6372  009C                     	;# 
  6373  009D                     	;# 
  6374  009E                     	;# 
  6375  009F                     	;# 
  6376  010C                     	;# 
  6377  010D                     	;# 
  6378  010E                     	;# 
  6379  0111                     	;# 
  6380  0112                     	;# 
  6381  0113                     	;# 
  6382  0114                     	;# 
  6383  0115                     	;# 
  6384  0116                     	;# 
  6385  0117                     	;# 
  6386  0118                     	;# 
  6387  0119                     	;# 
  6388  011C                     	;# 
  6389  018C                     	;# 
  6390  018D                     	;# 
  6391  018E                     	;# 
  6392  0191                     	;# 
  6393  0191                     	;# 
  6394  0192                     	;# 
  6395  0193                     	;# 
  6396  0193                     	;# 
  6397  0194                     	;# 
  6398  0195                     	;# 
  6399  0196                     	;# 
  6400  0197                     	;# 
  6401  0199                     	;# 
  6402  0199                     	;# 
  6403  0199                     	;# 
  6404  019A                     	;# 
  6405  019A                     	;# 
  6406  019A                     	;# 
  6407  019B                     	;# 
  6408  019B                     	;# 
  6409  019B                     	;# 
  6410  019B                     	;# 
  6411  019B                     	;# 
  6412  019C                     	;# 
  6413  019C                     	;# 
  6414  019C                     	;# 
  6415  019D                     	;# 
  6416  019D                     	;# 
  6417  019D                     	;# 
  6418  019E                     	;# 
  6419  019E                     	;# 
  6420  019E                     	;# 
  6421  019F                     	;# 
  6422  019F                     	;# 
  6423  019F                     	;# 
  6424  019F                     	;# 
  6425  019F                     	;# 
  6426  020C                     	;# 
  6427  020D                     	;# 
  6428  020E                     	;# 
  6429  0211                     	;# 
  6430  0211                     	;# 
  6431  0212                     	;# 
  6432  0212                     	;# 
  6433  0213                     	;# 
  6434  0213                     	;# 
  6435  0214                     	;# 
  6436  0214                     	;# 
  6437  0215                     	;# 
  6438  0215                     	;# 
  6439  0215                     	;# 
  6440  0215                     	;# 
  6441  0216                     	;# 
  6442  0216                     	;# 
  6443  0217                     	;# 
  6444  0217                     	;# 
  6445  028C                     	;# 
  6446  028D                     	;# 
  6447  028E                     	;# 
  6448  0291                     	;# 
  6449  0291                     	;# 
  6450  0292                     	;# 
  6451  0293                     	;# 
  6452  0294                     	;# 
  6453  0298                     	;# 
  6454  0298                     	;# 
  6455  0299                     	;# 
  6456  029A                     	;# 
  6457  029B                     	;# 
  6458  029E                     	;# 
  6459  030C                     	;# 
  6460  030D                     	;# 
  6461  030E                     	;# 
  6462  038C                     	;# 
  6463  038D                     	;# 
  6464  038E                     	;# 
  6465  0391                     	;# 
  6466  0392                     	;# 
  6467  0393                     	;# 
  6468  0394                     	;# 
  6469  0395                     	;# 
  6470  0396                     	;# 
  6471  0397                     	;# 
  6472  0398                     	;# 
  6473  0399                     	;# 
  6474  040E                     	;# 
  6475  0413                     	;# 
  6476  0413                     	;# 
  6477  0414                     	;# 
  6478  0414                     	;# 
  6479  0415                     	;# 
  6480  0416                     	;# 
  6481  0417                     	;# 
  6482  0418                     	;# 
  6483  041A                     	;# 
  6484  041A                     	;# 
  6485  041B                     	;# 
  6486  041B                     	;# 
  6487  041C                     	;# 
  6488  041D                     	;# 
  6489  041E                     	;# 
  6490  041F                     	;# 
  6491  0493                     	;# 
  6492  0494                     	;# 
  6493  0495                     	;# 
  6494  0496                     	;# 
  6495  049A                     	;# 
  6496  049B                     	;# 
  6497  049C                     	;# 
  6498  049D                     	;# 
  6499  058C                     	;# 
  6500  058C                     	;# 
  6501  058D                     	;# 
  6502  058E                     	;# 
  6503  058E                     	;# 
  6504  058F                     	;# 
  6505  0590                     	;# 
  6506  0590                     	;# 
  6507  0591                     	;# 
  6508  0592                     	;# 
  6509  0592                     	;# 
  6510  0593                     	;# 
  6511  0594                     	;# 
  6512  0594                     	;# 
  6513  0595                     	;# 
  6514  0596                     	;# 
  6515  0596                     	;# 
  6516  0597                     	;# 
  6517  0598                     	;# 
  6518  0599                     	;# 
  6519  059A                     	;# 
  6520  059B                     	;# 
  6521  059B                     	;# 
  6522  059C                     	;# 
  6523  059D                     	;# 
  6524  060C                     	;# 
  6525  060C                     	;# 
  6526  060D                     	;# 
  6527  060E                     	;# 
  6528  060F                     	;# 
  6529  060F                     	;# 
  6530  0610                     	;# 
  6531  0611                     	;# 
  6532  0612                     	;# 
  6533  0613                     	;# 
  6534  0614                     	;# 
  6535  0617                     	;# 
  6536  0618                     	;# 
  6537  0619                     	;# 
  6538  061A                     	;# 
  6539  061B                     	;# 
  6540  061C                     	;# 
  6541  0691                     	;# 
  6542  0692                     	;# 
  6543  0693                     	;# 
  6544  0694                     	;# 
  6545  0695                     	;# 
  6546  0696                     	;# 
  6547  0697                     	;# 
  6548  0699                     	;# 
  6549  069A                     	;# 
  6550  0711                     	;# 
  6551  0712                     	;# 
  6552  0713                     	;# 
  6553  0714                     	;# 
  6554  0715                     	;# 
  6555  0718                     	;# 
  6556  0718                     	;# 
  6557  0719                     	;# 
  6558  071A                     	;# 
  6559  071A                     	;# 
  6560  071B                     	;# 
  6561  071C                     	;# 
  6562  071D                     	;# 
  6563  0791                     	;# 
  6564  0791                     	;# 
  6565  0792                     	;# 
  6566  0793                     	;# 
  6567  0793                     	;# 
  6568  0794                     	;# 
  6569  0795                     	;# 
  6570  0795                     	;# 
  6571  0796                     	;# 
  6572  0797                     	;# 
  6573  0797                     	;# 
  6574  0798                     	;# 
  6575  0799                     	;# 
  6576  079A                     	;# 
  6577  080C                     	;# 
  6578  080C                     	;# 
  6579  080D                     	;# 
  6580  080E                     	;# 
  6581  080E                     	;# 
  6582  080F                     	;# 
  6583  0810                     	;# 
  6584  0810                     	;# 
  6585  0811                     	;# 
  6586  0812                     	;# 
  6587  0812                     	;# 
  6588  0813                     	;# 
  6589  0814                     	;# 
  6590  0815                     	;# 
  6591  0816                     	;# 
  6592  0817                     	;# 
  6593  0818                     	;# 
  6594  0819                     	;# 
  6595  081A                     	;# 
  6596  081A                     	;# 
  6597  081B                     	;# 
  6598  081C                     	;# 
  6599  081C                     	;# 
  6600  081D                     	;# 
  6601  088C                     	;# 
  6602  088D                     	;# 
  6603  088E                     	;# 
  6604  088F                     	;# 
  6605  088F                     	;# 
  6606  0890                     	;# 
  6607  0891                     	;# 
  6608  0892                     	;# 
  6609  0893                     	;# 
  6610  0893                     	;# 
  6611  0894                     	;# 
  6612  0895                     	;# 
  6613  0896                     	;# 
  6614  0897                     	;# 
  6615  0897                     	;# 
  6616  0898                     	;# 
  6617  0899                     	;# 
  6618  0D8C                     	;# 
  6619  0D8C                     	;# 
  6620  0D8D                     	;# 
  6621  0D8E                     	;# 
  6622  0D8F                     	;# 
  6623  0D8F                     	;# 
  6624  0D90                     	;# 
  6625  0D91                     	;# 
  6626  0D92                     	;# 
  6627  0D92                     	;# 
  6628  0D93                     	;# 
  6629  0D94                     	;# 
  6630  0D95                     	;# 
  6631  0D95                     	;# 
  6632  0D96                     	;# 
  6633  0D97                     	;# 
  6634  0D98                     	;# 
  6635  0D99                     	;# 
  6636  0D9A                     	;# 
  6637  0D9B                     	;# 
  6638  0D9C                     	;# 
  6639  0D9D                     	;# 
  6640  0D9E                     	;# 
  6641  0D9E                     	;# 
  6642  0D9F                     	;# 
  6643  0DA0                     	;# 
  6644  0DA1                     	;# 
  6645  0DA1                     	;# 
  6646  0DA2                     	;# 
  6647  0DA3                     	;# 
  6648  0DA4                     	;# 
  6649  0DA4                     	;# 
  6650  0DA5                     	;# 
  6651  0DA6                     	;# 
  6652  0DA7                     	;# 
  6653  0DA7                     	;# 
  6654  0DA8                     	;# 
  6655  0DA9                     	;# 
  6656  0DAA                     	;# 
  6657  0DAB                     	;# 
  6658  0DAC                     	;# 
  6659  0DAD                     	;# 
  6660  0DAE                     	;# 
  6661  0DAF                     	;# 
  6662  0E0F                     	;# 
  6663  0E10                     	;# 
  6664  0E11                     	;# 
  6665  0E12                     	;# 
  6666  0E13                     	;# 
  6667  0E14                     	;# 
  6668  0E15                     	;# 
  6669  0E16                     	;# 
  6670  0E17                     	;# 
  6671  0E18                     	;# 
  6672  0E19                     	;# 
  6673  0E1A                     	;# 
  6674  0E1B                     	;# 
  6675  0E1C                     	;# 
  6676  0E1D                     	;# 
  6677  0E1E                     	;# 
  6678  0E1F                     	;# 
  6679  0E20                     	;# 
  6680  0E21                     	;# 
  6681  0E22                     	;# 
  6682  0E23                     	;# 
  6683  0E24                     	;# 
  6684  0E25                     	;# 
  6685  0E26                     	;# 
  6686  0E27                     	;# 
  6687  0E28                     	;# 
  6688  0E29                     	;# 
  6689  0E2A                     	;# 
  6690  0E2B                     	;# 
  6691  0E2C                     	;# 
  6692  0E2D                     	;# 
  6693  0E2E                     	;# 
  6694  0E90                     	;# 
  6695  0E91                     	;# 
  6696  0E92                     	;# 
  6697  0E94                     	;# 
  6698  0E95                     	;# 
  6699  0E9C                     	;# 
  6700  0E9D                     	;# 
  6701  0E9E                     	;# 
  6702  0E9F                     	;# 
  6703  0EA0                     	;# 
  6704  0EA1                     	;# 
  6705  0EA2                     	;# 
  6706  0EA3                     	;# 
  6707  0EA4                     	;# 
  6708  0EA5                     	;# 
  6709  0EA6                     	;# 
  6710  0EA7                     	;# 
  6711  0F0F                     	;# 
  6712  0F10                     	;# 
  6713  0F11                     	;# 
  6714  0F12                     	;# 
  6715  0F13                     	;# 
  6716  0F14                     	;# 
  6717  0F15                     	;# 
  6718  0F16                     	;# 
  6719  0F17                     	;# 
  6720  0F18                     	;# 
  6721  0F19                     	;# 
  6722  0F1A                     	;# 
  6723  0F1B                     	;# 
  6724  0F1C                     	;# 
  6725  0F1D                     	;# 
  6726  0F1E                     	;# 
  6727  0F1F                     	;# 
  6728  0F20                     	;# 
  6729  0F21                     	;# 
  6730  0F22                     	;# 
  6731  0F23                     	;# 
  6732  0F24                     	;# 
  6733  0F25                     	;# 
  6734  0F26                     	;# 
  6735  0F27                     	;# 
  6736  0F28                     	;# 
  6737  0F29                     	;# 
  6738  0F2A                     	;# 
  6739  0F2B                     	;# 
  6740  0F2C                     	;# 
  6741  0F2D                     	;# 
  6742  0F2E                     	;# 
  6743  0F2F                     	;# 
  6744  0F30                     	;# 
  6745  0F31                     	;# 
  6746  0F32                     	;# 
  6747  0F33                     	;# 
  6748  0F34                     	;# 
  6749  0F35                     	;# 
  6750  0F36                     	;# 
  6751  0F37                     	;# 
  6752  0FE4                     	;# 
  6753  0FE5                     	;# 
  6754  0FE6                     	;# 
  6755  0FE7                     	;# 
  6756  0FE8                     	;# 
  6757  0FE9                     	;# 
  6758  0FEA                     	;# 
  6759  0FEB                     	;# 
  6760  0FED                     	;# 
  6761  0FEE                     	;# 
  6762  0FEF                     	;# 
  6763                           
  6764                           	psect	idataBANK1
  6765  0879                     __pidataBANK1:	
  6766                           
  6767                           ;initializer for _U8Message
  6768  0879  3455               	retlw	85
  6769                           
  6770                           ;initializer for _AddressW
  6771  087A  3480               	retlw	128
  6772                           
  6773                           ;initializer for _BreathState
  6774  087B  3401               	retlw	1
  6775                           
  6776                           ;initializer for _Command
  6777  087C  3422               	retlw	34
  6778  087D  3420               	retlw	32
  6779                           
  6780                           	psect	stringtext1
  6781  1000                     __pstringtext1:	
  6782  1000                     _fsmStateTable:	
  6783  1000  346F               	retlw	low _I2C_DO_IDLE
  6784  1001  3408               	retlw	high _I2C_DO_IDLE
  6785  1002  34A4               	retlw	low _I2C_DO_SEND_ADR_READ
  6786  1003  3408               	retlw	high _I2C_DO_SEND_ADR_READ
  6787  1004  3496               	retlw	low _I2C_DO_SEND_ADR_WRITE
  6788  1005  3408               	retlw	high _I2C_DO_SEND_ADR_WRITE
  6789  1006  347E               	retlw	low _I2C_DO_TX
  6790  1007  340E               	retlw	high _I2C_DO_TX
  6791  1008  34F9               	retlw	low _I2C_DO_RX
  6792  1009  340C               	retlw	high _I2C_DO_RX
  6793  100A  3484               	retlw	low _I2C_DO_RCEN
  6794  100B  3408               	retlw	high _I2C_DO_RCEN
  6795  100C  343D               	retlw	low _I2C_DO_TX_EMPTY
  6796  100D  340B               	retlw	high _I2C_DO_TX_EMPTY
  6797  100E  3446               	retlw	low _I2C_DO_SEND_RESTART_READ
  6798  100F  3408               	retlw	high _I2C_DO_SEND_RESTART_READ
  6799  1010  344A               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  6800  1011  3408               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  6801  1012  344E               	retlw	low _I2C_DO_SEND_RESTART
  6802  1013  3408               	retlw	high _I2C_DO_SEND_RESTART
  6803  1014  3452               	retlw	low _I2C_DO_SEND_STOP
  6804  1015  3408               	retlw	high _I2C_DO_SEND_STOP
  6805  1016  3456               	retlw	low _I2C_DO_RX_ACK
  6806  1017  3408               	retlw	high _I2C_DO_RX_ACK
  6807  1018  345A               	retlw	low _I2C_DO_RX_NACK_STOP
  6808  1019  3408               	retlw	high _I2C_DO_RX_NACK_STOP
  6809  101A  345E               	retlw	low _I2C_DO_RX_NACK_RESTART
  6810  101B  3408               	retlw	high _I2C_DO_RX_NACK_RESTART
  6811  101C  3474               	retlw	low _I2C_DO_RESET
  6812  101D  3408               	retlw	high _I2C_DO_RESET
  6813  101E  3419               	retlw	low _I2C_DO_ADDRESS_NACK
  6814  101F  340B               	retlw	high _I2C_DO_ADDRESS_NACK
  6815  1020                     __end_of_fsmStateTable:	
  6816                           
  6817                           	psect	stringtext2
  6818  1020                     __pstringtext2:	
  6819  1020                     _COS_tsk:	
  6820  1020  34F1               	retlw	low _SHT25_StateMachine
  6821  1021  3403               	retlw	high _SHT25_StateMachine
  6822  1022  3440               	retlw	64
  6823  1023  3400               	retlw	0
  6824  1024  3400               	retlw	0
  6825  1025  3400               	retlw	0
  6826  1026  3400               	retlw	0
  6827  1027  3400               	retlw	0
  6828  1028  3400               	retlw	0
  6829  1029  3400               	retlw	0
  6830  102A  3400               	retlw	0
  6831  102B  3400               	retlw	0
  6832  102C  3400               	retlw	0
  6833  102D  3400               	retlw	0
  6834  102E  3400               	retlw	0
  6835  102F                     __end_of_COS_tsk:	
  6836                           
  6837                           	psect	stringtext3
  6838  102F                     __pstringtext3:	
  6839  102F                     _dpowers:	
  6840  102F  3401               	retlw	1
  6841  1030  3400               	retlw	0
  6842  1031  340A               	retlw	10
  6843  1032  3400               	retlw	0
  6844  1033  3464               	retlw	100
  6845  1034  3400               	retlw	0
  6846  1035  34E8               	retlw	232
  6847  1036  3403               	retlw	3
  6848  1037  3410               	retlw	16
  6849  1038  3427               	retlw	39
  6850  1039                     __end_of_dpowers:	
  6851                           
  6852                           	psect	nvBANK0
  6853  006B                     __pnvBANK0:	
  6854  006B                     _COS_tsk_msk:	
  6855  006B                     	ds	1
  6856                           
  6857                           	psect	nvBANK1
  6858  00EE                     __pnvBANK1:	
  6859  00EE                     _COS_tsk_ena:	
  6860  00EE                     	ds	1
  6861  00EF                     _eusartTxBufferRemaining:	
  6862  00EF                     	ds	1
  6863                           
  6864                           	psect	nvBANK2
  6865  015E                     __pnvBANK2:	
  6866  015E                     _TMR2_InterruptHandler:	
  6867  015E                     	ds	2
  6868  0160                     _EUSART_ErrorHandler:	
  6869  0160                     	ds	2
  6870  0162                     _EUSART_OverrunErrorHandler:	
  6871  0162                     	ds	2
  6872  0164                     _EUSART_FramingErrorHandler:	
  6873  0164                     	ds	2
  6874  0166                     _EUSART_RxDefaultInterruptHandler:	
  6875  0166                     	ds	2
  6876  0168                     _EUSART_TxDefaultInterruptHandler:	
  6877  0168                     	ds	2
  6878  0018                     _T1CON	set	24
  6879  0016                     _TMR1L	set	22
  6880  0017                     _TMR1H	set	23
  6881  001B                     _PR2	set	27
  6882  001A                     _TMR2	set	26
  6883  001C                     _T2CONbits	set	28
  6884  001F                     _T2RSTbits	set	31
  6885  001D                     _T2HLTbits	set	29
  6886  001C                     _T2CON	set	28
  6887  001A                     _T2TMR	set	26
  6888  001B                     _T2PR	set	27
  6889  001F                     _T2RST	set	31
  6890  001D                     _T2HLT	set	29
  6891  001E                     _T2CLKCON	set	30
  6892  000B                     _INTCONbits	set	11
  6893  0010                     _PIR1bits	set	16
  6894  0011                     _PIR2bits	set	17
  6895  0083                     _SSP1IF	set	131
  6896  009D                     _ADCON0bits	set	157
  6897  009C                     _ADRESH	set	156
  6898  009B                     _ADRESL	set	155
  6899  009F                     _ADCON2	set	159
  6900  009E                     _ADCON1	set	158
  6901  009D                     _ADCON0	set	157
  6902  0095                     _OPTION_REGbits	set	149
  6903  008E                     _TRISC	set	142
  6904  008D                     _TRISB	set	141
  6905  008C                     _TRISA	set	140
  6906  0098                     _OSCTUNE	set	152
  6907  0099                     _OSCCON	set	153
  6908  0091                     _PIE2bits	set	145
  6909  0090                     _PIE1bits	set	144
  6910  0483                     _SSP1IE	set	1155
  6911  010C                     _LATAbits	set	268
  6912  010D                     _LATBbits	set	269
  6913  010E                     _LATC	set	270
  6914  010D                     _LATB	set	269
  6915  010C                     _LATA	set	268
  6916  0116                     _BORCON	set	278
  6917  0199                     _RC1REG	set	409
  6918  019D                     _RC1STAbits	set	413
  6919  019A                     _TX1REG	set	410
  6920  019E                     _TX1STAbits	set	414
  6921  019C                     _SPBRGH	set	412
  6922  019B                     _SPBRGL	set	411
  6923  019E                     _TX1STA	set	414
  6924  019D                     _RC1STA	set	413
  6925  019F                     _BAUD1CON	set	415
  6926  018C                     _ANSELA	set	396
  6927  018D                     _ANSELB	set	397
  6928  018E                     _ANSELC	set	398
  6929  020E                     _WPUC	set	526
  6930  020C                     _WPUA	set	524
  6931  020D                     _WPUB	set	525
  6932  0214                     _SSP1STATbits	set	532
  6933  0216                     _SSP1CON2bits	set	534
  6934  0211                     _SSP1BUF	set	529
  6935  0215                     _SSP1CON1bits	set	533
  6936  0212                     _SSP1ADD	set	530
  6937  0216                     _SSP1CON2	set	534
  6938  0215                     _SSP1CON1	set	533
  6939  0214                     _SSP1STAT	set	532
  6940  10AD                     _SSPEN	set	4269
  6941  029E                     _CCPTMRSbits	set	670
  6942  028E                     _ODCONC	set	654
  6943  028D                     _ODCONB	set	653
  6944  028C                     _ODCONA	set	652
  6945  030E                     _SLRCONC	set	782
  6946  030D                     _SLRCONB	set	781
  6947  030C                     _SLRCONA	set	780
  6948  038E                     _INLVLC	set	910
  6949  038D                     _INLVLB	set	909
  6950  038C                     _INLVLA	set	908
  6951  0617                     _PWM3DCL	set	1559
  6952  0618                     _PWM3DCH	set	1560
  6953  0619                     _PWM3CON	set	1561
  6954  0E20                     _SSPCLKPPS	set	3616
  6955  0E21                     _SSPDATPPS	set	3617
  6956  0E24                     _RXPPS	set	3620
  6957  0EA5                     _RC5PPS	set	3749
  6958  0E9C                     _RB4PPS	set	3740
  6959  0E9F                     _RB7PPS	set	3743
  6960  0E9E                     _RB6PPS	set	3742
  6961                           
  6962                           	psect	stringtext4
  6963  1039                     __pstringtext4:	
  6964  1039                     STR_1:	
  6965  1039  3425               	retlw	37	;'%'
  6966  103A  3464               	retlw	100	;'d'
  6967  103B  3400               	retlw	0
  6968                           
  6969                           	psect	stringtext5
  6970  0000                     __pstringtext5:	
  6971  1039                     
  6972                           ; #config settings
  6973  0000                     
  6974                           	psect	cinit
  6975  004E                     start_initialization:	
  6976  004E                     __initialization:	
  6977                           
  6978                           ; Initialize objects allocated to BANK1
  6979  004E  3079               	movlw	low __pidataBANK1
  6980  004F  0084               	movwf	4
  6981  0050  3088               	movlw	(high __pidataBANK1)| (0+128)
  6982  0051  0085               	movwf	5
  6983  0052  0021               	movlb	1	; select bank1
  6984  0053  0012               	moviw fsr0++
  6985  0054  00E9               	movwf	__pdataBANK1& (0+127)
  6986  0055  0012               	moviw fsr0++
  6987  0056  00EA               	movwf	(__pdataBANK1+1)& (0+127)
  6988  0057  0012               	moviw fsr0++
  6989  0058  00EB               	movwf	(__pdataBANK1+2)& (0+127)
  6990  0059  0012               	moviw fsr0++
  6991  005A  00EC               	movwf	(__pdataBANK1+3)& (0+127)
  6992  005B  0012               	moviw fsr0++
  6993  005C  00ED               	movwf	(__pdataBANK1+4)& (0+127)
  6994                           
  6995                           ; Clear objects allocated to BANK0
  6996  005D  0020               	movlb	0	; select bank0
  6997  005E  01E9               	clrf	__pbssBANK0& (0+127)
  6998  005F  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  6999                           
  7000                           ; Clear objects allocated to BANK1
  7001  0060  30A0               	movlw	low __pbssBANK1
  7002  0061  0084               	movwf	4
  7003  0062  3000               	movlw	high __pbssBANK1
  7004  0063  0085               	movwf	5
  7005  0064  3031               	movlw	49
  7006  0065  3188  2090  3180   	fcall	clear_ram0
  7007                           
  7008                           ; Clear objects allocated to BANK2
  7009  0068  3020               	movlw	low __pbssBANK2
  7010  0069  0084               	movwf	4
  7011  006A  3001               	movlw	high __pbssBANK2
  7012  006B  0085               	movwf	5
  7013  006C  303E               	movlw	62
  7014  006D  3188  2090         	fcall	clear_ram0
  7015  006F                     end_of_initialization:	
  7016                           ;End of C runtime variable initialization code
  7017                           
  7018  006F                     __end_of__initialization:	
  7019  006F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7020  0070  0020               	movlb	0
  7021  0071  318A  2A49         	ljmp	_main	;jump to C main() function
  7022                           
  7023                           	psect	bssBANK0
  7024  0069                     __pbssBANK0:	
  7025  0069                     _eusartRxTail:	
  7026  0069                     	ds	1
  7027  006A                     _eusartRxHead:	
  7028  006A                     	ds	1
  7029                           
  7030                           	psect	bssBANK1
  7031  00A0                     __pbssBANK1:	
  7032  00A0                     _TimerCounter:	
  7033  00A0                     	ds	2
  7034  00A2                     _I2C_Timer:	
  7035  00A2                     	ds	2
  7036  00A4                     _SensirionRH_UBP8:	
  7037  00A4                     	ds	2
  7038  00A6                     _SensirionTemperature_UBP8:	
  7039  00A6                     	ds	2
  7040  00A8                     _dutyValue:	
  7041  00A8                     	ds	2
  7042  00AA                     _counter:	
  7043  00AA                     	ds	2
  7044  00AC                     _COS_tcnt_lst:	
  7045  00AC                     	ds	2
  7046  00AE                     _COS_tcnt_val:	
  7047  00AE                     	ds	2
  7048  00B0                     _COS_tsk_tmr:	
  7049  00B0                     	ds	2
  7050  00B2                     _COS_sec_tmr:	
  7051  00B2                     	ds	2
  7052  00B4                     _COS_ms_tmr:	
  7053  00B4                     	ds	2
  7054  00B6                     _ADC_InterruptHandler:	
  7055  00B6                     	ds	2
  7056  00B8                     TMR2_ISR@CountCallBack:	
  7057  00B8                     	ds	2
  7058  00BA                     _MSSP_InterruptHandler:	
  7059  00BA                     	ds	2
  7060  00BC                     UART_Display@counter:	
  7061  00BC                     	ds	1
  7062  00BD                     _NewMessageFlag:	
  7063  00BD                     	ds	1
  7064  00BE                     _SHT25_State:	
  7065  00BE                     	ds	1
  7066  00BF                     _RelativeHumidityRaw_L:	
  7067  00BF                     	ds	1
  7068  00C0                     _RelativeHumidityRaw_H:	
  7069  00C0                     	ds	1
  7070  00C1                     _TemperatureRaw_L:	
  7071  00C1                     	ds	1
  7072  00C2                     _TemperatureRaw_H:	
  7073  00C2                     	ds	1
  7074  00C3                     _checksum:	
  7075  00C3                     	ds	1
  7076  00C4                     _ErrorStat:	
  7077  00C4                     	ds	1
  7078  00C5                     _SHT25_Fault:	
  7079  00C5                     	ds	1
  7080  00C6                     _Timer2Flag:	
  7081  00C6                     	ds	1
  7082  00C7                     _TimeSlotCounter:	
  7083  00C7                     	ds	1
  7084  00C8                     _COS_tsk_ind:	
  7085  00C8                     	ds	1
  7086  00C9                     _eusartRxLastError:	
  7087  00C9                     	ds	1
  7088  00CA                     _eusartRxCount:	
  7089  00CA                     	ds	1
  7090  00CB                     _eusartTxTail:	
  7091  00CB                     	ds	1
  7092  00CC                     _eusartTxHead:	
  7093  00CC                     	ds	1
  7094  00CD                     _RelativeHumidityRaw:	
  7095  00CD                     	ds	2
  7096  00CF                     _TemperatureRaw:	
  7097  00CF                     	ds	2
  7098                           
  7099                           	psect	dataBANK1
  7100  00E9                     __pdataBANK1:	
  7101  00E9                     _U8Message:	
  7102  00E9                     	ds	1
  7103  00EA                     _AddressW:	
  7104  00EA                     	ds	1
  7105  00EB                     _BreathState:	
  7106  00EB                     	ds	1
  7107  00EC                     _Command:	
  7108  00EC                     	ds	2
  7109                           
  7110                           	psect	bssBANK2
  7111  0120                     __pbssBANK2:	
  7112  0120                     _I2C_Status:	
  7113  0120                     	ds	30
  7114  013E                     _eusartRxStatusBuffer:	
  7115  013E                     	ds	8
  7116  0146                     _eusartRxBuffer:	
  7117  0146                     	ds	8
  7118  014E                     _eusartTxBuffer:	
  7119  014E                     	ds	8
  7120  0156                     _RxBuff:	
  7121  0156                     	ds	8
  7122                           
  7123                           	psect	clrtext
  7124  0890                     clear_ram0:	
  7125                           ;	Called with FSR0 containing the base address, and
  7126                           ;	WREG with the size to clear
  7127                           
  7128  0890  0064               	clrwdt	;clear the watchdog before getting into this loop
  7129  0891                     clrloop0:	
  7130  0891  0180               	clrf	0	;clear RAM location pointed to by FSR
  7131  0892  3101               	addfsr 0,1
  7132  0893  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7133  0894  2891               	goto	clrloop0	;have we reached the end yet?
  7134  0895  3400               	retlw	0	;all done for this memory range, return
  7135                           
  7136                           	psect	cstackBANK2
  7137  016A                     __pcstackBANK2:	
  7138  016A                     ??_SHT25_StateMachine:	
  7139                           
  7140                           ; 1 bytes @ 0x0
  7141  016A                     	ds	5
  7142                           
  7143                           	psect	cstackBANK1
  7144  00D1                     __pcstackBANK1:	
  7145  00D1                     SHT3x_CalcTemperatureC@str:	
  7146  00D1                     SHT3x_CalcRelativeHumidity@str:	
  7147                           ; 8 bytes @ 0x0
  7148                           
  7149                           
  7150                           ; 8 bytes @ 0x0
  7151  00D1                     	ds	8
  7152  00D9                     SHT3x_CalcRelativeHumidity@RelativeHumidityFloat:	
  7153  00D9                     _SHT3x_CalcTemperatureC$2275:	
  7154                           ; 3 bytes @ 0x8
  7155                           
  7156                           
  7157                           ; 3 bytes @ 0x8
  7158  00D9                     	ds	3
  7159  00DC                     SHT3x_CalcTemperatureC@Temperature_UBP8:	
  7160  00DC                     _SHT3x_CalcRelativeHumidity$2276:	
  7161                           ; 2 bytes @ 0xB
  7162                           
  7163                           
  7164                           ; 3 bytes @ 0xB
  7165  00DC                     	ds	2
  7166  00DE                     SHT3x_CalcTemperatureC@TemperatureInt:	
  7167                           
  7168                           ; 2 bytes @ 0xD
  7169  00DE                     	ds	1
  7170  00DF                     SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8:	
  7171                           
  7172                           ; 2 bytes @ 0xE
  7173  00DF                     	ds	1
  7174  00E0                     SHT3x_CalcTemperatureC@Temperature_U8:	
  7175                           
  7176                           ; 1 bytes @ 0xF
  7177  00E0                     	ds	1
  7178  00E1                     SHT3x_CalcTemperatureC@Temperature_L8:	
  7179  00E1                     SHT3x_CalcRelativeHumidity@RelativeHumidityInt:	
  7180                           ; 1 bytes @ 0x10
  7181                           
  7182                           
  7183                           ; 2 bytes @ 0x10
  7184  00E1                     	ds	1
  7185  00E2                     SHT3x_CalcTemperatureC@TemperatureTemp:	
  7186                           
  7187                           ; 4 bytes @ 0x11
  7188  00E2                     	ds	1
  7189  00E3                     SHT3x_CalcRelativeHumidity@RelativeHumidity_U8:	
  7190                           
  7191                           ; 1 bytes @ 0x12
  7192  00E3                     	ds	1
  7193  00E4                     SHT3x_CalcRelativeHumidity@RelativeHumidity_L8:	
  7194                           
  7195                           ; 1 bytes @ 0x13
  7196  00E4                     	ds	1
  7197  00E5                     SHT3x_CalcRelativeHumidity@RelativeHumidityTemp:	
  7198                           
  7199                           ; 4 bytes @ 0x14
  7200  00E5                     	ds	1
  7201  00E6                     SHT3x_CalcTemperatureC@TemperatureFloat:	
  7202                           
  7203                           ; 3 bytes @ 0x15
  7204  00E6                     	ds	3
  7205                           
  7206                           	psect	cstackCOMMON
  7207  0070                     __pcstackCOMMON:	
  7208  0070                     ?_I2C_Open:	
  7209  0070                     ?_I2C_MasterWrite:	
  7210                           ; 1 bytes @ 0x0
  7211                           
  7212  0070                     ?_I2C_Close:	
  7213                           ; 1 bytes @ 0x0
  7214                           
  7215  0070                     ?_I2C_MasterRead:	
  7216                           ; 1 bytes @ 0x0
  7217                           
  7218  0070                     ?_I2C_DO_IDLE:	
  7219                           ; 1 bytes @ 0x0
  7220                           
  7221  0070                     ??_I2C_DO_IDLE:	
  7222                           ; 1 bytes @ 0x0
  7223                           
  7224  0070                     ?_I2C_DO_SEND_ADR_READ:	
  7225                           ; 1 bytes @ 0x0
  7226                           
  7227  0070                     ??_I2C_DO_SEND_ADR_READ:	
  7228                           ; 1 bytes @ 0x0
  7229                           
  7230  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  7231                           ; 1 bytes @ 0x0
  7232                           
  7233  0070                     ?_I2C_DO_TX:	
  7234                           ; 1 bytes @ 0x0
  7235                           
  7236  0070                     ?_I2C_DO_RX:	
  7237                           ; 1 bytes @ 0x0
  7238                           
  7239  0070                     ?_I2C_DO_RCEN:	
  7240                           ; 1 bytes @ 0x0
  7241                           
  7242  0070                     ??_I2C_DO_RCEN:	
  7243                           ; 1 bytes @ 0x0
  7244                           
  7245  0070                     ?_I2C_DO_TX_EMPTY:	
  7246                           ; 1 bytes @ 0x0
  7247                           
  7248  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  7249                           ; 1 bytes @ 0x0
  7250                           
  7251  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  7252                           ; 1 bytes @ 0x0
  7253                           
  7254  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  7255                           ; 1 bytes @ 0x0
  7256                           
  7257  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  7258                           ; 1 bytes @ 0x0
  7259                           
  7260  0070                     ?_I2C_DO_SEND_RESTART:	
  7261                           ; 1 bytes @ 0x0
  7262                           
  7263  0070                     ??_I2C_DO_SEND_RESTART:	
  7264                           ; 1 bytes @ 0x0
  7265                           
  7266  0070                     ?_I2C_DO_SEND_STOP:	
  7267                           ; 1 bytes @ 0x0
  7268                           
  7269  0070                     ??_I2C_DO_SEND_STOP:	
  7270                           ; 1 bytes @ 0x0
  7271                           
  7272  0070                     ?_I2C_DO_RX_ACK:	
  7273                           ; 1 bytes @ 0x0
  7274                           
  7275  0070                     ??_I2C_DO_RX_ACK:	
  7276                           ; 1 bytes @ 0x0
  7277                           
  7278  0070                     ?_I2C_DO_RX_NACK_STOP:	
  7279                           ; 1 bytes @ 0x0
  7280                           
  7281  0070                     ??_I2C_DO_RX_NACK_STOP:	
  7282                           ; 1 bytes @ 0x0
  7283                           
  7284  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  7285                           ; 1 bytes @ 0x0
  7286                           
  7287  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  7288                           ; 1 bytes @ 0x0
  7289                           
  7290  0070                     ?_I2C_DO_RESET:	
  7291                           ; 1 bytes @ 0x0
  7292                           
  7293  0070                     ??_I2C_DO_RESET:	
  7294                           ; 1 bytes @ 0x0
  7295                           
  7296  0070                     ?_I2C_DO_ADDRESS_NACK:	
  7297                           ; 1 bytes @ 0x0
  7298                           
  7299  0070                     ?_I2C_MasterIsr:	
  7300                           ; 1 bytes @ 0x0
  7301                           
  7302  0070                     ?_I2C_MasterClearIrq:	
  7303                           ; 1 bytes @ 0x0
  7304                           
  7305  0070                     ?_I2C_MasterOpen:	
  7306                           ; 1 bytes @ 0x0
  7307                           
  7308  0070                     ?_I2C_MasterEnableIrq:	
  7309                           ; 1 bytes @ 0x0
  7310                           
  7311  0070                     ?_I2C_MasterDisableIrq:	
  7312                           ; 1 bytes @ 0x0
  7313                           
  7314  0070                     ?_I2C_MasterClose:	
  7315                           ; 1 bytes @ 0x0
  7316                           
  7317  0070                     ?_I2C_MasterStart:	
  7318                           ; 1 bytes @ 0x0
  7319                           
  7320  0070                     ?_I2C_MasterFsm:	
  7321                           ; 1 bytes @ 0x0
  7322                           
  7323  0070                     ?_I2C_MasterIsNack:	
  7324                           ; 1 bytes @ 0x0
  7325                           
  7326  0070                     ??_I2C_MasterIsNack:	
  7327                           ; 1 bytes @ 0x0
  7328                           
  7329  0070                     ?_I2C_MasterSendTxData:	
  7330                           ; 1 bytes @ 0x0
  7331                           
  7332  0070                     ??_I2C_MasterSendTxData:	
  7333                           ; 1 bytes @ 0x0
  7334                           
  7335  0070                     ?_I2C_MasterGetRxData:	
  7336                           ; 1 bytes @ 0x0
  7337                           
  7338  0070                     ??_I2C_MasterGetRxData:	
  7339                           ; 1 bytes @ 0x0
  7340                           
  7341  0070                     ?_I2C_MasterSendAck:	
  7342                           ; 1 bytes @ 0x0
  7343                           
  7344  0070                     ??_I2C_MasterSendAck:	
  7345                           ; 1 bytes @ 0x0
  7346                           
  7347  0070                     ?_I2C_MasterStartRx:	
  7348                           ; 1 bytes @ 0x0
  7349                           
  7350  0070                     ??_I2C_MasterStartRx:	
  7351                           ; 1 bytes @ 0x0
  7352                           
  7353  0070                     ?_I2C_MasterSetIrq:	
  7354                           ; 1 bytes @ 0x0
  7355                           
  7356  0070                     ??_I2C_MasterSetIrq:	
  7357                           ; 1 bytes @ 0x0
  7358                           
  7359  0070                     ?_I2C_MasterEnableRestart:	
  7360                           ; 1 bytes @ 0x0
  7361                           
  7362  0070                     ??_I2C_MasterEnableRestart:	
  7363                           ; 1 bytes @ 0x0
  7364                           
  7365  0070                     ?_I2C_MasterStop:	
  7366                           ; 1 bytes @ 0x0
  7367                           
  7368  0070                     ??_I2C_MasterStop:	
  7369                           ; 1 bytes @ 0x0
  7370                           
  7371  0070                     ?_I2C_MasterSendNack:	
  7372                           ; 1 bytes @ 0x0
  7373                           
  7374  0070                     ??_I2C_MasterSendNack:	
  7375                           ; 1 bytes @ 0x0
  7376                           
  7377  0070                     ?_TMR2_ISR:	
  7378                           ; 1 bytes @ 0x0
  7379                           
  7380  0070                     ?_PIN_MANAGER_Initialize:	
  7381                           ; 1 bytes @ 0x0
  7382                           
  7383  0070                     ?_OSCILLATOR_Initialize:	
  7384                           ; 1 bytes @ 0x0
  7385                           
  7386  0070                     ?_ADC_Initialize:	
  7387                           ; 1 bytes @ 0x0
  7388                           
  7389  0070                     ?_PWM3_Initialize:	
  7390                           ; 1 bytes @ 0x0
  7391                           
  7392  0070                     ?_TMR2_Initialize:	
  7393                           ; 1 bytes @ 0x0
  7394                           
  7395  0070                     ?_EUSART_Initialize:	
  7396                           ; 1 bytes @ 0x0
  7397                           
  7398  0070                     ?_EUSART_Receive_ISR:	
  7399                           ; 1 bytes @ 0x0
  7400                           
  7401  0070                     ?_EUSART_Transmit_ISR:	
  7402                           ; 1 bytes @ 0x0
  7403                           
  7404  0070                     ??_EUSART_Transmit_ISR:	
  7405                           ; 1 bytes @ 0x0
  7406                           
  7407  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  7408                           ; 1 bytes @ 0x0
  7409                           
  7410  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  7411                           ; 1 bytes @ 0x0
  7412                           
  7413  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  7414                           ; 1 bytes @ 0x0
  7415                           
  7416  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  7417                           ; 1 bytes @ 0x0
  7418                           
  7419  0070                     ?_EUSART_DefaultErrorHandler:	
  7420                           ; 1 bytes @ 0x0
  7421                           
  7422  0070                     ?_EUSART_RxDataHandler:	
  7423                           ; 1 bytes @ 0x0
  7424                           
  7425  0070                     ??_EUSART_RxDataHandler:	
  7426                           ; 1 bytes @ 0x0
  7427                           
  7428  0070                     ?_TMR2_DefaultInterruptHandler:	
  7429                           ; 1 bytes @ 0x0
  7430                           
  7431  0070                     ??_TMR2_DefaultInterruptHandler:	
  7432                           ; 1 bytes @ 0x0
  7433                           
  7434  0070                     ?_TMR2_CallBack:	
  7435                           ; 1 bytes @ 0x0
  7436                           
  7437  0070                     ?_COS_TimerSetup:	
  7438                           ; 1 bytes @ 0x0
  7439                           
  7440  0070                     ?_SHT25_StateMachine:	
  7441                           ; 1 bytes @ 0x0
  7442                           
  7443  0070                     ?_I2C_Initialize:	
  7444                           ; 1 bytes @ 0x0
  7445                           
  7446  0070                     ?_I2C_MasterOperation:	
  7447                           ; 1 bytes @ 0x0
  7448                           
  7449  0070                     ?_INTERRUPT_InterruptManager:	
  7450                           ; 1 bytes @ 0x0
  7451                           
  7452  0070                     ?_SYSTEM_Initialize:	
  7453                           ; 1 bytes @ 0x0
  7454                           
  7455  0070                     ?_PWM3_LoadDutyValue:	
  7456                           ; 1 bytes @ 0x0
  7457                           
  7458  0070                     ?_EUSART_Write:	
  7459                           ; 1 bytes @ 0x0
  7460                           
  7461  0070                     ?_COS_Init:	
  7462                           ; 1 bytes @ 0x0
  7463                           
  7464  0070                     ?_COS_TmrHandler:	
  7465                           ; 1 bytes @ 0x0
  7466                           
  7467  0070                     ?_COS_TskMan:	
  7468                           ; 1 bytes @ 0x0
  7469                           
  7470  0070                     ?_Led2_PWM:	
  7471                           ; 1 bytes @ 0x0
  7472                           
  7473  0070                     ?_main:	
  7474                           ; 1 bytes @ 0x0
  7475                           
  7476  0070                     ?i1_I2C_SetBuffer:	
  7477                           ; 1 bytes @ 0x0
  7478                           
  7479  0070                     ?i1_I2C_SetCallback:	
  7480                           ; 1 bytes @ 0x0
  7481                           
  7482  0070                     ?i1_I2C_MasterClearIrq:	
  7483                           ; 1 bytes @ 0x0
  7484                           
  7485  0070                     ??i1_I2C_MasterClearIrq:	
  7486                           ; 1 bytes @ 0x0
  7487                           
  7488  0070                     I2C_MasterSendTxData@data:	
  7489                           ; 1 bytes @ 0x0
  7490                           
  7491  0070                     PWM3_LoadDutyValue@dutyValue:	
  7492                           ; 1 bytes @ 0x0
  7493                           
  7494  0070                     i1I2C_SetBuffer@buffer:	
  7495                           ; 2 bytes @ 0x0
  7496                           
  7497  0070                     i1I2C_SetCallback@cb:	
  7498                           ; 2 bytes @ 0x0
  7499                           
  7500                           
  7501                           ; 2 bytes @ 0x0
  7502  0070                     	ds	1
  7503  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  7504  0071                     ??_EUSART_Receive_ISR:	
  7505                           ; 1 bytes @ 0x1
  7506                           
  7507  0071                     ??_EUSART_DefaultErrorHandler:	
  7508                           ; 1 bytes @ 0x1
  7509                           
  7510                           
  7511                           ; 1 bytes @ 0x1
  7512  0071                     	ds	1
  7513  0072                     ??_PWM3_LoadDutyValue:	
  7514  0072                     i1I2C_SetCallback@ptr:	
  7515                           ; 1 bytes @ 0x2
  7516                           
  7517  0072                     i1I2C_SetBuffer@bufferSize:	
  7518                           ; 1 bytes @ 0x2
  7519                           
  7520                           
  7521                           ; 2 bytes @ 0x2
  7522  0072                     	ds	1
  7523  0073                     ??i1_I2C_SetCallback:	
  7524                           
  7525                           ; 1 bytes @ 0x3
  7526  0073                     	ds	1
  7527  0074                     ??_Led2_PWM:	
  7528  0074                     ??i1_I2C_SetBuffer:	
  7529                           ; 1 bytes @ 0x4
  7530                           
  7531  0074                     i1I2C_SetCallback@idx:	
  7532                           ; 1 bytes @ 0x4
  7533                           
  7534                           
  7535                           ; 1 bytes @ 0x4
  7536  0074                     	ds	1
  7537  0075                     ?_I2C_SetDataCompleteCallback:	
  7538  0075                     ??_TMR2_ISR:	
  7539                           ; 1 bytes @ 0x5
  7540                           
  7541  0075                     ??_TMR2_CallBack:	
  7542                           ; 1 bytes @ 0x5
  7543                           
  7544  0075                     I2C_SetDataCompleteCallback@cb:	
  7545                           ; 1 bytes @ 0x5
  7546                           
  7547                           
  7548                           ; 2 bytes @ 0x5
  7549  0075                     	ds	2
  7550  0077                     I2C_SetDataCompleteCallback@ptr:	
  7551                           
  7552                           ; 1 bytes @ 0x7
  7553  0077                     	ds	1
  7554  0078                     ??_I2C_SetDataCompleteCallback:	
  7555                           
  7556                           ; 1 bytes @ 0x8
  7557  0078                     	ds	1
  7558  0079                     ?_rd1RegCompleteHandler:	
  7559  0079                     ?_rd2RegCompleteHandler:	
  7560                           ; 1 bytes @ 0x9
  7561                           
  7562  0079                     ?_wr1RegCompleteHandler:	
  7563                           ; 1 bytes @ 0x9
  7564                           
  7565  0079                     ?_wr2RegCompleteHandler:	
  7566                           ; 1 bytes @ 0x9
  7567                           
  7568  0079                     ?_rdBlkRegCompleteHandler:	
  7569                           ; 1 bytes @ 0x9
  7570                           
  7571  0079                     ?_I2C_CallbackReturnStop:	
  7572                           ; 1 bytes @ 0x9
  7573                           
  7574  0079                     ?_I2C_CallbackReturnReset:	
  7575                           ; 1 bytes @ 0x9
  7576                           
  7577  0079                     rd1RegCompleteHandler@ptr:	
  7578                           ; 1 bytes @ 0x9
  7579                           
  7580  0079                     rd2RegCompleteHandler@ptr:	
  7581                           ; 1 bytes @ 0x9
  7582                           
  7583  0079                     wr1RegCompleteHandler@ptr:	
  7584                           ; 1 bytes @ 0x9
  7585                           
  7586  0079                     wr2RegCompleteHandler@ptr:	
  7587                           ; 1 bytes @ 0x9
  7588                           
  7589  0079                     rdBlkRegCompleteHandler@ptr:	
  7590                           ; 1 bytes @ 0x9
  7591                           
  7592  0079                     I2C_CallbackReturnStop@funPtr:	
  7593                           ; 1 bytes @ 0x9
  7594                           
  7595  0079                     I2C_CallbackReturnReset@funPtr:	
  7596                           ; 1 bytes @ 0x9
  7597                           
  7598                           
  7599                           ; 1 bytes @ 0x9
  7600  0079                     	ds	1
  7601  007A                     ??_rd1RegCompleteHandler:	
  7602  007A                     ??_rd2RegCompleteHandler:	
  7603                           ; 1 bytes @ 0xA
  7604                           
  7605  007A                     ??_wr1RegCompleteHandler:	
  7606                           ; 1 bytes @ 0xA
  7607                           
  7608  007A                     ??_wr2RegCompleteHandler:	
  7609                           ; 1 bytes @ 0xA
  7610                           
  7611  007A                     ??_rdBlkRegCompleteHandler:	
  7612                           ; 1 bytes @ 0xA
  7613                           
  7614  007A                     ??_I2C_DO_TX:	
  7615                           ; 1 bytes @ 0xA
  7616                           
  7617  007A                     ??_I2C_DO_RX:	
  7618                           ; 1 bytes @ 0xA
  7619                           
  7620  007A                     ??_I2C_DO_TX_EMPTY:	
  7621                           ; 1 bytes @ 0xA
  7622                           
  7623  007A                     ??_I2C_DO_ADDRESS_NACK:	
  7624                           ; 1 bytes @ 0xA
  7625                           
  7626  007A                     ??_I2C_CallbackReturnStop:	
  7627                           ; 1 bytes @ 0xA
  7628                           
  7629  007A                     ??_I2C_CallbackReturnReset:	
  7630                           ; 1 bytes @ 0xA
  7631                           
  7632                           
  7633                           ; 1 bytes @ 0xA
  7634  007A                     	ds	2
  7635  007C                     _I2C_DO_TX$613:	
  7636                           
  7637                           ; 2 bytes @ 0xC
  7638  007C                     	ds	2
  7639  007E                     ??_I2C_MasterIsr:	
  7640                           
  7641                           	psect	cstackBANK0
  7642  0020                     __pcstackBANK0:	
  7643                           ; 1 bytes @ 0xE
  7644                           
  7645  0020                     ??_I2C_MasterFsm:	
  7646                           
  7647                           ; 1 bytes @ 0x0
  7648  0020                     	ds	3
  7649  0023                     ??_INTERRUPT_InterruptManager:	
  7650                           
  7651                           ; 1 bytes @ 0x3
  7652  0023                     	ds	1
  7653  0024                     ?___ftge:	
  7654  0024                     ?_I2C_SetBuffer:	
  7655                           ; 1 bit 
  7656                           
  7657  0024                     ??_I2C_Close:	
  7658                           ; 1 bytes @ 0x4
  7659                           
  7660  0024                     ?_I2C_SetInterruptHandler:	
  7661                           ; 1 bytes @ 0x4
  7662                           
  7663  0024                     ??_I2C_MasterClearIrq:	
  7664                           ; 1 bytes @ 0x4
  7665                           
  7666  0024                     ??_I2C_MasterOpen:	
  7667                           ; 1 bytes @ 0x4
  7668                           
  7669  0024                     ??_I2C_MasterEnableIrq:	
  7670                           ; 1 bytes @ 0x4
  7671                           
  7672  0024                     ??_I2C_MasterDisableIrq:	
  7673                           ; 1 bytes @ 0x4
  7674                           
  7675  0024                     ??_I2C_MasterClose:	
  7676                           ; 1 bytes @ 0x4
  7677                           
  7678  0024                     ??_I2C_MasterStart:	
  7679                           ; 1 bytes @ 0x4
  7680                           
  7681  0024                     ?_I2C_SetCallback:	
  7682                           ; 1 bytes @ 0x4
  7683                           
  7684  0024                     ??_PIN_MANAGER_Initialize:	
  7685                           ; 1 bytes @ 0x4
  7686                           
  7687  0024                     ??_OSCILLATOR_Initialize:	
  7688                           ; 1 bytes @ 0x4
  7689                           
  7690  0024                     ??_ADC_Initialize:	
  7691                           ; 1 bytes @ 0x4
  7692                           
  7693  0024                     ??_PWM3_Initialize:	
  7694                           ; 1 bytes @ 0x4
  7695                           
  7696  0024                     ?_EUSART_SetRxInterruptHandler:	
  7697                           ; 1 bytes @ 0x4
  7698                           
  7699  0024                     ?_EUSART_SetTxInterruptHandler:	
  7700                           ; 1 bytes @ 0x4
  7701                           
  7702  0024                     ?_EUSART_SetFramingErrorHandler:	
  7703                           ; 1 bytes @ 0x4
  7704                           
  7705  0024                     ?_EUSART_SetOverrunErrorHandler:	
  7706                           ; 1 bytes @ 0x4
  7707                           
  7708  0024                     ?_EUSART_SetErrorHandler:	
  7709                           ; 1 bytes @ 0x4
  7710                           
  7711  0024                     ?_TMR2_SetInterruptHandler:	
  7712                           ; 1 bytes @ 0x4
  7713                           
  7714  0024                     ??_COS_TimerSetup:	
  7715                           ; 1 bytes @ 0x4
  7716                           
  7717  0024                     ??_I2C_Initialize:	
  7718                           ; 1 bytes @ 0x4
  7719                           
  7720  0024                     ??_I2C_MasterOperation:	
  7721                           ; 1 bytes @ 0x4
  7722                           
  7723  0024                     ??_EUSART_Write:	
  7724                           ; 1 bytes @ 0x4
  7725                           
  7726  0024                     ??_COS_Init:	
  7727                           ; 1 bytes @ 0x4
  7728                           
  7729  0024                     ??_COS_TmrHandler:	
  7730                           ; 1 bytes @ 0x4
  7731                           
  7732  0024                     ?___wmul:	
  7733                           ; 1 bytes @ 0x4
  7734                           
  7735  0024                     ?___lwdiv:	
  7736                           ; 2 bytes @ 0x4
  7737                           
  7738  0024                     ?___ftpack:	
  7739                           ; 2 bytes @ 0x4
  7740                           
  7741  0024                     ?___lmul:	
  7742                           ; 3 bytes @ 0x4
  7743                           
  7744  0024                     ?___fttol:	
  7745                           ; 4 bytes @ 0x4
  7746                           
  7747  0024                     I2C_SetBuffer@buffer:	
  7748                           ; 4 bytes @ 0x4
  7749                           
  7750  0024                     I2C_SetInterruptHandler@InterruptHandler:	
  7751                           ; 2 bytes @ 0x4
  7752                           
  7753  0024                     I2C_SetCallback@cb:	
  7754                           ; 2 bytes @ 0x4
  7755                           
  7756  0024                     EUSART_SetFramingErrorHandler@interruptHandler:	
  7757                           ; 2 bytes @ 0x4
  7758                           
  7759  0024                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  7760                           ; 2 bytes @ 0x4
  7761                           
  7762  0024                     EUSART_SetErrorHandler@interruptHandler:	
  7763                           ; 2 bytes @ 0x4
  7764                           
  7765  0024                     EUSART_SetTxInterruptHandler@interruptHandler:	
  7766                           ; 2 bytes @ 0x4
  7767                           
  7768  0024                     EUSART_SetRxInterruptHandler@interruptHandler:	
  7769                           ; 2 bytes @ 0x4
  7770                           
  7771  0024                     TMR2_SetInterruptHandler@InterruptHandler:	
  7772                           ; 2 bytes @ 0x4
  7773                           
  7774  0024                     ___wmul@multiplier:	
  7775                           ; 2 bytes @ 0x4
  7776                           
  7777  0024                     ___lwdiv@divisor:	
  7778                           ; 2 bytes @ 0x4
  7779                           
  7780  0024                     ___ftpack@arg:	
  7781                           ; 2 bytes @ 0x4
  7782                           
  7783  0024                     ___ftge@ff1:	
  7784                           ; 3 bytes @ 0x4
  7785                           
  7786  0024                     ___fttol@f1:	
  7787                           ; 3 bytes @ 0x4
  7788                           
  7789  0024                     ___lmul@multiplier:	
  7790                           ; 3 bytes @ 0x4
  7791                           
  7792                           
  7793                           ; 4 bytes @ 0x4
  7794  0024                     	ds	1
  7795  0025                     I2C_Close@returnValue:	
  7796  0025                     I2C_MasterOperation@read:	
  7797                           ; 1 bytes @ 0x5
  7798                           
  7799  0025                     EUSART_Write@txData:	
  7800                           ; 1 bytes @ 0x5
  7801                           
  7802                           
  7803                           ; 1 bytes @ 0x5
  7804  0025                     	ds	1
  7805  0026                     ??_I2C_Open:	
  7806  0026                     ??_I2C_SetInterruptHandler:	
  7807                           ; 1 bytes @ 0x6
  7808                           
  7809  0026                     ??_TMR2_Initialize:	
  7810                           ; 1 bytes @ 0x6
  7811                           
  7812  0026                     ??_EUSART_Initialize:	
  7813                           ; 1 bytes @ 0x6
  7814                           
  7815  0026                     ??_EUSART_SetRxInterruptHandler:	
  7816                           ; 1 bytes @ 0x6
  7817                           
  7818  0026                     ??_EUSART_SetTxInterruptHandler:	
  7819                           ; 1 bytes @ 0x6
  7820                           
  7821  0026                     ??_EUSART_SetFramingErrorHandler:	
  7822                           ; 1 bytes @ 0x6
  7823                           
  7824  0026                     ??_EUSART_SetOverrunErrorHandler:	
  7825                           ; 1 bytes @ 0x6
  7826                           
  7827  0026                     ??_EUSART_SetErrorHandler:	
  7828                           ; 1 bytes @ 0x6
  7829                           
  7830  0026                     ??_TMR2_SetInterruptHandler:	
  7831                           ; 1 bytes @ 0x6
  7832                           
  7833  0026                     I2C_MasterOperation@returnValue:	
  7834                           ; 1 bytes @ 0x6
  7835                           
  7836  0026                     I2C_SetCallback@ptr:	
  7837                           ; 1 bytes @ 0x6
  7838                           
  7839  0026                     I2C_SetBuffer@bufferSize:	
  7840                           ; 1 bytes @ 0x6
  7841                           
  7842  0026                     ___wmul@multiplicand:	
  7843                           ; 2 bytes @ 0x6
  7844                           
  7845  0026                     ___lwdiv@dividend:	
  7846                           ; 2 bytes @ 0x6
  7847                           
  7848                           
  7849                           ; 2 bytes @ 0x6
  7850  0026                     	ds	1
  7851  0027                     ??_I2C_MasterWrite:	
  7852  0027                     ??_I2C_MasterRead:	
  7853                           ; 1 bytes @ 0x7
  7854                           
  7855  0027                     ??_I2C_SetCallback:	
  7856                           ; 1 bytes @ 0x7
  7857                           
  7858  0027                     ??_SYSTEM_Initialize:	
  7859                           ; 1 bytes @ 0x7
  7860                           
  7861  0027                     I2C_Open@address:	
  7862                           ; 1 bytes @ 0x7
  7863                           
  7864  0027                     COS_Init@tempbyte1:	
  7865                           ; 1 bytes @ 0x7
  7866                           
  7867  0027                     ___ftpack@exp:	
  7868                           ; 1 bytes @ 0x7
  7869                           
  7870  0027                     ___ftge@ff2:	
  7871                           ; 1 bytes @ 0x7
  7872                           
  7873                           
  7874                           ; 3 bytes @ 0x7
  7875  0027                     	ds	1
  7876  0028                     ??_I2C_SetBuffer:	
  7877  0028                     ??___wmul:	
  7878                           ; 1 bytes @ 0x8
  7879                           
  7880  0028                     ??___fttol:	
  7881                           ; 1 bytes @ 0x8
  7882                           
  7883  0028                     ??___lwdiv:	
  7884                           ; 1 bytes @ 0x8
  7885                           
  7886  0028                     I2C_Open@returnValue:	
  7887                           ; 1 bytes @ 0x8
  7888                           
  7889  0028                     I2C_SetCallback@idx:	
  7890                           ; 1 bytes @ 0x8
  7891                           
  7892  0028                     COS_Init@tempbyte2:	
  7893                           ; 1 bytes @ 0x8
  7894                           
  7895  0028                     COS_TmrHandler@tempbyte1:	
  7896                           ; 1 bytes @ 0x8
  7897                           
  7898  0028                     ___ftpack@sign:	
  7899                           ; 1 bytes @ 0x8
  7900                           
  7901  0028                     ___wmul@product:	
  7902                           ; 1 bytes @ 0x8
  7903                           
  7904  0028                     ___lmul@multiplicand:	
  7905                           ; 2 bytes @ 0x8
  7906                           
  7907                           
  7908                           ; 4 bytes @ 0x8
  7909  0028                     	ds	1
  7910  0029                     ?_I2C_SetAddressNackCallback:	
  7911  0029                     ??___ftpack:	
  7912                           ; 1 bytes @ 0x9
  7913                           
  7914  0029                     ?_I2C_ReadNBytes:	
  7915                           ; 1 bytes @ 0x9
  7916                           
  7917  0029                     I2C_ReadNBytes@data:	
  7918                           ; 1 bytes @ 0x9
  7919                           
  7920  0029                     COS_TmrHandler@tempbyte2:	
  7921                           ; 1 bytes @ 0x9
  7922                           
  7923  0029                     I2C_SetAddressNackCallback@cb:	
  7924                           ; 1 bytes @ 0x9
  7925                           
  7926  0029                     ___lwdiv@quotient:	
  7927                           ; 2 bytes @ 0x9
  7928                           
  7929                           
  7930                           ; 2 bytes @ 0x9
  7931  0029                     	ds	1
  7932  002A                     ??___ftge:	
  7933  002A                     I2C_ReadNBytes@len:	
  7934                           ; 1 bytes @ 0xA
  7935                           
  7936                           
  7937                           ; 2 bytes @ 0xA
  7938  002A                     	ds	1
  7939  002B                     I2C_SetAddressNackCallback@ptr:	
  7940  002B                     ___lwdiv@counter:	
  7941                           ; 1 bytes @ 0xB
  7942                           
  7943                           
  7944                           ; 1 bytes @ 0xB
  7945  002B                     	ds	1
  7946  002C                     ??_I2C_SetAddressNackCallback:	
  7947  002C                     ??_I2C_ReadNBytes:	
  7948                           ; 1 bytes @ 0xC
  7949                           
  7950  002C                     ??___lmul:	
  7951                           ; 1 bytes @ 0xC
  7952                           
  7953  002C                     ?___lwmod:	
  7954                           ; 1 bytes @ 0xC
  7955                           
  7956  002C                     ?___lwtoft:	
  7957                           ; 2 bytes @ 0xC
  7958                           
  7959  002C                     I2C_ReadNBytes@address:	
  7960                           ; 3 bytes @ 0xC
  7961                           
  7962  002C                     ___fttol@sign1:	
  7963                           ; 1 bytes @ 0xC
  7964                           
  7965  002C                     ___lwmod@divisor:	
  7966                           ; 1 bytes @ 0xC
  7967                           
  7968  002C                     ___lwtoft@c:	
  7969                           ; 2 bytes @ 0xC
  7970                           
  7971  002C                     ___lmul@product:	
  7972                           ; 2 bytes @ 0xC
  7973                           
  7974                           
  7975                           ; 4 bytes @ 0xC
  7976  002C                     	ds	1
  7977  002D                     ?_I2C_WriteNBytes:	
  7978  002D                     I2C_WriteNBytes@data:	
  7979                           ; 1 bytes @ 0xD
  7980                           
  7981  002D                     ___fttol@lval:	
  7982                           ; 1 bytes @ 0xD
  7983                           
  7984                           
  7985                           ; 4 bytes @ 0xD
  7986  002D                     	ds	1
  7987  002E                     I2C_WriteNBytes@len:	
  7988  002E                     ___lwmod@dividend:	
  7989                           ; 2 bytes @ 0xE
  7990                           
  7991                           
  7992                           ; 2 bytes @ 0xE
  7993  002E                     	ds	1
  7994  002F                     ??___lwtoft:	
  7995                           
  7996                           ; 1 bytes @ 0xF
  7997  002F                     	ds	1
  7998  0030                     ??_I2C_WriteNBytes:	
  7999  0030                     ??___lwmod:	
  8000                           ; 1 bytes @ 0x10
  8001                           
  8002  0030                     ?___ftmul:	
  8003                           ; 1 bytes @ 0x10
  8004                           
  8005  0030                     I2C_WriteNBytes@address:	
  8006                           ; 3 bytes @ 0x10
  8007                           
  8008  0030                     ___ftmul@f1:	
  8009                           ; 1 bytes @ 0x10
  8010                           
  8011                           
  8012                           ; 3 bytes @ 0x10
  8013  0030                     	ds	1
  8014  0031                     ___fttol@exp1:	
  8015  0031                     ___lwmod@counter:	
  8016                           ; 1 bytes @ 0x11
  8017                           
  8018                           
  8019                           ; 1 bytes @ 0x11
  8020  0031                     	ds	1
  8021  0032                     ?_abs:	
  8022  0032                     ?_sprintf:	
  8023                           ; 2 bytes @ 0x12
  8024                           
  8025  0032                     sprintf@f:	
  8026                           ; 2 bytes @ 0x12
  8027                           
  8028  0032                     abs@a:	
  8029                           ; 2 bytes @ 0x12
  8030                           
  8031                           
  8032                           ; 2 bytes @ 0x12
  8033  0032                     	ds	1
  8034  0033                     ___ftmul@f2:	
  8035                           
  8036                           ; 3 bytes @ 0x13
  8037  0033                     	ds	1
  8038  0034                     ??_abs:	
  8039                           
  8040                           ; 1 bytes @ 0x14
  8041  0034                     	ds	2
  8042  0036                     ??_sprintf:	
  8043  0036                     ??___ftmul:	
  8044                           ; 1 bytes @ 0x16
  8045                           
  8046  0036                     ?___awtoft:	
  8047                           ; 1 bytes @ 0x16
  8048                           
  8049  0036                     ___awtoft@c:	
  8050                           ; 3 bytes @ 0x16
  8051                           
  8052                           
  8053                           ; 2 bytes @ 0x16
  8054  0036                     	ds	3
  8055  0039                     ??___awtoft:	
  8056                           
  8057                           ; 1 bytes @ 0x19
  8058  0039                     	ds	1
  8059  003A                     sprintf@ap:	
  8060  003A                     ___ftmul@exp:	
  8061                           ; 1 bytes @ 0x1A
  8062                           
  8063                           
  8064                           ; 1 bytes @ 0x1A
  8065  003A                     	ds	1
  8066  003B                     sprintf@flag:	
  8067  003B                     ___awtoft@sign:	
  8068                           ; 1 bytes @ 0x1B
  8069                           
  8070  003B                     ___ftmul@f3_as_product:	
  8071                           ; 1 bytes @ 0x1B
  8072                           
  8073                           
  8074                           ; 3 bytes @ 0x1B
  8075  003B                     	ds	1
  8076  003C                     sprintf@prec:	
  8077                           
  8078                           ; 1 bytes @ 0x1C
  8079  003C                     	ds	1
  8080  003D                     sprintf@val:	
  8081                           
  8082                           ; 2 bytes @ 0x1D
  8083  003D                     	ds	1
  8084  003E                     ___ftmul@cntr:	
  8085                           
  8086                           ; 1 bytes @ 0x1E
  8087  003E                     	ds	1
  8088  003F                     sprintf@sp:	
  8089  003F                     ___ftmul@sign:	
  8090                           ; 1 bytes @ 0x1F
  8091                           
  8092                           
  8093                           ; 1 bytes @ 0x1F
  8094  003F                     	ds	1
  8095  0040                     ?___ftdiv:	
  8096  0040                     sprintf@c:	
  8097                           ; 3 bytes @ 0x20
  8098                           
  8099  0040                     ___ftdiv@f2:	
  8100                           ; 1 bytes @ 0x20
  8101                           
  8102                           
  8103                           ; 3 bytes @ 0x20
  8104  0040                     	ds	3
  8105  0043                     ___ftdiv@f1:	
  8106                           
  8107                           ; 3 bytes @ 0x23
  8108  0043                     	ds	3
  8109  0046                     ??___ftdiv:	
  8110                           
  8111                           ; 1 bytes @ 0x26
  8112  0046                     	ds	4
  8113  004A                     ___ftdiv@cntr:	
  8114                           
  8115                           ; 1 bytes @ 0x2A
  8116  004A                     	ds	1
  8117  004B                     ___ftdiv@f3:	
  8118                           
  8119                           ; 3 bytes @ 0x2B
  8120  004B                     	ds	3
  8121  004E                     ___ftdiv@exp:	
  8122                           
  8123                           ; 1 bytes @ 0x2E
  8124  004E                     	ds	1
  8125  004F                     ___ftdiv@sign:	
  8126                           
  8127                           ; 1 bytes @ 0x2F
  8128  004F                     	ds	1
  8129  0050                     ?_SHT3x_CalcRelativeHumidity:	
  8130  0050                     ?___ftadd:	
  8131                           ; 2 bytes @ 0x30
  8132                           
  8133  0050                     ___ftadd@f1:	
  8134                           ; 3 bytes @ 0x30
  8135                           
  8136                           
  8137                           ; 3 bytes @ 0x30
  8138  0050                     	ds	2
  8139  0052                     ??_SHT3x_CalcRelativeHumidity:	
  8140                           
  8141                           ; 1 bytes @ 0x32
  8142  0052                     	ds	1
  8143  0053                     ___ftadd@f2:	
  8144                           
  8145                           ; 3 bytes @ 0x33
  8146  0053                     	ds	3
  8147  0056                     ??___ftadd:	
  8148                           
  8149                           ; 1 bytes @ 0x36
  8150  0056                     	ds	4
  8151  005A                     ___ftadd@sign:	
  8152                           
  8153                           ; 1 bytes @ 0x3A
  8154  005A                     	ds	1
  8155  005B                     ___ftadd@exp2:	
  8156                           
  8157                           ; 1 bytes @ 0x3B
  8158  005B                     	ds	1
  8159  005C                     ___ftadd@exp1:	
  8160                           
  8161                           ; 1 bytes @ 0x3C
  8162  005C                     	ds	1
  8163  005D                     ?_SHT3x_CalcTemperatureC:	
  8164                           
  8165                           ; 2 bytes @ 0x3D
  8166  005D                     	ds	2
  8167  005F                     ??_SHT3x_CalcTemperatureC:	
  8168                           
  8169                           ; 1 bytes @ 0x3F
  8170  005F                     	ds	6
  8171  0065                     ??_COS_TskMan:	
  8172                           
  8173                           ; 1 bytes @ 0x45
  8174  0065                     	ds	4
  8175  0069                     ??_main:	
  8176                           
  8177                           	psect	maintext
  8178  0A49                     __pmaintext:	
  8179                           ; 1 bytes @ 0x49
  8180 ;;
  8181 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  8182 ;;
  8183 ;; *************** function _main *****************
  8184 ;; Defined at:
  8185 ;;		line 51 in file "main.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : B1F/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels required when called:   13
  8205 ;; This function calls:
  8206 ;;		_COS_Init
  8207 ;;		_COS_TmrHandler
  8208 ;;		_COS_TskMan
  8209 ;;		_SYSTEM_Initialize
  8210 ;;		_TMR2_SetInterruptHandler
  8211 ;; This function is called by:
  8212 ;;		Startup code after reset
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _main
  8218  0A49                     _main:	
  8219                           
  8220                           ;main.c: 54: SYSTEM_Initialize();
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8224  0A49  3189  21EB  318A   	fcall	_SYSTEM_Initialize
  8225                           
  8226                           ;main.c: 55: COS_Init();
  8227  0A4C  318D  25AC  318A   	fcall	_COS_Init
  8228                           
  8229                           ;main.c: 56: TMR2_SetInterruptHandler(Led2_PWM);
  8230  0A4F  30CD               	movlw	low _Led2_PWM
  8231  0A50  0020               	movlb	0	; select bank0
  8232  0A51  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8233  0A52  300E               	movlw	high _Led2_PWM
  8234  0A53  00A5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8235  0A54  3188  20F4  318A   	fcall	_TMR2_SetInterruptHandler
  8236                           
  8237                           ;main.c: 62: (INTCONbits.GIE = 1);
  8238  0A57  178B               	bsf	11,7	;volatile
  8239                           
  8240                           ;main.c: 65: (INTCONbits.PEIE = 1);
  8241  0A58  170B               	bsf	11,6	;volatile
  8242  0A59                     l1153:	
  8243                           ;main.c: 73: while (1)
  8244                           
  8245                           
  8246                           ;main.c: 74: {
  8247                           ;main.c: 75: COS_TmrHandler();
  8248  0A59  318F  278F  318A   	fcall	_COS_TmrHandler
  8249                           
  8250                           ;main.c: 77: if (COS_tsk_ena)
  8251  0A5C  0021               	movlb	1	; select bank1
  8252  0A5D  086E               	movf	_COS_tsk_ena^(0+128),w
  8253  0A5E  1903               	btfsc	3,2
  8254  0A5F  2A59               	goto	l1153
  8255                           
  8256                           ;main.c: 78: {
  8257                           ;main.c: 79: COS_TskMan();
  8258  0A60  3187  2776  318A   	fcall	_COS_TskMan
  8259  0A63  2A59               	goto	l1153
  8260  0A64                     __end_of_main:	
  8261                           
  8262                           	psect	text1
  8263  09EB                     __ptext1:	
  8264 ;; *************** function _SYSTEM_Initialize *****************
  8265 ;; Defined at:
  8266 ;;		line 50 in file "mcc_generated_files/mcc.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;		None
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;		None
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      void 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0, pclath, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:        0 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    9
  8287 ;; This function calls:
  8288 ;;		_ADC_Initialize
  8289 ;;		_EUSART_Initialize
  8290 ;;		_I2C_Initialize
  8291 ;;		_OSCILLATOR_Initialize
  8292 ;;		_PIN_MANAGER_Initialize
  8293 ;;		_PWM3_Initialize
  8294 ;;		_TMR2_Initialize
  8295 ;; This function is called by:
  8296 ;;		_main
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _SYSTEM_Initialize
  8302  09EB                     _SYSTEM_Initialize:	
  8303                           
  8304                           ;mcc.c: 52: I2C_Initialize();
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8308  09EB  3188  20EB  3189   	fcall	_I2C_Initialize
  8309                           
  8310                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  8311  09EE  318D  2570  3189   	fcall	_PIN_MANAGER_Initialize
  8312                           
  8313                           ;mcc.c: 54: OSCILLATOR_Initialize();
  8314  09F1  3188  209D  3189   	fcall	_OSCILLATOR_Initialize
  8315                           
  8316                           ;mcc.c: 55: ADC_Initialize();
  8317  09F4  3188  20B5  3189   	fcall	_ADC_Initialize
  8318                           
  8319                           ;mcc.c: 56: PWM3_Initialize();
  8320  09F7  3189  2113  3189   	fcall	_PWM3_Initialize
  8321                           
  8322                           ;mcc.c: 57: TMR2_Initialize();
  8323  09FA  3189  21D6  3189   	fcall	_TMR2_Initialize
  8324                           
  8325                           ;mcc.c: 58: EUSART_Initialize();
  8326  09FD  318D  25EF         	fcall	_EUSART_Initialize
  8327  09FF  0008               	return
  8328  0A00                     __end_of_SYSTEM_Initialize:	
  8329                           
  8330                           	psect	text2
  8331  09D6                     __ptext2:	
  8332 ;; *************** function _TMR2_Initialize *****************
  8333 ;; Defined at:
  8334 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    8
  8355 ;; This function calls:
  8356 ;;		_TMR2_SetInterruptHandler
  8357 ;; This function is called by:
  8358 ;;		_SYSTEM_Initialize
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _TMR2_Initialize
  8364  09D6                     _TMR2_Initialize:	
  8365                           
  8366                           ;tmr2.c: 69: T2CLKCON = 0x00;
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8370  09D6  0020               	movlb	0	; select bank0
  8371  09D7  019E               	clrf	30	;volatile
  8372                           
  8373                           ;tmr2.c: 72: T2HLT = 0x00;
  8374  09D8  019D               	clrf	29	;volatile
  8375                           
  8376                           ;tmr2.c: 75: T2RST = 0x00;
  8377  09D9  019F               	clrf	31	;volatile
  8378                           
  8379                           ;tmr2.c: 78: T2PR = 0x3E;
  8380  09DA  303E               	movlw	62
  8381  09DB  009B               	movwf	27	;volatile
  8382                           
  8383                           ;tmr2.c: 81: T2TMR = 0x00;
  8384  09DC  019A               	clrf	26	;volatile
  8385                           
  8386                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  8387  09DD  1090               	bcf	16,1	;volatile
  8388                           
  8389                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  8390  09DE  0021               	movlb	1	; select bank1
  8391  09DF  1490               	bsf	16,1	;volatile
  8392                           
  8393                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  8394  09E0  3012               	movlw	low _TMR2_DefaultInterruptHandler
  8395  09E1  0020               	movlb	0	; select bank0
  8396  09E2  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8397  09E3  3008               	movlw	high _TMR2_DefaultInterruptHandler
  8398  09E4  00A5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8399  09E5  3188  20F4         	fcall	_TMR2_SetInterruptHandler
  8400                           
  8401                           ;tmr2.c: 93: T2CON = 0xE0;
  8402  09E7  30E0               	movlw	224
  8403  09E8  0020               	movlb	0	; select bank0
  8404  09E9  009C               	movwf	28	;volatile
  8405  09EA  0008               	return
  8406  09EB                     __end_of_TMR2_Initialize:	
  8407                           
  8408                           	psect	text3
  8409  08F4                     __ptext3:	
  8410 ;; *************** function _TMR2_SetInterruptHandler *****************
  8411 ;; Defined at:
  8412 ;;		line 193 in file "mcc_generated_files/tmr2.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  InterruptHan    2    4[BANK0 ] PTR FTN()void 
  8415 ;;		 -> Led2_PWM(1), TMR2_DefaultInterruptHandler(1), 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;		None
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      void 
  8420 ;; Registers used:
  8421 ;;		wreg
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:        2 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    7
  8434 ;; This function calls:
  8435 ;;		Nothing
  8436 ;; This function is called by:
  8437 ;;		_TMR2_Initialize
  8438 ;;		_main
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _TMR2_SetInterruptHandler
  8444  08F4                     _TMR2_SetInterruptHandler:	
  8445                           
  8446                           ;tmr2.c: 194: TMR2_InterruptHandler = InterruptHandler;
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8450  08F4  0020               	movlb	0	; select bank0
  8451  08F5  0825               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  8452  08F6  0022               	movlb	2	; select bank2
  8453  08F7  00DF               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  8454  08F8  0020               	movlb	0	; select bank0
  8455  08F9  0824               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  8456  08FA  0022               	movlb	2	; select bank2
  8457  08FB  00DE               	movwf	_TMR2_InterruptHandler^(0+256)
  8458  08FC  0008               	return
  8459  08FD                     __end_of_TMR2_SetInterruptHandler:	
  8460                           
  8461                           	psect	text4
  8462  0913                     __ptext4:	
  8463 ;; *************** function _PWM3_Initialize *****************
  8464 ;; Defined at:
  8465 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;		None
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;		None
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;Total ram usage:        0 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    7
  8486 ;; This function calls:
  8487 ;;		Nothing
  8488 ;; This function is called by:
  8489 ;;		_SYSTEM_Initialize
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           
  8494                           ;psect for function _PWM3_Initialize
  8495  0913                     _PWM3_Initialize:	
  8496                           
  8497                           ;pwm3.c: 62: PWM3CON = 0x80;
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  8501  0913  3080               	movlw	128
  8502  0914  002C               	movlb	12	; select bank12
  8503  0915  0099               	movwf	25	;volatile
  8504                           
  8505                           ;pwm3.c: 65: PWM3DCH = 0x1F;
  8506  0916  301F               	movlw	31
  8507  0917  0098               	movwf	24	;volatile
  8508                           
  8509                           ;pwm3.c: 68: PWM3DCL = 0x40;
  8510  0918  3040               	movlw	64
  8511  0919  0097               	movwf	23	;volatile
  8512                           
  8513                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  8514  091A  30CF               	movlw	-49
  8515  091B  0025               	movlb	5	; select bank5
  8516  091C  059E               	andwf	30,f	;volatile
  8517  091D  0008               	return
  8518  091E                     __end_of_PWM3_Initialize:	
  8519                           
  8520                           	psect	text5
  8521  0D70                     __ptext5:	
  8522 ;; *************** function _PIN_MANAGER_Initialize *****************
  8523 ;; Defined at:
  8524 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;		None
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      void 
  8531 ;; Registers used:
  8532 ;;		wreg, status,2
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;Total ram usage:        0 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    7
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_SYSTEM_Initialize
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _PIN_MANAGER_Initialize
  8554  0D70                     _PIN_MANAGER_Initialize:	
  8555                           
  8556                           ;pin_manager.c: 60: LATA = 0x00;
  8557                           
  8558                           ;incstack = 0
  8559                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8560  0D70  0022               	movlb	2	; select bank2
  8561  0D71  018C               	clrf	12	;volatile
  8562                           
  8563                           ;pin_manager.c: 61: LATB = 0x00;
  8564  0D72  018D               	clrf	13	;volatile
  8565                           
  8566                           ;pin_manager.c: 62: LATC = 0x00;
  8567  0D73  018E               	clrf	14	;volatile
  8568                           
  8569                           ;pin_manager.c: 67: TRISA = 0x33;
  8570  0D74  3033               	movlw	51
  8571  0D75  0021               	movlb	1	; select bank1
  8572  0D76  008C               	movwf	12	;volatile
  8573                           
  8574                           ;pin_manager.c: 68: TRISB = 0x70;
  8575  0D77  3070               	movlw	112
  8576  0D78  008D               	movwf	13	;volatile
  8577                           
  8578                           ;pin_manager.c: 69: TRISC = 0xDF;
  8579  0D79  30DF               	movlw	223
  8580  0D7A  008E               	movwf	14	;volatile
  8581                           
  8582                           ;pin_manager.c: 74: ANSELC = 0xCF;
  8583  0D7B  30CF               	movlw	207
  8584  0D7C  0023               	movlb	3	; select bank3
  8585  0D7D  008E               	movwf	14	;volatile
  8586                           
  8587                           ;pin_manager.c: 75: ANSELB = 0x80;
  8588  0D7E  3080               	movlw	128
  8589  0D7F  008D               	movwf	13	;volatile
  8590                           
  8591                           ;pin_manager.c: 76: ANSELA = 0x13;
  8592  0D80  3013               	movlw	19
  8593  0D81  008C               	movwf	12	;volatile
  8594                           
  8595                           ;pin_manager.c: 81: WPUB = 0x00;
  8596  0D82  0024               	movlb	4	; select bank4
  8597  0D83  018D               	clrf	13	;volatile
  8598                           
  8599                           ;pin_manager.c: 82: WPUA = 0x00;
  8600  0D84  018C               	clrf	12	;volatile
  8601                           
  8602                           ;pin_manager.c: 83: WPUC = 0x00;
  8603  0D85  018E               	clrf	14	;volatile
  8604                           
  8605                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  8606  0D86  0021               	movlb	1	; select bank1
  8607  0D87  1795               	bsf	21,7	;volatile
  8608                           
  8609                           ;pin_manager.c: 89: ODCONA = 0x00;
  8610  0D88  0025               	movlb	5	; select bank5
  8611  0D89  018C               	clrf	12	;volatile
  8612                           
  8613                           ;pin_manager.c: 90: ODCONB = 0x00;
  8614  0D8A  018D               	clrf	13	;volatile
  8615                           
  8616                           ;pin_manager.c: 91: ODCONC = 0x00;
  8617  0D8B  018E               	clrf	14	;volatile
  8618                           
  8619                           ;pin_manager.c: 96: SLRCONA = 0x37;
  8620  0D8C  3037               	movlw	55
  8621  0D8D  0026               	movlb	6	; select bank6
  8622  0D8E  008C               	movwf	12	;volatile
  8623                           
  8624                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  8625  0D8F  30F0               	movlw	240
  8626  0D90  008D               	movwf	13	;volatile
  8627                           
  8628                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  8629  0D91  30FF               	movlw	255
  8630  0D92  008E               	movwf	14	;volatile
  8631                           
  8632                           ;pin_manager.c: 103: INLVLA = 0x3F;
  8633  0D93  303F               	movlw	63
  8634  0D94  0027               	movlb	7	; select bank7
  8635  0D95  008C               	movwf	12	;volatile
  8636                           
  8637                           ;pin_manager.c: 104: INLVLB = 0xF0;
  8638  0D96  30F0               	movlw	240
  8639  0D97  008D               	movwf	13	;volatile
  8640                           
  8641                           ;pin_manager.c: 105: INLVLC = 0xFF;
  8642  0D98  30FF               	movlw	255
  8643  0D99  008E               	movwf	14	;volatile
  8644                           
  8645                           ;pin_manager.c: 114: RXPPS = 0x0D;
  8646  0D9A  300D               	movlw	13
  8647  0D9B  003C               	movlb	28	; select bank28
  8648  0D9C  00A4               	movwf	36	;volatile
  8649                           
  8650                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  8651  0D9D  300C               	movlw	12
  8652  0D9E  00A1               	movwf	33	;volatile
  8653                           
  8654                           ;pin_manager.c: 116: RB6PPS = 0x10;
  8655  0D9F  3010               	movlw	16
  8656  0DA0  003D               	movlb	29	; select bank29
  8657  0DA1  009E               	movwf	30	;volatile
  8658                           
  8659                           ;pin_manager.c: 117: RB7PPS = 0x12;
  8660  0DA2  3012               	movlw	18
  8661  0DA3  009F               	movwf	31	;volatile
  8662                           
  8663                           ;pin_manager.c: 118: RB4PPS = 0x11;
  8664  0DA4  3011               	movlw	17
  8665  0DA5  009C               	movwf	28	;volatile
  8666                           
  8667                           ;pin_manager.c: 119: RC5PPS = 0x0E;
  8668  0DA6  300E               	movlw	14
  8669  0DA7  00A5               	movwf	37	;volatile
  8670                           
  8671                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  8672  0DA8  300E               	movlw	14
  8673  0DA9  003C               	movlb	28	; select bank28
  8674  0DAA  00A0               	movwf	32	;volatile
  8675  0DAB  0008               	return
  8676  0DAC                     __end_of_PIN_MANAGER_Initialize:	
  8677                           
  8678                           	psect	text6
  8679  089D                     __ptext6:	
  8680 ;; *************** function _OSCILLATOR_Initialize *****************
  8681 ;; Defined at:
  8682 ;;		line 61 in file "mcc_generated_files/mcc.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;		None
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;		None
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  1    wreg      void 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;Total ram usage:        0 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    7
  8703 ;; This function calls:
  8704 ;;		Nothing
  8705 ;; This function is called by:
  8706 ;;		_SYSTEM_Initialize
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _OSCILLATOR_Initialize
  8712  089D                     _OSCILLATOR_Initialize:	
  8713                           
  8714                           ;mcc.c: 64: OSCCON = 0x78;
  8715                           
  8716                           ;incstack = 0
  8717                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8718  089D  3078               	movlw	120
  8719  089E  0021               	movlb	1	; select bank1
  8720  089F  0099               	movwf	25	;volatile
  8721                           
  8722                           ;mcc.c: 66: OSCTUNE = 0x00;
  8723  08A0  0198               	clrf	24	;volatile
  8724                           
  8725                           ;mcc.c: 68: BORCON = 0x00;
  8726  08A1  0022               	movlb	2	; select bank2
  8727  08A2  0196               	clrf	22	;volatile
  8728  08A3  0008               	return
  8729  08A4                     __end_of_OSCILLATOR_Initialize:	
  8730                           
  8731                           	psect	text7
  8732  08EB                     __ptext7:	
  8733 ;; *************** function _I2C_Initialize *****************
  8734 ;; Defined at:
  8735 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;		None
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;		None
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, status,2
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;Total ram usage:        0 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    7
  8756 ;; This function calls:
  8757 ;;		Nothing
  8758 ;; This function is called by:
  8759 ;;		_SYSTEM_Initialize
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function _I2C_Initialize
  8765  08EB                     _I2C_Initialize:	
  8766                           
  8767                           ;i2c_master.c: 169: SSP1STAT = 0x00;
  8768                           
  8769                           ;incstack = 0
  8770                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  8771  08EB  0024               	movlb	4	; select bank4
  8772  08EC  0194               	clrf	20	;volatile
  8773                           
  8774                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  8775  08ED  3008               	movlw	8
  8776  08EE  0095               	movwf	21	;volatile
  8777                           
  8778                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  8779  08EF  0196               	clrf	22	;volatile
  8780                           
  8781                           ;i2c_master.c: 172: SSP1ADD = 0x27;
  8782  08F0  3027               	movlw	39
  8783  08F1  0092               	movwf	18	;volatile
  8784                           
  8785                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  8786  08F2  1295               	bcf	21,5	;volatile
  8787  08F3  0008               	return
  8788  08F4                     __end_of_I2C_Initialize:	
  8789                           
  8790                           	psect	text8
  8791  0DEF                     __ptext8:	
  8792 ;; *************** function _EUSART_Initialize *****************
  8793 ;; Defined at:
  8794 ;;		line 88 in file "mcc_generated_files/eusart.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2, status,0, pclath, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    8
  8815 ;; This function calls:
  8816 ;;		_EUSART_SetErrorHandler
  8817 ;;		_EUSART_SetFramingErrorHandler
  8818 ;;		_EUSART_SetOverrunErrorHandler
  8819 ;;		_EUSART_SetRxInterruptHandler
  8820 ;;		_EUSART_SetTxInterruptHandler
  8821 ;; This function is called by:
  8822 ;;		_SYSTEM_Initialize
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           
  8827                           ;psect for function _EUSART_Initialize
  8828  0DEF                     _EUSART_Initialize:	
  8829                           
  8830                           ;eusart.c: 91: PIE1bits.RCIE = 0;
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8834  0DEF  0021               	movlb	1	; select bank1
  8835  0DF0  1290               	bcf	16,5	;volatile
  8836                           
  8837                           ;eusart.c: 92: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  8838  0DF1  30BF               	movlw	low _EUSART_Receive_ISR
  8839  0DF2  0020               	movlb	0	; select bank0
  8840  0DF3  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8841  0DF4  300C               	movlw	high _EUSART_Receive_ISR
  8842  0DF5  00A5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8843  0DF6  3188  20D9  318D   	fcall	_EUSART_SetRxInterruptHandler
  8844                           
  8845                           ;eusart.c: 93: PIE1bits.TXIE = 0;
  8846  0DF9  0021               	movlb	1	; select bank1
  8847  0DFA  1210               	bcf	16,4	;volatile
  8848                           
  8849                           ;eusart.c: 94: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
  8850  0DFB  309C               	movlw	low _EUSART_Transmit_ISR
  8851  0DFC  0020               	movlb	0	; select bank0
  8852  0DFD  00A4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  8853  0DFE  300A               	movlw	high _EUSART_Transmit_ISR
  8854  0DFF  00A5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  8855  0E00  3188  20E2  318D   	fcall	_EUSART_SetTxInterruptHandler
  8856                           
  8857                           ;eusart.c: 98: BAUD1CON = 0x08;
  8858  0E03  3008               	movlw	8
  8859  0E04  0023               	movlb	3	; select bank3
  8860  0E05  009F               	movwf	31	;volatile
  8861                           
  8862                           ;eusart.c: 101: RC1STA = 0x90;
  8863  0E06  3090               	movlw	144
  8864  0E07  009D               	movwf	29	;volatile
  8865                           
  8866                           ;eusart.c: 104: TX1STA = 0x24;
  8867  0E08  3024               	movlw	36
  8868  0E09  009E               	movwf	30	;volatile
  8869                           
  8870                           ;eusart.c: 107: SPBRGL = 0xCF;
  8871  0E0A  30CF               	movlw	207
  8872  0E0B  009B               	movwf	27	;volatile
  8873                           
  8874                           ;eusart.c: 110: SPBRGH = 0x00;
  8875  0E0C  019C               	clrf	28	;volatile
  8876                           
  8877                           ;eusart.c: 113: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  8878  0E0D  3011               	movlw	low _EUSART_DefaultFramingErrorHandler
  8879  0E0E  0020               	movlb	0	; select bank0
  8880  0E0F  00A4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8881  0E10  3008               	movlw	high _EUSART_DefaultFramingErrorHandler
  8882  0E11  00A5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8883  0E12  3188  20C7  318D   	fcall	_EUSART_SetFramingErrorHandler
  8884                           
  8885                           ;eusart.c: 114: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  8886  0E15  303A               	movlw	low _EUSART_DefaultOverrunErrorHandler
  8887  0E16  0020               	movlb	0	; select bank0
  8888  0E17  00A4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8889  0E18  3008               	movlw	high _EUSART_DefaultOverrunErrorHandler
  8890  0E19  00A5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8891  0E1A  3188  20D0  318D   	fcall	_EUSART_SetOverrunErrorHandler
  8892                           
  8893                           ;eusart.c: 115: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  8894  0E1D  3013               	movlw	low _EUSART_DefaultErrorHandler
  8895  0E1E  0020               	movlb	0	; select bank0
  8896  0E1F  00A4               	movwf	EUSART_SetErrorHandler@interruptHandler
  8897  0E20  3008               	movlw	high _EUSART_DefaultErrorHandler
  8898  0E21  00A5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8899  0E22  3188  20BE         	fcall	_EUSART_SetErrorHandler
  8900                           
  8901                           ;eusart.c: 117: eusartRxLastError.status = 0;
  8902  0E24  0021               	movlb	1	; select bank1
  8903  0E25  01C9               	clrf	_eusartRxLastError^(0+128)	;volatile
  8904                           
  8905                           ;eusart.c: 120: eusartTxHead = 0;
  8906  0E26  01CC               	clrf	_eusartTxHead^(0+128)	;volatile
  8907                           
  8908                           ;eusart.c: 121: eusartTxTail = 0;
  8909  0E27  01CB               	clrf	_eusartTxTail^(0+128)	;volatile
  8910                           
  8911                           ;eusart.c: 122: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8912  0E28  3008               	movlw	8
  8913  0E29  0020               	movlb	0	; select bank0
  8914  0E2A  00A6               	movwf	??_EUSART_Initialize
  8915  0E2B  0826               	movf	??_EUSART_Initialize,w
  8916  0E2C  0021               	movlb	1	; select bank1
  8917  0E2D  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  8918                           
  8919                           ;eusart.c: 124: eusartRxHead = 0;
  8920  0E2E  0020               	movlb	0	; select bank0
  8921  0E2F  01EA               	clrf	_eusartRxHead	;volatile
  8922                           
  8923                           ;eusart.c: 125: eusartRxTail = 0;
  8924  0E30  01E9               	clrf	_eusartRxTail	;volatile
  8925                           
  8926                           ;eusart.c: 126: eusartRxCount = 0;
  8927  0E31  0021               	movlb	1	; select bank1
  8928  0E32  01CA               	clrf	_eusartRxCount^(0+128)	;volatile
  8929                           
  8930                           ;eusart.c: 129: PIE1bits.RCIE = 1;
  8931  0E33  1690               	bsf	16,5	;volatile
  8932  0E34  0008               	return
  8933  0E35                     __end_of_EUSART_Initialize:	
  8934                           
  8935                           	psect	text9
  8936  08E2                     __ptext9:	
  8937 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  8938 ;; Defined at:
  8939 ;;		line 285 in file "mcc_generated_files/eusart.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  8942 ;;		 -> EUSART_Transmit_ISR(1), 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;		None
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      void 
  8947 ;; Registers used:
  8948 ;;		wreg
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8954 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;Total ram usage:        2 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:    7
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_EUSART_Initialize
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _EUSART_SetTxInterruptHandler
  8970  08E2                     _EUSART_SetTxInterruptHandler:	
  8971                           
  8972                           ;eusart.c: 286: EUSART_TxDefaultInterruptHandler = interruptHandler;
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  8976  08E2  0020               	movlb	0	; select bank0
  8977  08E3  0825               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  8978  08E4  0022               	movlb	2	; select bank2
  8979  08E5  00E9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  8980  08E6  0020               	movlb	0	; select bank0
  8981  08E7  0824               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  8982  08E8  0022               	movlb	2	; select bank2
  8983  08E9  00E8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  8984  08EA  0008               	return
  8985  08EB                     __end_of_EUSART_SetTxInterruptHandler:	
  8986                           
  8987                           	psect	text10
  8988  08D9                     __ptext10:	
  8989 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  8990 ;; Defined at:
  8991 ;;		line 289 in file "mcc_generated_files/eusart.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  8994 ;;		 -> EUSART_Receive_ISR(1), 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9006 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;Total ram usage:        2 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    7
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_EUSART_Initialize
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           
  9021                           ;psect for function _EUSART_SetRxInterruptHandler
  9022  08D9                     _EUSART_SetRxInterruptHandler:	
  9023                           
  9024                           ;eusart.c: 290: EUSART_RxDefaultInterruptHandler = interruptHandler;
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  9028  08D9  0020               	movlb	0	; select bank0
  9029  08DA  0825               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  9030  08DB  0022               	movlb	2	; select bank2
  9031  08DC  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  9032  08DD  0020               	movlb	0	; select bank0
  9033  08DE  0824               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  9034  08DF  0022               	movlb	2	; select bank2
  9035  08E0  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  9036  08E1  0008               	return
  9037  08E2                     __end_of_EUSART_SetRxInterruptHandler:	
  9038                           
  9039                           	psect	text11
  9040  08D0                     __ptext11:	
  9041 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  9042 ;; Defined at:
  9043 ;;		line 277 in file "mcc_generated_files/eusart.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9046 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      void 
  9051 ;; Registers used:
  9052 ;;		wreg
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9058 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;Total ram usage:        2 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    7
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_EUSART_Initialize
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           
  9073                           ;psect for function _EUSART_SetOverrunErrorHandler
  9074  08D0                     _EUSART_SetOverrunErrorHandler:	
  9075                           
  9076                           ;eusart.c: 278: EUSART_OverrunErrorHandler = interruptHandler;
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  9080  08D0  0020               	movlb	0	; select bank0
  9081  08D1  0825               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  9082  08D2  0022               	movlb	2	; select bank2
  9083  08D3  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  9084  08D4  0020               	movlb	0	; select bank0
  9085  08D5  0824               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  9086  08D6  0022               	movlb	2	; select bank2
  9087  08D7  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  9088  08D8  0008               	return
  9089  08D9                     __end_of_EUSART_SetOverrunErrorHandler:	
  9090                           
  9091                           	psect	text12
  9092  08C7                     __ptext12:	
  9093 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  9094 ;; Defined at:
  9095 ;;		line 273 in file "mcc_generated_files/eusart.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9098 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;		None
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  1    wreg      void 
  9103 ;; Registers used:
  9104 ;;		wreg
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:        2 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    7
  9117 ;; This function calls:
  9118 ;;		Nothing
  9119 ;; This function is called by:
  9120 ;;		_EUSART_Initialize
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function _EUSART_SetFramingErrorHandler
  9126  08C7                     _EUSART_SetFramingErrorHandler:	
  9127                           
  9128                           ;eusart.c: 274: EUSART_FramingErrorHandler = interruptHandler;
  9129                           
  9130                           ;incstack = 0
  9131                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  9132  08C7  0020               	movlb	0	; select bank0
  9133  08C8  0825               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  9134  08C9  0022               	movlb	2	; select bank2
  9135  08CA  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  9136  08CB  0020               	movlb	0	; select bank0
  9137  08CC  0824               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  9138  08CD  0022               	movlb	2	; select bank2
  9139  08CE  00E4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  9140  08CF  0008               	return
  9141  08D0                     __end_of_EUSART_SetFramingErrorHandler:	
  9142                           
  9143                           	psect	text13
  9144  08BE                     __ptext13:	
  9145 ;; *************** function _EUSART_SetErrorHandler *****************
  9146 ;; Defined at:
  9147 ;;		line 281 in file "mcc_generated_files/eusart.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9150 ;;		 -> EUSART_DefaultErrorHandler(1), 
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;		None
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      void 
  9155 ;; Registers used:
  9156 ;;		wreg
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9162 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;Total ram usage:        2 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    7
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		_EUSART_Initialize
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           
  9177                           ;psect for function _EUSART_SetErrorHandler
  9178  08BE                     _EUSART_SetErrorHandler:	
  9179                           
  9180                           ;eusart.c: 282: EUSART_ErrorHandler = interruptHandler;
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  9184  08BE  0020               	movlb	0	; select bank0
  9185  08BF  0825               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  9186  08C0  0022               	movlb	2	; select bank2
  9187  08C1  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  9188  08C2  0020               	movlb	0	; select bank0
  9189  08C3  0824               	movf	EUSART_SetErrorHandler@interruptHandler,w
  9190  08C4  0022               	movlb	2	; select bank2
  9191  08C5  00E0               	movwf	_EUSART_ErrorHandler^(0+256)
  9192  08C6  0008               	return
  9193  08C7                     __end_of_EUSART_SetErrorHandler:	
  9194                           
  9195                           	psect	text14
  9196  08B5                     __ptext14:	
  9197 ;; *************** function _ADC_Initialize *****************
  9198 ;; Defined at:
  9199 ;;		line 67 in file "mcc_generated_files/adc.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;		None
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      void 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        0 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    7
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_SYSTEM_Initialize
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _ADC_Initialize
  9229  08B5                     _ADC_Initialize:	
  9230                           
  9231                           ;adc.c: 72: ADCON0 = 0x01;
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9235  08B5  3001               	movlw	1
  9236  08B6  0021               	movlb	1	; select bank1
  9237  08B7  009D               	movwf	29	;volatile
  9238                           
  9239                           ;adc.c: 75: ADCON1 = 0x60;
  9240  08B8  3060               	movlw	96
  9241  08B9  009E               	movwf	30	;volatile
  9242                           
  9243                           ;adc.c: 78: ADCON2 = 0x00;
  9244  08BA  019F               	clrf	31	;volatile
  9245                           
  9246                           ;adc.c: 81: ADRESL = 0x00;
  9247  08BB  019B               	clrf	27	;volatile
  9248                           
  9249                           ;adc.c: 84: ADRESH = 0x00;
  9250  08BC  019C               	clrf	28	;volatile
  9251  08BD  0008               	return
  9252  08BE                     __end_of_ADC_Initialize:	
  9253                           
  9254                           	psect	text15
  9255  0776                     __ptext15:	
  9256 ;; *************** function _COS_TskMan *****************
  9257 ;; Defined at:
  9258 ;;		line 133 in file "SourceFiles/COS/COS_Main.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        4 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:   12
  9279 ;; This function calls:
  9280 ;;		_SHT25_StateMachine
  9281 ;;		___wmul
  9282 ;; This function is called by:
  9283 ;;		_main
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           
  9288                           ;psect for function _COS_TskMan
  9289  0776                     _COS_TskMan:	
  9290                           
  9291                           ;COS_Main.c: 135: if ((COS_tsk[COS_tsk_ind].sched & COS_tsk_msk) != 0)
  9292                           
  9293                           ;incstack = 0
  9294                           ; Regs used in _COS_TskMan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9295  0776  0021               	movlb	1	; select bank1
  9296  0777  0848               	movf	_COS_tsk_ind^(0+128),w
  9297  0778  0020               	movlb	0	; select bank0
  9298  0779  00E5               	movwf	??_COS_TskMan
  9299  077A  01E6               	clrf	??_COS_TskMan+1
  9300  077B  0865               	movf	??_COS_TskMan,w
  9301  077C  00A4               	movwf	___wmul@multiplier
  9302  077D  0866               	movf	??_COS_TskMan+1,w
  9303  077E  00A5               	movwf	___wmul@multiplier+1
  9304  077F  3003               	movlw	3
  9305  0780  00A6               	movwf	___wmul@multiplicand
  9306  0781  3000               	movlw	0
  9307  0782  00A7               	movwf	___wmul@multiplicand+1
  9308  0783  318A  2280  3187   	fcall	___wmul
  9309  0786  0020               	movlb	0	; select bank0
  9310  0787  0824               	movf	?___wmul,w
  9311  0788  3E02               	addlw	2
  9312  0789  00E7               	movwf	??_COS_TskMan+2
  9313  078A  3000               	movlw	0
  9314  078B  3D25               	addwfc	?___wmul+1,w
  9315  078C  00E8               	movwf	??_COS_TskMan+3
  9316  078D  3020               	movlw	low (_COS_tsk| (0+32768))
  9317  078E  0767               	addwf	??_COS_TskMan+2,w
  9318  078F  0084               	movwf	4
  9319  0790  3090               	movlw	high (_COS_tsk| (0+32768))
  9320  0791  3D68               	addwfc	??_COS_TskMan+3,w
  9321  0792  0085               	movwf	5
  9322  0793  0800               	movf	0,w	;code access
  9323  0794  056B               	andwf	_COS_tsk_msk,w
  9324  0795  1903               	btfsc	3,2
  9325  0796  2FB5               	goto	l4713
  9326                           
  9327                           ;COS_Main.c: 136: {
  9328                           ;COS_Main.c: 143: (*COS_tsk[COS_tsk_ind].tptr)();
  9329  0797  0021               	movlb	1	; select bank1
  9330  0798  0848               	movf	_COS_tsk_ind^(0+128),w
  9331  0799  0020               	movlb	0	; select bank0
  9332  079A  00E5               	movwf	??_COS_TskMan
  9333  079B  01E6               	clrf	??_COS_TskMan+1
  9334  079C  0865               	movf	??_COS_TskMan,w
  9335  079D  00A4               	movwf	___wmul@multiplier
  9336  079E  0866               	movf	??_COS_TskMan+1,w
  9337  079F  00A5               	movwf	___wmul@multiplier+1
  9338  07A0  3003               	movlw	3
  9339  07A1  00A6               	movwf	___wmul@multiplicand
  9340  07A2  3000               	movlw	0
  9341  07A3  00A7               	movwf	___wmul@multiplicand+1
  9342  07A4  318A  2280  3187   	fcall	___wmul
  9343  07A7  0020               	movlb	0	; select bank0
  9344  07A8  0825               	movf	?___wmul+1,w
  9345  07A9  0085               	movwf	5
  9346  07AA  0824               	movf	?___wmul,w
  9347  07AB  0084               	movwf	4
  9348  07AC  3020               	movlw	low (_COS_tsk| (0+32768))
  9349  07AD  0784               	addwf	4,f
  9350  07AE  3090               	movlw	high (_COS_tsk| (0+32768))
  9351  07AF  3D85               	addwfc	5,f
  9352  07B0  3F01               	moviw [1]fsr0
  9353  07B1  008A               	movwf	10
  9354  07B2  3F00               	moviw [0]fsr0
  9355  07B3  000A               	callw
  9356  07B4  3187               	pagesel	$
  9357  07B5                     l4713:	
  9358                           
  9359                           ;COS_Main.c: 149: }
  9360                           ;COS_Main.c: 150: COS_tsk_ind++;
  9361  07B5  3001               	movlw	1
  9362  07B6  0020               	movlb	0	; select bank0
  9363  07B7  00E5               	movwf	??_COS_TskMan
  9364  07B8  0865               	movf	??_COS_TskMan,w
  9365  07B9  0021               	movlb	1	; select bank1
  9366  07BA  07C8               	addwf	_COS_tsk_ind^(0+128),f
  9367                           
  9368                           ;COS_Main.c: 151: if (COS_tsk_ind >= (3+2))
  9369  07BB  3005               	movlw	5
  9370  07BC  0248               	subwf	_COS_tsk_ind^(0+128),w
  9371  07BD  1C03               	skipc
  9372  07BE  0008               	return
  9373                           
  9374                           ;COS_Main.c: 152: {
  9375                           ;COS_Main.c: 153: COS_tsk_ena = 0;
  9376  07BF  01EE               	clrf	_COS_tsk_ena^(0+128)
  9377                           
  9378                           ;COS_Main.c: 154: COS_tsk_ind = 0;
  9379  07C0  01C8               	clrf	_COS_tsk_ind^(0+128)
  9380                           
  9381                           ;COS_Main.c: 157: if (!((COS_tsk_msk == 0x80) ||
  9382                           ;COS_Main.c: 158: (COS_tsk_msk == 0x40) ||
  9383                           ;COS_Main.c: 159: (COS_tsk_msk == 0x20) ||
  9384                           ;COS_Main.c: 160: (COS_tsk_msk == 0x10) ||
  9385                           ;COS_Main.c: 161: (COS_tsk_msk == 0x08) ||
  9386                           ;COS_Main.c: 162: (COS_tsk_msk == 0x04) ||
  9387                           ;COS_Main.c: 163: (COS_tsk_msk == 0x02) ||
  9388                           ;COS_Main.c: 164: (COS_tsk_msk == 0x01)))
  9389  07C1  3080               	movlw	128
  9390  07C2  0020               	movlb	0	; select bank0
  9391  07C3  066B               	xorwf	_COS_tsk_msk,w
  9392  07C4  1903               	btfsc	3,2
  9393  07C5  2FE2               	goto	l4735
  9394  07C6  3040               	movlw	64
  9395  07C7  066B               	xorwf	_COS_tsk_msk,w
  9396  07C8  1903               	btfsc	3,2
  9397  07C9  2FE2               	goto	l4735
  9398  07CA  3020               	movlw	32
  9399  07CB  066B               	xorwf	_COS_tsk_msk,w
  9400  07CC  1903               	btfsc	3,2
  9401  07CD  2FE2               	goto	l4735
  9402  07CE  3010               	movlw	16
  9403  07CF  066B               	xorwf	_COS_tsk_msk,w
  9404  07D0  1903               	btfsc	3,2
  9405  07D1  2FE2               	goto	l4735
  9406  07D2  3008               	movlw	8
  9407  07D3  066B               	xorwf	_COS_tsk_msk,w
  9408  07D4  1903               	btfsc	3,2
  9409  07D5  2FE2               	goto	l4735
  9410  07D6  3004               	movlw	4
  9411  07D7  066B               	xorwf	_COS_tsk_msk,w
  9412  07D8  1903               	btfsc	3,2
  9413  07D9  2FE2               	goto	l4735
  9414  07DA  3002               	movlw	2
  9415  07DB  066B               	xorwf	_COS_tsk_msk,w
  9416  07DC  1903               	btfsc	3,2
  9417  07DD  2FE2               	goto	l4735
  9418  07DE  036B               	decf	_COS_tsk_msk,w
  9419  07DF  1903               	btfsc	3,2
  9420  07E0  2FE2               	goto	l4735
  9421  07E1                     l910:	
  9422                           ;COS_Main.c: 165: {
  9423                           ;COS_Main.c: 169: while(1);
  9424                           
  9425  07E1  2FE1               	goto	l910
  9426  07E2                     l4735:	
  9427                           
  9428                           ;COS_Main.c: 171: }
  9429                           ;COS_Main.c: 174: COS_tsk_msk = COS_tsk_msk >> 1;
  9430  07E2  0020               	movlb	0	; select bank0
  9431  07E3  366B               	lsrf	_COS_tsk_msk,w
  9432  07E4  00E5               	movwf	??_COS_TskMan
  9433  07E5  0865               	movf	??_COS_TskMan,w
  9434  07E6  00EB               	movwf	_COS_tsk_msk
  9435                           
  9436                           ;COS_Main.c: 175: if (COS_tsk_msk == 0x00)
  9437  07E7  086B               	movf	_COS_tsk_msk,w
  9438  07E8  1D03               	btfss	3,2
  9439  07E9  0008               	return
  9440                           
  9441                           ;COS_Main.c: 176: {
  9442                           ;COS_Main.c: 177: COS_tsk_msk = 0x80;
  9443  07EA  3080               	movlw	128
  9444  07EB  00E5               	movwf	??_COS_TskMan
  9445  07EC  0865               	movf	??_COS_TskMan,w
  9446  07ED  00EB               	movwf	_COS_tsk_msk
  9447  07EE  0008               	return
  9448  07EF                     __end_of_COS_TskMan:	
  9449                           
  9450                           	psect	text16
  9451  0A80                     __ptext16:	
  9452 ;; *************** function ___wmul *****************
  9453 ;; Defined at:
  9454 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;  multiplier      2    4[BANK0 ] unsigned int 
  9457 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  product         2    8[BANK0 ] unsigned int 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  2    4[BANK0 ] unsigned int 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9469 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;Total ram usage:        6 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    7
  9476 ;; This function calls:
  9477 ;;		Nothing
  9478 ;; This function is called by:
  9479 ;;		_COS_TskMan
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function ___wmul
  9485  0A80                     ___wmul:	
  9486                           
  9487                           ;incstack = 0
  9488                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9489  0A80  0020               	movlb	0	; select bank0
  9490  0A81  01A8               	clrf	___wmul@product
  9491  0A82  01A9               	clrf	___wmul@product+1
  9492  0A83                     l4329:	
  9493  0A83  1C24               	btfss	___wmul@multiplier,0
  9494  0A84  2A89               	goto	l1189
  9495  0A85  0826               	movf	___wmul@multiplicand,w
  9496  0A86  07A8               	addwf	___wmul@product,f
  9497  0A87  0827               	movf	___wmul@multiplicand+1,w
  9498  0A88  3DA9               	addwfc	___wmul@product+1,f
  9499  0A89                     l1189:	
  9500  0A89  3001               	movlw	1
  9501  0A8A                     u3395:	
  9502  0A8A  35A6               	lslf	___wmul@multiplicand,f
  9503  0A8B  0DA7               	rlf	___wmul@multiplicand+1,f
  9504  0A8C  0B89               	decfsz	9,f
  9505  0A8D  2A8A               	goto	u3395
  9506  0A8E  3001               	movlw	1
  9507  0A8F                     u3405:	
  9508  0A8F  36A5               	lsrf	___wmul@multiplier+1,f
  9509  0A90  0CA4               	rrf	___wmul@multiplier,f
  9510  0A91  0B89               	decfsz	9,f
  9511  0A92  2A8F               	goto	u3405
  9512  0A93  0824               	movf	___wmul@multiplier,w
  9513  0A94  0425               	iorwf	___wmul@multiplier+1,w
  9514  0A95  1D03               	btfss	3,2
  9515  0A96  2A83               	goto	l4329
  9516  0A97  0829               	movf	___wmul@product+1,w
  9517  0A98  00A5               	movwf	?___wmul+1
  9518  0A99  0828               	movf	___wmul@product,w
  9519  0A9A  00A4               	movwf	?___wmul
  9520  0A9B  0008               	return
  9521  0A9C                     __end_of___wmul:	
  9522                           
  9523                           	psect	text17
  9524  03F1                     __ptext17:	
  9525 ;; *************** function _SHT25_StateMachine *****************
  9526 ;; Defined at:
  9527 ;;		line 42 in file "SourceFiles/SunSensor/SHT25.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;		None
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;		None
  9532 ;; Return value:  Size  Location     Type
  9533 ;;                  1    wreg      void 
  9534 ;; Registers used:
  9535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Totals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;Total ram usage:        5 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:   11
  9548 ;; This function calls:
  9549 ;;		_I2C_ReadNBytes
  9550 ;;		_I2C_WriteNBytes
  9551 ;;		_SHT3x_CalcRelativeHumidity
  9552 ;;		_SHT3x_CalcTemperatureC
  9553 ;; This function is called by:
  9554 ;;		_COS_TskMan
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _SHT25_StateMachine
  9560  03F1                     _SHT25_StateMachine:	
  9561                           
  9562                           ;SHT25.c: 44: switch(SHT25_State)
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in _SHT25_StateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9566  03F1  2CAE               	goto	l4707
  9567  03F2                     l1085:	
  9568                           ;SHT25.c: 45: {
  9569                           ;SHT25.c: 46: case SHT25_MEASURE_INIT:
  9570                           
  9571                           
  9572                           ;SHT25.c: 47: SHT25_State = SHT25_MEASURE_TEMP_0;
  9573  03F2  01BE               	clrf	_SHT25_State^(0+128)
  9574  03F3  0ABE               	incf	_SHT25_State^(0+128),f
  9575                           
  9576                           ;SHT25.c: 48: break;
  9577  03F4  0008               	return
  9578  03F5                     l4665:	
  9579                           ;SHT25.c: 49: case SHT25_MEASURE_TEMP_0:
  9580                           
  9581                           
  9582                           ;SHT25.c: 50: I2C_WriteNBytes(0x44,Command,2);
  9583  03F5  30EC               	movlw	(low (_Command| 0))& (0+255)
  9584  03F6  0022               	movlb	2	; select bank2
  9585  03F7  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9586  03F8  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9587  03F9  0020               	movlb	0	; select bank0
  9588  03FA  00AD               	movwf	I2C_WriteNBytes@data
  9589  03FB  3002               	movlw	2
  9590  03FC  00AE               	movwf	I2C_WriteNBytes@len
  9591  03FD  3000               	movlw	0
  9592  03FE  00AF               	movwf	I2C_WriteNBytes@len+1
  9593  03FF  3044               	movlw	68
  9594  0400  318B  238A         	fcall	_I2C_WriteNBytes
  9595                           
  9596                           ;SHT25.c: 51: SHT25_State = SHT25_MEASURE_TEMP_WAIT;
  9597  0402  3003               	movlw	3
  9598  0403  0022               	movlb	2	; select bank2
  9599  0404  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9600  0405  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9601  0406  0021               	movlb	1	; select bank1
  9602  0407  00BE               	movwf	_SHT25_State^(0+128)
  9603                           
  9604                           ;SHT25.c: 52: TimerCounter = 0;
  9605  0408  01A0               	clrf	_TimerCounter^(0+128)
  9606  0409  01A1               	clrf	(_TimerCounter+1)^(0+128)
  9607                           
  9608                           ;SHT25.c: 55: break;
  9609  040A  0008               	return
  9610  040B                     l4671:	
  9611                           ;SHT25.c: 56: case SHT25_MEASURE_TEMP_WAIT:
  9612                           
  9613                           
  9614                           ;SHT25.c: 57: TimerCounter++;
  9615  040B  3001               	movlw	1
  9616  040C  07A0               	addwf	_TimerCounter^(0+128),f
  9617  040D  3000               	movlw	0
  9618  040E  3DA1               	addwfc	(_TimerCounter+1)^(0+128),f
  9619                           
  9620                           ;SHT25.c: 58: if (TimerCounter > 50)
  9621  040F  3000               	movlw	0
  9622  0410  0221               	subwf	(_TimerCounter+1)^(0+128),w
  9623  0411  3033               	movlw	51
  9624  0412  1903               	skipnz
  9625  0413  0220               	subwf	_TimerCounter^(0+128),w
  9626  0414  1C03               	skipc
  9627  0415  0008               	return
  9628                           
  9629                           ;SHT25.c: 59: {
  9630                           ;SHT25.c: 60: Command[0] = 0xE0;
  9631  0416  30E0               	movlw	224
  9632  0417  0022               	movlb	2	; select bank2
  9633  0418  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9634  0419  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9635  041A  0021               	movlb	1	; select bank1
  9636  041B  00EC               	movwf	_Command^(0+128)
  9637                           
  9638                           ;SHT25.c: 61: Command[1] = 0x00;
  9639  041C  01ED               	clrf	(_Command^(0+128)+1)
  9640                           
  9641                           ;SHT25.c: 62: I2C_WriteNBytes(0x44,Command,2);
  9642  041D  30EC               	movlw	(low (_Command| 0))& (0+255)
  9643  041E  0022               	movlb	2	; select bank2
  9644  041F  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9645  0420  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9646  0421  0020               	movlb	0	; select bank0
  9647  0422  00AD               	movwf	I2C_WriteNBytes@data
  9648  0423  3002               	movlw	2
  9649  0424  00AE               	movwf	I2C_WriteNBytes@len
  9650  0425  3000               	movlw	0
  9651  0426  00AF               	movwf	I2C_WriteNBytes@len+1
  9652  0427  3044               	movlw	68
  9653  0428  318B  238A         	fcall	_I2C_WriteNBytes
  9654                           
  9655                           ;SHT25.c: 63: TimerCounter = 0;
  9656  042A  0021               	movlb	1	; select bank1
  9657  042B  01A0               	clrf	_TimerCounter^(0+128)
  9658  042C  01A1               	clrf	(_TimerCounter+1)^(0+128)
  9659                           
  9660                           ;SHT25.c: 64: SHT25_State = SHT25_MEASURE_TEMP_1;
  9661  042D  3002               	movlw	2
  9662  042E  0022               	movlb	2	; select bank2
  9663  042F  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9664  0430  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9665  0431  0021               	movlb	1	; select bank1
  9666  0432  00BE               	movwf	_SHT25_State^(0+128)
  9667                           
  9668                           ;SHT25.c: 65: }
  9669                           ;SHT25.c: 66: break;
  9670  0433  0008               	return
  9671  0434                     l4683:	
  9672                           ;SHT25.c: 67: case SHT25_MEASURE_TEMP_1:
  9673                           
  9674                           
  9675                           ;SHT25.c: 68: I2C_ReadNBytes(0x44,RxBuff,6);
  9676  0434  3056               	movlw	(low (_RxBuff| (0+256)))& (0+255)
  9677  0435  0022               	movlb	2	; select bank2
  9678  0436  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9679  0437  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9680  0438  0020               	movlb	0	; select bank0
  9681  0439  00A9               	movwf	I2C_ReadNBytes@data
  9682  043A  3006               	movlw	6
  9683  043B  00AA               	movwf	I2C_ReadNBytes@len
  9684  043C  3000               	movlw	0
  9685  043D  00AB               	movwf	I2C_ReadNBytes@len+1
  9686  043E  3044               	movlw	68
  9687  043F  318A  22D7  3183   	fcall	_I2C_ReadNBytes
  9688                           
  9689                           ;SHT25.c: 70: TemperatureRaw_H = RxBuff[0];
  9690  0442  0022               	movlb	2	; select bank2
  9691  0443  0856               	movf	_RxBuff^(0+256),w
  9692  0444  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9693  0445  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9694  0446  0021               	movlb	1	; select bank1
  9695  0447  00C2               	movwf	_TemperatureRaw_H^(0+128)
  9696                           
  9697                           ;SHT25.c: 71: TemperatureRaw_L = RxBuff[1];
  9698  0448  0022               	movlb	2	; select bank2
  9699  0449  0857               	movf	(_RxBuff^(0+256)+1),w
  9700  044A  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9701  044B  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9702  044C  0021               	movlb	1	; select bank1
  9703  044D  00C1               	movwf	_TemperatureRaw_L^(0+128)
  9704                           
  9705                           ;SHT25.c: 72: TemperatureRaw = ((UINT_16)(TemperatureRaw_H) << 8) + TemperatureRaw_L ;
  9706  044E  0841               	movf	_TemperatureRaw_L^(0+128),w
  9707  044F  0022               	movlb	2	; select bank2
  9708  0450  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9709  0451  01EB               	clrf	(??_SHT25_StateMachine^(0+256)+1)
  9710  0452  0021               	movlb	1	; select bank1
  9711  0453  0842               	movf	_TemperatureRaw_H^(0+128),w
  9712  0454  0022               	movlb	2	; select bank2
  9713  0455  00EC               	movwf	(??_SHT25_StateMachine+2)^(0+256)
  9714  0456  01ED               	clrf	((??_SHT25_StateMachine+2)^(0+256)+1)
  9715  0457  086C               	movf	(??_SHT25_StateMachine+2)^(0+256),w
  9716  0458  00ED               	movwf	((??_SHT25_StateMachine+2)^(0+256)+1)
  9717  0459  01EC               	clrf	(??_SHT25_StateMachine+2)^(0+256)
  9718  045A  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9719  045B  076C               	addwf	(??_SHT25_StateMachine+2)^(0+256),w
  9720  045C  0021               	movlb	1	; select bank1
  9721  045D  00CF               	movwf	_TemperatureRaw^(0+128)
  9722  045E  0022               	movlb	2	; select bank2
  9723  045F  086B               	movf	(??_SHT25_StateMachine+1)^(0+256),w
  9724  0460  3D6D               	addwfc	(??_SHT25_StateMachine+3)^(0+256),w
  9725  0461  0021               	movlb	1	; select bank1
  9726  0462  00D0               	movwf	(_TemperatureRaw+1)^(0+128)
  9727                           
  9728                           ;SHT25.c: 74: RelativeHumidityRaw_H = RxBuff[3];
  9729  0463  0022               	movlb	2	; select bank2
  9730  0464  0859               	movf	(_RxBuff^(0+256)+3),w
  9731  0465  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9732  0466  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9733  0467  0021               	movlb	1	; select bank1
  9734  0468  00C0               	movwf	_RelativeHumidityRaw_H^(0+128)
  9735                           
  9736                           ;SHT25.c: 75: RelativeHumidityRaw_L = RxBuff[4];
  9737  0469  0022               	movlb	2	; select bank2
  9738  046A  085A               	movf	(_RxBuff^(0+256)+4),w
  9739  046B  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9740  046C  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9741  046D  0021               	movlb	1	; select bank1
  9742  046E  00BF               	movwf	_RelativeHumidityRaw_L^(0+128)
  9743                           
  9744                           ;SHT25.c: 76: RelativeHumidityRaw = ((UINT_16)(RelativeHumidityRaw_H) << 8) + RelativeHu
      +                          midityRaw_L ;
  9745  046F  083F               	movf	_RelativeHumidityRaw_L^(0+128),w
  9746  0470  0022               	movlb	2	; select bank2
  9747  0471  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9748  0472  01EB               	clrf	(??_SHT25_StateMachine^(0+256)+1)
  9749  0473  0021               	movlb	1	; select bank1
  9750  0474  0840               	movf	_RelativeHumidityRaw_H^(0+128),w
  9751  0475  0022               	movlb	2	; select bank2
  9752  0476  00EC               	movwf	(??_SHT25_StateMachine+2)^(0+256)
  9753  0477  01ED               	clrf	((??_SHT25_StateMachine+2)^(0+256)+1)
  9754  0478  086C               	movf	(??_SHT25_StateMachine+2)^(0+256),w
  9755  0479  00ED               	movwf	((??_SHT25_StateMachine+2)^(0+256)+1)
  9756  047A  01EC               	clrf	(??_SHT25_StateMachine+2)^(0+256)
  9757  047B  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9758  047C  076C               	addwf	(??_SHT25_StateMachine+2)^(0+256),w
  9759  047D  0021               	movlb	1	; select bank1
  9760  047E  00CD               	movwf	_RelativeHumidityRaw^(0+128)
  9761  047F  0022               	movlb	2	; select bank2
  9762  0480  086B               	movf	(??_SHT25_StateMachine+1)^(0+256),w
  9763  0481  3D6D               	addwfc	(??_SHT25_StateMachine+3)^(0+256),w
  9764  0482  0021               	movlb	1	; select bank1
  9765  0483  00CE               	movwf	(_RelativeHumidityRaw+1)^(0+128)
  9766                           
  9767                           ;SHT25.c: 78: SHT25_State = SHT25_CALC_TEMP_0;
  9768  0484  3006               	movlw	6
  9769  0485  0022               	movlb	2	; select bank2
  9770  0486  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9771  0487  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9772  0488  0021               	movlb	1	; select bank1
  9773  0489  00BE               	movwf	_SHT25_State^(0+128)
  9774                           
  9775                           ;SHT25.c: 79: break;
  9776  048A  0008               	return
  9777  048B                     l4699:	
  9778                           ;SHT25.c: 80: case SHT25_CALC_TEMP_0:
  9779                           
  9780                           
  9781                           ;SHT25.c: 81: SensirionTemperature_UBP8 = SHT3x_CalcTemperatureC();
  9782  048B  3180  2073  3183   	fcall	_SHT3x_CalcTemperatureC
  9783  048E  0020               	movlb	0	; select bank0
  9784  048F  085E               	movf	?_SHT3x_CalcTemperatureC+1,w
  9785  0490  0021               	movlb	1	; select bank1
  9786  0491  00A7               	movwf	(_SensirionTemperature_UBP8+1)^(0+128)
  9787  0492  0020               	movlb	0	; select bank0
  9788  0493  085D               	movf	?_SHT3x_CalcTemperatureC,w
  9789  0494  0021               	movlb	1	; select bank1
  9790  0495  00A6               	movwf	_SensirionTemperature_UBP8^(0+128)
  9791                           
  9792                           ;SHT25.c: 82: SensirionRH_UBP8 = SHT3x_CalcRelativeHumidity();
  9793  0496  3181  21E0         	fcall	_SHT3x_CalcRelativeHumidity
  9794  0498  0020               	movlb	0	; select bank0
  9795  0499  0851               	movf	?_SHT3x_CalcRelativeHumidity+1,w
  9796  049A  0021               	movlb	1	; select bank1
  9797  049B  00A5               	movwf	(_SensirionRH_UBP8+1)^(0+128)
  9798  049C  0020               	movlb	0	; select bank0
  9799  049D  0850               	movf	?_SHT3x_CalcRelativeHumidity,w
  9800  049E  0021               	movlb	1	; select bank1
  9801  049F  00A4               	movwf	_SensirionRH_UBP8^(0+128)
  9802                           
  9803                           ;SHT25.c: 83: SHT25_State = SHT25_CALC_RH_0;
  9804  04A0  3007               	movlw	7
  9805  04A1  0022               	movlb	2	; select bank2
  9806  04A2  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9807  04A3  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9808  04A4  0021               	movlb	1	; select bank1
  9809  04A5  00BE               	movwf	_SHT25_State^(0+128)
  9810                           
  9811                           ;SHT25.c: 84: break;
  9812  04A6  0008               	return
  9813  04A7                     l4703:	
  9814                           ;SHT25.c: 85: case SHT25_CALC_RH_0:
  9815                           
  9816                           
  9817                           ;SHT25.c: 86: SHT25_State = SHT25_MEASURE_TEMP_WAIT;
  9818  04A7  3003               	movlw	3
  9819  04A8  0022               	movlb	2	; select bank2
  9820  04A9  00EA               	movwf	??_SHT25_StateMachine^(0+256)
  9821  04AA  086A               	movf	??_SHT25_StateMachine^(0+256),w
  9822  04AB  0021               	movlb	1	; select bank1
  9823  04AC  00BE               	movwf	_SHT25_State^(0+128)
  9824                           
  9825                           ;SHT25.c: 90: }
  9826                           
  9827                           ;SHT25.c: 89: break;
  9828                           
  9829                           ;SHT25.c: 88: default:
  9830                           
  9831                           ;SHT25.c: 87: break;
  9832  04AD  0008               	return
  9833  04AE                     l4707:	
  9834  04AE  0021               	movlb	1	; select bank1
  9835  04AF  083E               	movf	_SHT25_State^(0+128),w
  9836                           
  9837                           ; Switch size 1, requested type "space"
  9838                           ; Number of cases is 6, Range of values is 0 to 7
  9839                           ; switch strategies available:
  9840                           ; Name         Instructions Cycles
  9841                           ; simple_byte           19    10 (average)
  9842                           ; direct_byte           22     6 (fixed)
  9843                           ; jumptable            260     6 (fixed)
  9844                           ;	Chosen strategy is simple_byte
  9845  04B0  3A00               	xorlw	0	; case 0
  9846  04B1  1903               	skipnz
  9847  04B2  2BF2               	goto	l1085
  9848  04B3  3A01               	xorlw	1	; case 1
  9849  04B4  1903               	skipnz
  9850  04B5  2BF5               	goto	l4665
  9851  04B6  3A03               	xorlw	3	; case 2
  9852  04B7  1903               	skipnz
  9853  04B8  2C34               	goto	l4683
  9854  04B9  3A01               	xorlw	1	; case 3
  9855  04BA  1903               	skipnz
  9856  04BB  2C0B               	goto	l4671
  9857  04BC  3A05               	xorlw	5	; case 6
  9858  04BD  1903               	skipnz
  9859  04BE  2C8B               	goto	l4699
  9860  04BF  3A01               	xorlw	1	; case 7
  9861  04C0  1903               	skipnz
  9862  04C1  2CA7               	goto	l4703
  9863  04C2  2CC3               	goto	l1094
  9864  04C3                     l1094:	
  9865  04C3  0008               	return
  9866  04C4                     __end_of_SHT25_StateMachine:	
  9867                           
  9868                           	psect	text18
  9869  0073                     __ptext18:	
  9870 ;; *************** function _SHT3x_CalcTemperatureC *****************
  9871 ;; Defined at:
  9872 ;;		line 103 in file "SourceFiles/SunSensor/SHT25.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  str             8    0[BANK1 ] unsigned char [8]
  9877 ;;  TemperatureT    4   17[BANK1 ] long 
  9878 ;;  TemperatureF    3   21[BANK1 ] float 
  9879 ;;  TemperatureI    2   13[BANK1 ] unsigned short 
  9880 ;;  Temperature_    2   11[BANK1 ] unsigned short 
  9881 ;;  Temperature_    1   16[BANK1 ] unsigned char 
  9882 ;;  Temperature_    1   15[BANK1 ] unsigned char 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  2   61[BANK0 ] unsigned short 
  9885 ;; Registers used:
  9886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Totals:         0       8      24       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;Total ram usage:       32 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    9
  9899 ;; This function calls:
  9900 ;;		_EUSART_Write
  9901 ;;		___awtoft
  9902 ;;		___ftadd
  9903 ;;		___ftdiv
  9904 ;;		___ftge
  9905 ;;		___ftmul
  9906 ;;		___fttol
  9907 ;;		___lmul
  9908 ;;		___lwtoft
  9909 ;;		_abs
  9910 ;;		_sprintf
  9911 ;; This function is called by:
  9912 ;;		_SHT25_StateMachine
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function _SHT3x_CalcTemperatureC
  9918  0073                     _SHT3x_CalcTemperatureC:	
  9919                           
  9920                           ;SHT25.c: 105: SINT_32 TemperatureTemp;
  9921                           ;SHT25.c: 106: UINT_16 Temperature_UBP8;
  9922                           ;SHT25.c: 107: UINT_8 Temperature_U8;
  9923                           ;SHT25.c: 108: UINT_8 Temperature_L8;
  9924                           ;SHT25.c: 110: FLOAT_24 TemperatureFloat;
  9925                           ;SHT25.c: 111: UINT_16 TemperatureInt;
  9926                           ;SHT25.c: 112: UINT_8 str[8];
  9927                           ;SHT25.c: 114: TemperatureTemp = (UINT_32)TemperatureRaw * 175;
  9928                           
  9929                           ;incstack = 0
  9930                           ; Regs used in _SHT3x_CalcTemperatureC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9931  0073  0021               	movlb	1	; select bank1
  9932  0074  084F               	movf	_TemperatureRaw^(0+128),w
  9933  0075  0020               	movlb	0	; select bank0
  9934  0076  00A4               	movwf	___lmul@multiplier
  9935  0077  0021               	movlb	1	; select bank1
  9936  0078  0850               	movf	(_TemperatureRaw+1)^(0+128),w
  9937  0079  0020               	movlb	0	; select bank0
  9938  007A  00A5               	movwf	___lmul@multiplier+1
  9939  007B  01A6               	clrf	___lmul@multiplier+2
  9940  007C  01A7               	clrf	___lmul@multiplier+3
  9941  007D  3000               	movlw	0
  9942  007E  00AB               	movwf	___lmul@multiplicand+3
  9943  007F  3000               	movlw	0
  9944  0080  00AA               	movwf	___lmul@multiplicand+2
  9945  0081  3000               	movlw	0
  9946  0082  00A9               	movwf	___lmul@multiplicand+1
  9947  0083  30AF               	movlw	175
  9948  0084  00A8               	movwf	___lmul@multiplicand
  9949  0085  318C  245A  3180   	fcall	___lmul
  9950  0088  0020               	movlb	0	; select bank0
  9951  0089  0827               	movf	?___lmul+3,w
  9952  008A  0021               	movlb	1	; select bank1
  9953  008B  00E5               	movwf	(SHT3x_CalcTemperatureC@TemperatureTemp+3)^(0+128)
  9954  008C  0020               	movlb	0	; select bank0
  9955  008D  0826               	movf	?___lmul+2,w
  9956  008E  0021               	movlb	1	; select bank1
  9957  008F  00E4               	movwf	(SHT3x_CalcTemperatureC@TemperatureTemp+2)^(0+128)
  9958  0090  0020               	movlb	0	; select bank0
  9959  0091  0825               	movf	?___lmul+1,w
  9960  0092  0021               	movlb	1	; select bank1
  9961  0093  00E3               	movwf	(SHT3x_CalcTemperatureC@TemperatureTemp+1)^(0+128)
  9962  0094  0020               	movlb	0	; select bank0
  9963  0095  0824               	movf	?___lmul,w
  9964  0096  0021               	movlb	1	; select bank1
  9965  0097  00E2               	movwf	SHT3x_CalcTemperatureC@TemperatureTemp^(0+128)
  9966                           
  9967                           ;SHT25.c: 115: Temperature_U8 = (UINT_8)(TemperatureTemp >> 16);
  9968  0098  0862               	movf	SHT3x_CalcTemperatureC@TemperatureTemp^(0+128),w
  9969  0099  0020               	movlb	0	; select bank0
  9970  009A  00DF               	movwf	??_SHT3x_CalcTemperatureC
  9971  009B  0021               	movlb	1	; select bank1
  9972  009C  0863               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+1)^(0+128),w
  9973  009D  0020               	movlb	0	; select bank0
  9974  009E  00E0               	movwf	??_SHT3x_CalcTemperatureC+1
  9975  009F  0021               	movlb	1	; select bank1
  9976  00A0  0864               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+2)^(0+128),w
  9977  00A1  0020               	movlb	0	; select bank0
  9978  00A2  00E1               	movwf	??_SHT3x_CalcTemperatureC+2
  9979  00A3  0021               	movlb	1	; select bank1
  9980  00A4  0865               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+3)^(0+128),w
  9981  00A5  0020               	movlb	0	; select bank0
  9982  00A6  00E2               	movwf	??_SHT3x_CalcTemperatureC+3
  9983  00A7  3010               	movlw	16
  9984  00A8  00E3               	movwf	??_SHT3x_CalcTemperatureC+4
  9985  00A9                     u3275:	
  9986  00A9  37E2               	asrf	??_SHT3x_CalcTemperatureC+3,f
  9987  00AA  0CE1               	rrf	??_SHT3x_CalcTemperatureC+2,f
  9988  00AB  0CE0               	rrf	??_SHT3x_CalcTemperatureC+1,f
  9989  00AC  0CDF               	rrf	??_SHT3x_CalcTemperatureC,f
  9990  00AD  0BE3               	decfsz	??_SHT3x_CalcTemperatureC+4,f
  9991  00AE  28A9               	goto	u3275
  9992  00AF  085F               	movf	??_SHT3x_CalcTemperatureC,w
  9993  00B0  00E4               	movwf	??_SHT3x_CalcTemperatureC+5
  9994  00B1  0864               	movf	??_SHT3x_CalcTemperatureC+5,w
  9995  00B2  0021               	movlb	1	; select bank1
  9996  00B3  00E0               	movwf	SHT3x_CalcTemperatureC@Temperature_U8^(0+128)
  9997                           
  9998                           ;SHT25.c: 116: Temperature_L8 = (UINT_8)(TemperatureTemp >> 8);
  9999  00B4  0862               	movf	SHT3x_CalcTemperatureC@TemperatureTemp^(0+128),w
 10000  00B5  0020               	movlb	0	; select bank0
 10001  00B6  00DF               	movwf	??_SHT3x_CalcTemperatureC
 10002  00B7  0021               	movlb	1	; select bank1
 10003  00B8  0863               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+1)^(0+128),w
 10004  00B9  0020               	movlb	0	; select bank0
 10005  00BA  00E0               	movwf	??_SHT3x_CalcTemperatureC+1
 10006  00BB  0021               	movlb	1	; select bank1
 10007  00BC  0864               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+2)^(0+128),w
 10008  00BD  0020               	movlb	0	; select bank0
 10009  00BE  00E1               	movwf	??_SHT3x_CalcTemperatureC+2
 10010  00BF  0021               	movlb	1	; select bank1
 10011  00C0  0865               	movf	(SHT3x_CalcTemperatureC@TemperatureTemp+3)^(0+128),w
 10012  00C1  0020               	movlb	0	; select bank0
 10013  00C2  00E2               	movwf	??_SHT3x_CalcTemperatureC+3
 10014  00C3  3008               	movlw	8
 10015  00C4  00E3               	movwf	??_SHT3x_CalcTemperatureC+4
 10016  00C5                     u3285:	
 10017  00C5  37E2               	asrf	??_SHT3x_CalcTemperatureC+3,f
 10018  00C6  0CE1               	rrf	??_SHT3x_CalcTemperatureC+2,f
 10019  00C7  0CE0               	rrf	??_SHT3x_CalcTemperatureC+1,f
 10020  00C8  0CDF               	rrf	??_SHT3x_CalcTemperatureC,f
 10021  00C9  0BE3               	decfsz	??_SHT3x_CalcTemperatureC+4,f
 10022  00CA  28C5               	goto	u3285
 10023  00CB  085F               	movf	??_SHT3x_CalcTemperatureC,w
 10024  00CC  00E4               	movwf	??_SHT3x_CalcTemperatureC+5
 10025  00CD  0864               	movf	??_SHT3x_CalcTemperatureC+5,w
 10026  00CE  0021               	movlb	1	; select bank1
 10027  00CF  00E1               	movwf	SHT3x_CalcTemperatureC@Temperature_L8^(0+128)
 10028                           
 10029                           ;SHT25.c: 117: Temperature_UBP8 = (UINT_16)Temperature_U8 << 8 + Temperature_L8;
 10030  00D0  0860               	movf	SHT3x_CalcTemperatureC@Temperature_U8^(0+128),w
 10031  00D1  0020               	movlb	0	; select bank0
 10032  00D2  00DF               	movwf	??_SHT3x_CalcTemperatureC
 10033  00D3  01E0               	clrf	??_SHT3x_CalcTemperatureC+1
 10034  00D4  0021               	movlb	1	; select bank1
 10035  00D5  0861               	movf	SHT3x_CalcTemperatureC@Temperature_L8^(0+128),w
 10036  00D6  3E08               	addlw	8
 10037  00D7  0A89               	incf	9,f
 10038  00D8  0020               	movlb	0	; select bank0
 10039  00D9  28DC               	goto	u3294
 10040  00DA                     u3295:	
 10041  00DA  35DF               	lslf	??_SHT3x_CalcTemperatureC,f
 10042  00DB  0DE0               	rlf	??_SHT3x_CalcTemperatureC+1,f
 10043  00DC                     u3294:	
 10044  00DC  0B89               	decfsz	9,f
 10045  00DD  28DA               	goto	u3295
 10046  00DE  085F               	movf	??_SHT3x_CalcTemperatureC,w
 10047  00DF  0021               	movlb	1	; select bank1
 10048  00E0  00DC               	movwf	SHT3x_CalcTemperatureC@Temperature_UBP8^(0+128)
 10049  00E1  0020               	movlb	0	; select bank0
 10050  00E2  0860               	movf	??_SHT3x_CalcTemperatureC+1,w
 10051  00E3  0021               	movlb	1	; select bank1
 10052  00E4  00DD               	movwf	(SHT3x_CalcTemperatureC@Temperature_UBP8+1)^(0+128)
 10053                           
 10054                           ;SHT25.c: 123: TemperatureFloat = 100 *((float)TemperatureRaw * 175 / 65535 - 45);
 10055  00E5  3000               	movlw	0
 10056  00E6  0020               	movlb	0	; select bank0
 10057  00E7  00D0               	movwf	___ftadd@f1
 10058  00E8  3034               	movlw	52
 10059  00E9  00D1               	movwf	___ftadd@f1+1
 10060  00EA  30C2               	movlw	194
 10061  00EB  00D2               	movwf	___ftadd@f1+2
 10062  00EC  30FF               	movlw	255
 10063  00ED  00C0               	movwf	___ftdiv@f2
 10064  00EE  307F               	movlw	127
 10065  00EF  00C1               	movwf	___ftdiv@f2+1
 10066  00F0  3047               	movlw	71
 10067  00F1  00C2               	movwf	___ftdiv@f2+2
 10068  00F2  3000               	movlw	0
 10069  00F3  00B0               	movwf	___ftmul@f1
 10070  00F4  302F               	movlw	47
 10071  00F5  00B1               	movwf	___ftmul@f1+1
 10072  00F6  3043               	movlw	67
 10073  00F7  00B2               	movwf	___ftmul@f1+2
 10074  00F8  0021               	movlb	1	; select bank1
 10075  00F9  0850               	movf	(_TemperatureRaw+1)^(0+128),w
 10076  00FA  0020               	movlb	0	; select bank0
 10077  00FB  00AD               	movwf	___lwtoft@c+1
 10078  00FC  0021               	movlb	1	; select bank1
 10079  00FD  084F               	movf	_TemperatureRaw^(0+128),w
 10080  00FE  0020               	movlb	0	; select bank0
 10081  00FF  00AC               	movwf	___lwtoft@c
 10082  0100  3189  21C1  3180   	fcall	___lwtoft
 10083  0103  0020               	movlb	0	; select bank0
 10084  0104  082C               	movf	?___lwtoft,w
 10085  0105  00B3               	movwf	___ftmul@f2
 10086  0106  082D               	movf	?___lwtoft+1,w
 10087  0107  00B4               	movwf	___ftmul@f2+1
 10088  0108  082E               	movf	?___lwtoft+2,w
 10089  0109  00B5               	movwf	___ftmul@f2+2
 10090  010A  3185  2592  3180   	fcall	___ftmul
 10091  010D  0020               	movlb	0	; select bank0
 10092  010E  0830               	movf	?___ftmul,w
 10093  010F  00C3               	movwf	___ftdiv@f1
 10094  0110  0831               	movf	?___ftmul+1,w
 10095  0111  00C4               	movwf	___ftdiv@f1+1
 10096  0112  0832               	movf	?___ftmul+2,w
 10097  0113  00C5               	movwf	___ftdiv@f1+2
 10098  0114  3186  2646  3180   	fcall	___ftdiv
 10099  0117  0020               	movlb	0	; select bank0
 10100  0118  0840               	movf	?___ftdiv,w
 10101  0119  00D3               	movwf	___ftadd@f2
 10102  011A  0841               	movf	?___ftdiv+1,w
 10103  011B  00D4               	movwf	___ftadd@f2+1
 10104  011C  0842               	movf	?___ftdiv+2,w
 10105  011D  00D5               	movwf	___ftadd@f2+2
 10106  011E  3182  22FB  3180   	fcall	___ftadd
 10107  0121  0020               	movlb	0	; select bank0
 10108  0122  0850               	movf	?___ftadd,w
 10109  0123  0021               	movlb	1	; select bank1
 10110  0124  00D9               	movwf	_SHT3x_CalcTemperatureC$2275^(0+128)
 10111  0125  0020               	movlb	0	; select bank0
 10112  0126  0851               	movf	?___ftadd+1,w
 10113  0127  0021               	movlb	1	; select bank1
 10114  0128  00DA               	movwf	(_SHT3x_CalcTemperatureC$2275+1)^(0+128)
 10115  0129  0020               	movlb	0	; select bank0
 10116  012A  0852               	movf	?___ftadd+2,w
 10117  012B  0021               	movlb	1	; select bank1
 10118  012C  00DB               	movwf	(_SHT3x_CalcTemperatureC$2275+2)^(0+128)
 10119                           
 10120                           ;SHT25.c: 123: TemperatureFloat = 100 *((float)TemperatureRaw * 175 / 65535 - 45);
 10121  012D  3000               	movlw	0
 10122  012E  0020               	movlb	0	; select bank0
 10123  012F  00B0               	movwf	___ftmul@f1
 10124  0130  30C8               	movlw	200
 10125  0131  00B1               	movwf	___ftmul@f1+1
 10126  0132  3042               	movlw	66
 10127  0133  00B2               	movwf	___ftmul@f1+2
 10128  0134  0021               	movlb	1	; select bank1
 10129  0135  0859               	movf	_SHT3x_CalcTemperatureC$2275^(0+128),w
 10130  0136  0020               	movlb	0	; select bank0
 10131  0137  00B3               	movwf	___ftmul@f2
 10132  0138  0021               	movlb	1	; select bank1
 10133  0139  085A               	movf	(_SHT3x_CalcTemperatureC$2275+1)^(0+128),w
 10134  013A  0020               	movlb	0	; select bank0
 10135  013B  00B4               	movwf	___ftmul@f2+1
 10136  013C  0021               	movlb	1	; select bank1
 10137  013D  085B               	movf	(_SHT3x_CalcTemperatureC$2275+2)^(0+128),w
 10138  013E  0020               	movlb	0	; select bank0
 10139  013F  00B5               	movwf	___ftmul@f2+2
 10140  0140  3185  2592  3180   	fcall	___ftmul
 10141  0143  0020               	movlb	0	; select bank0
 10142  0144  0830               	movf	?___ftmul,w
 10143  0145  0021               	movlb	1	; select bank1
 10144  0146  00E6               	movwf	SHT3x_CalcTemperatureC@TemperatureFloat^(0+128)
 10145  0147  0020               	movlb	0	; select bank0
 10146  0148  0831               	movf	?___ftmul+1,w
 10147  0149  0021               	movlb	1	; select bank1
 10148  014A  00E7               	movwf	(SHT3x_CalcTemperatureC@TemperatureFloat+1)^(0+128)
 10149  014B  0020               	movlb	0	; select bank0
 10150  014C  0832               	movf	?___ftmul+2,w
 10151  014D  0021               	movlb	1	; select bank1
 10152  014E  00E8               	movwf	(SHT3x_CalcTemperatureC@TemperatureFloat+2)^(0+128)
 10153                           
 10154                           ;SHT25.c: 124: if (TemperatureFloat < 0)
 10155  014F  0866               	movf	SHT3x_CalcTemperatureC@TemperatureFloat^(0+128),w
 10156  0150  0020               	movlb	0	; select bank0
 10157  0151  00A4               	movwf	___ftge@ff1
 10158  0152  0021               	movlb	1	; select bank1
 10159  0153  0867               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+1)^(0+128),w
 10160  0154  0020               	movlb	0	; select bank0
 10161  0155  00A5               	movwf	___ftge@ff1+1
 10162  0156  0021               	movlb	1	; select bank1
 10163  0157  0868               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+2)^(0+128),w
 10164  0158  0020               	movlb	0	; select bank0
 10165  0159  00A6               	movwf	___ftge@ff1+2
 10166  015A  3000               	movlw	0
 10167  015B  00A7               	movwf	___ftge@ff2
 10168  015C  3000               	movlw	0
 10169  015D  00A8               	movwf	___ftge@ff2+1
 10170  015E  3000               	movlw	0
 10171  015F  00A9               	movwf	___ftge@ff2+2
 10172  0160  318D  2534  3180   	fcall	___ftge
 10173  0163  1803               	btfsc	3,0
 10174  0164  2994               	goto	l4093
 10175                           
 10176                           ;SHT25.c: 125: {
 10177                           ;SHT25.c: 126: TemperatureFloat = abs(TemperatureFloat);
 10178  0165  0021               	movlb	1	; select bank1
 10179  0166  0866               	movf	SHT3x_CalcTemperatureC@TemperatureFloat^(0+128),w
 10180  0167  0020               	movlb	0	; select bank0
 10181  0168  00A4               	movwf	___fttol@f1
 10182  0169  0021               	movlb	1	; select bank1
 10183  016A  0867               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+1)^(0+128),w
 10184  016B  0020               	movlb	0	; select bank0
 10185  016C  00A5               	movwf	___fttol@f1+1
 10186  016D  0021               	movlb	1	; select bank1
 10187  016E  0868               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+2)^(0+128),w
 10188  016F  0020               	movlb	0	; select bank0
 10189  0170  00A6               	movwf	___fttol@f1+2
 10190  0171  3186  26EF  3180   	fcall	___fttol
 10191  0174  0020               	movlb	0	; select bank0
 10192  0175  0825               	movf	?___fttol+1,w
 10193  0176  00B3               	movwf	abs@a+1
 10194  0177  0824               	movf	?___fttol,w
 10195  0178  00B2               	movwf	abs@a
 10196  0179  3187  27EF  3180   	fcall	_abs
 10197  017C  0020               	movlb	0	; select bank0
 10198  017D  0833               	movf	?_abs+1,w
 10199  017E  00B7               	movwf	___awtoft@c+1
 10200  017F  0832               	movf	?_abs,w
 10201  0180  00B6               	movwf	___awtoft@c
 10202  0181  318A  22F7  3180   	fcall	___awtoft
 10203  0184  0020               	movlb	0	; select bank0
 10204  0185  0836               	movf	?___awtoft,w
 10205  0186  0021               	movlb	1	; select bank1
 10206  0187  00E6               	movwf	SHT3x_CalcTemperatureC@TemperatureFloat^(0+128)
 10207  0188  0020               	movlb	0	; select bank0
 10208  0189  0837               	movf	?___awtoft+1,w
 10209  018A  0021               	movlb	1	; select bank1
 10210  018B  00E7               	movwf	(SHT3x_CalcTemperatureC@TemperatureFloat+1)^(0+128)
 10211  018C  0020               	movlb	0	; select bank0
 10212  018D  0838               	movf	?___awtoft+2,w
 10213  018E  0021               	movlb	1	; select bank1
 10214  018F  00E8               	movwf	(SHT3x_CalcTemperatureC@TemperatureFloat+2)^(0+128)
 10215                           
 10216                           ;SHT25.c: 127: EUSART_Write('-');
 10217  0190  302D               	movlw	45
 10218  0191  318B  23B2  3180   	fcall	_EUSART_Write
 10219  0194                     l4093:	
 10220                           
 10221                           ;SHT25.c: 128: }
 10222                           ;SHT25.c: 129: TemperatureInt = (UINT_16)(TemperatureFloat);
 10223  0194  0021               	movlb	1	; select bank1
 10224  0195  0866               	movf	SHT3x_CalcTemperatureC@TemperatureFloat^(0+128),w
 10225  0196  0020               	movlb	0	; select bank0
 10226  0197  00A4               	movwf	___fttol@f1
 10227  0198  0021               	movlb	1	; select bank1
 10228  0199  0867               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+1)^(0+128),w
 10229  019A  0020               	movlb	0	; select bank0
 10230  019B  00A5               	movwf	___fttol@f1+1
 10231  019C  0021               	movlb	1	; select bank1
 10232  019D  0868               	movf	(SHT3x_CalcTemperatureC@TemperatureFloat+2)^(0+128),w
 10233  019E  0020               	movlb	0	; select bank0
 10234  019F  00A6               	movwf	___fttol@f1+2
 10235  01A0  3186  26EF  3180   	fcall	___fttol
 10236  01A3  0020               	movlb	0	; select bank0
 10237  01A4  0825               	movf	?___fttol+1,w
 10238  01A5  0021               	movlb	1	; select bank1
 10239  01A6  00DF               	movwf	(SHT3x_CalcTemperatureC@TemperatureInt+1)^(0+128)
 10240  01A7  0020               	movlb	0	; select bank0
 10241  01A8  0824               	movf	?___fttol,w
 10242  01A9  0021               	movlb	1	; select bank1
 10243  01AA  00DE               	movwf	SHT3x_CalcTemperatureC@TemperatureInt^(0+128)
 10244                           
 10245                           ;SHT25.c: 130: sprintf(str, "%d" , TemperatureInt);
 10246  01AB  3039               	movlw	low (STR_1| (0+32768))
 10247  01AC  0020               	movlb	0	; select bank0
 10248  01AD  00B2               	movwf	sprintf@f
 10249  01AE  3090               	movlw	high (STR_1| (0+32768))
 10250  01AF  00B3               	movwf	sprintf@f+1
 10251  01B0  0021               	movlb	1	; select bank1
 10252  01B1  085F               	movf	(SHT3x_CalcTemperatureC@TemperatureInt+1)^(0+128),w
 10253  01B2  0020               	movlb	0	; select bank0
 10254  01B3  00B5               	movwf	?_sprintf+3
 10255  01B4  0021               	movlb	1	; select bank1
 10256  01B5  085E               	movf	SHT3x_CalcTemperatureC@TemperatureInt^(0+128),w
 10257  01B6  0020               	movlb	0	; select bank0
 10258  01B7  00B4               	movwf	?_sprintf+2
 10259  01B8  30D1               	movlw	(low (SHT3x_CalcTemperatureC@str| 0))& (0+255)
 10260  01B9  3184  24C4  3180   	fcall	_sprintf
 10261                           
 10262                           ;SHT25.c: 132: EUSART_Write('T');
 10263  01BC  3054               	movlw	84
 10264  01BD  318B  23B2  3180   	fcall	_EUSART_Write
 10265                           
 10266                           ;SHT25.c: 133: EUSART_Write(str[0]);
 10267  01C0  0021               	movlb	1	; select bank1
 10268  01C1  0851               	movf	SHT3x_CalcTemperatureC@str^(0+128),w
 10269  01C2  318B  23B2  3180   	fcall	_EUSART_Write
 10270                           
 10271                           ;SHT25.c: 134: EUSART_Write(str[1]);
 10272  01C5  0021               	movlb	1	; select bank1
 10273  01C6  0852               	movf	(SHT3x_CalcTemperatureC@str^(0+128)+1),w
 10274  01C7  318B  23B2  3180   	fcall	_EUSART_Write
 10275                           
 10276                           ;SHT25.c: 135: EUSART_Write('.');
 10277  01CA  302E               	movlw	46
 10278  01CB  318B  23B2  3180   	fcall	_EUSART_Write
 10279                           
 10280                           ;SHT25.c: 136: EUSART_Write(str[2]);
 10281  01CE  0021               	movlb	1	; select bank1
 10282  01CF  0853               	movf	(SHT3x_CalcTemperatureC@str^(0+128)+2),w
 10283  01D0  318B  23B2  3180   	fcall	_EUSART_Write
 10284                           
 10285                           ;SHT25.c: 137: EUSART_Write(str[3]);
 10286  01D3  0021               	movlb	1	; select bank1
 10287  01D4  0854               	movf	(SHT3x_CalcTemperatureC@str^(0+128)+3),w
 10288  01D5  318B  23B2         	fcall	_EUSART_Write
 10289                           
 10290                           ;SHT25.c: 140: return Temperature_UBP8 ;
 10291  01D7  0021               	movlb	1	; select bank1
 10292  01D8  085D               	movf	(SHT3x_CalcTemperatureC@Temperature_UBP8+1)^(0+128),w
 10293  01D9  0020               	movlb	0	; select bank0
 10294  01DA  00DE               	movwf	?_SHT3x_CalcTemperatureC+1
 10295  01DB  0021               	movlb	1	; select bank1
 10296  01DC  085C               	movf	SHT3x_CalcTemperatureC@Temperature_UBP8^(0+128),w
 10297  01DD  0020               	movlb	0	; select bank0
 10298  01DE  00DD               	movwf	?_SHT3x_CalcTemperatureC
 10299  01DF  0008               	return
 10300  01E0                     __end_of_SHT3x_CalcTemperatureC:	
 10301                           
 10302                           	psect	text19
 10303  07EF                     __ptext19:	
 10304 ;; *************** function _abs *****************
 10305 ;; Defined at:
 10306 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  a               2   18[BANK0 ] int 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  2   18[BANK0 ] int 
 10313 ;; Registers used:
 10314 ;;		wreg, status,2, status,0
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        4 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    7
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_SHT3x_CalcTemperatureC
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           
 10335                           ;psect for function _abs
 10336  07EF                     _abs:	
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _abs: [wreg+status,2+status,0]
 10340  07EF  0020               	movlb	0	; select bank0
 10341  07F0  1FB3               	btfss	abs@a+1,7
 10342  07F1  0008               	return
 10343  07F2  0932               	comf	abs@a,w
 10344  07F3  00B4               	movwf	??_abs
 10345  07F4  0933               	comf	abs@a+1,w
 10346  07F5  00B5               	movwf	??_abs+1
 10347  07F6  0AB4               	incf	??_abs,f
 10348  07F7  1903               	skipnz
 10349  07F8  0AB5               	incf	??_abs+1,f
 10350  07F9  0834               	movf	??_abs,w
 10351  07FA  00B2               	movwf	?_abs
 10352  07FB  0835               	movf	??_abs+1,w
 10353  07FC  00B3               	movwf	?_abs+1
 10354  07FD  0008               	return
 10355  07FE                     __end_of_abs:	
 10356                           
 10357                           	psect	text20
 10358  0D34                     __ptext20:	
 10359 ;; *************** function ___ftge *****************
 10360 ;; Defined at:
 10361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;  ff1             3    4[BANK0 ] float 
 10364 ;;  ff2             3    7[BANK0 ] float 
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;		None               void
 10369 ;; Registers used:
 10370 ;;		wreg, status,2, status,0
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        9 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    7
 10383 ;; This function calls:
 10384 ;;		Nothing
 10385 ;; This function is called by:
 10386 ;;		_SHT3x_CalcTemperatureC
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function ___ftge
 10392  0D34                     ___ftge:	
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10396  0D34  0020               	movlb	0	; select bank0
 10397  0D35  1FA6               	btfss	___ftge@ff1+2,7
 10398  0D36  2D4B               	goto	l3749
 10399  0D37  0924               	comf	___ftge@ff1,w
 10400  0D38  00AA               	movwf	??___ftge
 10401  0D39  0925               	comf	___ftge@ff1+1,w
 10402  0D3A  00AB               	movwf	??___ftge+1
 10403  0D3B  0926               	comf	___ftge@ff1+2,w
 10404  0D3C  00AC               	movwf	??___ftge+2
 10405  0D3D  0AAA               	incf	??___ftge,f
 10406  0D3E  1903               	skipnz
 10407  0D3F  0AAB               	incf	??___ftge+1,f
 10408  0D40  1903               	skipnz
 10409  0D41  0AAC               	incf	??___ftge+2,f
 10410  0D42  3000               	movlw	0
 10411  0D43  072A               	addwf	??___ftge,w
 10412  0D44  00A4               	movwf	___ftge@ff1
 10413  0D45  3000               	movlw	0
 10414  0D46  3D2B               	addwfc	??___ftge+1,w
 10415  0D47  00A5               	movwf	___ftge@ff1+1
 10416  0D48  3080               	movlw	128
 10417  0D49  3D2C               	addwfc	??___ftge+2,w
 10418  0D4A  00A6               	movwf	___ftge@ff1+2
 10419  0D4B                     l3749:	
 10420  0D4B  1FA9               	btfss	___ftge@ff2+2,7
 10421  0D4C  2D61               	goto	l3753
 10422  0D4D  0927               	comf	___ftge@ff2,w
 10423  0D4E  00AA               	movwf	??___ftge
 10424  0D4F  0928               	comf	___ftge@ff2+1,w
 10425  0D50  00AB               	movwf	??___ftge+1
 10426  0D51  0929               	comf	___ftge@ff2+2,w
 10427  0D52  00AC               	movwf	??___ftge+2
 10428  0D53  0AAA               	incf	??___ftge,f
 10429  0D54  1903               	skipnz
 10430  0D55  0AAB               	incf	??___ftge+1,f
 10431  0D56  1903               	skipnz
 10432  0D57  0AAC               	incf	??___ftge+2,f
 10433  0D58  3000               	movlw	0
 10434  0D59  072A               	addwf	??___ftge,w
 10435  0D5A  00A7               	movwf	___ftge@ff2
 10436  0D5B  3000               	movlw	0
 10437  0D5C  3D2B               	addwfc	??___ftge+1,w
 10438  0D5D  00A8               	movwf	___ftge@ff2+1
 10439  0D5E  3080               	movlw	128
 10440  0D5F  3D2C               	addwfc	??___ftge+2,w
 10441  0D60  00A9               	movwf	___ftge@ff2+2
 10442  0D61                     l3753:	
 10443  0D61  3080               	movlw	128
 10444  0D62  06A6               	xorwf	___ftge@ff1+2,f
 10445  0D63  3080               	movlw	128
 10446  0D64  06A9               	xorwf	___ftge@ff2+2,f
 10447  0D65  0829               	movf	___ftge@ff2+2,w
 10448  0D66  0226               	subwf	___ftge@ff1+2,w
 10449  0D67  1D03               	skipz
 10450  0D68  0008               	return
 10451  0D69  0828               	movf	___ftge@ff2+1,w
 10452  0D6A  0225               	subwf	___ftge@ff1+1,w
 10453  0D6B  1D03               	skipz
 10454  0D6C  0008               	return
 10455  0D6D  0827               	movf	___ftge@ff2,w
 10456  0D6E  0224               	subwf	___ftge@ff1,w
 10457  0D6F  0008               	return
 10458  0D70                     __end_of___ftge:	
 10459                           
 10460                           	psect	text21
 10461  02FB                     __ptext21:	
 10462 ;; *************** function ___ftadd *****************
 10463 ;; Defined at:
 10464 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;  f1              3   48[BANK0 ] float 
 10467 ;;  f2              3   51[BANK0 ] float 
 10468 ;; Auto vars:     Size  Location     Type
 10469 ;;  exp1            1   60[BANK0 ] unsigned char 
 10470 ;;  exp2            1   59[BANK0 ] unsigned char 
 10471 ;;  sign            1   58[BANK0 ] unsigned char 
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  3   48[BANK0 ] float 
 10474 ;; Registers used:
 10475 ;;		wreg, status,2, status,0, pclath, cstack
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:       13 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    8
 10488 ;; This function calls:
 10489 ;;		___ftpack
 10490 ;; This function is called by:
 10491 ;;		_SHT3x_CalcTemperatureC
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function ___ftadd
 10497  02FB                     ___ftadd:	
 10498                           
 10499                           ;incstack = 0
 10500                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10501  02FB  0020               	movlb	0	; select bank0
 10502  02FC  0850               	movf	___ftadd@f1,w
 10503  02FD  00D6               	movwf	??___ftadd
 10504  02FE  0851               	movf	___ftadd@f1+1,w
 10505  02FF  00D7               	movwf	??___ftadd+1
 10506  0300  0852               	movf	___ftadd@f1+2,w
 10507  0301  00D8               	movwf	??___ftadd+2
 10508  0302  1003               	clrc
 10509  0303  0D57               	rlf	??___ftadd+1,w
 10510  0304  0D58               	rlf	??___ftadd+2,w
 10511  0305  00D9               	movwf	??___ftadd+3
 10512  0306  0859               	movf	??___ftadd+3,w
 10513  0307  00DC               	movwf	___ftadd@exp1
 10514  0308  0853               	movf	___ftadd@f2,w
 10515  0309  00D6               	movwf	??___ftadd
 10516  030A  0854               	movf	___ftadd@f2+1,w
 10517  030B  00D7               	movwf	??___ftadd+1
 10518  030C  0855               	movf	___ftadd@f2+2,w
 10519  030D  00D8               	movwf	??___ftadd+2
 10520  030E  1003               	clrc
 10521  030F  0D57               	rlf	??___ftadd+1,w
 10522  0310  0D58               	rlf	??___ftadd+2,w
 10523  0311  00D9               	movwf	??___ftadd+3
 10524  0312  0859               	movf	??___ftadd+3,w
 10525  0313  00DB               	movwf	___ftadd@exp2
 10526  0314  085C               	movf	___ftadd@exp1,w
 10527  0315  1903               	btfsc	3,2
 10528  0316  2B23               	goto	l3639
 10529  0317  085B               	movf	___ftadd@exp2,w
 10530  0318  025C               	subwf	___ftadd@exp1,w
 10531  0319  1803               	skipnc
 10532  031A  2B2A               	goto	l3643
 10533  031B  035C               	decf	___ftadd@exp1,w
 10534  031C  3AFF               	xorlw	255
 10535  031D  075B               	addwf	___ftadd@exp2,w
 10536  031E  00D6               	movwf	??___ftadd
 10537  031F  3019               	movlw	25
 10538  0320  0256               	subwf	??___ftadd,w
 10539  0321  1C03               	skipc
 10540  0322  2B2A               	goto	l3643
 10541  0323                     l3639:	
 10542  0323  0853               	movf	___ftadd@f2,w
 10543  0324  00D0               	movwf	?___ftadd
 10544  0325  0854               	movf	___ftadd@f2+1,w
 10545  0326  00D1               	movwf	?___ftadd+1
 10546  0327  0855               	movf	___ftadd@f2+2,w
 10547  0328  00D2               	movwf	?___ftadd+2
 10548  0329  0008               	return
 10549  032A                     l3643:	
 10550  032A  085B               	movf	___ftadd@exp2,w
 10551  032B  1903               	btfsc	3,2
 10552  032C  0008               	return
 10553  032D  085C               	movf	___ftadd@exp1,w
 10554  032E  025B               	subwf	___ftadd@exp2,w
 10555  032F  1803               	skipnc
 10556  0330  2B39               	goto	l3649
 10557  0331  035B               	decf	___ftadd@exp2,w
 10558  0332  3AFF               	xorlw	255
 10559  0333  075C               	addwf	___ftadd@exp1,w
 10560  0334  00D6               	movwf	??___ftadd
 10561  0335  3019               	movlw	25
 10562  0336  0256               	subwf	??___ftadd,w
 10563  0337  1803               	btfsc	3,0
 10564  0338  0008               	return
 10565  0339                     l3649:	
 10566  0339  3006               	movlw	6
 10567  033A  00D6               	movwf	??___ftadd
 10568  033B  0856               	movf	??___ftadd,w
 10569  033C  00DA               	movwf	___ftadd@sign
 10570  033D  1BD2               	btfsc	___ftadd@f1+2,7
 10571  033E  17DA               	bsf	___ftadd@sign,7
 10572  033F  1BD5               	btfsc	___ftadd@f2+2,7
 10573  0340  175A               	bsf	___ftadd@sign,6
 10574  0341  17D1               	bsf	___ftadd@f1+1,7
 10575  0342  30FF               	movlw	255
 10576  0343  05D0               	andwf	___ftadd@f1,f
 10577  0344  30FF               	movlw	255
 10578  0345  05D1               	andwf	___ftadd@f1+1,f
 10579  0346  3000               	movlw	0
 10580  0347  05D2               	andwf	___ftadd@f1+2,f
 10581  0348  17D4               	bsf	___ftadd@f2+1,7
 10582  0349  30FF               	movlw	255
 10583  034A  05D3               	andwf	___ftadd@f2,f
 10584  034B  30FF               	movlw	255
 10585  034C  05D4               	andwf	___ftadd@f2+1,f
 10586  034D  3000               	movlw	0
 10587  034E  05D5               	andwf	___ftadd@f2+2,f
 10588  034F  085B               	movf	___ftadd@exp2,w
 10589  0350  025C               	subwf	___ftadd@exp1,w
 10590  0351  1803               	skipnc
 10591  0352  2B75               	goto	l3671
 10592  0353                     l3661:	
 10593  0353  3001               	movlw	1
 10594  0354                     u2675:	
 10595  0354  35D3               	lslf	___ftadd@f2,f
 10596  0355  0DD4               	rlf	___ftadd@f2+1,f
 10597  0356  0DD5               	rlf	___ftadd@f2+2,f
 10598  0357  0B89               	decfsz	9,f
 10599  0358  2B54               	goto	u2675
 10600  0359  3001               	movlw	1
 10601  035A  02DB               	subwf	___ftadd@exp2,f
 10602  035B  085B               	movf	___ftadd@exp2,w
 10603  035C  065C               	xorwf	___ftadd@exp1,w
 10604  035D  1903               	skipnz
 10605  035E  2B70               	goto	l3669
 10606  035F  3001               	movlw	1
 10607  0360  02DA               	subwf	___ftadd@sign,f
 10608  0361  085A               	movf	___ftadd@sign,w
 10609  0362  3907               	andlw	7
 10610  0363  1903               	btfsc	3,2
 10611  0364  2B70               	goto	l3669
 10612  0365  2B53               	goto	l3661
 10613  0366                     l3667:	
 10614  0366  3001               	movlw	1
 10615  0367                     u2705:	
 10616  0367  36D2               	lsrf	___ftadd@f1+2,f
 10617  0368  0CD1               	rrf	___ftadd@f1+1,f
 10618  0369  0CD0               	rrf	___ftadd@f1,f
 10619  036A  0B89               	decfsz	9,f
 10620  036B  2B67               	goto	u2705
 10621  036C  3001               	movlw	1
 10622  036D  00D6               	movwf	??___ftadd
 10623  036E  0856               	movf	??___ftadd,w
 10624  036F  07DC               	addwf	___ftadd@exp1,f
 10625  0370                     l3669:	
 10626  0370  085C               	movf	___ftadd@exp1,w
 10627  0371  065B               	xorwf	___ftadd@exp2,w
 10628  0372  1903               	btfsc	3,2
 10629  0373  2B9A               	goto	l1385
 10630  0374  2B66               	goto	l3667
 10631  0375                     l3671:	
 10632  0375  085C               	movf	___ftadd@exp1,w
 10633  0376  025B               	subwf	___ftadd@exp2,w
 10634  0377  1803               	skipnc
 10635  0378  2B9A               	goto	l1385
 10636  0379                     l3673:	
 10637  0379  3001               	movlw	1
 10638  037A                     u2735:	
 10639  037A  35D0               	lslf	___ftadd@f1,f
 10640  037B  0DD1               	rlf	___ftadd@f1+1,f
 10641  037C  0DD2               	rlf	___ftadd@f1+2,f
 10642  037D  0B89               	decfsz	9,f
 10643  037E  2B7A               	goto	u2735
 10644  037F  3001               	movlw	1
 10645  0380  02DC               	subwf	___ftadd@exp1,f
 10646  0381  085B               	movf	___ftadd@exp2,w
 10647  0382  065C               	xorwf	___ftadd@exp1,w
 10648  0383  1903               	skipnz
 10649  0384  2B96               	goto	l3681
 10650  0385  3001               	movlw	1
 10651  0386  02DA               	subwf	___ftadd@sign,f
 10652  0387  085A               	movf	___ftadd@sign,w
 10653  0388  3907               	andlw	7
 10654  0389  1903               	btfsc	3,2
 10655  038A  2B96               	goto	l3681
 10656  038B  2B79               	goto	l3673
 10657  038C                     l3679:	
 10658  038C  3001               	movlw	1
 10659  038D                     u2765:	
 10660  038D  36D5               	lsrf	___ftadd@f2+2,f
 10661  038E  0CD4               	rrf	___ftadd@f2+1,f
 10662  038F  0CD3               	rrf	___ftadd@f2,f
 10663  0390  0B89               	decfsz	9,f
 10664  0391  2B8D               	goto	u2765
 10665  0392  3001               	movlw	1
 10666  0393  00D6               	movwf	??___ftadd
 10667  0394  0856               	movf	??___ftadd,w
 10668  0395  07DB               	addwf	___ftadd@exp2,f
 10669  0396                     l3681:	
 10670  0396  085C               	movf	___ftadd@exp1,w
 10671  0397  065B               	xorwf	___ftadd@exp2,w
 10672  0398  1D03               	skipz
 10673  0399  2B8C               	goto	l3679
 10674  039A                     l1385:	
 10675  039A  1FDA               	btfss	___ftadd@sign,7
 10676  039B  2BAC               	goto	l3685
 10677  039C  30FF               	movlw	255
 10678  039D  06D0               	xorwf	___ftadd@f1,f
 10679  039E  30FF               	movlw	255
 10680  039F  06D1               	xorwf	___ftadd@f1+1,f
 10681  03A0  30FF               	movlw	255
 10682  03A1  06D2               	xorwf	___ftadd@f1+2,f
 10683  03A2  3001               	movlw	1
 10684  03A3  07D0               	addwf	___ftadd@f1,f
 10685  03A4  3000               	movlw	0
 10686  03A5  1803               	skipnc
 10687  03A6  3001               	movlw	1
 10688  03A7  07D1               	addwf	___ftadd@f1+1,f
 10689  03A8  3000               	movlw	0
 10690  03A9  1803               	skipnc
 10691  03AA  3001               	movlw	1
 10692  03AB  07D2               	addwf	___ftadd@f1+2,f
 10693  03AC                     l3685:	
 10694  03AC  1F5A               	btfss	___ftadd@sign,6
 10695  03AD  2BBE               	goto	l3689
 10696  03AE  30FF               	movlw	255
 10697  03AF  06D3               	xorwf	___ftadd@f2,f
 10698  03B0  30FF               	movlw	255
 10699  03B1  06D4               	xorwf	___ftadd@f2+1,f
 10700  03B2  30FF               	movlw	255
 10701  03B3  06D5               	xorwf	___ftadd@f2+2,f
 10702  03B4  3001               	movlw	1
 10703  03B5  07D3               	addwf	___ftadd@f2,f
 10704  03B6  3000               	movlw	0
 10705  03B7  1803               	skipnc
 10706  03B8  3001               	movlw	1
 10707  03B9  07D4               	addwf	___ftadd@f2+1,f
 10708  03BA  3000               	movlw	0
 10709  03BB  1803               	skipnc
 10710  03BC  3001               	movlw	1
 10711  03BD  07D5               	addwf	___ftadd@f2+2,f
 10712  03BE                     l3689:	
 10713  03BE  01DA               	clrf	___ftadd@sign
 10714  03BF  0850               	movf	___ftadd@f1,w
 10715  03C0  07D3               	addwf	___ftadd@f2,f
 10716  03C1  0851               	movf	___ftadd@f1+1,w
 10717  03C2  3DD4               	addwfc	___ftadd@f2+1,f
 10718  03C3  0852               	movf	___ftadd@f1+2,w
 10719  03C4  3DD5               	addwfc	___ftadd@f2+2,f
 10720  03C5  1FD5               	btfss	___ftadd@f2+2,7
 10721  03C6  2BD9               	goto	l3699
 10722  03C7  30FF               	movlw	255
 10723  03C8  06D3               	xorwf	___ftadd@f2,f
 10724  03C9  30FF               	movlw	255
 10725  03CA  06D4               	xorwf	___ftadd@f2+1,f
 10726  03CB  30FF               	movlw	255
 10727  03CC  06D5               	xorwf	___ftadd@f2+2,f
 10728  03CD  3001               	movlw	1
 10729  03CE  07D3               	addwf	___ftadd@f2,f
 10730  03CF  3000               	movlw	0
 10731  03D0  1803               	skipnc
 10732  03D1  3001               	movlw	1
 10733  03D2  07D4               	addwf	___ftadd@f2+1,f
 10734  03D3  3000               	movlw	0
 10735  03D4  1803               	skipnc
 10736  03D5  3001               	movlw	1
 10737  03D6  07D5               	addwf	___ftadd@f2+2,f
 10738  03D7  01DA               	clrf	___ftadd@sign
 10739  03D8  0ADA               	incf	___ftadd@sign,f
 10740  03D9                     l3699:	
 10741  03D9  0853               	movf	___ftadd@f2,w
 10742  03DA  00A4               	movwf	___ftpack@arg
 10743  03DB  0854               	movf	___ftadd@f2+1,w
 10744  03DC  00A5               	movwf	___ftpack@arg+1
 10745  03DD  0855               	movf	___ftadd@f2+2,w
 10746  03DE  00A6               	movwf	___ftpack@arg+2
 10747  03DF  085C               	movf	___ftadd@exp1,w
 10748  03E0  00D6               	movwf	??___ftadd
 10749  03E1  0856               	movf	??___ftadd,w
 10750  03E2  00A7               	movwf	___ftpack@exp
 10751  03E3  085A               	movf	___ftadd@sign,w
 10752  03E4  00D7               	movwf	??___ftadd+1
 10753  03E5  0857               	movf	??___ftadd+1,w
 10754  03E6  00A8               	movwf	___ftpack@sign
 10755  03E7  318F  272A         	fcall	___ftpack
 10756  03E9  0020               	movlb	0	; select bank0
 10757  03EA  0824               	movf	?___ftpack,w
 10758  03EB  00D0               	movwf	?___ftadd
 10759  03EC  0825               	movf	?___ftpack+1,w
 10760  03ED  00D1               	movwf	?___ftadd+1
 10761  03EE  0826               	movf	?___ftpack+2,w
 10762  03EF  00D2               	movwf	?___ftadd+2
 10763  03F0  0008               	return
 10764  03F1                     __end_of___ftadd:	
 10765                           
 10766                           	psect	text22
 10767  0AF7                     __ptext22:	
 10768 ;; *************** function ___awtoft *****************
 10769 ;; Defined at:
 10770 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;  c               2   22[BANK0 ] int 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  sign            1   27[BANK0 ] unsigned char 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  3   22[BANK0 ] float 
 10777 ;; Registers used:
 10778 ;;		wreg, status,2, status,0, pclath, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        6 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    8
 10791 ;; This function calls:
 10792 ;;		___ftpack
 10793 ;; This function is called by:
 10794 ;;		_SHT3x_CalcTemperatureC
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function ___awtoft
 10800  0AF7                     ___awtoft:	
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 10804  0AF7  0020               	movlb	0	; select bank0
 10805  0AF8  01BB               	clrf	___awtoft@sign
 10806  0AF9  1FB7               	btfss	___awtoft@c+1,7
 10807  0AFA  2B02               	goto	l3629
 10808  0AFB  09B6               	comf	___awtoft@c,f
 10809  0AFC  09B7               	comf	___awtoft@c+1,f
 10810  0AFD  0AB6               	incf	___awtoft@c,f
 10811  0AFE  1903               	skipnz
 10812  0AFF  0AB7               	incf	___awtoft@c+1,f
 10813  0B00  01BB               	clrf	___awtoft@sign
 10814  0B01  0ABB               	incf	___awtoft@sign,f
 10815  0B02                     l3629:	
 10816  0B02  0836               	movf	___awtoft@c,w
 10817  0B03  00A4               	movwf	___ftpack@arg
 10818  0B04  0837               	movf	___awtoft@c+1,w
 10819  0B05  00A5               	movwf	___ftpack@arg+1
 10820  0B06  01A6               	clrf	___ftpack@arg+2
 10821  0B07  308E               	movlw	142
 10822  0B08  00B9               	movwf	??___awtoft
 10823  0B09  0839               	movf	??___awtoft,w
 10824  0B0A  00A7               	movwf	___ftpack@exp
 10825  0B0B  083B               	movf	___awtoft@sign,w
 10826  0B0C  00BA               	movwf	??___awtoft+1
 10827  0B0D  083A               	movf	??___awtoft+1,w
 10828  0B0E  00A8               	movwf	___ftpack@sign
 10829  0B0F  318F  272A         	fcall	___ftpack
 10830  0B11  0020               	movlb	0	; select bank0
 10831  0B12  0824               	movf	?___ftpack,w
 10832  0B13  00B6               	movwf	?___awtoft
 10833  0B14  0825               	movf	?___ftpack+1,w
 10834  0B15  00B7               	movwf	?___awtoft+1
 10835  0B16  0826               	movf	?___ftpack+2,w
 10836  0B17  00B8               	movwf	?___awtoft+2
 10837  0B18  0008               	return
 10838  0B19                     __end_of___awtoft:	
 10839                           
 10840                           	psect	text23
 10841  01E0                     __ptext23:	
 10842 ;; *************** function _SHT3x_CalcRelativeHumidity *****************
 10843 ;; Defined at:
 10844 ;;		line 143 in file "SourceFiles/SunSensor/SHT25.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;		None
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;  str             8    0[BANK1 ] unsigned char [8]
 10849 ;;  RelativeHumi    4   20[BANK1 ] long 
 10850 ;;  RelativeHumi    3    8[BANK1 ] float 
 10851 ;;  RelativeHumi    2   16[BANK1 ] unsigned short 
 10852 ;;  RelativeHumi    2   14[BANK1 ] unsigned short 
 10853 ;;  RelativeHumi    1   19[BANK1 ] unsigned char 
 10854 ;;  RelativeHumi    1   18[BANK1 ] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  2   48[BANK0 ] unsigned short 
 10857 ;; Registers used:
 10858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         0       8      24       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:       32 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    9
 10871 ;; This function calls:
 10872 ;;		_EUSART_Write
 10873 ;;		___ftdiv
 10874 ;;		___ftmul
 10875 ;;		___fttol
 10876 ;;		___lmul
 10877 ;;		___lwtoft
 10878 ;;		_sprintf
 10879 ;; This function is called by:
 10880 ;;		_SHT25_StateMachine
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           
 10885                           ;psect for function _SHT3x_CalcRelativeHumidity
 10886  01E0                     _SHT3x_CalcRelativeHumidity:	
 10887                           
 10888                           ;SHT25.c: 145: SINT_32 RelativeHumidityTemp;
 10889                           ;SHT25.c: 146: UINT_16 RelativeHumidity_UBP8;
 10890                           ;SHT25.c: 147: UINT_8 RelativeHumidity_U8;
 10891                           ;SHT25.c: 148: UINT_8 RelativeHumidity_L8;
 10892                           ;SHT25.c: 150: FLOAT_24 RelativeHumidityFloat;
 10893                           ;SHT25.c: 151: UINT_16 RelativeHumidityInt;
 10894                           ;SHT25.c: 152: UINT_8 str[8];
 10895                           ;SHT25.c: 154: RelativeHumidityFloat = 100 * ((float)RelativeHumidityRaw * 100 / 65535);
 10896                           
 10897                           ;incstack = 0
 10898                           ; Regs used in _SHT3x_CalcRelativeHumidity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10899  01E0  30FF               	movlw	255
 10900  01E1  0020               	movlb	0	; select bank0
 10901  01E2  00C0               	movwf	___ftdiv@f2
 10902  01E3  307F               	movlw	127
 10903  01E4  00C1               	movwf	___ftdiv@f2+1
 10904  01E5  3047               	movlw	71
 10905  01E6  00C2               	movwf	___ftdiv@f2+2
 10906  01E7  3000               	movlw	0
 10907  01E8  00B0               	movwf	___ftmul@f1
 10908  01E9  30C8               	movlw	200
 10909  01EA  00B1               	movwf	___ftmul@f1+1
 10910  01EB  3042               	movlw	66
 10911  01EC  00B2               	movwf	___ftmul@f1+2
 10912  01ED  0021               	movlb	1	; select bank1
 10913  01EE  084E               	movf	(_RelativeHumidityRaw+1)^(0+128),w
 10914  01EF  0020               	movlb	0	; select bank0
 10915  01F0  00AD               	movwf	___lwtoft@c+1
 10916  01F1  0021               	movlb	1	; select bank1
 10917  01F2  084D               	movf	_RelativeHumidityRaw^(0+128),w
 10918  01F3  0020               	movlb	0	; select bank0
 10919  01F4  00AC               	movwf	___lwtoft@c
 10920  01F5  3189  21C1  3181   	fcall	___lwtoft
 10921  01F8  0020               	movlb	0	; select bank0
 10922  01F9  082C               	movf	?___lwtoft,w
 10923  01FA  00B3               	movwf	___ftmul@f2
 10924  01FB  082D               	movf	?___lwtoft+1,w
 10925  01FC  00B4               	movwf	___ftmul@f2+1
 10926  01FD  082E               	movf	?___lwtoft+2,w
 10927  01FE  00B5               	movwf	___ftmul@f2+2
 10928  01FF  3185  2592  3181   	fcall	___ftmul
 10929  0202  0020               	movlb	0	; select bank0
 10930  0203  0830               	movf	?___ftmul,w
 10931  0204  00C3               	movwf	___ftdiv@f1
 10932  0205  0831               	movf	?___ftmul+1,w
 10933  0206  00C4               	movwf	___ftdiv@f1+1
 10934  0207  0832               	movf	?___ftmul+2,w
 10935  0208  00C5               	movwf	___ftdiv@f1+2
 10936  0209  3186  2646  3181   	fcall	___ftdiv
 10937  020C  0020               	movlb	0	; select bank0
 10938  020D  0840               	movf	?___ftdiv,w
 10939  020E  0021               	movlb	1	; select bank1
 10940  020F  00DC               	movwf	_SHT3x_CalcRelativeHumidity$2276^(0+128)
 10941  0210  0020               	movlb	0	; select bank0
 10942  0211  0841               	movf	?___ftdiv+1,w
 10943  0212  0021               	movlb	1	; select bank1
 10944  0213  00DD               	movwf	(_SHT3x_CalcRelativeHumidity$2276+1)^(0+128)
 10945  0214  0020               	movlb	0	; select bank0
 10946  0215  0842               	movf	?___ftdiv+2,w
 10947  0216  0021               	movlb	1	; select bank1
 10948  0217  00DE               	movwf	(_SHT3x_CalcRelativeHumidity$2276+2)^(0+128)
 10949                           
 10950                           ;SHT25.c: 145: SINT_32 RelativeHumidityTemp;
 10951                           ;SHT25.c: 146: UINT_16 RelativeHumidity_UBP8;
 10952                           ;SHT25.c: 147: UINT_8 RelativeHumidity_U8;
 10953                           ;SHT25.c: 148: UINT_8 RelativeHumidity_L8;
 10954                           ;SHT25.c: 150: FLOAT_24 RelativeHumidityFloat;
 10955                           ;SHT25.c: 151: UINT_16 RelativeHumidityInt;
 10956                           ;SHT25.c: 152: UINT_8 str[8];
 10957                           ;SHT25.c: 154: RelativeHumidityFloat = 100 * ((float)RelativeHumidityRaw * 100 / 65535);
 10958  0218  3000               	movlw	0
 10959  0219  0020               	movlb	0	; select bank0
 10960  021A  00B0               	movwf	___ftmul@f1
 10961  021B  30C8               	movlw	200
 10962  021C  00B1               	movwf	___ftmul@f1+1
 10963  021D  3042               	movlw	66
 10964  021E  00B2               	movwf	___ftmul@f1+2
 10965  021F  0021               	movlb	1	; select bank1
 10966  0220  085C               	movf	_SHT3x_CalcRelativeHumidity$2276^(0+128),w
 10967  0221  0020               	movlb	0	; select bank0
 10968  0222  00B3               	movwf	___ftmul@f2
 10969  0223  0021               	movlb	1	; select bank1
 10970  0224  085D               	movf	(_SHT3x_CalcRelativeHumidity$2276+1)^(0+128),w
 10971  0225  0020               	movlb	0	; select bank0
 10972  0226  00B4               	movwf	___ftmul@f2+1
 10973  0227  0021               	movlb	1	; select bank1
 10974  0228  085E               	movf	(_SHT3x_CalcRelativeHumidity$2276+2)^(0+128),w
 10975  0229  0020               	movlb	0	; select bank0
 10976  022A  00B5               	movwf	___ftmul@f2+2
 10977  022B  3185  2592  3181   	fcall	___ftmul
 10978  022E  0020               	movlb	0	; select bank0
 10979  022F  0830               	movf	?___ftmul,w
 10980  0230  0021               	movlb	1	; select bank1
 10981  0231  00D9               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidityFloat^(0+128)
 10982  0232  0020               	movlb	0	; select bank0
 10983  0233  0831               	movf	?___ftmul+1,w
 10984  0234  0021               	movlb	1	; select bank1
 10985  0235  00DA               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityFloat+1)^(0+128)
 10986  0236  0020               	movlb	0	; select bank0
 10987  0237  0832               	movf	?___ftmul+2,w
 10988  0238  0021               	movlb	1	; select bank1
 10989  0239  00DB               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityFloat+2)^(0+128)
 10990                           
 10991                           ;SHT25.c: 155: RelativeHumidityInt = (UINT_16)(RelativeHumidityFloat);
 10992  023A  0859               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidityFloat^(0+128),w
 10993  023B  0020               	movlb	0	; select bank0
 10994  023C  00A4               	movwf	___fttol@f1
 10995  023D  0021               	movlb	1	; select bank1
 10996  023E  085A               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityFloat+1)^(0+128),w
 10997  023F  0020               	movlb	0	; select bank0
 10998  0240  00A5               	movwf	___fttol@f1+1
 10999  0241  0021               	movlb	1	; select bank1
 11000  0242  085B               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityFloat+2)^(0+128),w
 11001  0243  0020               	movlb	0	; select bank0
 11002  0244  00A6               	movwf	___fttol@f1+2
 11003  0245  3186  26EF  3181   	fcall	___fttol
 11004  0248  0020               	movlb	0	; select bank0
 11005  0249  0825               	movf	?___fttol+1,w
 11006  024A  0021               	movlb	1	; select bank1
 11007  024B  00E2               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityInt+1)^(0+128)
 11008  024C  0020               	movlb	0	; select bank0
 11009  024D  0824               	movf	?___fttol,w
 11010  024E  0021               	movlb	1	; select bank1
 11011  024F  00E1               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidityInt^(0+128)
 11012                           
 11013                           ;SHT25.c: 157: sprintf(str, "%d" , RelativeHumidityInt);
 11014  0250  3039               	movlw	low (STR_1| (0+32768))
 11015  0251  0020               	movlb	0	; select bank0
 11016  0252  00B2               	movwf	sprintf@f
 11017  0253  3090               	movlw	high (STR_1| (0+32768))
 11018  0254  00B3               	movwf	sprintf@f+1
 11019  0255  0021               	movlb	1	; select bank1
 11020  0256  0862               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityInt+1)^(0+128),w
 11021  0257  0020               	movlb	0	; select bank0
 11022  0258  00B5               	movwf	?_sprintf+3
 11023  0259  0021               	movlb	1	; select bank1
 11024  025A  0861               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidityInt^(0+128),w
 11025  025B  0020               	movlb	0	; select bank0
 11026  025C  00B4               	movwf	?_sprintf+2
 11027  025D  30D1               	movlw	(low (SHT3x_CalcRelativeHumidity@str| 0))& (0+255)
 11028  025E  3184  24C4  3181   	fcall	_sprintf
 11029                           
 11030                           ;SHT25.c: 159: EUSART_Write(' ');
 11031  0261  3020               	movlw	32
 11032  0262  318B  23B2  3181   	fcall	_EUSART_Write
 11033                           
 11034                           ;SHT25.c: 160: EUSART_Write('H');
 11035  0265  3048               	movlw	72
 11036  0266  318B  23B2  3181   	fcall	_EUSART_Write
 11037                           
 11038                           ;SHT25.c: 161: EUSART_Write(str[0]);
 11039  0269  0021               	movlb	1	; select bank1
 11040  026A  0851               	movf	SHT3x_CalcRelativeHumidity@str^(0+128),w
 11041  026B  318B  23B2  3181   	fcall	_EUSART_Write
 11042                           
 11043                           ;SHT25.c: 162: EUSART_Write(str[1]);
 11044  026E  0021               	movlb	1	; select bank1
 11045  026F  0852               	movf	(SHT3x_CalcRelativeHumidity@str^(0+128)+1),w
 11046  0270  318B  23B2  3181   	fcall	_EUSART_Write
 11047                           
 11048                           ;SHT25.c: 163: EUSART_Write('.');
 11049  0273  302E               	movlw	46
 11050  0274  318B  23B2  3181   	fcall	_EUSART_Write
 11051                           
 11052                           ;SHT25.c: 164: EUSART_Write(str[2]);
 11053  0277  0021               	movlb	1	; select bank1
 11054  0278  0853               	movf	(SHT3x_CalcRelativeHumidity@str^(0+128)+2),w
 11055  0279  318B  23B2  3181   	fcall	_EUSART_Write
 11056                           
 11057                           ;SHT25.c: 165: EUSART_Write(str[3]);
 11058  027C  0021               	movlb	1	; select bank1
 11059  027D  0854               	movf	(SHT3x_CalcRelativeHumidity@str^(0+128)+3),w
 11060  027E  318B  23B2  3181   	fcall	_EUSART_Write
 11061                           
 11062                           ;SHT25.c: 167: RelativeHumidityTemp = (UINT_32)RelativeHumidityRaw * 100;
 11063  0281  0021               	movlb	1	; select bank1
 11064  0282  084D               	movf	_RelativeHumidityRaw^(0+128),w
 11065  0283  0020               	movlb	0	; select bank0
 11066  0284  00A4               	movwf	___lmul@multiplier
 11067  0285  0021               	movlb	1	; select bank1
 11068  0286  084E               	movf	(_RelativeHumidityRaw+1)^(0+128),w
 11069  0287  0020               	movlb	0	; select bank0
 11070  0288  00A5               	movwf	___lmul@multiplier+1
 11071  0289  01A6               	clrf	___lmul@multiplier+2
 11072  028A  01A7               	clrf	___lmul@multiplier+3
 11073  028B  3000               	movlw	0
 11074  028C  00AB               	movwf	___lmul@multiplicand+3
 11075  028D  3000               	movlw	0
 11076  028E  00AA               	movwf	___lmul@multiplicand+2
 11077  028F  3000               	movlw	0
 11078  0290  00A9               	movwf	___lmul@multiplicand+1
 11079  0291  3064               	movlw	100
 11080  0292  00A8               	movwf	___lmul@multiplicand
 11081  0293  318C  245A  3181   	fcall	___lmul
 11082  0296  0020               	movlb	0	; select bank0
 11083  0297  0827               	movf	?___lmul+3,w
 11084  0298  0021               	movlb	1	; select bank1
 11085  0299  00E8               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+3)^(0+128)
 11086  029A  0020               	movlb	0	; select bank0
 11087  029B  0826               	movf	?___lmul+2,w
 11088  029C  0021               	movlb	1	; select bank1
 11089  029D  00E7               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+2)^(0+128)
 11090  029E  0020               	movlb	0	; select bank0
 11091  029F  0825               	movf	?___lmul+1,w
 11092  02A0  0021               	movlb	1	; select bank1
 11093  02A1  00E6               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+1)^(0+128)
 11094  02A2  0020               	movlb	0	; select bank0
 11095  02A3  0824               	movf	?___lmul,w
 11096  02A4  0021               	movlb	1	; select bank1
 11097  02A5  00E5               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidityTemp^(0+128)
 11098                           
 11099                           ;SHT25.c: 168: RelativeHumidity_U8 = (UINT_8)(RelativeHumidityTemp >> 16);
 11100  02A6  0865               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidityTemp^(0+128),w
 11101  02A7  0020               	movlb	0	; select bank0
 11102  02A8  00D2               	movwf	??_SHT3x_CalcRelativeHumidity
 11103  02A9  0021               	movlb	1	; select bank1
 11104  02AA  0866               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+1)^(0+128),w
 11105  02AB  0020               	movlb	0	; select bank0
 11106  02AC  00D3               	movwf	??_SHT3x_CalcRelativeHumidity+1
 11107  02AD  0021               	movlb	1	; select bank1
 11108  02AE  0867               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+2)^(0+128),w
 11109  02AF  0020               	movlb	0	; select bank0
 11110  02B0  00D4               	movwf	??_SHT3x_CalcRelativeHumidity+2
 11111  02B1  0021               	movlb	1	; select bank1
 11112  02B2  0868               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+3)^(0+128),w
 11113  02B3  0020               	movlb	0	; select bank0
 11114  02B4  00D5               	movwf	??_SHT3x_CalcRelativeHumidity+3
 11115  02B5  3010               	movlw	16
 11116  02B6  00D6               	movwf	??_SHT3x_CalcRelativeHumidity+4
 11117  02B7                     u3315:	
 11118  02B7  37D5               	asrf	??_SHT3x_CalcRelativeHumidity+3,f
 11119  02B8  0CD4               	rrf	??_SHT3x_CalcRelativeHumidity+2,f
 11120  02B9  0CD3               	rrf	??_SHT3x_CalcRelativeHumidity+1,f
 11121  02BA  0CD2               	rrf	??_SHT3x_CalcRelativeHumidity,f
 11122  02BB  0BD6               	decfsz	??_SHT3x_CalcRelativeHumidity+4,f
 11123  02BC  2AB7               	goto	u3315
 11124  02BD  0852               	movf	??_SHT3x_CalcRelativeHumidity,w
 11125  02BE  00D7               	movwf	??_SHT3x_CalcRelativeHumidity+5
 11126  02BF  0857               	movf	??_SHT3x_CalcRelativeHumidity+5,w
 11127  02C0  0021               	movlb	1	; select bank1
 11128  02C1  00E3               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidity_U8^(0+128)
 11129                           
 11130                           ;SHT25.c: 169: RelativeHumidity_L8 = (UINT_8)(RelativeHumidityTemp >> 8);
 11131  02C2  0865               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidityTemp^(0+128),w
 11132  02C3  0020               	movlb	0	; select bank0
 11133  02C4  00D2               	movwf	??_SHT3x_CalcRelativeHumidity
 11134  02C5  0021               	movlb	1	; select bank1
 11135  02C6  0866               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+1)^(0+128),w
 11136  02C7  0020               	movlb	0	; select bank0
 11137  02C8  00D3               	movwf	??_SHT3x_CalcRelativeHumidity+1
 11138  02C9  0021               	movlb	1	; select bank1
 11139  02CA  0867               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+2)^(0+128),w
 11140  02CB  0020               	movlb	0	; select bank0
 11141  02CC  00D4               	movwf	??_SHT3x_CalcRelativeHumidity+2
 11142  02CD  0021               	movlb	1	; select bank1
 11143  02CE  0868               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidityTemp+3)^(0+128),w
 11144  02CF  0020               	movlb	0	; select bank0
 11145  02D0  00D5               	movwf	??_SHT3x_CalcRelativeHumidity+3
 11146  02D1  3008               	movlw	8
 11147  02D2  00D6               	movwf	??_SHT3x_CalcRelativeHumidity+4
 11148  02D3                     u3325:	
 11149  02D3  37D5               	asrf	??_SHT3x_CalcRelativeHumidity+3,f
 11150  02D4  0CD4               	rrf	??_SHT3x_CalcRelativeHumidity+2,f
 11151  02D5  0CD3               	rrf	??_SHT3x_CalcRelativeHumidity+1,f
 11152  02D6  0CD2               	rrf	??_SHT3x_CalcRelativeHumidity,f
 11153  02D7  0BD6               	decfsz	??_SHT3x_CalcRelativeHumidity+4,f
 11154  02D8  2AD3               	goto	u3325
 11155  02D9  0852               	movf	??_SHT3x_CalcRelativeHumidity,w
 11156  02DA  00D7               	movwf	??_SHT3x_CalcRelativeHumidity+5
 11157  02DB  0857               	movf	??_SHT3x_CalcRelativeHumidity+5,w
 11158  02DC  0021               	movlb	1	; select bank1
 11159  02DD  00E4               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidity_L8^(0+128)
 11160                           
 11161                           ;SHT25.c: 170: RelativeHumidity_UBP8 = (UINT_16)RelativeHumidity_U8 << 8 + RelativeHumid
      +                          ity_L8;
 11162  02DE  0863               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidity_U8^(0+128),w
 11163  02DF  0020               	movlb	0	; select bank0
 11164  02E0  00D2               	movwf	??_SHT3x_CalcRelativeHumidity
 11165  02E1  01D3               	clrf	??_SHT3x_CalcRelativeHumidity+1
 11166  02E2  0021               	movlb	1	; select bank1
 11167  02E3  0864               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidity_L8^(0+128),w
 11168  02E4  3E08               	addlw	8
 11169  02E5  0A89               	incf	9,f
 11170  02E6  0020               	movlb	0	; select bank0
 11171  02E7  2AEA               	goto	u3334
 11172  02E8                     u3335:	
 11173  02E8  35D2               	lslf	??_SHT3x_CalcRelativeHumidity,f
 11174  02E9  0DD3               	rlf	??_SHT3x_CalcRelativeHumidity+1,f
 11175  02EA                     u3334:	
 11176  02EA  0B89               	decfsz	9,f
 11177  02EB  2AE8               	goto	u3335
 11178  02EC  0852               	movf	??_SHT3x_CalcRelativeHumidity,w
 11179  02ED  0021               	movlb	1	; select bank1
 11180  02EE  00DF               	movwf	SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8^(0+128)
 11181  02EF  0020               	movlb	0	; select bank0
 11182  02F0  0853               	movf	??_SHT3x_CalcRelativeHumidity+1,w
 11183  02F1  0021               	movlb	1	; select bank1
 11184  02F2  00E0               	movwf	(SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8+1)^(0+128)
 11185                           
 11186                           ;SHT25.c: 176: return RelativeHumidity_UBP8 ;
 11187  02F3  0860               	movf	(SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8+1)^(0+128),w
 11188  02F4  0020               	movlb	0	; select bank0
 11189  02F5  00D1               	movwf	?_SHT3x_CalcRelativeHumidity+1
 11190  02F6  0021               	movlb	1	; select bank1
 11191  02F7  085F               	movf	SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8^(0+128),w
 11192  02F8  0020               	movlb	0	; select bank0
 11193  02F9  00D0               	movwf	?_SHT3x_CalcRelativeHumidity
 11194  02FA  0008               	return
 11195  02FB                     __end_of_SHT3x_CalcRelativeHumidity:	
 11196                           
 11197                           	psect	text24
 11198  04C4                     __ptext24:	
 11199 ;; *************** function _sprintf *****************
 11200 ;; Defined at:
 11201 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;  sp              1    wreg     PTR unsigned char 
 11204 ;;		 -> SHT3x_CalcRelativeHumidity@str(8), SHT3x_CalcTemperatureC@str(8), 
 11205 ;;  f               2   18[BANK0 ] PTR const unsigned char 
 11206 ;;		 -> STR_2(3), STR_1(3), 
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;  sp              1   31[BANK0 ] PTR unsigned char 
 11209 ;;		 -> SHT3x_CalcRelativeHumidity@str(8), SHT3x_CalcTemperatureC@str(8), 
 11210 ;;  tmpval          4    0        struct .
 11211 ;;  val             2   29[BANK0 ] unsigned int 
 11212 ;;  cp              2    0        PTR const unsigned char 
 11213 ;;  len             2    0        unsigned int 
 11214 ;;  c               1   32[BANK0 ] char 
 11215 ;;  prec            1   28[BANK0 ] char 
 11216 ;;  flag            1   27[BANK0 ] unsigned char 
 11217 ;;  ap              1   26[BANK0 ] PTR void [1]
 11218 ;;		 -> ?_sprintf(2), 
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  2   18[BANK0 ] int 
 11221 ;; Registers used:
 11222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;Total ram usage:       15 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:    8
 11235 ;; This function calls:
 11236 ;;		___lwdiv
 11237 ;;		___lwmod
 11238 ;; This function is called by:
 11239 ;;		_SHT3x_CalcTemperatureC
 11240 ;;		_SHT3x_CalcRelativeHumidity
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           
 11245                           ;psect for function _sprintf
 11246  04C4                     _sprintf:	
 11247                           
 11248                           ;incstack = 0
 11249                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11250                           ;sprintf@sp stored from wreg
 11251  04C4  0020               	movlb	0	; select bank0
 11252  04C5  00BF               	movwf	sprintf@sp
 11253                           
 11254                           ;doprnt.c: 494: va_list ap;
 11255                           ;doprnt.c: 499: signed char c;
 11256                           ;doprnt.c: 506: signed char prec;
 11257                           ;doprnt.c: 508: unsigned char flag;
 11258                           ;doprnt.c: 523: union {
 11259                           ;doprnt.c: 524: unsigned long vd;
 11260                           ;doprnt.c: 525: double integ;
 11261                           ;doprnt.c: 526: } tmpval;
 11262                           ;doprnt.c: 528: unsigned int val;
 11263                           ;doprnt.c: 529: unsigned len;
 11264                           ;doprnt.c: 530: const char * cp;
 11265                           ;doprnt.c: 533: *ap = __va_start();
 11266  04C6  3034               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 11267  04C7  00B6               	movwf	??_sprintf
 11268  04C8  0836               	movf	??_sprintf,w
 11269  04C9  00BA               	movwf	sprintf@ap
 11270  04CA                     l3601:	
 11271                           ;doprnt.c: 536: while(c = *f++) {
 11272                           
 11273  04CA  0833               	movf	sprintf@f+1,w
 11274  04CB  00B7               	movwf	??_sprintf+1
 11275  04CC  0832               	movf	sprintf@f,w
 11276  04CD  00B6               	movwf	??_sprintf
 11277  04CE  0AB2               	incf	sprintf@f,f
 11278  04CF  1903               	skipnz
 11279  04D0  0AB3               	incf	sprintf@f+1,f
 11280  04D1  0836               	movf	??_sprintf,w
 11281  04D2  0084               	movwf	4
 11282  04D3  0837               	movf	??_sprintf+1,w
 11283  04D4  0085               	movwf	5
 11284  04D5  0800               	movf	0,w	;code access
 11285  04D6  00B8               	movwf	??_sprintf+2
 11286  04D7  0838               	movf	??_sprintf+2,w
 11287  04D8  00C0               	movwf	sprintf@c
 11288  04D9  0840               	movf	sprintf@c,w
 11289  04DA  1903               	btfsc	3,2
 11290  04DB  2D8D               	goto	l3603
 11291                           
 11292                           ;doprnt.c: 538: if(c != '%')
 11293  04DC  3025               	movlw	37
 11294  04DD  0640               	xorwf	sprintf@c,w
 11295  04DE  1903               	btfsc	3,2
 11296  04DF  2CEC               	goto	l3557
 11297                           
 11298                           ;doprnt.c: 540: {
 11299                           ;doprnt.c: 541: ((*sp++ = (c)));
 11300  04E0  0840               	movf	sprintf@c,w
 11301  04E1  00B6               	movwf	??_sprintf
 11302  04E2  083F               	movf	sprintf@sp,w
 11303  04E3  0086               	movwf	6
 11304  04E4  0187               	clrf	7
 11305  04E5  0836               	movf	??_sprintf,w
 11306  04E6  0081               	movwf	1
 11307  04E7  3001               	movlw	1
 11308  04E8  00B6               	movwf	??_sprintf
 11309  04E9  0836               	movf	??_sprintf,w
 11310  04EA  07BF               	addwf	sprintf@sp,f
 11311                           
 11312                           ;doprnt.c: 542: continue;
 11313  04EB  2CCA               	goto	l3601
 11314  04EC                     l3557:	
 11315                           
 11316                           ;doprnt.c: 543: }
 11317                           ;doprnt.c: 548: flag = 0;
 11318  04EC  01BB               	clrf	sprintf@flag
 11319                           
 11320                           ;doprnt.c: 822: }
 11321                           
 11322                           ;doprnt.c: 813: continue;
 11323                           
 11324                           ;doprnt.c: 802: default:
 11325                           
 11326                           ;doprnt.c: 698: case 'i':
 11327                           ;doprnt.c: 699: break;
 11328                           
 11329                           ;doprnt.c: 697: case 'd':
 11330                           
 11331                           ;doprnt.c: 638: goto alldone;
 11332                           
 11333                           ;doprnt.c: 637: case 0:
 11334                           
 11335                           ;doprnt.c: 635: switch(c = *f++) {
 11336  04ED  0833               	movf	sprintf@f+1,w
 11337  04EE  00B7               	movwf	??_sprintf+1
 11338  04EF  0832               	movf	sprintf@f,w
 11339  04F0  00B6               	movwf	??_sprintf
 11340  04F1  0AB2               	incf	sprintf@f,f
 11341  04F2  1903               	skipnz
 11342  04F3  0AB3               	incf	sprintf@f+1,f
 11343  04F4  0836               	movf	??_sprintf,w
 11344  04F5  0084               	movwf	4
 11345  04F6  0837               	movf	??_sprintf+1,w
 11346  04F7  0085               	movwf	5
 11347  04F8  0800               	movf	0,w	;code access
 11348  04F9  00C0               	movwf	sprintf@c
 11349                           
 11350                           ; Switch size 1, requested type "space"
 11351                           ; Number of cases is 3, Range of values is 0 to 105
 11352                           ; switch strategies available:
 11353                           ; Name         Instructions Cycles
 11354                           ; simple_byte           10     6 (average)
 11355                           ; direct_byte          218     6 (fixed)
 11356                           ; jumptable            260     6 (fixed)
 11357                           ;	Chosen strategy is simple_byte
 11358  04FA  3A00               	xorlw	0	; case 0
 11359  04FB  1903               	skipnz
 11360  04FC  2D8D               	goto	l3603
 11361  04FD  3A64               	xorlw	100	; case 100
 11362  04FE  1903               	skipnz
 11363  04FF  2D04               	goto	l3563
 11364  0500  3A0D               	xorlw	13	; case 105
 11365  0501  1903               	skipnz
 11366  0502  2D04               	goto	l3563
 11367  0503  2CCA               	goto	l3601
 11368  0504                     l3563:	
 11369                           
 11370                           ;doprnt.c: 1253: {
 11371                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11372  0504  083A               	movf	sprintf@ap,w
 11373  0505  0086               	movwf	6
 11374  0506  0187               	clrf	7
 11375  0507  3F40               	moviw [0]fsr1
 11376  0508  00BD               	movwf	sprintf@val
 11377  0509  3F41               	moviw [1]fsr1
 11378  050A  00BE               	movwf	sprintf@val+1
 11379  050B  3002               	movlw	2
 11380  050C  00B6               	movwf	??_sprintf
 11381  050D  0836               	movf	??_sprintf,w
 11382  050E  07BA               	addwf	sprintf@ap,f
 11383                           
 11384                           ;doprnt.c: 1261: if((int)val < 0) {
 11385  050F  1FBE               	btfss	sprintf@val+1,7
 11386  0510  2D1A               	goto	l3573
 11387                           
 11388                           ;doprnt.c: 1262: flag |= 0x03;
 11389  0511  3003               	movlw	3
 11390  0512  00B6               	movwf	??_sprintf
 11391  0513  0836               	movf	??_sprintf,w
 11392  0514  04BB               	iorwf	sprintf@flag,f
 11393                           
 11394                           ;doprnt.c: 1263: val = -val;
 11395  0515  09BD               	comf	sprintf@val,f
 11396  0516  09BE               	comf	sprintf@val+1,f
 11397  0517  0ABD               	incf	sprintf@val,f
 11398  0518  1903               	skipnz
 11399  0519  0ABE               	incf	sprintf@val+1,f
 11400  051A                     l3573:	
 11401                           
 11402                           ;doprnt.c: 1264: }
 11403                           ;doprnt.c: 1266: }
 11404                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11405  051A  01C0               	clrf	sprintf@c
 11406  051B  0AC0               	incf	sprintf@c,f
 11407  051C  3005               	movlw	5
 11408  051D  0640               	xorwf	sprintf@c,w
 11409  051E  1903               	btfsc	3,2
 11410  051F  2D3F               	goto	l3585
 11411  0520                     l3579:	
 11412                           
 11413                           ;doprnt.c: 1306: if(val < dpowers[c])
 11414  0520  0840               	movf	sprintf@c,w
 11415  0521  00B6               	movwf	??_sprintf
 11416  0522  01B7               	clrf	??_sprintf+1
 11417  0523  35B6               	lslf	??_sprintf,f
 11418  0524  0DB7               	rlf	??_sprintf+1,f
 11419  0525  302F               	movlw	low (_dpowers| (0+32768))
 11420  0526  0736               	addwf	??_sprintf,w
 11421  0527  0084               	movwf	4
 11422  0528  3090               	movlw	high (_dpowers| (0+32768))
 11423  0529  3D37               	addwfc	??_sprintf+1,w
 11424  052A  0085               	movwf	5
 11425  052B  3F00               	moviw [0]fsr0
 11426  052C  00B8               	movwf	??_sprintf+2
 11427  052D  3F01               	moviw [1]fsr0
 11428  052E  00B9               	movwf	??_sprintf+3
 11429  052F  0839               	movf	??_sprintf+3,w
 11430  0530  023E               	subwf	sprintf@val+1,w
 11431  0531  1D03               	skipz
 11432  0532  2D35               	goto	u2485
 11433  0533  0838               	movf	??_sprintf+2,w
 11434  0534  023D               	subwf	sprintf@val,w
 11435  0535                     u2485:	
 11436  0535  1C03               	btfss	3,0
 11437  0536  2D3F               	goto	l3585
 11438                           
 11439                           ;doprnt.c: 1307: break;
 11440  0537  3001               	movlw	1
 11441  0538  00B6               	movwf	??_sprintf
 11442  0539  0836               	movf	??_sprintf,w
 11443  053A  07C0               	addwf	sprintf@c,f
 11444  053B  3005               	movlw	5
 11445  053C  0640               	xorwf	sprintf@c,w
 11446  053D  1D03               	btfss	3,2
 11447  053E  2D20               	goto	l3579
 11448  053F                     l3585:	
 11449                           
 11450                           ;doprnt.c: 1422: {
 11451                           ;doprnt.c: 1438: if(flag & 0x03)
 11452  053F  083B               	movf	sprintf@flag,w
 11453  0540  3903               	andlw	3
 11454  0541  1903               	btfsc	3,2
 11455  0542  2D4E               	goto	l3591
 11456                           
 11457                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11458  0543  302D               	movlw	45
 11459  0544  00B6               	movwf	??_sprintf
 11460  0545  083F               	movf	sprintf@sp,w
 11461  0546  0086               	movwf	6
 11462  0547  0187               	clrf	7
 11463  0548  0836               	movf	??_sprintf,w
 11464  0549  0081               	movwf	1
 11465  054A  3001               	movlw	1
 11466  054B  00B6               	movwf	??_sprintf
 11467  054C  0836               	movf	??_sprintf,w
 11468  054D  07BF               	addwf	sprintf@sp,f
 11469  054E                     l3591:	
 11470                           
 11471                           ;doprnt.c: 1469: }
 11472                           ;doprnt.c: 1472: prec = c;
 11473  054E  0840               	movf	sprintf@c,w
 11474  054F  00B6               	movwf	??_sprintf
 11475  0550  0836               	movf	??_sprintf,w
 11476  0551  00BC               	movwf	sprintf@prec
 11477  0552                     l3599:	
 11478                           ;doprnt.c: 1474: while(prec--) {
 11479                           
 11480  0552  30FF               	movlw	255
 11481  0553  00B6               	movwf	??_sprintf
 11482  0554  0836               	movf	??_sprintf,w
 11483  0555  07BC               	addwf	sprintf@prec,f
 11484  0556  0A3C               	incf	sprintf@prec,w
 11485  0557  1903               	btfsc	3,2
 11486  0558  2CCA               	goto	l3601
 11487                           
 11488                           ;doprnt.c: 1478: {
 11489                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11490  0559  300A               	movlw	10
 11491  055A  00AC               	movwf	___lwmod@divisor
 11492  055B  3000               	movlw	0
 11493  055C  00AD               	movwf	___lwmod@divisor+1
 11494  055D  083C               	movf	sprintf@prec,w
 11495  055E  00B6               	movwf	??_sprintf
 11496  055F  01B7               	clrf	??_sprintf+1
 11497  0560  35B6               	lslf	??_sprintf,f
 11498  0561  0DB7               	rlf	??_sprintf+1,f
 11499  0562  302F               	movlw	low (_dpowers| (0+32768))
 11500  0563  0736               	addwf	??_sprintf,w
 11501  0564  0084               	movwf	4
 11502  0565  3090               	movlw	high (_dpowers| (0+32768))
 11503  0566  3D37               	addwfc	??_sprintf+1,w
 11504  0567  0085               	movwf	5
 11505  0568  3F00               	moviw [0]fsr0
 11506  0569  00A4               	movwf	___lwdiv@divisor
 11507  056A  3F01               	moviw [1]fsr0
 11508  056B  00A5               	movwf	___lwdiv@divisor+1
 11509  056C  083E               	movf	sprintf@val+1,w
 11510  056D  00A7               	movwf	___lwdiv@dividend+1
 11511  056E  083D               	movf	sprintf@val,w
 11512  056F  00A6               	movwf	___lwdiv@dividend
 11513  0570  318C  248A  3184   	fcall	___lwdiv
 11514  0573  0020               	movlb	0	; select bank0
 11515  0574  0825               	movf	?___lwdiv+1,w
 11516  0575  00AF               	movwf	___lwmod@dividend+1
 11517  0576  0824               	movf	?___lwdiv,w
 11518  0577  00AE               	movwf	___lwmod@dividend
 11519  0578  318C  242D  3184   	fcall	___lwmod
 11520  057B  0020               	movlb	0	; select bank0
 11521  057C  082C               	movf	?___lwmod,w
 11522  057D  3E30               	addlw	48
 11523  057E  00B8               	movwf	??_sprintf+2
 11524  057F  0838               	movf	??_sprintf+2,w
 11525  0580  00C0               	movwf	sprintf@c
 11526                           
 11527                           ;doprnt.c: 1523: }
 11528                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11529  0581  0840               	movf	sprintf@c,w
 11530  0582  00B6               	movwf	??_sprintf
 11531  0583  083F               	movf	sprintf@sp,w
 11532  0584  0086               	movwf	6
 11533  0585  0187               	clrf	7
 11534  0586  0836               	movf	??_sprintf,w
 11535  0587  0081               	movwf	1
 11536  0588  3001               	movlw	1
 11537  0589  00B6               	movwf	??_sprintf
 11538  058A  0836               	movf	??_sprintf,w
 11539  058B  07BF               	addwf	sprintf@sp,f
 11540  058C  2D52               	goto	l3599
 11541  058D                     l3603:	
 11542                           ;doprnt.c: 1525: }
 11543                           ;doprnt.c: 1533: }
 11544                           ;doprnt.c: 1535: alldone:
 11545                           
 11546                           
 11547                           ;doprnt.c: 1538: *sp = 0;
 11548  058D  083F               	movf	sprintf@sp,w
 11549  058E  0086               	movwf	6
 11550  058F  0187               	clrf	7
 11551  0590  0181               	clrf	1
 11552  0591  0008               	return
 11553  0592                     __end_of_sprintf:	
 11554                           ;doprnt.c: 1540: return 0;
 11555                           ;	Return value of _sprintf is never used
 11556                           
 11557                           
 11558                           	psect	text25
 11559  0C2D                     __ptext25:	
 11560 ;; *************** function ___lwmod *****************
 11561 ;; Defined at:
 11562 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  divisor         2   12[BANK0 ] unsigned int 
 11565 ;;  dividend        2   14[BANK0 ] unsigned int 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  counter         1   17[BANK0 ] unsigned char 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;                  2   12[BANK0 ] unsigned int 
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;Total ram usage:        6 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    7
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_sprintf
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           
 11592                           ;psect for function ___lwmod
 11593  0C2D                     ___lwmod:	
 11594                           
 11595                           ;incstack = 0
 11596                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11597  0C2D  0020               	movlb	0	; select bank0
 11598  0C2E  082C               	movf	___lwmod@divisor,w
 11599  0C2F  042D               	iorwf	___lwmod@divisor+1,w
 11600  0C30  1903               	btfsc	3,2
 11601  0C31  2C55               	goto	l3345
 11602  0C32  01B1               	clrf	___lwmod@counter
 11603  0C33  0AB1               	incf	___lwmod@counter,f
 11604  0C34                     l3335:	
 11605  0C34  1BAD               	btfsc	___lwmod@divisor+1,7
 11606  0C35  2C40               	goto	l3337
 11607  0C36  3001               	movlw	1
 11608  0C37                     u2315:	
 11609  0C37  35AC               	lslf	___lwmod@divisor,f
 11610  0C38  0DAD               	rlf	___lwmod@divisor+1,f
 11611  0C39  0B89               	decfsz	9,f
 11612  0C3A  2C37               	goto	u2315
 11613  0C3B  3001               	movlw	1
 11614  0C3C  00B0               	movwf	??___lwmod
 11615  0C3D  0830               	movf	??___lwmod,w
 11616  0C3E  07B1               	addwf	___lwmod@counter,f
 11617  0C3F  2C34               	goto	l3335
 11618  0C40                     l3337:	
 11619  0C40  082D               	movf	___lwmod@divisor+1,w
 11620  0C41  022F               	subwf	___lwmod@dividend+1,w
 11621  0C42  1D03               	skipz
 11622  0C43  2C46               	goto	u2335
 11623  0C44  082C               	movf	___lwmod@divisor,w
 11624  0C45  022E               	subwf	___lwmod@dividend,w
 11625  0C46                     u2335:	
 11626  0C46  1C03               	skipc
 11627  0C47  2C4C               	goto	l3341
 11628  0C48  082C               	movf	___lwmod@divisor,w
 11629  0C49  02AE               	subwf	___lwmod@dividend,f
 11630  0C4A  082D               	movf	___lwmod@divisor+1,w
 11631  0C4B  3BAF               	subwfb	___lwmod@dividend+1,f
 11632  0C4C                     l3341:	
 11633  0C4C  3001               	movlw	1
 11634  0C4D                     u2345:	
 11635  0C4D  36AD               	lsrf	___lwmod@divisor+1,f
 11636  0C4E  0CAC               	rrf	___lwmod@divisor,f
 11637  0C4F  0B89               	decfsz	9,f
 11638  0C50  2C4D               	goto	u2345
 11639  0C51  3001               	movlw	1
 11640  0C52  02B1               	subwf	___lwmod@counter,f
 11641  0C53  1D03               	btfss	3,2
 11642  0C54  2C40               	goto	l3337
 11643  0C55                     l3345:	
 11644  0C55  082F               	movf	___lwmod@dividend+1,w
 11645  0C56  00AD               	movwf	?___lwmod+1
 11646  0C57  082E               	movf	___lwmod@dividend,w
 11647  0C58  00AC               	movwf	?___lwmod
 11648  0C59  0008               	return
 11649  0C5A                     __end_of___lwmod:	
 11650                           
 11651                           	psect	text26
 11652  0C8A                     __ptext26:	
 11653 ;; *************** function ___lwdiv *****************
 11654 ;; Defined at:
 11655 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;  divisor         2    4[BANK0 ] unsigned int 
 11658 ;;  dividend        2    6[BANK0 ] unsigned int 
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  quotient        2    9[BANK0 ] unsigned int 
 11661 ;;  counter         1   11[BANK0 ] unsigned char 
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  2    4[BANK0 ] unsigned int 
 11664 ;; Registers used:
 11665 ;;		wreg, status,2, status,0
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;Total ram usage:        8 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:    7
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		_sprintf
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function ___lwdiv
 11687  0C8A                     ___lwdiv:	
 11688                           
 11689                           ;incstack = 0
 11690                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11691  0C8A  0020               	movlb	0	; select bank0
 11692  0C8B  01A9               	clrf	___lwdiv@quotient
 11693  0C8C  01AA               	clrf	___lwdiv@quotient+1
 11694  0C8D  0824               	movf	___lwdiv@divisor,w
 11695  0C8E  0425               	iorwf	___lwdiv@divisor+1,w
 11696  0C8F  1903               	btfsc	3,2
 11697  0C90  2CBA               	goto	l3323
 11698  0C91  01AB               	clrf	___lwdiv@counter
 11699  0C92  0AAB               	incf	___lwdiv@counter,f
 11700  0C93                     l3311:	
 11701  0C93  1BA5               	btfsc	___lwdiv@divisor+1,7
 11702  0C94  2C9F               	goto	l3313
 11703  0C95  3001               	movlw	1
 11704  0C96                     u2245:	
 11705  0C96  35A4               	lslf	___lwdiv@divisor,f
 11706  0C97  0DA5               	rlf	___lwdiv@divisor+1,f
 11707  0C98  0B89               	decfsz	9,f
 11708  0C99  2C96               	goto	u2245
 11709  0C9A  3001               	movlw	1
 11710  0C9B  00A8               	movwf	??___lwdiv
 11711  0C9C  0828               	movf	??___lwdiv,w
 11712  0C9D  07AB               	addwf	___lwdiv@counter,f
 11713  0C9E  2C93               	goto	l3311
 11714  0C9F                     l3313:	
 11715  0C9F  3001               	movlw	1
 11716  0CA0                     u2265:	
 11717  0CA0  35A9               	lslf	___lwdiv@quotient,f
 11718  0CA1  0DAA               	rlf	___lwdiv@quotient+1,f
 11719  0CA2  0B89               	decfsz	9,f
 11720  0CA3  2CA0               	goto	u2265
 11721  0CA4  0825               	movf	___lwdiv@divisor+1,w
 11722  0CA5  0227               	subwf	___lwdiv@dividend+1,w
 11723  0CA6  1D03               	skipz
 11724  0CA7  2CAA               	goto	u2275
 11725  0CA8  0824               	movf	___lwdiv@divisor,w
 11726  0CA9  0226               	subwf	___lwdiv@dividend,w
 11727  0CAA                     u2275:	
 11728  0CAA  1C03               	skipc
 11729  0CAB  2CB1               	goto	l3319
 11730  0CAC  0824               	movf	___lwdiv@divisor,w
 11731  0CAD  02A6               	subwf	___lwdiv@dividend,f
 11732  0CAE  0825               	movf	___lwdiv@divisor+1,w
 11733  0CAF  3BA7               	subwfb	___lwdiv@dividend+1,f
 11734  0CB0  1429               	bsf	___lwdiv@quotient,0
 11735  0CB1                     l3319:	
 11736  0CB1  3001               	movlw	1
 11737  0CB2                     u2285:	
 11738  0CB2  36A5               	lsrf	___lwdiv@divisor+1,f
 11739  0CB3  0CA4               	rrf	___lwdiv@divisor,f
 11740  0CB4  0B89               	decfsz	9,f
 11741  0CB5  2CB2               	goto	u2285
 11742  0CB6  3001               	movlw	1
 11743  0CB7  02AB               	subwf	___lwdiv@counter,f
 11744  0CB8  1D03               	btfss	3,2
 11745  0CB9  2C9F               	goto	l3313
 11746  0CBA                     l3323:	
 11747  0CBA  082A               	movf	___lwdiv@quotient+1,w
 11748  0CBB  00A5               	movwf	?___lwdiv+1
 11749  0CBC  0829               	movf	___lwdiv@quotient,w
 11750  0CBD  00A4               	movwf	?___lwdiv
 11751  0CBE  0008               	return
 11752  0CBF                     __end_of___lwdiv:	
 11753                           
 11754                           	psect	text27
 11755  09C1                     __ptext27:	
 11756 ;; *************** function ___lwtoft *****************
 11757 ;; Defined at:
 11758 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  c               2   12[BANK0 ] unsigned int 
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;                  3   12[BANK0 ] float 
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        4 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    8
 11779 ;; This function calls:
 11780 ;;		___ftpack
 11781 ;; This function is called by:
 11782 ;;		_SHT3x_CalcTemperatureC
 11783 ;;		_SHT3x_CalcRelativeHumidity
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function ___lwtoft
 11789  09C1                     ___lwtoft:	
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11793  09C1  0020               	movlb	0	; select bank0
 11794  09C2  082C               	movf	___lwtoft@c,w
 11795  09C3  00A4               	movwf	___ftpack@arg
 11796  09C4  082D               	movf	___lwtoft@c+1,w
 11797  09C5  00A5               	movwf	___ftpack@arg+1
 11798  09C6  01A6               	clrf	___ftpack@arg+2
 11799  09C7  308E               	movlw	142
 11800  09C8  00AF               	movwf	??___lwtoft
 11801  09C9  082F               	movf	??___lwtoft,w
 11802  09CA  00A7               	movwf	___ftpack@exp
 11803  09CB  01A8               	clrf	___ftpack@sign
 11804  09CC  318F  272A         	fcall	___ftpack
 11805  09CE  0020               	movlb	0	; select bank0
 11806  09CF  0824               	movf	?___ftpack,w
 11807  09D0  00AC               	movwf	?___lwtoft
 11808  09D1  0825               	movf	?___ftpack+1,w
 11809  09D2  00AD               	movwf	?___lwtoft+1
 11810  09D3  0826               	movf	?___ftpack+2,w
 11811  09D4  00AE               	movwf	?___lwtoft+2
 11812  09D5  0008               	return
 11813  09D6                     __end_of___lwtoft:	
 11814                           
 11815                           	psect	text28
 11816  0C5A                     __ptext28:	
 11817 ;; *************** function ___lmul *****************
 11818 ;; Defined at:
 11819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  multiplier      4    4[BANK0 ] unsigned long 
 11822 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  product         4   12[BANK0 ] unsigned long 
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  4    4[BANK0 ] unsigned long 
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11834 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;Total ram usage:       12 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    7
 11841 ;; This function calls:
 11842 ;;		Nothing
 11843 ;; This function is called by:
 11844 ;;		_SHT3x_CalcTemperatureC
 11845 ;;		_SHT3x_CalcRelativeHumidity
 11846 ;;		_SHT2x_CalcTemperatureC
 11847 ;;		_SHT2x_CalcRelativeHumidity
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           
 11852                           ;psect for function ___lmul
 11853  0C5A                     ___lmul:	
 11854                           
 11855                           ;incstack = 0
 11856                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11857  0C5A  3000               	movlw	0
 11858  0C5B  0020               	movlb	0	; select bank0
 11859  0C5C  00AF               	movwf	___lmul@product+3
 11860  0C5D  3000               	movlw	0
 11861  0C5E  00AE               	movwf	___lmul@product+2
 11862  0C5F  3000               	movlw	0
 11863  0C60  00AD               	movwf	___lmul@product+1
 11864  0C61  3000               	movlw	0
 11865  0C62  00AC               	movwf	___lmul@product
 11866  0C63                     l3609:	
 11867  0C63  1C24               	btfss	___lmul@multiplier,0
 11868  0C64  2C6D               	goto	l3613
 11869  0C65  0828               	movf	___lmul@multiplicand,w
 11870  0C66  07AC               	addwf	___lmul@product,f
 11871  0C67  0829               	movf	___lmul@multiplicand+1,w
 11872  0C68  3DAD               	addwfc	___lmul@product+1,f
 11873  0C69  082A               	movf	___lmul@multiplicand+2,w
 11874  0C6A  3DAE               	addwfc	___lmul@product+2,f
 11875  0C6B  082B               	movf	___lmul@multiplicand+3,w
 11876  0C6C  3DAF               	addwfc	___lmul@product+3,f
 11877  0C6D                     l3613:	
 11878  0C6D  3001               	movlw	1
 11879  0C6E                     u2545:	
 11880  0C6E  35A8               	lslf	___lmul@multiplicand,f
 11881  0C6F  0DA9               	rlf	___lmul@multiplicand+1,f
 11882  0C70  0DAA               	rlf	___lmul@multiplicand+2,f
 11883  0C71  0DAB               	rlf	___lmul@multiplicand+3,f
 11884  0C72  0B89               	decfsz	9,f
 11885  0C73  2C6E               	goto	u2545
 11886  0C74  3001               	movlw	1
 11887  0C75                     u2555:	
 11888  0C75  36A7               	lsrf	___lmul@multiplier+3,f
 11889  0C76  0CA6               	rrf	___lmul@multiplier+2,f
 11890  0C77  0CA5               	rrf	___lmul@multiplier+1,f
 11891  0C78  0CA4               	rrf	___lmul@multiplier,f
 11892  0C79  0B89               	decfsz	9,f
 11893  0C7A  2C75               	goto	u2555
 11894  0C7B  0827               	movf	___lmul@multiplier+3,w
 11895  0C7C  0426               	iorwf	___lmul@multiplier+2,w
 11896  0C7D  0425               	iorwf	___lmul@multiplier+1,w
 11897  0C7E  0424               	iorwf	___lmul@multiplier,w
 11898  0C7F  1D03               	skipz
 11899  0C80  2C63               	goto	l3609
 11900  0C81  082F               	movf	___lmul@product+3,w
 11901  0C82  00A7               	movwf	?___lmul+3
 11902  0C83  082E               	movf	___lmul@product+2,w
 11903  0C84  00A6               	movwf	?___lmul+2
 11904  0C85  082D               	movf	___lmul@product+1,w
 11905  0C86  00A5               	movwf	?___lmul+1
 11906  0C87  082C               	movf	___lmul@product,w
 11907  0C88  00A4               	movwf	?___lmul
 11908  0C89  0008               	return
 11909  0C8A                     __end_of___lmul:	
 11910                           
 11911                           	psect	text29
 11912  06EF                     __ptext29:	
 11913 ;; *************** function ___fttol *****************
 11914 ;; Defined at:
 11915 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  f1              3    4[BANK0 ] float 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  lval            4   13[BANK0 ] unsigned long 
 11920 ;;  exp1            1   17[BANK0 ] unsigned char 
 11921 ;;  sign1           1   12[BANK0 ] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  4    4[BANK0 ] long 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, status,0
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11931 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;Total ram usage:       14 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    7
 11938 ;; This function calls:
 11939 ;;		Nothing
 11940 ;; This function is called by:
 11941 ;;		_SHT3x_CalcTemperatureC
 11942 ;;		_SHT3x_CalcRelativeHumidity
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           
 11947                           ;psect for function ___fttol
 11948  06EF                     ___fttol:	
 11949                           
 11950                           ;incstack = 0
 11951                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11952  06EF  0020               	movlb	0	; select bank0
 11953  06F0  0824               	movf	___fttol@f1,w
 11954  06F1  00A8               	movwf	??___fttol
 11955  06F2  0825               	movf	___fttol@f1+1,w
 11956  06F3  00A9               	movwf	??___fttol+1
 11957  06F4  0826               	movf	___fttol@f1+2,w
 11958  06F5  00AA               	movwf	??___fttol+2
 11959  06F6  1003               	clrc
 11960  06F7  0D29               	rlf	??___fttol+1,w
 11961  06F8  0D2A               	rlf	??___fttol+2,w
 11962  06F9  00AB               	movwf	??___fttol+3
 11963  06FA  082B               	movf	??___fttol+3,w
 11964  06FB  00B1               	movwf	___fttol@exp1
 11965  06FC  0831               	movf	___fttol@exp1,w
 11966  06FD  1D03               	btfss	3,2
 11967  06FE  2F08               	goto	l3821
 11968  06FF  3000               	movlw	0
 11969  0700  00A7               	movwf	?___fttol+3
 11970  0701  3000               	movlw	0
 11971  0702  00A6               	movwf	?___fttol+2
 11972  0703  3000               	movlw	0
 11973  0704  00A5               	movwf	?___fttol+1
 11974  0705  3000               	movlw	0
 11975  0706  00A4               	movwf	?___fttol
 11976  0707  0008               	return
 11977  0708                     l3821:	
 11978  0708  0824               	movf	___fttol@f1,w
 11979  0709  00A8               	movwf	??___fttol
 11980  070A  0825               	movf	___fttol@f1+1,w
 11981  070B  00A9               	movwf	??___fttol+1
 11982  070C  0826               	movf	___fttol@f1+2,w
 11983  070D  00AA               	movwf	??___fttol+2
 11984  070E  3017               	movlw	23
 11985  070F                     u3055:	
 11986  070F  36AA               	lsrf	??___fttol+2,f
 11987  0710  0CA9               	rrf	??___fttol+1,f
 11988  0711  0CA8               	rrf	??___fttol,f
 11989  0712  0B89               	decfsz	9,f
 11990  0713  2F0F               	goto	u3055
 11991  0714  0828               	movf	??___fttol,w
 11992  0715  00AB               	movwf	??___fttol+3
 11993  0716  082B               	movf	??___fttol+3,w
 11994  0717  00AC               	movwf	___fttol@sign1
 11995  0718  17A5               	bsf	___fttol@f1+1,7
 11996  0719  30FF               	movlw	255
 11997  071A  05A4               	andwf	___fttol@f1,f
 11998  071B  30FF               	movlw	255
 11999  071C  05A5               	andwf	___fttol@f1+1,f
 12000  071D  3000               	movlw	0
 12001  071E  05A6               	andwf	___fttol@f1+2,f
 12002  071F  0824               	movf	___fttol@f1,w
 12003  0720  00AD               	movwf	___fttol@lval
 12004  0721  0825               	movf	___fttol@f1+1,w
 12005  0722  00AE               	movwf	___fttol@lval+1
 12006  0723  0826               	movf	___fttol@f1+2,w
 12007  0724  00AF               	movwf	___fttol@lval+2
 12008  0725  01B0               	clrf	___fttol@lval+3
 12009  0726  308E               	movlw	142
 12010  0727  02B1               	subwf	___fttol@exp1,f
 12011  0728  1FB1               	btfss	___fttol@exp1,7
 12012  0729  2F46               	goto	l3841
 12013  072A  0831               	movf	___fttol@exp1,w
 12014  072B  3A80               	xorlw	128
 12015  072C  3E8F               	addlw	143
 12016  072D  1803               	skipnc
 12017  072E  2F38               	goto	l3839
 12018  072F  3000               	movlw	0
 12019  0730  00A7               	movwf	?___fttol+3
 12020  0731  3000               	movlw	0
 12021  0732  00A6               	movwf	?___fttol+2
 12022  0733  3000               	movlw	0
 12023  0734  00A5               	movwf	?___fttol+1
 12024  0735  3000               	movlw	0
 12025  0736  00A4               	movwf	?___fttol
 12026  0737  0008               	return
 12027  0738                     l3839:	
 12028  0738  3001               	movlw	1
 12029  0739                     u3085:	
 12030  0739  36B0               	lsrf	___fttol@lval+3,f
 12031  073A  0CAF               	rrf	___fttol@lval+2,f
 12032  073B  0CAE               	rrf	___fttol@lval+1,f
 12033  073C  0CAD               	rrf	___fttol@lval,f
 12034  073D  0B89               	decfsz	9,f
 12035  073E  2F39               	goto	u3085
 12036  073F  3001               	movlw	1
 12037  0740  00A8               	movwf	??___fttol
 12038  0741  0828               	movf	??___fttol,w
 12039  0742  07B1               	addwf	___fttol@exp1,f
 12040  0743  1903               	btfsc	3,2
 12041  0744  2F5F               	goto	l3849
 12042  0745  2F38               	goto	l3839
 12043  0746                     l3841:	
 12044  0746  3018               	movlw	24
 12045  0747  0231               	subwf	___fttol@exp1,w
 12046  0748  1C03               	skipc
 12047  0749  2F5C               	goto	l1445
 12048  074A  3000               	movlw	0
 12049  074B  00A7               	movwf	?___fttol+3
 12050  074C  3000               	movlw	0
 12051  074D  00A6               	movwf	?___fttol+2
 12052  074E  3000               	movlw	0
 12053  074F  00A5               	movwf	?___fttol+1
 12054  0750  3000               	movlw	0
 12055  0751  00A4               	movwf	?___fttol
 12056  0752  0008               	return
 12057  0753                     l3847:	
 12058  0753  3001               	movlw	1
 12059  0754                     u3115:	
 12060  0754  35AD               	lslf	___fttol@lval,f
 12061  0755  0DAE               	rlf	___fttol@lval+1,f
 12062  0756  0DAF               	rlf	___fttol@lval+2,f
 12063  0757  0DB0               	rlf	___fttol@lval+3,f
 12064  0758  0B89               	decfsz	9,f
 12065  0759  2F54               	goto	u3115
 12066  075A  3001               	movlw	1
 12067  075B  02B1               	subwf	___fttol@exp1,f
 12068  075C                     l1445:	
 12069  075C  0831               	movf	___fttol@exp1,w
 12070  075D  1D03               	btfss	3,2
 12071  075E  2F53               	goto	l3847
 12072  075F                     l3849:	
 12073  075F  082C               	movf	___fttol@sign1,w
 12074  0760  1903               	btfsc	3,2
 12075  0761  2F6D               	goto	l3853
 12076  0762  09AD               	comf	___fttol@lval,f
 12077  0763  09AE               	comf	___fttol@lval+1,f
 12078  0764  09AF               	comf	___fttol@lval+2,f
 12079  0765  09B0               	comf	___fttol@lval+3,f
 12080  0766  0AAD               	incf	___fttol@lval,f
 12081  0767  1903               	skipnz
 12082  0768  0AAE               	incf	___fttol@lval+1,f
 12083  0769  1903               	skipnz
 12084  076A  0AAF               	incf	___fttol@lval+2,f
 12085  076B  1903               	skipnz
 12086  076C  0AB0               	incf	___fttol@lval+3,f
 12087  076D                     l3853:	
 12088  076D  0830               	movf	___fttol@lval+3,w
 12089  076E  00A7               	movwf	?___fttol+3
 12090  076F  082F               	movf	___fttol@lval+2,w
 12091  0770  00A6               	movwf	?___fttol+2
 12092  0771  082E               	movf	___fttol@lval+1,w
 12093  0772  00A5               	movwf	?___fttol+1
 12094  0773  082D               	movf	___fttol@lval,w
 12095  0774  00A4               	movwf	?___fttol
 12096  0775  0008               	return
 12097  0776                     __end_of___fttol:	
 12098                           
 12099                           	psect	text30
 12100  0592                     __ptext30:	
 12101 ;; *************** function ___ftmul *****************
 12102 ;; Defined at:
 12103 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12104 ;; Parameters:    Size  Location     Type
 12105 ;;  f1              3   16[BANK0 ] float 
 12106 ;;  f2              3   19[BANK0 ] float 
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
 12109 ;;  sign            1   31[BANK0 ] unsigned char 
 12110 ;;  cntr            1   30[BANK0 ] unsigned char 
 12111 ;;  exp             1   26[BANK0 ] unsigned char 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;                  3   16[BANK0 ] float 
 12114 ;; Registers used:
 12115 ;;		wreg, status,2, status,0, pclath, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12121 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;Total ram usage:       16 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    8
 12128 ;; This function calls:
 12129 ;;		___ftpack
 12130 ;; This function is called by:
 12131 ;;		_SHT3x_CalcTemperatureC
 12132 ;;		_SHT3x_CalcRelativeHumidity
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           
 12137                           ;psect for function ___ftmul
 12138  0592                     ___ftmul:	
 12139                           
 12140                           ;incstack = 0
 12141                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12142  0592  0020               	movlb	0	; select bank0
 12143  0593  0830               	movf	___ftmul@f1,w
 12144  0594  00B6               	movwf	??___ftmul
 12145  0595  0831               	movf	___ftmul@f1+1,w
 12146  0596  00B7               	movwf	??___ftmul+1
 12147  0597  0832               	movf	___ftmul@f1+2,w
 12148  0598  00B8               	movwf	??___ftmul+2
 12149  0599  1003               	clrc
 12150  059A  0D37               	rlf	??___ftmul+1,w
 12151  059B  0D38               	rlf	??___ftmul+2,w
 12152  059C  00B9               	movwf	??___ftmul+3
 12153  059D  0839               	movf	??___ftmul+3,w
 12154  059E  00BA               	movwf	___ftmul@exp
 12155  059F  083A               	movf	___ftmul@exp,w
 12156  05A0  1D03               	btfss	3,2
 12157  05A1  2DA9               	goto	l3771
 12158  05A2  3000               	movlw	0
 12159  05A3  00B0               	movwf	?___ftmul
 12160  05A4  3000               	movlw	0
 12161  05A5  00B1               	movwf	?___ftmul+1
 12162  05A6  3000               	movlw	0
 12163  05A7  00B2               	movwf	?___ftmul+2
 12164  05A8  0008               	return
 12165  05A9                     l3771:	
 12166  05A9  0833               	movf	___ftmul@f2,w
 12167  05AA  00B6               	movwf	??___ftmul
 12168  05AB  0834               	movf	___ftmul@f2+1,w
 12169  05AC  00B7               	movwf	??___ftmul+1
 12170  05AD  0835               	movf	___ftmul@f2+2,w
 12171  05AE  00B8               	movwf	??___ftmul+2
 12172  05AF  1003               	clrc
 12173  05B0  0D37               	rlf	??___ftmul+1,w
 12174  05B1  0D38               	rlf	??___ftmul+2,w
 12175  05B2  00B9               	movwf	??___ftmul+3
 12176  05B3  0839               	movf	??___ftmul+3,w
 12177  05B4  00BF               	movwf	___ftmul@sign
 12178  05B5  083F               	movf	___ftmul@sign,w
 12179  05B6  1D03               	btfss	3,2
 12180  05B7  2DBF               	goto	l3777
 12181  05B8  3000               	movlw	0
 12182  05B9  00B0               	movwf	?___ftmul
 12183  05BA  3000               	movlw	0
 12184  05BB  00B1               	movwf	?___ftmul+1
 12185  05BC  3000               	movlw	0
 12186  05BD  00B2               	movwf	?___ftmul+2
 12187  05BE  0008               	return
 12188  05BF                     l3777:	
 12189  05BF  083F               	movf	___ftmul@sign,w
 12190  05C0  3E7B               	addlw	123
 12191  05C1  00B6               	movwf	??___ftmul
 12192  05C2  0836               	movf	??___ftmul,w
 12193  05C3  07BA               	addwf	___ftmul@exp,f
 12194  05C4  0830               	movf	___ftmul@f1,w
 12195  05C5  00B6               	movwf	??___ftmul
 12196  05C6  0831               	movf	___ftmul@f1+1,w
 12197  05C7  00B7               	movwf	??___ftmul+1
 12198  05C8  0832               	movf	___ftmul@f1+2,w
 12199  05C9  00B8               	movwf	??___ftmul+2
 12200  05CA  3010               	movlw	16
 12201  05CB                     u2945:	
 12202  05CB  36B8               	lsrf	??___ftmul+2,f
 12203  05CC  0CB7               	rrf	??___ftmul+1,f
 12204  05CD  0CB6               	rrf	??___ftmul,f
 12205  05CE  0B89               	decfsz	9,f
 12206  05CF  2DCB               	goto	u2945
 12207  05D0  0836               	movf	??___ftmul,w
 12208  05D1  00B9               	movwf	??___ftmul+3
 12209  05D2  0839               	movf	??___ftmul+3,w
 12210  05D3  00BF               	movwf	___ftmul@sign
 12211  05D4  0833               	movf	___ftmul@f2,w
 12212  05D5  00B6               	movwf	??___ftmul
 12213  05D6  0834               	movf	___ftmul@f2+1,w
 12214  05D7  00B7               	movwf	??___ftmul+1
 12215  05D8  0835               	movf	___ftmul@f2+2,w
 12216  05D9  00B8               	movwf	??___ftmul+2
 12217  05DA  3010               	movlw	16
 12218  05DB                     u2955:	
 12219  05DB  36B8               	lsrf	??___ftmul+2,f
 12220  05DC  0CB7               	rrf	??___ftmul+1,f
 12221  05DD  0CB6               	rrf	??___ftmul,f
 12222  05DE  0B89               	decfsz	9,f
 12223  05DF  2DDB               	goto	u2955
 12224  05E0  0836               	movf	??___ftmul,w
 12225  05E1  00B9               	movwf	??___ftmul+3
 12226  05E2  0839               	movf	??___ftmul+3,w
 12227  05E3  06BF               	xorwf	___ftmul@sign,f
 12228  05E4  3080               	movlw	128
 12229  05E5  00B6               	movwf	??___ftmul
 12230  05E6  0836               	movf	??___ftmul,w
 12231  05E7  05BF               	andwf	___ftmul@sign,f
 12232  05E8  17B1               	bsf	___ftmul@f1+1,7
 12233  05E9  17B4               	bsf	___ftmul@f2+1,7
 12234  05EA  30FF               	movlw	255
 12235  05EB  05B3               	andwf	___ftmul@f2,f
 12236  05EC  30FF               	movlw	255
 12237  05ED  05B4               	andwf	___ftmul@f2+1,f
 12238  05EE  3000               	movlw	0
 12239  05EF  05B5               	andwf	___ftmul@f2+2,f
 12240  05F0  3000               	movlw	0
 12241  05F1  00BB               	movwf	___ftmul@f3_as_product
 12242  05F2  3000               	movlw	0
 12243  05F3  00BC               	movwf	___ftmul@f3_as_product+1
 12244  05F4  3000               	movlw	0
 12245  05F5  00BD               	movwf	___ftmul@f3_as_product+2
 12246  05F6  3007               	movlw	7
 12247  05F7  00B6               	movwf	??___ftmul
 12248  05F8  0836               	movf	??___ftmul,w
 12249  05F9  00BE               	movwf	___ftmul@cntr
 12250  05FA                     l3789:	
 12251  05FA  1C30               	btfss	___ftmul@f1,0
 12252  05FB  2E02               	goto	l3793
 12253  05FC  0833               	movf	___ftmul@f2,w
 12254  05FD  07BB               	addwf	___ftmul@f3_as_product,f
 12255  05FE  0834               	movf	___ftmul@f2+1,w
 12256  05FF  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 12257  0600  0835               	movf	___ftmul@f2+2,w
 12258  0601  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 12259  0602                     l3793:	
 12260  0602  3001               	movlw	1
 12261  0603                     u2975:	
 12262  0603  36B2               	lsrf	___ftmul@f1+2,f
 12263  0604  0CB1               	rrf	___ftmul@f1+1,f
 12264  0605  0CB0               	rrf	___ftmul@f1,f
 12265  0606  0B89               	decfsz	9,f
 12266  0607  2E03               	goto	u2975
 12267  0608  3001               	movlw	1
 12268  0609                     u2985:	
 12269  0609  35B3               	lslf	___ftmul@f2,f
 12270  060A  0DB4               	rlf	___ftmul@f2+1,f
 12271  060B  0DB5               	rlf	___ftmul@f2+2,f
 12272  060C  0B89               	decfsz	9,f
 12273  060D  2E09               	goto	u2985
 12274  060E  3001               	movlw	1
 12275  060F  02BE               	subwf	___ftmul@cntr,f
 12276  0610  1D03               	btfss	3,2
 12277  0611  2DFA               	goto	l3789
 12278  0612  3009               	movlw	9
 12279  0613  00B6               	movwf	??___ftmul
 12280  0614  0836               	movf	??___ftmul,w
 12281  0615  00BE               	movwf	___ftmul@cntr
 12282  0616                     l3801:	
 12283  0616  1C30               	btfss	___ftmul@f1,0
 12284  0617  2E1E               	goto	l3805
 12285  0618  0833               	movf	___ftmul@f2,w
 12286  0619  07BB               	addwf	___ftmul@f3_as_product,f
 12287  061A  0834               	movf	___ftmul@f2+1,w
 12288  061B  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 12289  061C  0835               	movf	___ftmul@f2+2,w
 12290  061D  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 12291  061E                     l3805:	
 12292  061E  3001               	movlw	1
 12293  061F                     u3015:	
 12294  061F  36B2               	lsrf	___ftmul@f1+2,f
 12295  0620  0CB1               	rrf	___ftmul@f1+1,f
 12296  0621  0CB0               	rrf	___ftmul@f1,f
 12297  0622  0B89               	decfsz	9,f
 12298  0623  2E1F               	goto	u3015
 12299  0624  3001               	movlw	1
 12300  0625                     u3025:	
 12301  0625  36BD               	lsrf	___ftmul@f3_as_product+2,f
 12302  0626  0CBC               	rrf	___ftmul@f3_as_product+1,f
 12303  0627  0CBB               	rrf	___ftmul@f3_as_product,f
 12304  0628  0B89               	decfsz	9,f
 12305  0629  2E25               	goto	u3025
 12306  062A  3001               	movlw	1
 12307  062B  02BE               	subwf	___ftmul@cntr,f
 12308  062C  1D03               	btfss	3,2
 12309  062D  2E16               	goto	l3801
 12310  062E  083B               	movf	___ftmul@f3_as_product,w
 12311  062F  00A4               	movwf	___ftpack@arg
 12312  0630  083C               	movf	___ftmul@f3_as_product+1,w
 12313  0631  00A5               	movwf	___ftpack@arg+1
 12314  0632  083D               	movf	___ftmul@f3_as_product+2,w
 12315  0633  00A6               	movwf	___ftpack@arg+2
 12316  0634  083A               	movf	___ftmul@exp,w
 12317  0635  00B6               	movwf	??___ftmul
 12318  0636  0836               	movf	??___ftmul,w
 12319  0637  00A7               	movwf	___ftpack@exp
 12320  0638  083F               	movf	___ftmul@sign,w
 12321  0639  00B7               	movwf	??___ftmul+1
 12322  063A  0837               	movf	??___ftmul+1,w
 12323  063B  00A8               	movwf	___ftpack@sign
 12324  063C  318F  272A         	fcall	___ftpack
 12325  063E  0020               	movlb	0	; select bank0
 12326  063F  0824               	movf	?___ftpack,w
 12327  0640  00B0               	movwf	?___ftmul
 12328  0641  0825               	movf	?___ftpack+1,w
 12329  0642  00B1               	movwf	?___ftmul+1
 12330  0643  0826               	movf	?___ftpack+2,w
 12331  0644  00B2               	movwf	?___ftmul+2
 12332  0645  0008               	return
 12333  0646                     __end_of___ftmul:	
 12334                           
 12335                           	psect	text31
 12336  0646                     __ptext31:	
 12337 ;; *************** function ___ftdiv *****************
 12338 ;; Defined at:
 12339 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;  f2              3   32[BANK0 ] float 
 12342 ;;  f1              3   35[BANK0 ] float 
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  f3              3   43[BANK0 ] float 
 12345 ;;  sign            1   47[BANK0 ] unsigned char 
 12346 ;;  exp             1   46[BANK0 ] unsigned char 
 12347 ;;  cntr            1   42[BANK0 ] unsigned char 
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  3   32[BANK0 ] float 
 12350 ;; Registers used:
 12351 ;;		wreg, status,2, status,0, pclath, cstack
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12357 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;Total ram usage:       16 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    8
 12364 ;; This function calls:
 12365 ;;		___ftpack
 12366 ;; This function is called by:
 12367 ;;		_SHT3x_CalcTemperatureC
 12368 ;;		_SHT3x_CalcRelativeHumidity
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           
 12373                           ;psect for function ___ftdiv
 12374  0646                     ___ftdiv:	
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12378  0646  0020               	movlb	0	; select bank0
 12379  0647  0843               	movf	___ftdiv@f1,w
 12380  0648  00C6               	movwf	??___ftdiv
 12381  0649  0844               	movf	___ftdiv@f1+1,w
 12382  064A  00C7               	movwf	??___ftdiv+1
 12383  064B  0845               	movf	___ftdiv@f1+2,w
 12384  064C  00C8               	movwf	??___ftdiv+2
 12385  064D  1003               	clrc
 12386  064E  0D47               	rlf	??___ftdiv+1,w
 12387  064F  0D48               	rlf	??___ftdiv+2,w
 12388  0650  00C9               	movwf	??___ftdiv+3
 12389  0651  0849               	movf	??___ftdiv+3,w
 12390  0652  00CE               	movwf	___ftdiv@exp
 12391  0653  084E               	movf	___ftdiv@exp,w
 12392  0654  1D03               	btfss	3,2
 12393  0655  2E5D               	goto	l3709
 12394  0656  3000               	movlw	0
 12395  0657  00C0               	movwf	?___ftdiv
 12396  0658  3000               	movlw	0
 12397  0659  00C1               	movwf	?___ftdiv+1
 12398  065A  3000               	movlw	0
 12399  065B  00C2               	movwf	?___ftdiv+2
 12400  065C  0008               	return
 12401  065D                     l3709:	
 12402  065D  0840               	movf	___ftdiv@f2,w
 12403  065E  00C6               	movwf	??___ftdiv
 12404  065F  0841               	movf	___ftdiv@f2+1,w
 12405  0660  00C7               	movwf	??___ftdiv+1
 12406  0661  0842               	movf	___ftdiv@f2+2,w
 12407  0662  00C8               	movwf	??___ftdiv+2
 12408  0663  1003               	clrc
 12409  0664  0D47               	rlf	??___ftdiv+1,w
 12410  0665  0D48               	rlf	??___ftdiv+2,w
 12411  0666  00C9               	movwf	??___ftdiv+3
 12412  0667  0849               	movf	??___ftdiv+3,w
 12413  0668  00CF               	movwf	___ftdiv@sign
 12414  0669  084F               	movf	___ftdiv@sign,w
 12415  066A  1D03               	btfss	3,2
 12416  066B  2E73               	goto	l3715
 12417  066C  3000               	movlw	0
 12418  066D  00C0               	movwf	?___ftdiv
 12419  066E  3000               	movlw	0
 12420  066F  00C1               	movwf	?___ftdiv+1
 12421  0670  3000               	movlw	0
 12422  0671  00C2               	movwf	?___ftdiv+2
 12423  0672  0008               	return
 12424  0673                     l3715:	
 12425  0673  3000               	movlw	0
 12426  0674  00CB               	movwf	___ftdiv@f3
 12427  0675  3000               	movlw	0
 12428  0676  00CC               	movwf	___ftdiv@f3+1
 12429  0677  3000               	movlw	0
 12430  0678  00CD               	movwf	___ftdiv@f3+2
 12431  0679  3089               	movlw	137
 12432  067A  074F               	addwf	___ftdiv@sign,w
 12433  067B  00C6               	movwf	??___ftdiv
 12434  067C  0846               	movf	??___ftdiv,w
 12435  067D  02CE               	subwf	___ftdiv@exp,f
 12436  067E  0843               	movf	___ftdiv@f1,w
 12437  067F  00C6               	movwf	??___ftdiv
 12438  0680  0844               	movf	___ftdiv@f1+1,w
 12439  0681  00C7               	movwf	??___ftdiv+1
 12440  0682  0845               	movf	___ftdiv@f1+2,w
 12441  0683  00C8               	movwf	??___ftdiv+2
 12442  0684  3010               	movlw	16
 12443  0685                     u2835:	
 12444  0685  36C8               	lsrf	??___ftdiv+2,f
 12445  0686  0CC7               	rrf	??___ftdiv+1,f
 12446  0687  0CC6               	rrf	??___ftdiv,f
 12447  0688  0B89               	decfsz	9,f
 12448  0689  2E85               	goto	u2835
 12449  068A  0846               	movf	??___ftdiv,w
 12450  068B  00C9               	movwf	??___ftdiv+3
 12451  068C  0849               	movf	??___ftdiv+3,w
 12452  068D  00CF               	movwf	___ftdiv@sign
 12453  068E  0840               	movf	___ftdiv@f2,w
 12454  068F  00C6               	movwf	??___ftdiv
 12455  0690  0841               	movf	___ftdiv@f2+1,w
 12456  0691  00C7               	movwf	??___ftdiv+1
 12457  0692  0842               	movf	___ftdiv@f2+2,w
 12458  0693  00C8               	movwf	??___ftdiv+2
 12459  0694  3010               	movlw	16
 12460  0695                     u2845:	
 12461  0695  36C8               	lsrf	??___ftdiv+2,f
 12462  0696  0CC7               	rrf	??___ftdiv+1,f
 12463  0697  0CC6               	rrf	??___ftdiv,f
 12464  0698  0B89               	decfsz	9,f
 12465  0699  2E95               	goto	u2845
 12466  069A  0846               	movf	??___ftdiv,w
 12467  069B  00C9               	movwf	??___ftdiv+3
 12468  069C  0849               	movf	??___ftdiv+3,w
 12469  069D  06CF               	xorwf	___ftdiv@sign,f
 12470  069E  3080               	movlw	128
 12471  069F  00C6               	movwf	??___ftdiv
 12472  06A0  0846               	movf	??___ftdiv,w
 12473  06A1  05CF               	andwf	___ftdiv@sign,f
 12474  06A2  17C4               	bsf	___ftdiv@f1+1,7
 12475  06A3  30FF               	movlw	255
 12476  06A4  05C3               	andwf	___ftdiv@f1,f
 12477  06A5  30FF               	movlw	255
 12478  06A6  05C4               	andwf	___ftdiv@f1+1,f
 12479  06A7  3000               	movlw	0
 12480  06A8  05C5               	andwf	___ftdiv@f1+2,f
 12481  06A9  17C1               	bsf	___ftdiv@f2+1,7
 12482  06AA  30FF               	movlw	255
 12483  06AB  05C0               	andwf	___ftdiv@f2,f
 12484  06AC  30FF               	movlw	255
 12485  06AD  05C1               	andwf	___ftdiv@f2+1,f
 12486  06AE  3000               	movlw	0
 12487  06AF  05C2               	andwf	___ftdiv@f2+2,f
 12488  06B0  3018               	movlw	24
 12489  06B1  00C6               	movwf	??___ftdiv
 12490  06B2  0846               	movf	??___ftdiv,w
 12491  06B3  00CA               	movwf	___ftdiv@cntr
 12492  06B4                     l3729:	
 12493  06B4  3001               	movlw	1
 12494  06B5                     u2855:	
 12495  06B5  35CB               	lslf	___ftdiv@f3,f
 12496  06B6  0DCC               	rlf	___ftdiv@f3+1,f
 12497  06B7  0DCD               	rlf	___ftdiv@f3+2,f
 12498  06B8  0B89               	decfsz	9,f
 12499  06B9  2EB5               	goto	u2855
 12500  06BA  0842               	movf	___ftdiv@f2+2,w
 12501  06BB  0245               	subwf	___ftdiv@f1+2,w
 12502  06BC  1D03               	skipz
 12503  06BD  2EC4               	goto	u2865
 12504  06BE  0841               	movf	___ftdiv@f2+1,w
 12505  06BF  0244               	subwf	___ftdiv@f1+1,w
 12506  06C0  1D03               	skipz
 12507  06C1  2EC4               	goto	u2865
 12508  06C2  0840               	movf	___ftdiv@f2,w
 12509  06C3  0243               	subwf	___ftdiv@f1,w
 12510  06C4                     u2865:	
 12511  06C4  1C03               	skipc
 12512  06C5  2ECD               	goto	l3737
 12513  06C6  0840               	movf	___ftdiv@f2,w
 12514  06C7  02C3               	subwf	___ftdiv@f1,f
 12515  06C8  0841               	movf	___ftdiv@f2+1,w
 12516  06C9  3BC4               	subwfb	___ftdiv@f1+1,f
 12517  06CA  0842               	movf	___ftdiv@f2+2,w
 12518  06CB  3BC5               	subwfb	___ftdiv@f1+2,f
 12519  06CC  144B               	bsf	___ftdiv@f3,0
 12520  06CD                     l3737:	
 12521  06CD  3001               	movlw	1
 12522  06CE                     u2875:	
 12523  06CE  35C3               	lslf	___ftdiv@f1,f
 12524  06CF  0DC4               	rlf	___ftdiv@f1+1,f
 12525  06D0  0DC5               	rlf	___ftdiv@f1+2,f
 12526  06D1  0B89               	decfsz	9,f
 12527  06D2  2ECE               	goto	u2875
 12528  06D3  3001               	movlw	1
 12529  06D4  02CA               	subwf	___ftdiv@cntr,f
 12530  06D5  1D03               	btfss	3,2
 12531  06D6  2EB4               	goto	l3729
 12532  06D7  084B               	movf	___ftdiv@f3,w
 12533  06D8  00A4               	movwf	___ftpack@arg
 12534  06D9  084C               	movf	___ftdiv@f3+1,w
 12535  06DA  00A5               	movwf	___ftpack@arg+1
 12536  06DB  084D               	movf	___ftdiv@f3+2,w
 12537  06DC  00A6               	movwf	___ftpack@arg+2
 12538  06DD  084E               	movf	___ftdiv@exp,w
 12539  06DE  00C6               	movwf	??___ftdiv
 12540  06DF  0846               	movf	??___ftdiv,w
 12541  06E0  00A7               	movwf	___ftpack@exp
 12542  06E1  084F               	movf	___ftdiv@sign,w
 12543  06E2  00C7               	movwf	??___ftdiv+1
 12544  06E3  0847               	movf	??___ftdiv+1,w
 12545  06E4  00A8               	movwf	___ftpack@sign
 12546  06E5  318F  272A         	fcall	___ftpack
 12547  06E7  0020               	movlb	0	; select bank0
 12548  06E8  0824               	movf	?___ftpack,w
 12549  06E9  00C0               	movwf	?___ftdiv
 12550  06EA  0825               	movf	?___ftpack+1,w
 12551  06EB  00C1               	movwf	?___ftdiv+1
 12552  06EC  0826               	movf	?___ftpack+2,w
 12553  06ED  00C2               	movwf	?___ftdiv+2
 12554  06EE  0008               	return
 12555  06EF                     __end_of___ftdiv:	
 12556                           
 12557                           	psect	text32
 12558  0F2A                     __ptext32:	
 12559 ;; *************** function ___ftpack *****************
 12560 ;; Defined at:
 12561 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;  arg             3    4[BANK0 ] unsigned um
 12564 ;;  exp             1    7[BANK0 ] unsigned char 
 12565 ;;  sign            1    8[BANK0 ] unsigned char 
 12566 ;; Auto vars:     Size  Location     Type
 12567 ;;		None
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  3    4[BANK0 ] float 
 12570 ;; Registers used:
 12571 ;;		wreg, status,2, status,0
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12577 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12580 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12581 ;;Total ram usage:        8 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    7
 12584 ;; This function calls:
 12585 ;;		Nothing
 12586 ;; This function is called by:
 12587 ;;		___awtoft
 12588 ;;		___ftadd
 12589 ;;		___ftdiv
 12590 ;;		___ftmul
 12591 ;;		___lwtoft
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595                           
 12596                           ;psect for function ___ftpack
 12597  0F2A                     ___ftpack:	
 12598                           
 12599                           ;incstack = 0
 12600                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12601  0F2A  0020               	movlb	0	; select bank0
 12602  0F2B  0827               	movf	___ftpack@exp,w
 12603  0F2C  1903               	btfsc	3,2
 12604  0F2D  2F33               	goto	l3273
 12605  0F2E  0826               	movf	___ftpack@arg+2,w
 12606  0F2F  0425               	iorwf	___ftpack@arg+1,w
 12607  0F30  0424               	iorwf	___ftpack@arg,w
 12608  0F31  1D03               	skipz
 12609  0F32  2F44               	goto	l3279
 12610  0F33                     l3273:	
 12611  0F33  3000               	movlw	0
 12612  0F34  00A4               	movwf	?___ftpack
 12613  0F35  3000               	movlw	0
 12614  0F36  00A5               	movwf	?___ftpack+1
 12615  0F37  3000               	movlw	0
 12616  0F38  00A6               	movwf	?___ftpack+2
 12617  0F39  0008               	return
 12618  0F3A                     l3277:	
 12619  0F3A  3001               	movlw	1
 12620  0F3B  00A9               	movwf	??___ftpack
 12621  0F3C  0829               	movf	??___ftpack,w
 12622  0F3D  07A7               	addwf	___ftpack@exp,f
 12623  0F3E  3001               	movlw	1
 12624  0F3F                     u2135:	
 12625  0F3F  36A6               	lsrf	___ftpack@arg+2,f
 12626  0F40  0CA5               	rrf	___ftpack@arg+1,f
 12627  0F41  0CA4               	rrf	___ftpack@arg,f
 12628  0F42  0B89               	decfsz	9,f
 12629  0F43  2F3F               	goto	u2135
 12630  0F44                     l3279:	
 12631  0F44  30FE               	movlw	254
 12632  0F45  0526               	andwf	___ftpack@arg+2,w
 12633  0F46  1903               	btfsc	3,2
 12634  0F47  2F5D               	goto	l1354
 12635  0F48  2F3A               	goto	l3277
 12636  0F49                     l3281:	
 12637  0F49  3001               	movlw	1
 12638  0F4A  00A9               	movwf	??___ftpack
 12639  0F4B  0829               	movf	??___ftpack,w
 12640  0F4C  07A7               	addwf	___ftpack@exp,f
 12641  0F4D  3001               	movlw	1
 12642  0F4E  07A4               	addwf	___ftpack@arg,f
 12643  0F4F  3000               	movlw	0
 12644  0F50  1803               	skipnc
 12645  0F51  3001               	movlw	1
 12646  0F52  07A5               	addwf	___ftpack@arg+1,f
 12647  0F53  3000               	movlw	0
 12648  0F54  1803               	skipnc
 12649  0F55  3001               	movlw	1
 12650  0F56  07A6               	addwf	___ftpack@arg+2,f
 12651  0F57  3001               	movlw	1
 12652  0F58                     u2155:	
 12653  0F58  36A6               	lsrf	___ftpack@arg+2,f
 12654  0F59  0CA5               	rrf	___ftpack@arg+1,f
 12655  0F5A  0CA4               	rrf	___ftpack@arg,f
 12656  0F5B  0B89               	decfsz	9,f
 12657  0F5C  2F58               	goto	u2155
 12658  0F5D                     l1354:	
 12659  0F5D  30FF               	movlw	255
 12660  0F5E  0526               	andwf	___ftpack@arg+2,w
 12661  0F5F  1903               	btfsc	3,2
 12662  0F60  2F6A               	goto	l3289
 12663  0F61  2F49               	goto	l3281
 12664  0F62                     l3287:	
 12665  0F62  3001               	movlw	1
 12666  0F63  02A7               	subwf	___ftpack@exp,f
 12667  0F64  3001               	movlw	1
 12668  0F65                     u2175:	
 12669  0F65  35A4               	lslf	___ftpack@arg,f
 12670  0F66  0DA5               	rlf	___ftpack@arg+1,f
 12671  0F67  0DA6               	rlf	___ftpack@arg+2,f
 12672  0F68  0B89               	decfsz	9,f
 12673  0F69  2F65               	goto	u2175
 12674  0F6A                     l3289:	
 12675  0F6A  1BA5               	btfsc	___ftpack@arg+1,7
 12676  0F6B  2F70               	goto	l1361
 12677  0F6C  3002               	movlw	2
 12678  0F6D  0227               	subwf	___ftpack@exp,w
 12679  0F6E  1803               	skipnc
 12680  0F6F  2F62               	goto	l3287
 12681  0F70                     l1361:	
 12682  0F70  1827               	btfsc	___ftpack@exp,0
 12683  0F71  2F78               	goto	l1362
 12684  0F72  30FF               	movlw	255
 12685  0F73  05A4               	andwf	___ftpack@arg,f
 12686  0F74  307F               	movlw	127
 12687  0F75  05A5               	andwf	___ftpack@arg+1,f
 12688  0F76  30FF               	movlw	255
 12689  0F77  05A6               	andwf	___ftpack@arg+2,f
 12690  0F78                     l1362:	
 12691  0F78  1003               	clrc
 12692  0F79  0CA7               	rrf	___ftpack@exp,f
 12693  0F7A  0827               	movf	___ftpack@exp,w
 12694  0F7B  00A9               	movwf	??___ftpack
 12695  0F7C  01AA               	clrf	??___ftpack+1
 12696  0F7D  01AB               	clrf	??___ftpack+2
 12697  0F7E  3010               	movlw	16
 12698  0F7F                     u2215:	
 12699  0F7F  35A9               	lslf	??___ftpack,f
 12700  0F80  0DAA               	rlf	??___ftpack+1,f
 12701  0F81  0DAB               	rlf	??___ftpack+2,f
 12702  0F82  0B89               	decfsz	9,f
 12703  0F83  2F7F               	goto	u2215
 12704  0F84  0829               	movf	??___ftpack,w
 12705  0F85  04A4               	iorwf	___ftpack@arg,f
 12706  0F86  082A               	movf	??___ftpack+1,w
 12707  0F87  04A5               	iorwf	___ftpack@arg+1,f
 12708  0F88  082B               	movf	??___ftpack+2,w
 12709  0F89  04A6               	iorwf	___ftpack@arg+2,f
 12710  0F8A  0828               	movf	___ftpack@sign,w
 12711  0F8B  1903               	btfsc	3,2
 12712  0F8C  0008               	return
 12713  0F8D  17A6               	bsf	___ftpack@arg+2,7
 12714  0F8E  0008               	return
 12715  0F8F                     __end_of___ftpack:	
 12716                           
 12717                           	psect	text33
 12718  0BB2                     __ptext33:	
 12719 ;; *************** function _EUSART_Write *****************
 12720 ;; Defined at:
 12721 ;;		line 173 in file "mcc_generated_files/eusart.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  txData          1    wreg     unsigned char 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  txData          1    5[BANK0 ] unsigned char 
 12726 ;; Return value:  Size  Location     Type
 12727 ;;                  1    wreg      void 
 12728 ;; Registers used:
 12729 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;Total ram usage:        2 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    7
 12742 ;; This function calls:
 12743 ;;		Nothing
 12744 ;; This function is called by:
 12745 ;;		_SHT3x_CalcTemperatureC
 12746 ;;		_SHT3x_CalcRelativeHumidity
 12747 ;;		_putch
 12748 ;;		_UartDisplay
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _EUSART_Write
 12754  0BB2                     _EUSART_Write:	
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12758                           ;EUSART_Write@txData stored from wreg
 12759  0BB2  0020               	movlb	0	; select bank0
 12760  0BB3  00A5               	movwf	EUSART_Write@txData
 12761  0BB4                     l3527:	
 12762                           ;eusart.c: 176: {
 12763                           
 12764                           ;eusart.c: 175: while(0 == eusartTxBufferRemaining)
 12765                           
 12766  0BB4  0021               	movlb	1	; select bank1
 12767  0BB5  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12768  0BB6  1903               	btfsc	3,2
 12769  0BB7  2BB4               	goto	l3527
 12770                           
 12771                           ;eusart.c: 177: }
 12772                           ;eusart.c: 179: if(0 == PIE1bits.TXIE)
 12773  0BB8  1A10               	btfsc	16,4	;volatile
 12774  0BB9  2BBF               	goto	l684
 12775                           
 12776                           ;eusart.c: 180: {
 12777                           ;eusart.c: 181: TX1REG = txData;
 12778  0BBA  0020               	movlb	0	; select bank0
 12779  0BBB  0825               	movf	EUSART_Write@txData,w
 12780  0BBC  0023               	movlb	3	; select bank3
 12781  0BBD  009A               	movwf	26	;volatile
 12782                           
 12783                           ;eusart.c: 182: }
 12784  0BBE  2BD7               	goto	l3541
 12785  0BBF                     l684:	
 12786                           
 12787                           ;eusart.c: 183: else
 12788                           ;eusart.c: 184: {
 12789                           ;eusart.c: 185: PIE1bits.TXIE = 0;
 12790  0BBF  1210               	bcf	16,4	;volatile
 12791                           
 12792                           ;eusart.c: 186: eusartTxBuffer[eusartTxHead++] = txData;
 12793  0BC0  0020               	movlb	0	; select bank0
 12794  0BC1  0825               	movf	EUSART_Write@txData,w
 12795  0BC2  00A4               	movwf	??_EUSART_Write
 12796  0BC3  0021               	movlb	1	; select bank1
 12797  0BC4  084C               	movf	_eusartTxHead^(0+128),w
 12798  0BC5  3E4E               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12799  0BC6  0086               	movwf	6
 12800  0BC7  3001               	movlw	1	; select bank2/3
 12801  0BC8  0087               	movwf	7
 12802  0BC9  0020               	movlb	0	; select bank0
 12803  0BCA  0824               	movf	??_EUSART_Write,w
 12804  0BCB  0081               	movwf	1
 12805  0BCC  3001               	movlw	1
 12806  0BCD  00A4               	movwf	??_EUSART_Write
 12807  0BCE  0824               	movf	??_EUSART_Write,w
 12808  0BCF  0021               	movlb	1	; select bank1
 12809  0BD0  07CC               	addwf	_eusartTxHead^(0+128),f	;volatile
 12810                           
 12811                           ;eusart.c: 187: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 12812  0BD1  3008               	movlw	8
 12813  0BD2  024C               	subwf	_eusartTxHead^(0+128),w	;volatile
 12814  0BD3  1803               	btfsc	3,0
 12815                           
 12816                           ;eusart.c: 188: {
 12817                           ;eusart.c: 189: eusartTxHead = 0;
 12818  0BD4  01CC               	clrf	_eusartTxHead^(0+128)	;volatile
 12819                           
 12820                           ;eusart.c: 190: }
 12821                           ;eusart.c: 191: eusartTxBufferRemaining--;
 12822  0BD5  3001               	movlw	1
 12823  0BD6  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12824  0BD7                     l3541:	
 12825                           
 12826                           ;eusart.c: 192: }
 12827                           ;eusart.c: 193: PIE1bits.TXIE = 1;
 12828  0BD7  0021               	movlb	1	; select bank1
 12829  0BD8  1610               	bsf	16,4	;volatile
 12830  0BD9  0008               	return
 12831  0BDA                     __end_of_EUSART_Write:	
 12832                           
 12833                           	psect	text34
 12834  0B8A                     __ptext34:	
 12835 ;; *************** function _I2C_WriteNBytes *****************
 12836 ;; Defined at:
 12837 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  address         1    wreg     unsigned char 
 12840 ;;  data            1   13[BANK0 ] PTR unsigned char 
 12841 ;;		 -> Command(2), 
 12842 ;;  len             2   14[BANK0 ] unsigned int 
 12843 ;; Auto vars:     Size  Location     Type
 12844 ;;  address         1   16[BANK0 ] unsigned char 
 12845 ;; Return value:  Size  Location     Type
 12846 ;;                  1    wreg      void 
 12847 ;; Registers used:
 12848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12849 ;; Tracked objects:
 12850 ;;		On entry : 0/0
 12851 ;;		On exit  : 0/0
 12852 ;;		Unchanged: 0/0
 12853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12854 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;Total ram usage:        4 bytes
 12859 ;; Hardware stack levels used:    1
 12860 ;; Hardware stack levels required when called:   10
 12861 ;; This function calls:
 12862 ;;		_I2C_Close
 12863 ;;		_I2C_MasterWrite
 12864 ;;		_I2C_Open
 12865 ;;		_I2C_SetAddressNackCallback
 12866 ;;		_I2C_SetBuffer
 12867 ;; This function is called by:
 12868 ;;		_SHT25_StateMachine
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           
 12873                           ;psect for function _I2C_WriteNBytes
 12874  0B8A                     _I2C_WriteNBytes:	
 12875                           
 12876                           ;incstack = 0
 12877                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12878                           ;I2C_WriteNBytes@address stored from wreg
 12879  0B8A  0020               	movlb	0	; select bank0
 12880  0B8B  00B0               	movwf	I2C_WriteNBytes@address
 12881  0B8C                     l3863:	
 12882                           ;i2c_master_example.c: 113: while(!I2C_Open(address));
 12883                           
 12884  0B8C  0020               	movlb	0	; select bank0
 12885  0B8D  0830               	movf	I2C_WriteNBytes@address,w
 12886  0B8E  318E  2635  318B   	fcall	_I2C_Open
 12887  0B91  3A00               	xorlw	0
 12888  0B92  1903               	skipnz
 12889  0B93  2B8C               	goto	l3863
 12890                           
 12891                           ;i2c_master_example.c: 114: I2C_SetBuffer(data,len);
 12892  0B94  0020               	movlb	0	; select bank0
 12893  0B95  082D               	movf	I2C_WriteNBytes@data,w
 12894  0B96  00A4               	movwf	I2C_SetBuffer@buffer
 12895  0B97  3000               	movlw	0
 12896  0B98  00A5               	movwf	I2C_SetBuffer@buffer+1
 12897  0B99  082F               	movf	I2C_WriteNBytes@len+1,w
 12898  0B9A  00A7               	movwf	I2C_SetBuffer@bufferSize+1
 12899  0B9B  082E               	movf	I2C_WriteNBytes@len,w
 12900  0B9C  00A6               	movwf	I2C_SetBuffer@bufferSize
 12901  0B9D  3189  21AC  318B   	fcall	_I2C_SetBuffer
 12902                           
 12903                           ;i2c_master_example.c: 115: I2C_SetAddressNackCallback((0),(0));
 12904  0BA0  3000               	movlw	0
 12905  0BA1  0020               	movlb	0	; select bank0
 12906  0BA2  00A9               	movwf	I2C_SetAddressNackCallback@cb
 12907  0BA3  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 12908  0BA4  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 12909  0BA5  3189  2137  318B   	fcall	_I2C_SetAddressNackCallback
 12910                           
 12911                           ;i2c_master_example.c: 116: I2C_MasterWrite();
 12912  0BA8  3188  2066  318B   	fcall	_I2C_MasterWrite
 12913  0BAB                     l3871:	
 12914                           ;i2c_master_example.c: 117: while(I2C_BUSY == I2C_Close());
 12915                           
 12916  0BAB  318A  22B9  318B   	fcall	_I2C_Close
 12917  0BAE  3A01               	xorlw	1
 12918  0BAF  1D03               	btfss	3,2
 12919  0BB0  0008               	return
 12920  0BB1  2BAB               	goto	l3871
 12921  0BB2                     __end_of_I2C_WriteNBytes:	
 12922                           
 12923                           	psect	text35
 12924  0937                     __ptext35:	
 12925 ;; *************** function _I2C_SetAddressNackCallback *****************
 12926 ;; Defined at:
 12927 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
 12928 ;; Parameters:    Size  Location     Type
 12929 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 12930 ;;		 -> Absolute function(1), 
 12931 ;;  ptr             1   11[BANK0 ] PTR void 
 12932 ;;		 -> NULL(0), 
 12933 ;; Auto vars:     Size  Location     Type
 12934 ;;		None
 12935 ;; Return value:  Size  Location     Type
 12936 ;;                  1    wreg      void 
 12937 ;; Registers used:
 12938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12939 ;; Tracked objects:
 12940 ;;		On entry : 0/0
 12941 ;;		On exit  : 0/0
 12942 ;;		Unchanged: 0/0
 12943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12944 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;Total ram usage:        4 bytes
 12949 ;; Hardware stack levels used:    1
 12950 ;; Hardware stack levels required when called:    8
 12951 ;; This function calls:
 12952 ;;		_I2C_SetCallback
 12953 ;; This function is called by:
 12954 ;;		_I2C_WriteNBytes
 12955 ;;		_I2C_Read1ByteRegister
 12956 ;;		_I2C_Read2ByteRegister
 12957 ;;		_I2C_Write1ByteRegister
 12958 ;;		_I2C_Write2ByteRegister
 12959 ;;		_I2C_ReadDataBlock
 12960 ;; This function uses a non-reentrant model
 12961 ;;
 12962                           
 12963                           
 12964                           ;psect for function _I2C_SetAddressNackCallback
 12965  0937                     _I2C_SetAddressNackCallback:	
 12966                           
 12967                           ;i2c_master.c: 286: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 12968                           
 12969                           ;incstack = 0
 12970                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12971  0937  0020               	movlb	0	; select bank0
 12972  0938  082A               	movf	I2C_SetAddressNackCallback@cb+1,w
 12973  0939  00A5               	movwf	I2C_SetCallback@cb+1
 12974  093A  0829               	movf	I2C_SetAddressNackCallback@cb,w
 12975  093B  00A4               	movwf	I2C_SetCallback@cb
 12976  093C  082B               	movf	I2C_SetAddressNackCallback@ptr,w
 12977  093D  00AC               	movwf	??_I2C_SetAddressNackCallback
 12978  093E  082C               	movf	??_I2C_SetAddressNackCallback,w
 12979  093F  00A6               	movwf	I2C_SetCallback@ptr
 12980  0940  3002               	movlw	2
 12981  0941  318B  23DA         	fcall	_I2C_SetCallback
 12982  0943  0008               	return
 12983  0944                     __end_of_I2C_SetAddressNackCallback:	
 12984                           
 12985                           	psect	text36
 12986  0BDA                     __ptext36:	
 12987 ;; *************** function _I2C_SetCallback *****************
 12988 ;; Defined at:
 12989 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 12990 ;; Parameters:    Size  Location     Type
 12991 ;;  idx             1    wreg     enum E12128
 12992 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
 12993 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 12994 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 12995 ;;  ptr             1    6[BANK0 ] PTR void 
 12996 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12997 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  idx             1    8[BANK0 ] enum E12128
 13000 ;; Return value:  Size  Location     Type
 13001 ;;                  1    wreg      void 
 13002 ;; Registers used:
 13003 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13004 ;; Tracked objects:
 13005 ;;		On entry : 0/0
 13006 ;;		On exit  : 0/0
 13007 ;;		Unchanged: 0/0
 13008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13009 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;Total ram usage:        5 bytes
 13014 ;; Hardware stack levels used:    1
 13015 ;; Hardware stack levels required when called:    7
 13016 ;; This function calls:
 13017 ;;		Nothing
 13018 ;; This function is called by:
 13019 ;;		_I2C_SetAddressNackCallback
 13020 ;;		_I2C_SetWriteCollisionCallback
 13021 ;;		_I2C_SetDataNackCallback
 13022 ;;		_I2C_SetTimeoutCallback
 13023 ;; This function uses a non-reentrant model
 13024 ;;
 13025                           
 13026                           
 13027                           ;psect for function _I2C_SetCallback
 13028  0BDA                     _I2C_SetCallback:	
 13029                           
 13030                           ;incstack = 0
 13031                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13032                           ;I2C_SetCallback@idx stored from wreg
 13033  0BDA  0020               	movlb	0	; select bank0
 13034  0BDB  00A8               	movwf	I2C_SetCallback@idx
 13035                           
 13036                           ;i2c_master.c: 306: if(cb)
 13037  0BDC  0824               	movf	I2C_SetCallback@cb,w
 13038  0BDD  0425               	iorwf	I2C_SetCallback@cb+1,w
 13039  0BDE  1903               	btfsc	3,2
 13040  0BDF  2BF3               	goto	l3261
 13041                           
 13042                           ;i2c_master.c: 307: {
 13043                           ;i2c_master.c: 308: I2C_Status.callbackTable[idx] = cb;
 13044  0BE0  3528               	lslf	I2C_SetCallback@idx,w
 13045  0BE1  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 13046  0BE2  0086               	movwf	6
 13047  0BE3  3001               	movlw	1	; select bank2/3
 13048  0BE4  0087               	movwf	7
 13049  0BE5  0824               	movf	I2C_SetCallback@cb,w
 13050  0BE6  3FC0               	movwi [0]fsr1
 13051  0BE7  0825               	movf	I2C_SetCallback@cb+1,w
 13052  0BE8  3FC1               	movwi [1]fsr1
 13053                           
 13054                           ;i2c_master.c: 309: I2C_Status.callbackPayload[idx] = ptr;
 13055  0BE9  0826               	movf	I2C_SetCallback@ptr,w
 13056  0BEA  00A7               	movwf	??_I2C_SetCallback
 13057  0BEB  0828               	movf	I2C_SetCallback@idx,w
 13058  0BEC  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 13059  0BED  0086               	movwf	6
 13060  0BEE  3001               	movlw	1	; select bank2/3
 13061  0BEF  0087               	movwf	7
 13062  0BF0  0827               	movf	??_I2C_SetCallback,w
 13063  0BF1  0081               	movwf	1
 13064                           
 13065                           ;i2c_master.c: 310: }
 13066  0BF2  0008               	return
 13067  0BF3                     l3261:	
 13068                           
 13069                           ;i2c_master.c: 311: else
 13070                           ;i2c_master.c: 312: {
 13071                           ;i2c_master.c: 313: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13072  0BF3  3528               	lslf	I2C_SetCallback@idx,w
 13073  0BF4  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 13074  0BF5  0086               	movwf	6
 13075  0BF6  3001               	movlw	1	; select bank2/3
 13076  0BF7  0087               	movwf	7
 13077  0BF8  3002               	movlw	low _I2C_CallbackReturnStop
 13078  0BF9  3FC0               	movwi [0]fsr1
 13079  0BFA  3000               	movlw	high _I2C_CallbackReturnStop
 13080  0BFB  3FC1               	movwi [1]fsr1
 13081                           
 13082                           ;i2c_master.c: 314: I2C_Status.callbackPayload[idx] = (0);
 13083  0BFC  0828               	movf	I2C_SetCallback@idx,w
 13084  0BFD  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 13085  0BFE  0086               	movwf	6
 13086  0BFF  3001               	movlw	1	; select bank2/3
 13087  0C00  0087               	movwf	7
 13088  0C01  0181               	clrf	1
 13089  0C02  0008               	return
 13090  0C03                     __end_of_I2C_SetCallback:	
 13091                           
 13092                           	psect	text37
 13093  0866                     __ptext37:	
 13094 ;; *************** function _I2C_MasterWrite *****************
 13095 ;; Defined at:
 13096 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;		None
 13099 ;; Auto vars:     Size  Location     Type
 13100 ;;		None
 13101 ;; Return value:  Size  Location     Type
 13102 ;;                  1    wreg      enum E92
 13103 ;; Registers used:
 13104 ;;		wreg, status,2, status,0, pclath, cstack
 13105 ;; Tracked objects:
 13106 ;;		On entry : 0/0
 13107 ;;		On exit  : 0/0
 13108 ;;		Unchanged: 0/0
 13109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;Total ram usage:        0 bytes
 13115 ;; Hardware stack levels used:    1
 13116 ;; Hardware stack levels required when called:    9
 13117 ;; This function calls:
 13118 ;;		_I2C_MasterOperation
 13119 ;; This function is called by:
 13120 ;;		_I2C_WriteNBytes
 13121 ;;		_I2C_Read1ByteRegister
 13122 ;;		_I2C_Read2ByteRegister
 13123 ;;		_I2C_Write1ByteRegister
 13124 ;;		_I2C_Write2ByteRegister
 13125 ;;		_I2C_ReadDataBlock
 13126 ;; This function uses a non-reentrant model
 13127 ;;
 13128                           
 13129                           
 13130                           ;psect for function _I2C_MasterWrite
 13131  0866                     _I2C_MasterWrite:	
 13132                           
 13133                           ;i2c_master.c: 254: return I2C_MasterOperation(0);
 13134                           ;	Return value of _I2C_MasterWrite is never used
 13135                           
 13136                           ;incstack = 0
 13137                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
 13138  0866  3000               	movlw	0
 13139  0867  318A  2264         	fcall	_I2C_MasterOperation
 13140  0869  0008               	return
 13141  086A                     __end_of_I2C_MasterWrite:	
 13142                           
 13143                           	psect	text38
 13144  0AD7                     __ptext38:	
 13145 ;; *************** function _I2C_ReadNBytes *****************
 13146 ;; Defined at:
 13147 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;  address         1    wreg     unsigned char 
 13150 ;;  data            1    9[BANK0 ] PTR unsigned char 
 13151 ;;		 -> RxBuff(8), 
 13152 ;;  len             2   10[BANK0 ] unsigned int 
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;  address         1   12[BANK0 ] unsigned char 
 13155 ;; Return value:  Size  Location     Type
 13156 ;;                  1    wreg      void 
 13157 ;; Registers used:
 13158 ;;		wreg, status,2, status,0, pclath, cstack
 13159 ;; Tracked objects:
 13160 ;;		On entry : 0/0
 13161 ;;		On exit  : 0/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13164 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;Total ram usage:        4 bytes
 13169 ;; Hardware stack levels used:    1
 13170 ;; Hardware stack levels required when called:   10
 13171 ;; This function calls:
 13172 ;;		_I2C_Close
 13173 ;;		_I2C_MasterRead
 13174 ;;		_I2C_Open
 13175 ;;		_I2C_SetBuffer
 13176 ;; This function is called by:
 13177 ;;		_SHT25_StateMachine
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           
 13182                           ;psect for function _I2C_ReadNBytes
 13183  0AD7                     _I2C_ReadNBytes:	
 13184                           
 13185                           ;incstack = 0
 13186                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
 13187                           ;I2C_ReadNBytes@address stored from wreg
 13188  0AD7  0020               	movlb	0	; select bank0
 13189  0AD8  00AC               	movwf	I2C_ReadNBytes@address
 13190  0AD9                     l3875:	
 13191                           ;i2c_master_example.c: 122: while(!I2C_Open(address));
 13192                           
 13193  0AD9  0020               	movlb	0	; select bank0
 13194  0ADA  082C               	movf	I2C_ReadNBytes@address,w
 13195  0ADB  318E  2635  318A   	fcall	_I2C_Open
 13196  0ADE  3A00               	xorlw	0
 13197  0ADF  1903               	skipnz
 13198  0AE0  2AD9               	goto	l3875
 13199                           
 13200                           ;i2c_master_example.c: 123: I2C_SetBuffer(data,len);
 13201  0AE1  0020               	movlb	0	; select bank0
 13202  0AE2  0829               	movf	I2C_ReadNBytes@data,w
 13203  0AE3  00A4               	movwf	I2C_SetBuffer@buffer
 13204  0AE4  3001               	movlw	1
 13205  0AE5  00A5               	movwf	I2C_SetBuffer@buffer+1
 13206  0AE6  082B               	movf	I2C_ReadNBytes@len+1,w
 13207  0AE7  00A7               	movwf	I2C_SetBuffer@bufferSize+1
 13208  0AE8  082A               	movf	I2C_ReadNBytes@len,w
 13209  0AE9  00A6               	movwf	I2C_SetBuffer@bufferSize
 13210  0AEA  3189  21AC  318A   	fcall	_I2C_SetBuffer
 13211                           
 13212                           ;i2c_master_example.c: 124: I2C_MasterRead();
 13213  0AED  3188  2062  318A   	fcall	_I2C_MasterRead
 13214  0AF0                     l3879:	
 13215                           ;i2c_master_example.c: 125: while(I2C_BUSY == I2C_Close());
 13216                           
 13217  0AF0  318A  22B9  318A   	fcall	_I2C_Close
 13218  0AF3  3A01               	xorlw	1
 13219  0AF4  1D03               	btfss	3,2
 13220  0AF5  0008               	return
 13221  0AF6  2AF0               	goto	l3879
 13222  0AF7                     __end_of_I2C_ReadNBytes:	
 13223                           
 13224                           	psect	text39
 13225  09AC                     __ptext39:	
 13226 ;; *************** function _I2C_SetBuffer *****************
 13227 ;; Defined at:
 13228 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  buffer          2    4[BANK0 ] PTR void 
 13231 ;;		 -> RxBuff(8), Command(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 13232 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
 13233 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
 13234 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
 13235 ;;  bufferSize      2    6[BANK0 ] unsigned int 
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;		None
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  1    wreg      void 
 13240 ;; Registers used:
 13241 ;;		wreg
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;Total ram usage:        4 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    7
 13254 ;; This function calls:
 13255 ;;		Nothing
 13256 ;; This function is called by:
 13257 ;;		_I2C_WriteNBytes
 13258 ;;		_I2C_ReadNBytes
 13259 ;;		_I2C_Read1ByteRegister
 13260 ;;		_I2C_Read2ByteRegister
 13261 ;;		_I2C_Write1ByteRegister
 13262 ;;		_I2C_Write2ByteRegister
 13263 ;;		_I2C_ReadDataBlock
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _I2C_SetBuffer
 13269  09AC                     _I2C_SetBuffer:	
 13270                           
 13271                           ;i2c_master.c: 266: if(I2C_Status.bufferFree)
 13272                           
 13273                           ;incstack = 0
 13274                           ; Regs used in _I2C_SetBuffer: [wreg]
 13275  09AC  0022               	movlb	2	; select bank2
 13276  09AD  1DBD               	btfss	(_I2C_Status^(0+256)+29),3
 13277  09AE  0008               	return
 13278                           
 13279                           ;i2c_master.c: 267: {
 13280                           ;i2c_master.c: 268: I2C_Status.data_ptr = buffer;
 13281  09AF  0020               	movlb	0	; select bank0
 13282  09B0  0825               	movf	I2C_SetBuffer@buffer+1,w
 13283  09B1  0022               	movlb	2	; select bank2
 13284  09B2  00B8               	movwf	((low ((_I2C_Status| (0+256)+23))+1))^0
 13285  09B3  0020               	movlb	0	; select bank0
 13286  09B4  0824               	movf	I2C_SetBuffer@buffer,w
 13287  09B5  0022               	movlb	2	; select bank2
 13288  09B6  00B7               	movwf	(low ((_I2C_Status| (0+256)+23)))^0
 13289                           
 13290                           ;i2c_master.c: 269: I2C_Status.data_length = bufferSize;
 13291  09B7  0020               	movlb	0	; select bank0
 13292  09B8  0827               	movf	I2C_SetBuffer@bufferSize+1,w
 13293  09B9  0022               	movlb	2	; select bank2
 13294  09BA  00BA               	movwf	((_I2C_Status+1)^(0+256)+25)
 13295  09BB  0020               	movlb	0	; select bank0
 13296  09BC  0826               	movf	I2C_SetBuffer@bufferSize,w
 13297  09BD  0022               	movlb	2	; select bank2
 13298  09BE  00B9               	movwf	(_I2C_Status^(0+256)+25)
 13299                           
 13300                           ;i2c_master.c: 270: I2C_Status.bufferFree = 0;
 13301  09BF  11BD               	bcf	(_I2C_Status^(0+256)+29),3
 13302  09C0  0008               	return
 13303  09C1                     __end_of_I2C_SetBuffer:	
 13304                           
 13305                           	psect	text40
 13306  0E35                     __ptext40:	
 13307 ;; *************** function _I2C_Open *****************
 13308 ;; Defined at:
 13309 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 13310 ;; Parameters:    Size  Location     Type
 13311 ;;  address         1    wreg     unsigned char 
 13312 ;; Auto vars:     Size  Location     Type
 13313 ;;  address         1    7[BANK0 ] unsigned char 
 13314 ;;  returnValue     1    8[BANK0 ] enum E92
 13315 ;; Return value:  Size  Location     Type
 13316 ;;                  1    wreg      enum E92
 13317 ;; Registers used:
 13318 ;;		wreg, status,2, status,0, pclath, cstack
 13319 ;; Tracked objects:
 13320 ;;		On entry : 0/0
 13321 ;;		On exit  : 0/0
 13322 ;;		Unchanged: 0/0
 13323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;Total ram usage:        3 bytes
 13329 ;; Hardware stack levels used:    1
 13330 ;; Hardware stack levels required when called:    8
 13331 ;; This function calls:
 13332 ;;		_I2C_MasterClearIrq
 13333 ;;		_I2C_MasterEnableIrq
 13334 ;;		_I2C_MasterOpen
 13335 ;;		_I2C_SetInterruptHandler
 13336 ;; This function is called by:
 13337 ;;		_I2C_WriteNBytes
 13338 ;;		_I2C_ReadNBytes
 13339 ;;		_I2C_Read1ByteRegister
 13340 ;;		_I2C_Read2ByteRegister
 13341 ;;		_I2C_Write1ByteRegister
 13342 ;;		_I2C_Write2ByteRegister
 13343 ;;		_I2C_ReadDataBlock
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           
 13348                           ;psect for function _I2C_Open
 13349  0E35                     _I2C_Open:	
 13350                           
 13351                           ;incstack = 0
 13352                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 13353                           ;I2C_Open@address stored from wreg
 13354  0E35  0020               	movlb	0	; select bank0
 13355  0E36  00A7               	movwf	I2C_Open@address
 13356                           
 13357                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 13358  0E37  01A8               	clrf	I2C_Open@returnValue
 13359  0E38  0AA8               	incf	I2C_Open@returnValue,f
 13360                           
 13361                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 13362  0E39  0022               	movlb	2	; select bank2
 13363  0E3A  193D               	btfsc	(_I2C_Status^(0+256)+29),2
 13364  0E3B  2E7B               	goto	l3387
 13365                           
 13366                           ;i2c_master.c: 181: {
 13367                           ;i2c_master.c: 182: I2C_Status.address = address;
 13368  0E3C  0020               	movlb	0	; select bank0
 13369  0E3D  0827               	movf	I2C_Open@address,w
 13370  0E3E  00A6               	movwf	??_I2C_Open
 13371  0E3F  0826               	movf	??_I2C_Open,w
 13372  0E40  0022               	movlb	2	; select bank2
 13373  0E41  00B6               	movwf	(_I2C_Status^(0+256)+22)
 13374                           
 13375                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 13376  0E42  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 13377                           
 13378                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 13379  0E43  153D               	bsf	(_I2C_Status^(0+256)+29),2
 13380                           
 13381                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 13382  0E44  103D               	bcf	(_I2C_Status^(0+256)+29),0
 13383                           
 13384                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 13385  0E45  300E               	movlw	14
 13386  0E46  0020               	movlb	0	; select bank0
 13387  0E47  00A6               	movwf	??_I2C_Open
 13388  0E48  0826               	movf	??_I2C_Open,w
 13389  0E49  0022               	movlb	2	; select bank2
 13390  0E4A  00BB               	movwf	(_I2C_Status^(0+256)+27)
 13391                           
 13392                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 13393  0E4B  30F4               	movlw	244
 13394  0E4C  00B4               	movwf	(_I2C_Status^(0+256)+20)
 13395  0E4D  3001               	movlw	1
 13396  0E4E  00B5               	movwf	(_I2C_Status^(0+256)+21)
 13397                           
 13398                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 13399  0E4F  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 13400                           
 13401                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 13402  0E50  3002               	movlw	low _I2C_CallbackReturnStop
 13403  0E51  00A0               	movwf	_I2C_Status^(0+256)
 13404  0E52  3000               	movlw	high _I2C_CallbackReturnStop
 13405  0E53  00A1               	movwf	(_I2C_Status^(0+256)+1)
 13406                           
 13407                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 13408  0E54  01AC               	clrf	(low ((_I2C_Status| (0+256)+12)))^0
 13409                           
 13410                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 13411  0E55  3002               	movlw	low _I2C_CallbackReturnStop
 13412  0E56  00A2               	movwf	(low ((_I2C_Status| (0+256)+2)))^0
 13413  0E57  3000               	movlw	high _I2C_CallbackReturnStop
 13414  0E58  00A3               	movwf	((low ((_I2C_Status| (0+256)+2)))^0+1)
 13415                           
 13416                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 13417  0E59  01AD               	clrf	(low ((_I2C_Status| (0+256)+13)))^0
 13418                           
 13419                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 13420  0E5A  3002               	movlw	low _I2C_CallbackReturnStop
 13421  0E5B  00A4               	movwf	(low ((_I2C_Status| (0+256)+4)))^0
 13422  0E5C  3000               	movlw	high _I2C_CallbackReturnStop
 13423  0E5D  00A5               	movwf	((low ((_I2C_Status| (0+256)+4)))^0+1)
 13424                           
 13425                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 13426  0E5E  01AE               	clrf	(low ((_I2C_Status| (0+256)+14)))^0
 13427                           
 13428                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 13429  0E5F  3002               	movlw	low _I2C_CallbackReturnStop
 13430  0E60  00A6               	movwf	(low ((_I2C_Status| (0+256)+6)))^0
 13431  0E61  3000               	movlw	high _I2C_CallbackReturnStop
 13432  0E62  00A7               	movwf	((low ((_I2C_Status| (0+256)+6)))^0+1)
 13433                           
 13434                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 13435  0E63  01AF               	clrf	(low ((_I2C_Status| (0+256)+15)))^0
 13436                           
 13437                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 13438  0E64  30FE               	movlw	low _I2C_CallbackReturnReset
 13439  0E65  00A8               	movwf	(low ((_I2C_Status| (0+256)+8)))^0
 13440  0E66  3007               	movlw	high _I2C_CallbackReturnReset
 13441  0E67  00A9               	movwf	((low ((_I2C_Status| (0+256)+8)))^0+1)
 13442                           
 13443                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 13444  0E68  01B0               	clrf	(low ((_I2C_Status| (0+256)+16)))^0
 13445                           
 13446                           ;i2c_master.c: 202: I2C_SetInterruptHandler(I2C_MasterIsr);
 13447  0E69  3028               	movlw	low _I2C_MasterIsr
 13448  0E6A  0020               	movlb	0	; select bank0
 13449  0E6B  00A4               	movwf	I2C_SetInterruptHandler@InterruptHandler
 13450  0E6C  3008               	movlw	high _I2C_MasterIsr
 13451  0E6D  00A5               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
 13452  0E6E  3188  20AC  318E   	fcall	_I2C_SetInterruptHandler
 13453                           
 13454                           ;i2c_master.c: 203: I2C_MasterClearIrq();
 13455  0E71  3188  202B  318E   	fcall	_I2C_MasterClearIrq
 13456                           
 13457                           ;i2c_master.c: 204: I2C_MasterOpen();
 13458  0E74  3189  2108  318E   	fcall	_I2C_MasterOpen
 13459                           
 13460                           ;i2c_master.c: 205: I2C_MasterEnableIrq();
 13461  0E77  3188  2037         	fcall	_I2C_MasterEnableIrq
 13462                           
 13463                           ;i2c_master.c: 206: returnValue = I2C_NOERR;
 13464  0E79  0020               	movlb	0	; select bank0
 13465  0E7A  01A8               	clrf	I2C_Open@returnValue
 13466  0E7B                     l3387:	
 13467                           
 13468                           ;i2c_master.c: 207: }
 13469                           ;i2c_master.c: 208: return returnValue;
 13470  0E7B  0020               	movlb	0	; select bank0
 13471  0E7C  0828               	movf	I2C_Open@returnValue,w
 13472  0E7D  0008               	return
 13473  0E7E                     __end_of_I2C_Open:	
 13474                           
 13475                           	psect	text41
 13476  08AC                     __ptext41:	
 13477 ;; *************** function _I2C_SetInterruptHandler *****************
 13478 ;; Defined at:
 13479 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;  InterruptHan    2    4[BANK0 ] PTR FTN()void 
 13482 ;;		 -> I2C_MasterIsr(1), 
 13483 ;; Auto vars:     Size  Location     Type
 13484 ;;		None
 13485 ;; Return value:  Size  Location     Type
 13486 ;;                  1    wreg      void 
 13487 ;; Registers used:
 13488 ;;		wreg
 13489 ;; Tracked objects:
 13490 ;;		On entry : 0/0
 13491 ;;		On exit  : 0/0
 13492 ;;		Unchanged: 0/0
 13493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13494 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;Total ram usage:        2 bytes
 13499 ;; Hardware stack levels used:    1
 13500 ;; Hardware stack levels required when called:    7
 13501 ;; This function calls:
 13502 ;;		Nothing
 13503 ;; This function is called by:
 13504 ;;		_I2C_Open
 13505 ;; This function uses a non-reentrant model
 13506 ;;
 13507                           
 13508                           
 13509                           ;psect for function _I2C_SetInterruptHandler
 13510  08AC                     _I2C_SetInterruptHandler:	
 13511                           
 13512                           ;i2c_master.c: 301: MSSP_InterruptHandler = InterruptHandler;
 13513                           
 13514                           ;incstack = 0
 13515                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
 13516  08AC  0020               	movlb	0	; select bank0
 13517  08AD  0825               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
 13518  08AE  0021               	movlb	1	; select bank1
 13519  08AF  00BB               	movwf	(_MSSP_InterruptHandler+1)^(0+128)
 13520  08B0  0020               	movlb	0	; select bank0
 13521  08B1  0824               	movf	I2C_SetInterruptHandler@InterruptHandler,w
 13522  08B2  0021               	movlb	1	; select bank1
 13523  08B3  00BA               	movwf	_MSSP_InterruptHandler^(0+128)
 13524  08B4  0008               	return
 13525  08B5                     __end_of_I2C_SetInterruptHandler:	
 13526                           
 13527                           	psect	text42
 13528  0908                     __ptext42:	
 13529 ;; *************** function _I2C_MasterOpen *****************
 13530 ;; Defined at:
 13531 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;		None
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;		None
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      unsigned char 
 13538 ;; Registers used:
 13539 ;;		wreg, status,2
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;Total ram usage:        0 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    7
 13552 ;; This function calls:
 13553 ;;		Nothing
 13554 ;; This function is called by:
 13555 ;;		_I2C_Open
 13556 ;; This function uses a non-reentrant model
 13557 ;;
 13558                           
 13559                           
 13560                           ;psect for function _I2C_MasterOpen
 13561  0908                     _I2C_MasterOpen:	
 13562                           
 13563                           ;i2c_master.c: 546: if(!SSP1CON1bits.SSPEN)
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
 13567  0908  0024               	movlb	4	; select bank4
 13568  0909  1A95               	btfsc	21,5	;volatile
 13569  090A  0008               	return
 13570                           
 13571                           ;i2c_master.c: 547: {
 13572                           ;i2c_master.c: 548: SSP1STAT = 0x00;
 13573  090B  0194               	clrf	20	;volatile
 13574                           
 13575                           ;i2c_master.c: 549: SSP1CON1 = 0x08;
 13576  090C  3008               	movlw	8
 13577  090D  0095               	movwf	21	;volatile
 13578                           
 13579                           ;i2c_master.c: 550: SSP1CON2 = 0x00;
 13580  090E  0196               	clrf	22	;volatile
 13581                           
 13582                           ;i2c_master.c: 551: SSP1ADD = 0x27;
 13583  090F  3027               	movlw	39
 13584  0910  0092               	movwf	18	;volatile
 13585                           
 13586                           ;i2c_master.c: 552: SSP1CON1bits.SSPEN = 1;
 13587  0911  1695               	bsf	21,5	;volatile
 13588                           
 13589                           ;i2c_master.c: 553: return 1;
 13590                           ;	Return value of _I2C_MasterOpen is never used
 13591  0912  0008               	return
 13592  0913                     __end_of_I2C_MasterOpen:	
 13593                           ;i2c_master.c: 554: }
 13594                           ;i2c_master.c: 555: return 0;
 13595                           ;	Return value of _I2C_MasterOpen is never used
 13596                           
 13597                           
 13598                           	psect	text43
 13599  0837                     __ptext43:	
 13600 ;; *************** function _I2C_MasterEnableIrq *****************
 13601 ;; Defined at:
 13602 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;		None
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		None
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;Total ram usage:        0 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    7
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_I2C_Open
 13627 ;;		_I2C_SetTimeOut
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           
 13632                           ;psect for function _I2C_MasterEnableIrq
 13633  0837                     _I2C_MasterEnableIrq:	
 13634                           
 13635                           ;i2c_master.c: 629: PIE1bits.SSP1IE = 1;
 13636                           
 13637                           ;incstack = 0
 13638                           ; Regs used in _I2C_MasterEnableIrq: []
 13639  0837  0021               	movlb	1	; select bank1
 13640  0838  1590               	bsf	16,3	;volatile
 13641  0839  0008               	return
 13642  083A                     __end_of_I2C_MasterEnableIrq:	
 13643                           
 13644                           	psect	text44
 13645  0862                     __ptext44:	
 13646 ;; *************** function _I2C_MasterRead *****************
 13647 ;; Defined at:
 13648 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;		None
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;		None
 13653 ;; Return value:  Size  Location     Type
 13654 ;;                  1    wreg      enum E92
 13655 ;; Registers used:
 13656 ;;		wreg, status,2, status,0, pclath, cstack
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;Total ram usage:        0 bytes
 13667 ;; Hardware stack levels used:    1
 13668 ;; Hardware stack levels required when called:    9
 13669 ;; This function calls:
 13670 ;;		_I2C_MasterOperation
 13671 ;; This function is called by:
 13672 ;;		_I2C_ReadNBytes
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function _I2C_MasterRead
 13678  0862                     _I2C_MasterRead:	
 13679                           
 13680                           ;i2c_master.c: 249: return I2C_MasterOperation(1);
 13681                           ;	Return value of _I2C_MasterRead is never used
 13682                           
 13683                           ;incstack = 0
 13684                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
 13685  0862  3001               	movlw	1
 13686  0863  318A  2264         	fcall	_I2C_MasterOperation
 13687  0865  0008               	return
 13688  0866                     __end_of_I2C_MasterRead:	
 13689                           
 13690                           	psect	text45
 13691  0A64                     __ptext45:	
 13692 ;; *************** function _I2C_MasterOperation *****************
 13693 ;; Defined at:
 13694 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;  read            1    wreg     unsigned char 
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  read            1    5[BANK0 ] unsigned char 
 13699 ;;  returnValue     1    6[BANK0 ] enum E92
 13700 ;; Return value:  Size  Location     Type
 13701 ;;                  1    wreg      enum E92
 13702 ;; Registers used:
 13703 ;;		wreg, status,2, status,0, pclath, cstack
 13704 ;; Tracked objects:
 13705 ;;		On entry : 0/0
 13706 ;;		On exit  : 0/0
 13707 ;;		Unchanged: 0/0
 13708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13712 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13713 ;;Total ram usage:        3 bytes
 13714 ;; Hardware stack levels used:    1
 13715 ;; Hardware stack levels required when called:    8
 13716 ;; This function calls:
 13717 ;;		_I2C_MasterStart
 13718 ;; This function is called by:
 13719 ;;		_I2C_MasterRead
 13720 ;;		_I2C_MasterWrite
 13721 ;; This function uses a non-reentrant model
 13722 ;;
 13723                           
 13724                           
 13725                           ;psect for function _I2C_MasterOperation
 13726  0A64                     _I2C_MasterOperation:	
 13727                           
 13728                           ;incstack = 0
 13729                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
 13730                           ;I2C_MasterOperation@read stored from wreg
 13731  0A64  0020               	movlb	0	; select bank0
 13732  0A65  00A5               	movwf	I2C_MasterOperation@read
 13733                           
 13734                           ;i2c_master.c: 228: i2c_error_t returnValue = I2C_BUSY;
 13735  0A66  01A6               	clrf	I2C_MasterOperation@returnValue
 13736  0A67  0AA6               	incf	I2C_MasterOperation@returnValue,f
 13737                           
 13738                           ;i2c_master.c: 229: if(!I2C_Status.busy)
 13739  0A68  0022               	movlb	2	; select bank2
 13740  0A69  18BD               	btfsc	(_I2C_Status^(0+256)+29),1
 13741  0A6A  2A7D               	goto	l3253
 13742                           
 13743                           ;i2c_master.c: 230: {
 13744                           ;i2c_master.c: 231: I2C_Status.busy = 1;
 13745  0A6B  14BD               	bsf	(_I2C_Status^(0+256)+29),1
 13746                           
 13747                           ;i2c_master.c: 232: returnValue = I2C_NOERR;
 13748  0A6C  0020               	movlb	0	; select bank0
 13749  0A6D  01A6               	clrf	I2C_MasterOperation@returnValue
 13750                           
 13751                           ;i2c_master.c: 234: if(read)
 13752  0A6E  0825               	movf	I2C_MasterOperation@read,w
 13753  0A6F  1903               	btfsc	3,2
 13754  0A70  2A75               	goto	l3249
 13755                           
 13756                           ;i2c_master.c: 235: {
 13757                           ;i2c_master.c: 236: I2C_Status.state = I2C_SEND_ADR_READ;
 13758  0A71  0022               	movlb	2	; select bank2
 13759  0A72  01BB               	clrf	(_I2C_Status^(0+256)+27)
 13760  0A73  0ABB               	incf	(_I2C_Status^(0+256)+27),f
 13761                           
 13762                           ;i2c_master.c: 237: }
 13763  0A74  2A7B               	goto	l3251
 13764  0A75                     l3249:	
 13765                           
 13766                           ;i2c_master.c: 238: else
 13767                           ;i2c_master.c: 239: {
 13768                           ;i2c_master.c: 240: I2C_Status.state = I2C_SEND_ADR_WRITE;
 13769  0A75  3002               	movlw	2
 13770  0A76  0020               	movlb	0	; select bank0
 13771  0A77  00A4               	movwf	??_I2C_MasterOperation
 13772  0A78  0824               	movf	??_I2C_MasterOperation,w
 13773  0A79  0022               	movlb	2	; select bank2
 13774  0A7A  00BB               	movwf	(_I2C_Status^(0+256)+27)
 13775  0A7B                     l3251:	
 13776                           
 13777                           ;i2c_master.c: 241: }
 13778                           ;i2c_master.c: 242: I2C_MasterStart();
 13779  0A7B  3188  2034         	fcall	_I2C_MasterStart
 13780  0A7D                     l3253:	
 13781                           
 13782                           ;i2c_master.c: 243: }
 13783                           ;i2c_master.c: 244: return returnValue;
 13784  0A7D  0020               	movlb	0	; select bank0
 13785  0A7E  0826               	movf	I2C_MasterOperation@returnValue,w
 13786  0A7F  0008               	return
 13787  0A80                     __end_of_I2C_MasterOperation:	
 13788                           
 13789                           	psect	text46
 13790  0834                     __ptext46:	
 13791 ;; *************** function _I2C_MasterStart *****************
 13792 ;; Defined at:
 13793 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;		None
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		None
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;Total ram usage:        0 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    7
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_I2C_MasterOperation
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           
 13822                           ;psect for function _I2C_MasterStart
 13823  0834                     _I2C_MasterStart:	
 13824                           
 13825                           ;i2c_master.c: 591: SSP1CON2bits.SEN = 1;
 13826                           
 13827                           ;incstack = 0
 13828                           ; Regs used in _I2C_MasterStart: []
 13829  0834  0024               	movlb	4	; select bank4
 13830  0835  1416               	bsf	22,0	;volatile
 13831  0836  0008               	return
 13832  0837                     __end_of_I2C_MasterStart:	
 13833                           
 13834                           	psect	text47
 13835  0AB9                     __ptext47:	
 13836 ;; *************** function _I2C_Close *****************
 13837 ;; Defined at:
 13838 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;		None
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;  returnValue     1    5[BANK0 ] enum E92
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      enum E92
 13845 ;; Registers used:
 13846 ;;		wreg, status,2, status,0, pclath, cstack
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;Total ram usage:        2 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; Hardware stack levels required when called:    8
 13859 ;; This function calls:
 13860 ;;		_I2C_MasterClearIrq
 13861 ;;		_I2C_MasterClose
 13862 ;;		_I2C_MasterDisableIrq
 13863 ;; This function is called by:
 13864 ;;		_I2C_WriteNBytes
 13865 ;;		_I2C_ReadNBytes
 13866 ;;		_I2C_Read1ByteRegister
 13867 ;;		_I2C_Read2ByteRegister
 13868 ;;		_I2C_Write1ByteRegister
 13869 ;;		_I2C_Write2ByteRegister
 13870 ;;		_I2C_ReadDataBlock
 13871 ;; This function uses a non-reentrant model
 13872 ;;
 13873                           
 13874                           
 13875                           ;psect for function _I2C_Close
 13876  0AB9                     _I2C_Close:	
 13877                           
 13878                           ;i2c_master.c: 213: i2c_error_t returnValue = I2C_BUSY;
 13879                           
 13880                           ;incstack = 0
 13881                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 13882  0AB9  0020               	movlb	0	; select bank0
 13883  0ABA  01A5               	clrf	I2C_Close@returnValue
 13884  0ABB  0AA5               	incf	I2C_Close@returnValue,f
 13885                           
 13886                           ;i2c_master.c: 214: if(!I2C_Status.busy)
 13887  0ABC  0022               	movlb	2	; select bank2
 13888  0ABD  18BD               	btfsc	(_I2C_Status^(0+256)+29),1
 13889  0ABE  2AD4               	goto	l3417
 13890                           
 13891                           ;i2c_master.c: 215: {
 13892                           ;i2c_master.c: 216: I2C_Status.inUse = 0;
 13893  0ABF  113D               	bcf	(_I2C_Status^(0+256)+29),2
 13894                           
 13895                           ;i2c_master.c: 217: I2C_Status.address = 0xff;
 13896  0AC0  30FF               	movlw	255
 13897  0AC1  0020               	movlb	0	; select bank0
 13898  0AC2  00A4               	movwf	??_I2C_Close
 13899  0AC3  0824               	movf	??_I2C_Close,w
 13900  0AC4  0022               	movlb	2	; select bank2
 13901  0AC5  00B6               	movwf	(_I2C_Status^(0+256)+22)
 13902                           
 13903                           ;i2c_master.c: 218: I2C_MasterClearIrq();
 13904  0AC6  3188  202B  318A   	fcall	_I2C_MasterClearIrq
 13905                           
 13906                           ;i2c_master.c: 219: I2C_MasterDisableIrq();
 13907  0AC9  3188  2031  318A   	fcall	_I2C_MasterDisableIrq
 13908                           
 13909                           ;i2c_master.c: 220: I2C_MasterClose();
 13910  0ACC  3188  202E         	fcall	_I2C_MasterClose
 13911                           
 13912                           ;i2c_master.c: 221: returnValue = I2C_Status.error;
 13913  0ACE  0022               	movlb	2	; select bank2
 13914  0ACF  083C               	movf	(_I2C_Status^(0+256)+28),w
 13915  0AD0  0020               	movlb	0	; select bank0
 13916  0AD1  00A4               	movwf	??_I2C_Close
 13917  0AD2  0824               	movf	??_I2C_Close,w
 13918  0AD3  00A5               	movwf	I2C_Close@returnValue
 13919  0AD4                     l3417:	
 13920                           
 13921                           ;i2c_master.c: 222: }
 13922                           ;i2c_master.c: 223: return returnValue;
 13923  0AD4  0020               	movlb	0	; select bank0
 13924  0AD5  0825               	movf	I2C_Close@returnValue,w
 13925  0AD6  0008               	return
 13926  0AD7                     __end_of_I2C_Close:	
 13927                           
 13928                           	psect	text48
 13929  0831                     __ptext48:	
 13930 ;; *************** function _I2C_MasterDisableIrq *****************
 13931 ;; Defined at:
 13932 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
 13933 ;; Parameters:    Size  Location     Type
 13934 ;;		None
 13935 ;; Auto vars:     Size  Location     Type
 13936 ;;		None
 13937 ;; Return value:  Size  Location     Type
 13938 ;;                  1    wreg      void 
 13939 ;; Registers used:
 13940 ;;		None
 13941 ;; Tracked objects:
 13942 ;;		On entry : 0/0
 13943 ;;		On exit  : 0/0
 13944 ;;		Unchanged: 0/0
 13945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;Total ram usage:        0 bytes
 13951 ;; Hardware stack levels used:    1
 13952 ;; Hardware stack levels required when called:    7
 13953 ;; This function calls:
 13954 ;;		Nothing
 13955 ;; This function is called by:
 13956 ;;		_I2C_Close
 13957 ;;		_I2C_SetTimeOut
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _I2C_MasterDisableIrq
 13963  0831                     _I2C_MasterDisableIrq:	
 13964                           
 13965                           ;i2c_master.c: 639: PIE1bits.SSP1IE = 0;
 13966                           
 13967                           ;incstack = 0
 13968                           ; Regs used in _I2C_MasterDisableIrq: []
 13969  0831  0021               	movlb	1	; select bank1
 13970  0832  1190               	bcf	16,3	;volatile
 13971  0833  0008               	return
 13972  0834                     __end_of_I2C_MasterDisableIrq:	
 13973                           
 13974                           	psect	text49
 13975  082E                     __ptext49:	
 13976 ;; *************** function _I2C_MasterClose *****************
 13977 ;; Defined at:
 13978 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
 13979 ;; Parameters:    Size  Location     Type
 13980 ;;		None
 13981 ;; Auto vars:     Size  Location     Type
 13982 ;;		None
 13983 ;; Return value:  Size  Location     Type
 13984 ;;                  1    wreg      void 
 13985 ;; Registers used:
 13986 ;;		None
 13987 ;; Tracked objects:
 13988 ;;		On entry : 0/0
 13989 ;;		On exit  : 0/0
 13990 ;;		Unchanged: 0/0
 13991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;Total ram usage:        0 bytes
 13997 ;; Hardware stack levels used:    1
 13998 ;; Hardware stack levels required when called:    7
 13999 ;; This function calls:
 14000 ;;		Nothing
 14001 ;; This function is called by:
 14002 ;;		_I2C_Close
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006                           
 14007                           ;psect for function _I2C_MasterClose
 14008  082E                     _I2C_MasterClose:	
 14009                           
 14010                           ;i2c_master.c: 561: SSP1CON1bits.SSPEN = 0;
 14011                           
 14012                           ;incstack = 0
 14013                           ; Regs used in _I2C_MasterClose: []
 14014  082E  0024               	movlb	4	; select bank4
 14015  082F  1295               	bcf	21,5	;volatile
 14016  0830  0008               	return
 14017  0831                     __end_of_I2C_MasterClose:	
 14018                           
 14019                           	psect	text50
 14020  082B                     __ptext50:	
 14021 ;; *************** function _I2C_MasterClearIrq *****************
 14022 ;; Defined at:
 14023 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;		None
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;		None
 14028 ;; Return value:  Size  Location     Type
 14029 ;;                  1    wreg      void 
 14030 ;; Registers used:
 14031 ;;		None
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        0 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    7
 14044 ;; This function calls:
 14045 ;;		Nothing
 14046 ;; This function is called by:
 14047 ;;		_I2C_Open
 14048 ;;		_I2C_Close
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           
 14053                           ;psect for function _I2C_MasterClearIrq
 14054  082B                     _I2C_MasterClearIrq:	
 14055                           
 14056                           ;i2c_master.c: 644: PIR1bits.SSP1IF = 0;
 14057                           
 14058                           ;incstack = 0
 14059                           ; Regs used in _I2C_MasterClearIrq: []
 14060  082B  0020               	movlb	0	; select bank0
 14061  082C  1190               	bcf	16,3	;volatile
 14062  082D  0008               	return
 14063  082E                     __end_of_I2C_MasterClearIrq:	
 14064                           
 14065                           	psect	text51
 14066  0F8F                     __ptext51:	
 14067 ;; *************** function _COS_TmrHandler *****************
 14068 ;; Defined at:
 14069 ;;		line 92 in file "SourceFiles/COS/COS_Main.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;		None
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;  tempbyte2       1    9[BANK0 ] unsigned char 
 14074 ;;  tempbyte1       1    8[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		wreg, status,2, status,0
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:        6 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    7
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_main
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _COS_TmrHandler
 14100  0F8F                     _COS_TmrHandler:	
 14101                           
 14102                           ;COS_Main.c: 94: UINT_8 tempbyte1, tempbyte2;
 14103                           ;COS_Main.c: 95: tempbyte2 = TMR1H;
 14104                           
 14105                           ;incstack = 0
 14106                           ; Regs used in _COS_TmrHandler: [wreg+status,2+status,0]
 14107  0F8F  0020               	movlb	0	; select bank0
 14108  0F90  0817               	movf	23,w	;volatile
 14109  0F91  00A4               	movwf	??_COS_TmrHandler
 14110  0F92  0824               	movf	??_COS_TmrHandler,w
 14111  0F93  00A9               	movwf	COS_TmrHandler@tempbyte2
 14112                           
 14113                           ;COS_Main.c: 96: tempbyte1 = TMR1L;
 14114  0F94  0816               	movf	22,w	;volatile
 14115  0F95  00A4               	movwf	??_COS_TmrHandler
 14116  0F96  0824               	movf	??_COS_TmrHandler,w
 14117  0F97  00A8               	movwf	COS_TmrHandler@tempbyte1
 14118                           
 14119                           ;COS_Main.c: 97: if (tempbyte2 != TMR1H)
 14120  0F98  0829               	movf	COS_TmrHandler@tempbyte2,w
 14121  0F99  0617               	xorwf	23,w	;volatile
 14122  0F9A  1903               	skipnz
 14123  0F9B  2FA4               	goto	l899
 14124                           
 14125                           ;COS_Main.c: 98: {
 14126                           ;COS_Main.c: 99: tempbyte2 = TMR1H;
 14127  0F9C  0817               	movf	23,w	;volatile
 14128  0F9D  00A4               	movwf	??_COS_TmrHandler
 14129  0F9E  0824               	movf	??_COS_TmrHandler,w
 14130  0F9F  00A9               	movwf	COS_TmrHandler@tempbyte2
 14131                           
 14132                           ;COS_Main.c: 100: tempbyte1 = TMR1L;
 14133  0FA0  0816               	movf	22,w	;volatile
 14134  0FA1  00A4               	movwf	??_COS_TmrHandler
 14135  0FA2  0824               	movf	??_COS_TmrHandler,w
 14136  0FA3  00A8               	movwf	COS_TmrHandler@tempbyte1
 14137  0FA4                     l899:	
 14138                           
 14139                           ;COS_Main.c: 101: }
 14140                           ;COS_Main.c: 102: COS_tcnt_val = (UINT_16) (tempbyte2 << 8)&0xff00;
 14141  0FA4  0829               	movf	COS_TmrHandler@tempbyte2,w
 14142  0FA5  00A4               	movwf	??_COS_TmrHandler
 14143  0FA6  01A5               	clrf	??_COS_TmrHandler+1
 14144  0FA7  0824               	movf	??_COS_TmrHandler,w
 14145  0FA8  00A5               	movwf	??_COS_TmrHandler+1
 14146  0FA9  01A4               	clrf	??_COS_TmrHandler
 14147  0FAA  3000               	movlw	0
 14148  0FAB  0524               	andwf	??_COS_TmrHandler,w
 14149  0FAC  0021               	movlb	1	; select bank1
 14150  0FAD  00AE               	movwf	_COS_tcnt_val^(0+128)
 14151  0FAE  30FF               	movlw	255
 14152  0FAF  0020               	movlb	0	; select bank0
 14153  0FB0  0525               	andwf	??_COS_TmrHandler+1,w
 14154  0FB1  0021               	movlb	1	; select bank1
 14155  0FB2  00AF               	movwf	(_COS_tcnt_val+1)^(0+128)
 14156                           
 14157                           ;COS_Main.c: 103: COS_tcnt_val = COS_tcnt_val | (UINT_16) (tempbyte1 & 0x00ff);
 14158  0FB3  082E               	movf	_COS_tcnt_val^(0+128),w
 14159  0FB4  0020               	movlb	0	; select bank0
 14160  0FB5  0428               	iorwf	COS_TmrHandler@tempbyte1,w
 14161  0FB6  0021               	movlb	1	; select bank1
 14162  0FB7  00AE               	movwf	_COS_tcnt_val^(0+128)
 14163  0FB8  082F               	movf	(_COS_tcnt_val+1)^(0+128),w
 14164  0FB9  00AF               	movwf	(_COS_tcnt_val+1)^(0+128)
 14165                           
 14166                           ;COS_Main.c: 105: if (((UINT_16) ((UINT_16) COS_tcnt_val - (UINT_16) COS_tcnt_lst) >= (U
      +                          INT_16) 1000))
 14167  0FBA  092C               	comf	_COS_tcnt_lst^(0+128),w
 14168  0FBB  0020               	movlb	0	; select bank0
 14169  0FBC  00A4               	movwf	??_COS_TmrHandler
 14170  0FBD  0021               	movlb	1	; select bank1
 14171  0FBE  092D               	comf	(_COS_tcnt_lst+1)^(0+128),w
 14172  0FBF  0020               	movlb	0	; select bank0
 14173  0FC0  00A5               	movwf	??_COS_TmrHandler+1
 14174  0FC1  0AA4               	incf	??_COS_TmrHandler,f
 14175  0FC2  1903               	skipnz
 14176  0FC3  0AA5               	incf	??_COS_TmrHandler+1,f
 14177  0FC4  0021               	movlb	1	; select bank1
 14178  0FC5  082E               	movf	_COS_tcnt_val^(0+128),w
 14179  0FC6  0020               	movlb	0	; select bank0
 14180  0FC7  0724               	addwf	??_COS_TmrHandler,w
 14181  0FC8  00A6               	movwf	??_COS_TmrHandler+2
 14182  0FC9  0021               	movlb	1	; select bank1
 14183  0FCA  082F               	movf	(_COS_tcnt_val+1)^(0+128),w
 14184  0FCB  0020               	movlb	0	; select bank0
 14185  0FCC  3D25               	addwfc	??_COS_TmrHandler+1,w
 14186  0FCD  00A7               	movwf	??_COS_TmrHandler+3
 14187  0FCE  3003               	movlw	3
 14188  0FCF  0227               	subwf	??_COS_TmrHandler+3,w
 14189  0FD0  30E8               	movlw	232
 14190  0FD1  1903               	skipnz
 14191  0FD2  0226               	subwf	??_COS_TmrHandler+2,w
 14192  0FD3  1C03               	skipc
 14193  0FD4  0008               	return
 14194                           
 14195                           ;COS_Main.c: 106: {
 14196                           ;COS_Main.c: 107: COS_tcnt_lst = COS_tcnt_lst + 1000;
 14197  0FD5  0021               	movlb	1	; select bank1
 14198  0FD6  082C               	movf	_COS_tcnt_lst^(0+128),w
 14199  0FD7  3EE8               	addlw	232
 14200  0FD8  00AC               	movwf	_COS_tcnt_lst^(0+128)
 14201  0FD9  3003               	movlw	3
 14202  0FDA  3D2D               	addwfc	(_COS_tcnt_lst+1)^(0+128),w
 14203  0FDB  00AD               	movwf	(_COS_tcnt_lst+1)^(0+128)
 14204                           
 14205                           ;COS_Main.c: 108: COS_ms_tmr++;
 14206  0FDC  3001               	movlw	1
 14207  0FDD  07B4               	addwf	_COS_ms_tmr^(0+128),f
 14208  0FDE  3000               	movlw	0
 14209  0FDF  3DB5               	addwfc	(_COS_ms_tmr+1)^(0+128),f
 14210                           
 14211                           ;COS_Main.c: 110: if (COS_ms_tmr >= 1000)
 14212  0FE0  3003               	movlw	3
 14213  0FE1  0235               	subwf	(_COS_ms_tmr+1)^(0+128),w
 14214  0FE2  30E8               	movlw	232
 14215  0FE3  1903               	skipnz
 14216  0FE4  0234               	subwf	_COS_ms_tmr^(0+128),w
 14217  0FE5  1C03               	skipc
 14218  0FE6  2FED               	goto	l4445
 14219                           
 14220                           ;COS_Main.c: 111: {
 14221                           ;COS_Main.c: 112: COS_ms_tmr = 0;
 14222  0FE7  01B4               	clrf	_COS_ms_tmr^(0+128)
 14223  0FE8  01B5               	clrf	(_COS_ms_tmr+1)^(0+128)
 14224                           
 14225                           ;COS_Main.c: 113: COS_sec_tmr++;
 14226  0FE9  3001               	movlw	1
 14227  0FEA  07B2               	addwf	_COS_sec_tmr^(0+128),f	;volatile
 14228  0FEB  3000               	movlw	0
 14229  0FEC  3DB3               	addwfc	(_COS_sec_tmr+1)^(0+128),f	;volatile
 14230  0FED                     l4445:	
 14231                           
 14232                           ;COS_Main.c: 114: }
 14233                           ;COS_Main.c: 115: COS_tsk_tmr++;
 14234  0FED  3001               	movlw	1
 14235  0FEE  07B0               	addwf	_COS_tsk_tmr^(0+128),f
 14236  0FEF  3000               	movlw	0
 14237  0FF0  3DB1               	addwfc	(_COS_tsk_tmr+1)^(0+128),f
 14238                           
 14239                           ;COS_Main.c: 116: if ((COS_tsk_tmr >= 10) && (!COS_tsk_ena))
 14240  0FF1  3000               	movlw	0
 14241  0FF2  0231               	subwf	(_COS_tsk_tmr+1)^(0+128),w
 14242  0FF3  300A               	movlw	10
 14243  0FF4  1903               	skipnz
 14244  0FF5  0230               	subwf	_COS_tsk_tmr^(0+128),w
 14245  0FF6  1C03               	skipc
 14246  0FF7  0008               	return
 14247  0FF8  086E               	movf	_COS_tsk_ena^(0+128),w
 14248  0FF9  1D03               	btfss	3,2
 14249  0FFA  0008               	return
 14250                           
 14251                           ;COS_Main.c: 117: {
 14252                           ;COS_Main.c: 118: COS_tsk_tmr = 0;
 14253  0FFB  01B0               	clrf	_COS_tsk_tmr^(0+128)
 14254  0FFC  01B1               	clrf	(_COS_tsk_tmr+1)^(0+128)
 14255                           
 14256                           ;COS_Main.c: 119: COS_tsk_ena = 1;
 14257  0FFD  01EE               	clrf	_COS_tsk_ena^(0+128)
 14258  0FFE  0AEE               	incf	_COS_tsk_ena^(0+128),f
 14259  0FFF  0008               	return
 14260  1000                     __end_of_COS_TmrHandler:	
 14261                           
 14262                           	psect	text52
 14263  0DAC                     __ptext52:	
 14264 ;; *************** function _COS_Init *****************
 14265 ;; Defined at:
 14266 ;;		line 32 in file "SourceFiles/COS/COS_Main.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;		None
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  tempbyte2       1    8[BANK0 ] unsigned char 
 14271 ;;  tempbyte1       1    7[BANK0 ] unsigned char 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  1    wreg      void 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0, pclath, cstack
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;Total ram usage:        5 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    8
 14288 ;; This function calls:
 14289 ;;		_COS_TimerSetup
 14290 ;; This function is called by:
 14291 ;;		_main
 14292 ;; This function uses a non-reentrant model
 14293 ;;
 14294                           
 14295                           
 14296                           ;psect for function _COS_Init
 14297  0DAC                     _COS_Init:	
 14298                           
 14299                           ;COS_Main.c: 34: UINT_8 tempbyte1, tempbyte2;
 14300                           ;COS_Main.c: 36: COS_TimerSetup();
 14301                           
 14302                           ;incstack = 0
 14303                           ; Regs used in _COS_Init: [wreg+status,2+status,0+pclath+cstack]
 14304  0DAC  3188  208A  318D   	fcall	_COS_TimerSetup
 14305                           
 14306                           ;COS_Main.c: 41: COS_tsk_ind = 0;
 14307  0DAF  0021               	movlb	1	; select bank1
 14308  0DB0  01C8               	clrf	_COS_tsk_ind^(0+128)
 14309                           
 14310                           ;COS_Main.c: 42: COS_tsk_msk = 0x80;
 14311  0DB1  3080               	movlw	128
 14312  0DB2  0020               	movlb	0	; select bank0
 14313  0DB3  00A4               	movwf	??_COS_Init
 14314  0DB4  0824               	movf	??_COS_Init,w
 14315  0DB5  00EB               	movwf	_COS_tsk_msk
 14316                           
 14317                           ;COS_Main.c: 43: COS_tsk_ena = 1;
 14318  0DB6  0021               	movlb	1	; select bank1
 14319  0DB7  01EE               	clrf	_COS_tsk_ena^(0+128)
 14320  0DB8  0AEE               	incf	_COS_tsk_ena^(0+128),f
 14321                           
 14322                           ;COS_Main.c: 44: COS_ms_tmr = 0;
 14323  0DB9  01B4               	clrf	_COS_ms_tmr^(0+128)
 14324  0DBA  01B5               	clrf	(_COS_ms_tmr+1)^(0+128)
 14325                           
 14326                           ;COS_Main.c: 45: COS_sec_tmr = 0;
 14327  0DBB  01B2               	clrf	_COS_sec_tmr^(0+128)	;volatile
 14328  0DBC  01B3               	clrf	(_COS_sec_tmr+1)^(0+128)	;volatile
 14329                           
 14330                           ;COS_Main.c: 46: COS_tsk_tmr = 0;
 14331  0DBD  01B0               	clrf	_COS_tsk_tmr^(0+128)
 14332  0DBE  01B1               	clrf	(_COS_tsk_tmr+1)^(0+128)
 14333                           
 14334                           ;COS_Main.c: 48: tempbyte2 = TMR1H;
 14335  0DBF  0020               	movlb	0	; select bank0
 14336  0DC0  0817               	movf	23,w	;volatile
 14337  0DC1  00A4               	movwf	??_COS_Init
 14338  0DC2  0824               	movf	??_COS_Init,w
 14339  0DC3  00A8               	movwf	COS_Init@tempbyte2
 14340                           
 14341                           ;COS_Main.c: 49: tempbyte1 = TMR1L;
 14342  0DC4  0816               	movf	22,w	;volatile
 14343  0DC5  00A4               	movwf	??_COS_Init
 14344  0DC6  0824               	movf	??_COS_Init,w
 14345  0DC7  00A7               	movwf	COS_Init@tempbyte1
 14346                           
 14347                           ;COS_Main.c: 50: if (tempbyte2 != TMR1H)
 14348  0DC8  0828               	movf	COS_Init@tempbyte2,w
 14349  0DC9  0617               	xorwf	23,w	;volatile
 14350  0DCA  1903               	skipnz
 14351  0DCB  2DD4               	goto	l892
 14352                           
 14353                           ;COS_Main.c: 51: {
 14354                           ;COS_Main.c: 52: tempbyte2 = TMR1H;
 14355  0DCC  0817               	movf	23,w	;volatile
 14356  0DCD  00A4               	movwf	??_COS_Init
 14357  0DCE  0824               	movf	??_COS_Init,w
 14358  0DCF  00A8               	movwf	COS_Init@tempbyte2
 14359                           
 14360                           ;COS_Main.c: 53: tempbyte1 = TMR1L;
 14361  0DD0  0816               	movf	22,w	;volatile
 14362  0DD1  00A4               	movwf	??_COS_Init
 14363  0DD2  0824               	movf	??_COS_Init,w
 14364  0DD3  00A7               	movwf	COS_Init@tempbyte1
 14365  0DD4                     l892:	
 14366                           
 14367                           ;COS_Main.c: 54: }
 14368                           ;COS_Main.c: 55: COS_tcnt_val = ((UINT_16)tempbyte2 << 8)&0xff00;
 14369  0DD4  0828               	movf	COS_Init@tempbyte2,w
 14370  0DD5  00A4               	movwf	??_COS_Init
 14371  0DD6  01A5               	clrf	??_COS_Init+1
 14372  0DD7  0824               	movf	??_COS_Init,w
 14373  0DD8  00A5               	movwf	??_COS_Init+1
 14374  0DD9  01A4               	clrf	??_COS_Init
 14375  0DDA  3000               	movlw	0
 14376  0DDB  0524               	andwf	??_COS_Init,w
 14377  0DDC  0021               	movlb	1	; select bank1
 14378  0DDD  00AE               	movwf	_COS_tcnt_val^(0+128)
 14379  0DDE  30FF               	movlw	255
 14380  0DDF  0020               	movlb	0	; select bank0
 14381  0DE0  0525               	andwf	??_COS_Init+1,w
 14382  0DE1  0021               	movlb	1	; select bank1
 14383  0DE2  00AF               	movwf	(_COS_tcnt_val+1)^(0+128)
 14384                           
 14385                           ;COS_Main.c: 56: COS_tcnt_val = COS_tcnt_val | ((UINT_16)tempbyte1 & 0x00ff);
 14386  0DE3  082E               	movf	_COS_tcnt_val^(0+128),w
 14387  0DE4  0020               	movlb	0	; select bank0
 14388  0DE5  0427               	iorwf	COS_Init@tempbyte1,w
 14389  0DE6  0021               	movlb	1	; select bank1
 14390  0DE7  00AE               	movwf	_COS_tcnt_val^(0+128)
 14391  0DE8  082F               	movf	(_COS_tcnt_val+1)^(0+128),w
 14392  0DE9  00AF               	movwf	(_COS_tcnt_val+1)^(0+128)
 14393                           
 14394                           ;COS_Main.c: 57: COS_tcnt_lst = COS_tcnt_val;
 14395  0DEA  082F               	movf	(_COS_tcnt_val+1)^(0+128),w
 14396  0DEB  00AD               	movwf	(_COS_tcnt_lst+1)^(0+128)
 14397  0DEC  082E               	movf	_COS_tcnt_val^(0+128),w
 14398  0DED  00AC               	movwf	_COS_tcnt_lst^(0+128)
 14399  0DEE  0008               	return
 14400  0DEF                     __end_of_COS_Init:	
 14401                           
 14402                           	psect	text53
 14403  088A                     __ptext53:	
 14404 ;; *************** function _COS_TimerSetup *****************
 14405 ;; Defined at:
 14406 ;;		line 68 in file "SourceFiles/COS/COS_Main.c"
 14407 ;; Parameters:    Size  Location     Type
 14408 ;;		None
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;		None
 14411 ;; Return value:  Size  Location     Type
 14412 ;;                  1    wreg      void 
 14413 ;; Registers used:
 14414 ;;		wreg, status,2
 14415 ;; Tracked objects:
 14416 ;;		On entry : 0/0
 14417 ;;		On exit  : 0/0
 14418 ;;		Unchanged: 0/0
 14419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;Total ram usage:        0 bytes
 14425 ;; Hardware stack levels used:    1
 14426 ;; Hardware stack levels required when called:    7
 14427 ;; This function calls:
 14428 ;;		Nothing
 14429 ;; This function is called by:
 14430 ;;		_COS_Init
 14431 ;; This function uses a non-reentrant model
 14432 ;;
 14433                           
 14434                           
 14435                           ;psect for function _COS_TimerSetup
 14436  088A                     _COS_TimerSetup:	
 14437                           
 14438                           ;COS_Main.c: 72: TMR1H = 0;
 14439                           
 14440                           ;incstack = 0
 14441                           ; Regs used in _COS_TimerSetup: [wreg+status,2]
 14442  088A  0020               	movlb	0	; select bank0
 14443  088B  0197               	clrf	23	;volatile
 14444                           
 14445                           ;COS_Main.c: 73: TMR1L = 0;
 14446  088C  0196               	clrf	22	;volatile
 14447                           
 14448                           ;COS_Main.c: 78: T1CON = 0b00100001;
 14449  088D  3021               	movlw	33
 14450  088E  0098               	movwf	24	;volatile
 14451  088F  0008               	return
 14452  0890                     __end_of_COS_TimerSetup:	
 14453                           
 14454                           	psect	intentry
 14455  0004                     __pintentry:	
 14456 ;; *************** function _INTERRUPT_InterruptManager *****************
 14457 ;; Defined at:
 14458 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14459 ;; Parameters:    Size  Location     Type
 14460 ;;		None
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;		None
 14463 ;; Return value:  Size  Location     Type
 14464 ;;                  1    wreg      void 
 14465 ;; Registers used:
 14466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;Total ram usage:        1 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    6
 14479 ;; This function calls:
 14480 ;;		Absolute function
 14481 ;;		_EUSART_Receive_ISR
 14482 ;;		_EUSART_Transmit_ISR
 14483 ;;		_I2C_MasterIsr
 14484 ;;		_TMR2_ISR
 14485 ;; This function is called by:
 14486 ;;		Interrupt level 1
 14487 ;; This function uses a non-reentrant model
 14488 ;;
 14489                           
 14490  0004                     _INTERRUPT_InterruptManager:	
 14491                           
 14492                           ;incstack = 0
 14493  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14494                           
 14495                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14496  0005  3180               	pagesel	$
 14497  0006  0020               	movlb	0	; select bank0
 14498  0007  087F               	movf	127,w
 14499  0008  00A3               	movwf	??_INTERRUPT_InterruptManager
 14500                           
 14501                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 14502  0009  1F0B               	btfss	11,6	;volatile
 14503  000A  2847               	goto	i1l478
 14504                           
 14505                           ;interrupt_manager.c: 56: {
 14506                           ;interrupt_manager.c: 57: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14507  000B  0021               	movlb	1	; select bank1
 14508  000C  1E10               	btfss	16,4	;volatile
 14509  000D  2818               	goto	i1l467
 14510  000E  0020               	movlb	0	; select bank0
 14511  000F  1E10               	btfss	16,4	;volatile
 14512  0010  2818               	goto	i1l467
 14513                           
 14514                           ;interrupt_manager.c: 58: {
 14515                           ;interrupt_manager.c: 59: EUSART_TxDefaultInterruptHandler();
 14516  0011  0022               	movlb	2	; select bank2
 14517  0012  0869               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 14518  0013  008A               	movwf	10
 14519  0014  0868               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 14520  0015  000A               	callw
 14521  0016  3180               	pagesel	$
 14522                           
 14523                           ;interrupt_manager.c: 60: }
 14524  0017  2847               	goto	i1l478
 14525  0018                     i1l467:	
 14526                           
 14527                           ;interrupt_manager.c: 61: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 14528  0018  0021               	movlb	1	; select bank1
 14529  0019  1E90               	btfss	16,5	;volatile
 14530  001A  2825               	goto	i1l469
 14531  001B  0020               	movlb	0	; select bank0
 14532  001C  1E90               	btfss	16,5	;volatile
 14533  001D  2825               	goto	i1l469
 14534                           
 14535                           ;interrupt_manager.c: 62: {
 14536                           ;interrupt_manager.c: 63: EUSART_RxDefaultInterruptHandler();
 14537  001E  0022               	movlb	2	; select bank2
 14538  001F  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 14539  0020  008A               	movwf	10
 14540  0021  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 14541  0022  000A               	callw
 14542  0023  3180               	pagesel	$
 14543                           
 14544                           ;interrupt_manager.c: 64: }
 14545  0024  2847               	goto	i1l478
 14546  0025                     i1l469:	
 14547                           
 14548                           ;interrupt_manager.c: 65: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 14549  0025  0021               	movlb	1	; select bank1
 14550  0026  1D91               	btfss	17,3	;volatile
 14551  0027  2832               	goto	i1l471
 14552  0028  0020               	movlb	0	; select bank0
 14553  0029  1D91               	btfss	17,3	;volatile
 14554  002A  2832               	goto	i1l471
 14555                           
 14556                           ;interrupt_manager.c: 66: {
 14557                           ;interrupt_manager.c: 67: MSSP_InterruptHandler();
 14558  002B  0021               	movlb	1	; select bank1
 14559  002C  083B               	movf	(_MSSP_InterruptHandler+1)^(0+128),w
 14560  002D  008A               	movwf	10
 14561  002E  083A               	movf	_MSSP_InterruptHandler^(0+128),w
 14562  002F  000A               	callw
 14563  0030  3180               	pagesel	$
 14564                           
 14565                           ;interrupt_manager.c: 68: }
 14566  0031  2847               	goto	i1l478
 14567  0032                     i1l471:	
 14568                           
 14569                           ;interrupt_manager.c: 69: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 14570  0032  0021               	movlb	1	; select bank1
 14571  0033  1D90               	btfss	16,3	;volatile
 14572  0034  283F               	goto	i1l473
 14573  0035  0020               	movlb	0	; select bank0
 14574  0036  1D90               	btfss	16,3	;volatile
 14575  0037  283F               	goto	i1l473
 14576                           
 14577                           ;interrupt_manager.c: 70: {
 14578                           ;interrupt_manager.c: 71: MSSP_InterruptHandler();
 14579  0038  0021               	movlb	1	; select bank1
 14580  0039  083B               	movf	(_MSSP_InterruptHandler+1)^(0+128),w
 14581  003A  008A               	movwf	10
 14582  003B  083A               	movf	_MSSP_InterruptHandler^(0+128),w
 14583  003C  000A               	callw
 14584  003D  3180               	pagesel	$
 14585                           
 14586                           ;interrupt_manager.c: 72: }
 14587  003E  2847               	goto	i1l478
 14588  003F                     i1l473:	
 14589                           
 14590                           ;interrupt_manager.c: 73: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 14591  003F  0021               	movlb	1	; select bank1
 14592  0040  1C90               	btfss	16,1	;volatile
 14593  0041  2847               	goto	i1l478
 14594  0042  0020               	movlb	0	; select bank0
 14595  0043  1C90               	btfss	16,1	;volatile
 14596  0044  2847               	goto	i1l478
 14597                           
 14598                           ;interrupt_manager.c: 74: {
 14599                           ;interrupt_manager.c: 75: TMR2_ISR();
 14600  0045  3189  2144         	fcall	_TMR2_ISR
 14601  0047                     i1l478:	
 14602                           ;interrupt_manager.c: 82: else
 14603                           ;interrupt_manager.c: 83: {
 14604                           
 14605                           ;interrupt_manager.c: 80: }
 14606                           ;interrupt_manager.c: 81: }
 14607                           
 14608                           ;interrupt_manager.c: 77: else
 14609                           ;interrupt_manager.c: 78: {
 14610                           
 14611                           ;interrupt_manager.c: 76: }
 14612                           
 14613  0047  0020               	movlb	0	; select bank0
 14614  0048  0823               	movf	??_INTERRUPT_InterruptManager,w
 14615  0049  00FF               	movwf	127
 14616  004A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14617  004B  0009               	retfie
 14618  004C                     __end_of_INTERRUPT_InterruptManager:	
 14619                           
 14620                           	psect	text55
 14621  0944                     __ptext55:	
 14622 ;; *************** function _TMR2_ISR *****************
 14623 ;; Defined at:
 14624 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;		None
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;		None
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  1    wreg      void 
 14631 ;; Registers used:
 14632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        0 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    3
 14645 ;; This function calls:
 14646 ;;		_TMR2_CallBack
 14647 ;; This function is called by:
 14648 ;;		_INTERRUPT_InterruptManager
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           
 14653                           ;psect for function _TMR2_ISR
 14654  0944                     _TMR2_ISR:	
 14655                           
 14656                           ;tmr2.c: 167: static volatile unsigned int CountCallBack = 0;
 14657                           ;tmr2.c: 170: PIR1bits.TMR2IF = 0;
 14658                           
 14659                           ;incstack = 0
 14660                           ; Regs used in _TMR2_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14661  0944  0020               	movlb	0	; select bank0
 14662  0945  1090               	bcf	16,1	;volatile
 14663                           
 14664                           ;tmr2.c: 173: if (++CountCallBack >= 5)
 14665  0946  3001               	movlw	1
 14666  0947  0021               	movlb	1	; select bank1
 14667  0948  07B8               	addwf	TMR2_ISR@CountCallBack^(0+128),f	;volatile
 14668  0949  3000               	movlw	0
 14669  094A  3DB9               	addwfc	(TMR2_ISR@CountCallBack+1)^(0+128),f	;volatile
 14670  094B  3000               	movlw	0
 14671  094C  0239               	subwf	(TMR2_ISR@CountCallBack+1)^(0+128),w	;volatile
 14672  094D  3005               	movlw	5
 14673  094E  1903               	skipnz
 14674  094F  0238               	subwf	TMR2_ISR@CountCallBack^(0+128),w	;volatile
 14675  0950  1C03               	skipc
 14676  0951  0008               	return
 14677                           
 14678                           ;tmr2.c: 174: {
 14679                           ;tmr2.c: 176: TMR2_CallBack();
 14680  0952  3188  20FD         	fcall	_TMR2_CallBack
 14681                           
 14682                           ;tmr2.c: 179: CountCallBack = 0;
 14683  0954  0021               	movlb	1	; select bank1
 14684  0955  01B8               	clrf	TMR2_ISR@CountCallBack^(0+128)	;volatile
 14685  0956  01B9               	clrf	(TMR2_ISR@CountCallBack+1)^(0+128)	;volatile
 14686  0957  0008               	return
 14687  0958                     __end_of_TMR2_ISR:	
 14688                           
 14689                           	psect	text56
 14690  08FD                     __ptext56:	
 14691 ;; *************** function _TMR2_CallBack *****************
 14692 ;; Defined at:
 14693 ;;		line 183 in file "mcc_generated_files/tmr2.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;		None
 14696 ;; Auto vars:     Size  Location     Type
 14697 ;;		None
 14698 ;; Return value:  Size  Location     Type
 14699 ;;                  1    wreg      void 
 14700 ;; Registers used:
 14701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;Total ram usage:        0 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    2
 14714 ;; This function calls:
 14715 ;;		Absolute function
 14716 ;;		_Led2_PWM
 14717 ;;		_TMR2_DefaultInterruptHandler
 14718 ;; This function is called by:
 14719 ;;		_TMR2_ISR
 14720 ;; This function uses a non-reentrant model
 14721 ;;
 14722                           
 14723                           
 14724                           ;psect for function _TMR2_CallBack
 14725  08FD                     _TMR2_CallBack:	
 14726                           
 14727                           ;tmr2.c: 187: if(TMR2_InterruptHandler)
 14728                           
 14729                           ;incstack = 0
 14730                           ; Regs used in _TMR2_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14731  08FD  0022               	movlb	2	; select bank2
 14732  08FE  085E               	movf	_TMR2_InterruptHandler^(0+256),w
 14733  08FF  045F               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14734  0900  1903               	btfsc	3,2
 14735  0901  0008               	return
 14736                           
 14737                           ;tmr2.c: 188: {
 14738                           ;tmr2.c: 189: TMR2_InterruptHandler();
 14739  0902  085F               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14740  0903  008A               	movwf	10
 14741  0904  085E               	movf	_TMR2_InterruptHandler^(0+256),w
 14742  0905  000A               	callw
 14743  0906  3188               	pagesel	$
 14744  0907  0008               	return
 14745  0908                     __end_of_TMR2_CallBack:	
 14746                           
 14747                           	psect	text57
 14748  0ECD                     __ptext57:	
 14749 ;; *************** function _Led2_PWM *****************
 14750 ;; Defined at:
 14751 ;;		line 30 in file "SourceFiles/SunSensor/Led.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;		None
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;		None
 14756 ;; Return value:  Size  Location     Type
 14757 ;;                  1    wreg      void 
 14758 ;; Registers used:
 14759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14760 ;; Tracked objects:
 14761 ;;		On entry : 0/0
 14762 ;;		On exit  : 0/0
 14763 ;;		Unchanged: 0/0
 14764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;Total ram usage:        1 bytes
 14770 ;; Hardware stack levels used:    1
 14771 ;; Hardware stack levels required when called:    1
 14772 ;; This function calls:
 14773 ;;		_PWM3_LoadDutyValue
 14774 ;; This function is called by:
 14775 ;;		_main
 14776 ;;		_TMR2_CallBack
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780                           
 14781                           ;psect for function _Led2_PWM
 14782  0ECD                     _Led2_PWM:	
 14783                           
 14784                           ;Led.c: 32: switch (BreathState)
 14785                           
 14786                           ;incstack = 0
 14787                           ; Regs used in _Led2_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14788  0ECD  2F17               	goto	i1l4071
 14789  0ECE                     i1l4043:	
 14790                           ;Led.c: 33: {
 14791                           ;Led.c: 34: case 1:
 14792                           
 14793                           
 14794                           ;Led.c: 35: counter++;
 14795  0ECE  3001               	movlw	1
 14796  0ECF  0021               	movlb	1	; select bank1
 14797  0ED0  07AA               	addwf	_counter^(0+128),f
 14798  0ED1  3000               	movlw	0
 14799  0ED2  3DAB               	addwfc	(_counter+1)^(0+128),f
 14800                           
 14801                           ;Led.c: 36: if(counter > 100)
 14802  0ED3  3000               	movlw	0
 14803  0ED4  022B               	subwf	(_counter+1)^(0+128),w
 14804  0ED5  3065               	movlw	101
 14805  0ED6  1903               	skipnz
 14806  0ED7  022A               	subwf	_counter^(0+128),w
 14807  0ED8  1C03               	skipc
 14808  0ED9  2EDF               	goto	i1l4047
 14809                           
 14810                           ;Led.c: 37: {
 14811                           ;Led.c: 38: BreathState = 2;
 14812  0EDA  3002               	movlw	2
 14813  0EDB  00F4               	movwf	??_Led2_PWM
 14814  0EDC  0874               	movf	??_Led2_PWM,w
 14815  0EDD  00EB               	movwf	_BreathState^(0+128)
 14816                           
 14817                           ;Led.c: 39: }
 14818  0EDE  2F23               	goto	i1l4073
 14819  0EDF                     i1l4047:	
 14820                           
 14821                           ;Led.c: 40: else
 14822                           ;Led.c: 41: {
 14823                           ;Led.c: 42: dutyValue += 8;
 14824  0EDF  3008               	movlw	8
 14825  0EE0  07A8               	addwf	_dutyValue^(0+128),f
 14826  0EE1  3000               	movlw	0
 14827  0EE2  3DA9               	addwfc	(_dutyValue+1)^(0+128),f
 14828                           
 14829                           ;Led.c: 43: }
 14830                           ;Led.c: 44: break;
 14831  0EE3  2F23               	goto	i1l4073
 14832  0EE4                     i1l4049:	
 14833                           ;Led.c: 45: case 2:
 14834                           
 14835                           
 14836                           ;Led.c: 46: counter++;
 14837  0EE4  3001               	movlw	1
 14838  0EE5  07AA               	addwf	_counter^(0+128),f
 14839  0EE6  3000               	movlw	0
 14840  0EE7  3DAB               	addwfc	(_counter+1)^(0+128),f
 14841                           
 14842                           ;Led.c: 47: if (counter >= (100 + 200))
 14843  0EE8  3001               	movlw	1
 14844  0EE9  022B               	subwf	(_counter+1)^(0+128),w
 14845  0EEA  302C               	movlw	44
 14846  0EEB  1903               	skipnz
 14847  0EEC  022A               	subwf	_counter^(0+128),w
 14848  0EED  1C03               	skipc
 14849  0EEE  2EF4               	goto	i1l4055
 14850                           
 14851                           ;Led.c: 48: {
 14852                           ;Led.c: 49: BreathState = 3;
 14853  0EEF  3003               	movlw	3
 14854  0EF0  00F4               	movwf	??_Led2_PWM
 14855  0EF1  0874               	movf	??_Led2_PWM,w
 14856  0EF2  00EB               	movwf	_BreathState^(0+128)
 14857  0EF3  2F04               	goto	i1l4061
 14858  0EF4                     i1l4055:	
 14859                           ;Led.c: 53: }
 14860                           
 14861                           ;Led.c: 51: dutyValue = 0;
 14862                           
 14863                           
 14864                           ;Led.c: 54: else
 14865                           ;Led.c: 55: {
 14866                           ;Led.c: 56: if (dutyValue > 0)
 14867  0EF4  0828               	movf	_dutyValue^(0+128),w
 14868  0EF5  0429               	iorwf	(_dutyValue+1)^(0+128),w
 14869  0EF6  1903               	btfsc	3,2
 14870  0EF7  2F23               	goto	i1l4073
 14871                           
 14872                           ;Led.c: 57: {
 14873                           ;Led.c: 58: if (dutyValue > 4)
 14874  0EF8  3000               	movlw	0
 14875  0EF9  0229               	subwf	(_dutyValue+1)^(0+128),w
 14876  0EFA  3005               	movlw	5
 14877  0EFB  1903               	skipnz
 14878  0EFC  0228               	subwf	_dutyValue^(0+128),w
 14879  0EFD  1C03               	skipc
 14880  0EFE  2F04               	goto	i1l4061
 14881                           
 14882                           ;Led.c: 59: {
 14883                           ;Led.c: 60: dutyValue-=4;
 14884  0EFF  3004               	movlw	4
 14885  0F00  02A8               	subwf	_dutyValue^(0+128),f
 14886  0F01  3000               	movlw	0
 14887  0F02  3BA9               	subwfb	(_dutyValue+1)^(0+128),f
 14888                           
 14889                           ;Led.c: 61: }
 14890  0F03  2F23               	goto	i1l4073
 14891  0F04                     i1l4061:	
 14892                           
 14893                           ;Led.c: 62: else
 14894                           ;Led.c: 63: {
 14895                           ;Led.c: 64: dutyValue = 0;
 14896  0F04  01A8               	clrf	_dutyValue^(0+128)
 14897  0F05  01A9               	clrf	(_dutyValue+1)^(0+128)
 14898                           
 14899                           ;Led.c: 65: }
 14900                           ;Led.c: 67: }
 14901                           ;Led.c: 68: }
 14902                           ;Led.c: 69: break;
 14903  0F06  2F23               	goto	i1l4073
 14904  0F07                     i1l4063:	
 14905                           ;Led.c: 70: case 3:
 14906                           
 14907                           
 14908                           ;Led.c: 71: counter++;
 14909  0F07  3001               	movlw	1
 14910  0F08  07AA               	addwf	_counter^(0+128),f
 14911  0F09  3000               	movlw	0
 14912  0F0A  3DAB               	addwfc	(_counter+1)^(0+128),f
 14913                           
 14914                           ;Led.c: 72: if (counter > (100 + 200 + 100))
 14915  0F0B  3001               	movlw	1
 14916  0F0C  022B               	subwf	(_counter+1)^(0+128),w
 14917  0F0D  3091               	movlw	145
 14918  0F0E  1903               	skipnz
 14919  0F0F  022A               	subwf	_counter^(0+128),w
 14920  0F10  1C03               	skipc
 14921  0F11  2F23               	goto	i1l4073
 14922                           
 14923                           ;Led.c: 73: {
 14924                           ;Led.c: 74: counter = 0;
 14925  0F12  01AA               	clrf	_counter^(0+128)
 14926  0F13  01AB               	clrf	(_counter+1)^(0+128)
 14927                           
 14928                           ;Led.c: 75: BreathState = 1;
 14929  0F14  01EB               	clrf	_BreathState^(0+128)
 14930  0F15  0AEB               	incf	_BreathState^(0+128),f
 14931                           
 14932                           ;Led.c: 80: }
 14933                           
 14934                           ;Led.c: 79: break;
 14935                           
 14936                           ;Led.c: 78: default:
 14937                           
 14938                           ;Led.c: 76: }
 14939                           ;Led.c: 77: break;
 14940  0F16  2F23               	goto	i1l4073
 14941  0F17                     i1l4071:	
 14942  0F17  0021               	movlb	1	; select bank1
 14943  0F18  086B               	movf	_BreathState^(0+128),w
 14944                           
 14945                           ; Switch size 1, requested type "space"
 14946                           ; Number of cases is 3, Range of values is 1 to 3
 14947                           ; switch strategies available:
 14948                           ; Name         Instructions Cycles
 14949                           ; simple_byte           10     6 (average)
 14950                           ; direct_byte           15     9 (fixed)
 14951                           ; jumptable            263     9 (fixed)
 14952                           ;	Chosen strategy is simple_byte
 14953  0F19  3A01               	xorlw	1	; case 1
 14954  0F1A  1903               	skipnz
 14955  0F1B  2ECE               	goto	i1l4043
 14956  0F1C  3A03               	xorlw	3	; case 2
 14957  0F1D  1903               	skipnz
 14958  0F1E  2EE4               	goto	i1l4049
 14959  0F1F  3A01               	xorlw	1	; case 3
 14960  0F20  1903               	skipnz
 14961  0F21  2F07               	goto	i1l4063
 14962  0F22  2F23               	goto	i1l4073
 14963  0F23                     i1l4073:	
 14964                           
 14965                           ;Led.c: 82: PWM3_LoadDutyValue(dutyValue);
 14966  0F23  0829               	movf	(_dutyValue+1)^(0+128),w
 14967  0F24  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 14968  0F25  0828               	movf	_dutyValue^(0+128),w
 14969  0F26  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 14970  0F27  318A  2200         	fcall	_PWM3_LoadDutyValue
 14971  0F29  0008               	return
 14972  0F2A                     __end_of_Led2_PWM:	
 14973                           
 14974                           	psect	text58
 14975  0812                     __ptext58:	
 14976 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 14977 ;; Defined at:
 14978 ;;		line 197 in file "mcc_generated_files/tmr2.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;		None
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;		None
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		None
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;Total ram usage:        0 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		_TMR2_Initialize
 15002 ;;		_TMR2_CallBack
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function _TMR2_DefaultInterruptHandler
 15008  0812                     _TMR2_DefaultInterruptHandler:	
 15009                           
 15010                           ;incstack = 0
 15011                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15012  0812  0008               	return
 15013  0813                     __end_of_TMR2_DefaultInterruptHandler:	
 15014                           
 15015                           	psect	text59
 15016  0A00                     __ptext59:	
 15017 ;; *************** function _PWM3_LoadDutyValue *****************
 15018 ;; Defined at:
 15019 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;  dutyValue       2    0[COMMON] unsigned int 
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;		None
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  1    wreg      void 
 15026 ;; Registers used:
 15027 ;;		wreg, status,2, status,0
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;Total ram usage:        4 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; This function calls:
 15040 ;;		Nothing
 15041 ;; This function is called by:
 15042 ;;		_Led2_PWM
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           
 15047                           ;psect for function _PWM3_LoadDutyValue
 15048  0A00                     _PWM3_LoadDutyValue:	
 15049                           
 15050                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 15051                           
 15052                           ;incstack = 0
 15053                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 15054  0A00  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 15055  0A01  00F3               	movwf	??_PWM3_LoadDutyValue+1
 15056  0A02  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 15057  0A03  00F2               	movwf	??_PWM3_LoadDutyValue
 15058  0A04  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 15059  0A05  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 15060  0A06  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 15061  0A07  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 15062  0A08  0872               	movf	??_PWM3_LoadDutyValue,w
 15063  0A09  002C               	movlb	12	; select bank12
 15064  0A0A  0098               	movwf	24	;volatile
 15065                           
 15066                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 15067  0A0B  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 15068  0A0C  3903               	andlw	3
 15069  0A0D  00F2               	movwf	??_PWM3_LoadDutyValue
 15070  0A0E  3005               	movlw	5
 15071  0A0F                     u240_25:	
 15072  0A0F  35F2               	lslf	??_PWM3_LoadDutyValue,f
 15073  0A10  3EFF               	addlw	-1
 15074  0A11  1D03               	skipz
 15075  0A12  2A0F               	goto	u240_25
 15076  0A13  3572               	lslf	??_PWM3_LoadDutyValue,w
 15077  0A14  0097               	movwf	23	;volatile
 15078  0A15  0008               	return
 15079  0A16                     __end_of_PWM3_LoadDutyValue:	
 15080                           
 15081                           	psect	text60
 15082  0828                     __ptext60:	
 15083 ;; *************** function _I2C_MasterIsr *****************
 15084 ;; Defined at:
 15085 ;;		line 318 in file "mcc_generated_files/i2c_master.c"
 15086 ;; Parameters:    Size  Location     Type
 15087 ;;		None
 15088 ;; Auto vars:     Size  Location     Type
 15089 ;;		None
 15090 ;; Return value:  Size  Location     Type
 15091 ;;                  1    wreg      void 
 15092 ;; Registers used:
 15093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15094 ;; Tracked objects:
 15095 ;;		On entry : 0/0
 15096 ;;		On exit  : 0/0
 15097 ;;		Unchanged: 0/0
 15098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;Total ram usage:        0 bytes
 15104 ;; Hardware stack levels used:    1
 15105 ;; Hardware stack levels required when called:    5
 15106 ;; This function calls:
 15107 ;;		_I2C_MasterFsm
 15108 ;; This function is called by:
 15109 ;;		_I2C_Open
 15110 ;;		_INTERRUPT_InterruptManager
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           
 15115                           ;psect for function _I2C_MasterIsr
 15116  0828                     _I2C_MasterIsr:	
 15117                           
 15118                           ;i2c_master.c: 320: I2C_MasterFsm();
 15119                           
 15120                           ;incstack = 0
 15121                           ; Regs used in _I2C_MasterIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15122  0828  318C  2403         	fcall	_I2C_MasterFsm
 15123  082A  0008               	return
 15124  082B                     __end_of_I2C_MasterIsr:	
 15125                           
 15126                           	psect	text61
 15127  0C03                     __ptext61:	
 15128 ;; *************** function _I2C_MasterFsm *****************
 15129 ;; Defined at:
 15130 ;;		line 323 in file "mcc_generated_files/i2c_master.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;		None
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;		None
 15135 ;; Return value:  Size  Location     Type
 15136 ;;                  1    wreg      void 
 15137 ;; Registers used:
 15138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15139 ;; Tracked objects:
 15140 ;;		On entry : 0/0
 15141 ;;		On exit  : 0/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;Total ram usage:        3 bytes
 15149 ;; Hardware stack levels used:    1
 15150 ;; Hardware stack levels required when called:    4
 15151 ;; This function calls:
 15152 ;;		_I2C_DO_ADDRESS_NACK
 15153 ;;		_I2C_DO_IDLE
 15154 ;;		_I2C_DO_RCEN
 15155 ;;		_I2C_DO_RESET
 15156 ;;		_I2C_DO_RX
 15157 ;;		_I2C_DO_RX_ACK
 15158 ;;		_I2C_DO_RX_NACK_RESTART
 15159 ;;		_I2C_DO_RX_NACK_STOP
 15160 ;;		_I2C_DO_SEND_ADR_READ
 15161 ;;		_I2C_DO_SEND_ADR_WRITE
 15162 ;;		_I2C_DO_SEND_RESTART
 15163 ;;		_I2C_DO_SEND_RESTART_READ
 15164 ;;		_I2C_DO_SEND_RESTART_WRITE
 15165 ;;		_I2C_DO_SEND_STOP
 15166 ;;		_I2C_DO_TX
 15167 ;;		_I2C_DO_TX_EMPTY
 15168 ;;		_I2C_MasterIsNack
 15169 ;;		i1_I2C_MasterClearIrq
 15170 ;; This function is called by:
 15171 ;;		_I2C_MasterIsr
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           
 15176                           ;psect for function _I2C_MasterFsm
 15177  0C03                     _I2C_MasterFsm:	
 15178                           
 15179                           ;i2c_master.c: 325: I2C_MasterClearIrq();
 15180                           
 15181                           ;incstack = 0
 15182                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15183  0C03  3188  2025  318C   	fcall	i1_I2C_MasterClearIrq
 15184                           
 15185                           ;i2c_master.c: 327: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 15186  0C06  0022               	movlb	2	; select bank2
 15187  0C07  1C3D               	btfss	(_I2C_Status^(0+256)+29),0
 15188  0C08  2C15               	goto	i1l4161
 15189  0C09  3188  207E  318C   	fcall	_I2C_MasterIsNack
 15190  0C0C  3A00               	xorlw	0
 15191  0C0D  1903               	skipnz
 15192  0C0E  2C15               	goto	i1l4161
 15193                           
 15194                           ;i2c_master.c: 328: {
 15195                           ;i2c_master.c: 329: I2C_Status.state = I2C_ADDRESS_NACK;
 15196  0C0F  300F               	movlw	15
 15197  0C10  0020               	movlb	0	; select bank0
 15198  0C11  00A0               	movwf	??_I2C_MasterFsm
 15199  0C12  0820               	movf	??_I2C_MasterFsm,w
 15200  0C13  0022               	movlb	2	; select bank2
 15201  0C14  00BB               	movwf	(_I2C_Status^(0+256)+27)
 15202  0C15                     i1l4161:	
 15203                           
 15204                           ;i2c_master.c: 330: }
 15205                           ;i2c_master.c: 331: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 15206  0C15  0022               	movlb	2	; select bank2
 15207  0C16  083B               	movf	(_I2C_Status^(0+256)+27),w
 15208  0C17  0020               	movlb	0	; select bank0
 15209  0C18  00A0               	movwf	??_I2C_MasterFsm
 15210  0C19  01A1               	clrf	??_I2C_MasterFsm+1
 15211  0C1A  35A0               	lslf	??_I2C_MasterFsm,f
 15212  0C1B  0DA1               	rlf	??_I2C_MasterFsm+1,f
 15213  0C1C  3000               	movlw	low (_fsmStateTable| (0+32768))
 15214  0C1D  0720               	addwf	??_I2C_MasterFsm,w
 15215  0C1E  0084               	movwf	4
 15216  0C1F  3090               	movlw	high (_fsmStateTable| (0+32768))
 15217  0C20  3D21               	addwfc	??_I2C_MasterFsm+1,w
 15218  0C21  0085               	movwf	5
 15219  0C22  3F01               	moviw [1]fsr0
 15220  0C23  008A               	movwf	10
 15221  0C24  3F00               	moviw [0]fsr0
 15222  0C25  000A               	callw
 15223  0C26  318C               	pagesel	$
 15224  0C27  0020               	movlb	0	; select bank0
 15225  0C28  00A2               	movwf	??_I2C_MasterFsm+2
 15226  0C29  0822               	movf	??_I2C_MasterFsm+2,w
 15227  0C2A  0022               	movlb	2	; select bank2
 15228  0C2B  00BB               	movwf	(_I2C_Status^(0+256)+27)
 15229  0C2C  0008               	return
 15230  0C2D                     __end_of_I2C_MasterFsm:	
 15231                           
 15232                           	psect	text62
 15233  0825                     __ptext62:	
 15234 ;; *************** function i1_I2C_MasterClearIrq *****************
 15235 ;; Defined at:
 15236 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;		None
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;		None
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		None
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        0 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; This function calls:
 15257 ;;		Nothing
 15258 ;; This function is called by:
 15259 ;;		_I2C_MasterFsm
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           
 15264                           ;psect for function i1_I2C_MasterClearIrq
 15265  0825                     i1_I2C_MasterClearIrq:	
 15266                           
 15267                           ;i2c_master.c: 644: PIR1bits.SSP1IF = 0;
 15268                           
 15269                           ;incstack = 0
 15270                           ; Regs used in i1_I2C_MasterClearIrq: []
 15271  0825  0020               	movlb	0	; select bank0
 15272  0826  1190               	bcf	16,3	;volatile
 15273  0827  0008               	return
 15274  0828                     __end_ofi1_I2C_MasterClearIrq:	
 15275                           
 15276                           	psect	text63
 15277  0B19                     __ptext63:	
 15278 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
 15279 ;; Defined at:
 15280 ;;		line 501 in file "mcc_generated_files/i2c_master.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;		None
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;		None
 15285 ;; Return value:  Size  Location     Type
 15286 ;;                  1    wreg      enum E12110
 15287 ;; Registers used:
 15288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;Total ram usage:        1 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    3
 15301 ;; This function calls:
 15302 ;;		Absolute function
 15303 ;;		_I2C_CallbackReturnReset
 15304 ;;		_I2C_CallbackReturnStop
 15305 ;;		_I2C_DO_SEND_RESTART
 15306 ;;		_I2C_DO_SEND_STOP
 15307 ;;		_rd1RegCompleteHandler
 15308 ;;		_rd2RegCompleteHandler
 15309 ;;		_rdBlkRegCompleteHandler
 15310 ;;		_wr1RegCompleteHandler
 15311 ;;		_wr2RegCompleteHandler
 15312 ;; This function is called by:
 15313 ;;		_I2C_MasterFsm
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _I2C_DO_ADDRESS_NACK
 15319  0B19                     _I2C_DO_ADDRESS_NACK:	
 15320                           
 15321                           ;i2c_master.c: 503: I2C_Status.addressNackCheck = 0;
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15325  0B19  0022               	movlb	2	; select bank2
 15326  0B1A  103D               	bcf	(_I2C_Status^(0+256)+29),0
 15327                           
 15328                           ;i2c_master.c: 504: I2C_Status.error = I2C_FAIL;
 15329  0B1B  3002               	movlw	2
 15330  0B1C  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
 15331  0B1D  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
 15332  0B1E  00BC               	movwf	(_I2C_Status^(0+256)+28)
 15333                           
 15334                           ;i2c_master.c: 505: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 15335  0B1F  2B26               	goto	i1l4017
 15336  0B20                     i1l4007:	
 15337                           ;i2c_master.c: 506: {
 15338                           ;i2c_master.c: 507: case I2C_RESTART_READ:
 15339                           
 15340                           
 15341                           ;i2c_master.c: 508: case I2C_RESTART_WRITE:
 15342                           ;i2c_master.c: 509: return I2C_DO_SEND_RESTART();
 15343  0B20  3188  204E         	fcall	_I2C_DO_SEND_RESTART
 15344  0B22  0008               	return
 15345  0B23                     i1l4011:	
 15346                           ;i2c_master.c: 510: default:
 15347                           
 15348                           
 15349                           ;i2c_master.c: 511: return I2C_DO_SEND_STOP();
 15350  0B23  3188  2052         	fcall	_I2C_DO_SEND_STOP
 15351                           
 15352                           ;i2c_master.c: 512: }
 15353  0B25  0008               	return
 15354  0B26                     i1l4017:	
 15355  0B26  0022               	movlb	2	; select bank2
 15356  0B27  082E               	movf	(low ((_I2C_Status| (0+256)+14)))^0,w
 15357  0B28  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
 15358  0B29  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
 15359  0B2A  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 15360  0B2B  3004               	movlw	4
 15361  0B2C  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 15362  0B2D  0086               	movwf	6
 15363  0B2E  3001               	movlw	1	; select bank2/3
 15364  0B2F  0087               	movwf	7
 15365  0B30  3F41               	moviw [1]fsr1
 15366  0B31  008A               	movwf	10
 15367  0B32  3F40               	moviw [0]fsr1
 15368  0B33  000A               	callw
 15369  0B34  318B               	pagesel	$
 15370                           
 15371                           ; Switch size 1, requested type "space"
 15372                           ; Number of cases is 2, Range of values is 2 to 3
 15373                           ; switch strategies available:
 15374                           ; Name         Instructions Cycles
 15375                           ; simple_byte            7     4 (average)
 15376                           ; direct_byte           13     9 (fixed)
 15377                           ; jumptable            263     9 (fixed)
 15378                           ;	Chosen strategy is simple_byte
 15379  0B35  3A02               	xorlw	2	; case 2
 15380  0B36  1903               	skipnz
 15381  0B37  2B20               	goto	i1l4007
 15382  0B38  3A01               	xorlw	1	; case 3
 15383  0B39  1903               	skipnz
 15384  0B3A  2B20               	goto	i1l4007
 15385  0B3B  2B23               	goto	i1l4011
 15386  0B3C  0008               	return
 15387  0B3D                     __end_of_I2C_DO_ADDRESS_NACK:	
 15388                           
 15389                           	psect	text64
 15390  0874                     __ptext64:	
 15391 ;; *************** function _I2C_DO_RESET *****************
 15392 ;; Defined at:
 15393 ;;		line 495 in file "mcc_generated_files/i2c_master.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;		None
 15396 ;; Auto vars:     Size  Location     Type
 15397 ;;		None
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      enum E12110
 15400 ;; Registers used:
 15401 ;;		wreg, status,2
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15411 ;;Total ram usage:        0 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_I2C_MasterFsm
 15417 ;; This function uses a non-reentrant model
 15418 ;;
 15419                           
 15420                           
 15421                           ;psect for function _I2C_DO_RESET
 15422  0874                     _I2C_DO_RESET:	
 15423                           
 15424                           ;i2c_master.c: 497: I2C_Status.busy = 0;
 15425                           
 15426                           ;incstack = 0
 15427                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
 15428  0874  0022               	movlb	2	; select bank2
 15429  0875  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 15430                           
 15431                           ;i2c_master.c: 498: I2C_Status.error = I2C_NOERR;
 15432  0876  01BC               	clrf	(_I2C_Status^(0+256)+28)
 15433                           
 15434                           ;i2c_master.c: 499: return I2C_RESET;
 15435  0877  300E               	movlw	14
 15436  0878  0008               	return
 15437  0879                     __end_of_I2C_DO_RESET:	
 15438                           
 15439                           	psect	text65
 15440  085E                     __ptext65:	
 15441 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
 15442 ;; Defined at:
 15443 ;;		line 489 in file "mcc_generated_files/i2c_master.c"
 15444 ;; Parameters:    Size  Location     Type
 15445 ;;		None
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;		None
 15448 ;; Return value:  Size  Location     Type
 15449 ;;                  1    wreg      enum E12110
 15450 ;; Registers used:
 15451 ;;		wreg, status,2, status,0, pclath, cstack
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;Total ram usage:        0 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    1
 15464 ;; This function calls:
 15465 ;;		i2c_master@I2C_MasterSendNack
 15466 ;; This function is called by:
 15467 ;;		_I2C_DO_RX
 15468 ;;		_I2C_MasterFsm
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           
 15473                           ;psect for function _I2C_DO_RX_NACK_RESTART
 15474  085E                     _I2C_DO_RX_NACK_RESTART:	
 15475                           
 15476                           ;i2c_master.c: 491: I2C_MasterSendNack();
 15477                           
 15478                           ;incstack = 0
 15479                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15480  085E  3188  203E         	fcall	i2c_master@I2C_MasterSendNack
 15481                           
 15482                           ;i2c_master.c: 492: return I2C_SEND_RESTART;
 15483  0860  3009               	movlw	9
 15484  0861  0008               	return
 15485  0862                     __end_of_I2C_DO_RX_NACK_RESTART:	
 15486                           
 15487                           	psect	text66
 15488  085A                     __ptext66:	
 15489 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
 15490 ;; Defined at:
 15491 ;;		line 483 in file "mcc_generated_files/i2c_master.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;		None
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;		None
 15496 ;; Return value:  Size  Location     Type
 15497 ;;                  1    wreg      enum E12110
 15498 ;; Registers used:
 15499 ;;		wreg, status,2, status,0, pclath, cstack
 15500 ;; Tracked objects:
 15501 ;;		On entry : 0/0
 15502 ;;		On exit  : 0/0
 15503 ;;		Unchanged: 0/0
 15504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;Total ram usage:        0 bytes
 15510 ;; Hardware stack levels used:    1
 15511 ;; Hardware stack levels required when called:    1
 15512 ;; This function calls:
 15513 ;;		i2c_master@I2C_MasterSendNack
 15514 ;; This function is called by:
 15515 ;;		_I2C_DO_RX
 15516 ;;		_I2C_MasterFsm
 15517 ;; This function uses a non-reentrant model
 15518 ;;
 15519                           
 15520                           
 15521                           ;psect for function _I2C_DO_RX_NACK_STOP
 15522  085A                     _I2C_DO_RX_NACK_STOP:	
 15523                           
 15524                           ;i2c_master.c: 485: I2C_MasterSendNack();
 15525                           
 15526                           ;incstack = 0
 15527                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 15528  085A  3188  203E         	fcall	i2c_master@I2C_MasterSendNack
 15529                           
 15530                           ;i2c_master.c: 486: return I2C_SEND_STOP;
 15531  085C  300A               	movlw	10
 15532  085D  0008               	return
 15533  085E                     __end_of_I2C_DO_RX_NACK_STOP:	
 15534                           
 15535                           	psect	text67
 15536  0856                     __ptext67:	
 15537 ;; *************** function _I2C_DO_RX_ACK *****************
 15538 ;; Defined at:
 15539 ;;		line 476 in file "mcc_generated_files/i2c_master.c"
 15540 ;; Parameters:    Size  Location     Type
 15541 ;;		None
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;		None
 15544 ;; Return value:  Size  Location     Type
 15545 ;;                  1    wreg      enum E12110
 15546 ;; Registers used:
 15547 ;;		wreg, status,2, status,0, pclath, cstack
 15548 ;; Tracked objects:
 15549 ;;		On entry : 0/0
 15550 ;;		On exit  : 0/0
 15551 ;;		Unchanged: 0/0
 15552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;Total ram usage:        0 bytes
 15558 ;; Hardware stack levels used:    1
 15559 ;; Hardware stack levels required when called:    1
 15560 ;; This function calls:
 15561 ;;		i2c_master@I2C_MasterSendAck
 15562 ;; This function is called by:
 15563 ;;		_I2C_MasterFsm
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           
 15568                           ;psect for function _I2C_DO_RX_ACK
 15569  0856                     _I2C_DO_RX_ACK:	
 15570                           
 15571                           ;i2c_master.c: 478: I2C_MasterSendAck();
 15572                           
 15573                           ;incstack = 0
 15574                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 15575  0856  3188  2042         	fcall	i2c_master@I2C_MasterSendAck
 15576                           
 15577                           ;i2c_master.c: 479: return I2C_RCEN;
 15578  0858  3005               	movlw	5
 15579  0859  0008               	return
 15580  085A                     __end_of_I2C_DO_RX_ACK:	
 15581                           
 15582                           	psect	text68
 15583  0852                     __ptext68:	
 15584 ;; *************** function _I2C_DO_SEND_STOP *****************
 15585 ;; Defined at:
 15586 ;;		line 470 in file "mcc_generated_files/i2c_master.c"
 15587 ;; Parameters:    Size  Location     Type
 15588 ;;		None
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;		None
 15591 ;; Return value:  Size  Location     Type
 15592 ;;                  1    wreg      enum E12110
 15593 ;; Registers used:
 15594 ;;		wreg, status,2, status,0, pclath, cstack
 15595 ;; Tracked objects:
 15596 ;;		On entry : 0/0
 15597 ;;		On exit  : 0/0
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;Total ram usage:        0 bytes
 15605 ;; Hardware stack levels used:    1
 15606 ;; Hardware stack levels required when called:    1
 15607 ;; This function calls:
 15608 ;;		_I2C_MasterStop
 15609 ;; This function is called by:
 15610 ;;		_I2C_DO_TX
 15611 ;;		_I2C_DO_TX_EMPTY
 15612 ;;		_I2C_DO_ADDRESS_NACK
 15613 ;;		_I2C_MasterFsm
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           
 15618                           ;psect for function _I2C_DO_SEND_STOP
 15619  0852                     _I2C_DO_SEND_STOP:	
 15620                           
 15621                           ;i2c_master.c: 472: I2C_MasterStop();
 15622                           
 15623                           ;incstack = 0
 15624                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15625  0852  3188  2019         	fcall	_I2C_MasterStop
 15626                           
 15627                           ;i2c_master.c: 473: return I2C_IDLE;
 15628  0854  3000               	movlw	0
 15629  0855  0008               	return
 15630  0856                     __end_of_I2C_DO_SEND_STOP:	
 15631                           
 15632                           	psect	text69
 15633  084E                     __ptext69:	
 15634 ;; *************** function _I2C_DO_SEND_RESTART *****************
 15635 ;; Defined at:
 15636 ;;		line 464 in file "mcc_generated_files/i2c_master.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;		None
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;		None
 15641 ;; Return value:  Size  Location     Type
 15642 ;;                  1    wreg      enum E12110
 15643 ;; Registers used:
 15644 ;;		wreg, status,2, status,0, pclath, cstack
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        0 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    1
 15657 ;; This function calls:
 15658 ;;		_I2C_MasterEnableRestart
 15659 ;; This function is called by:
 15660 ;;		_I2C_DO_TX_EMPTY
 15661 ;;		_I2C_DO_ADDRESS_NACK
 15662 ;;		_I2C_MasterFsm
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           
 15667                           ;psect for function _I2C_DO_SEND_RESTART
 15668  084E                     _I2C_DO_SEND_RESTART:	
 15669                           
 15670                           ;i2c_master.c: 466: I2C_MasterEnableRestart();
 15671                           
 15672                           ;incstack = 0
 15673                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15674  084E  3188  2016         	fcall	_I2C_MasterEnableRestart
 15675                           
 15676                           ;i2c_master.c: 467: return I2C_SEND_ADR_READ;
 15677  0850  3001               	movlw	1
 15678  0851  0008               	return
 15679  0852                     __end_of_I2C_DO_SEND_RESTART:	
 15680                           
 15681                           	psect	text70
 15682  084A                     __ptext70:	
 15683 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
 15684 ;; Defined at:
 15685 ;;		line 457 in file "mcc_generated_files/i2c_master.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;		None
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;		None
 15690 ;; Return value:  Size  Location     Type
 15691 ;;                  1    wreg      enum E12110
 15692 ;; Registers used:
 15693 ;;		wreg, status,2, status,0, pclath, cstack
 15694 ;; Tracked objects:
 15695 ;;		On entry : 0/0
 15696 ;;		On exit  : 0/0
 15697 ;;		Unchanged: 0/0
 15698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;Total ram usage:        0 bytes
 15704 ;; Hardware stack levels used:    1
 15705 ;; Hardware stack levels required when called:    1
 15706 ;; This function calls:
 15707 ;;		_I2C_MasterEnableRestart
 15708 ;; This function is called by:
 15709 ;;		_I2C_DO_TX
 15710 ;;		_I2C_MasterFsm
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714                           
 15715                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
 15716  084A                     _I2C_DO_SEND_RESTART_WRITE:	
 15717                           
 15718                           ;i2c_master.c: 459: I2C_MasterEnableRestart();
 15719                           
 15720                           ;incstack = 0
 15721                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15722  084A  3188  2016         	fcall	_I2C_MasterEnableRestart
 15723                           
 15724                           ;i2c_master.c: 460: return I2C_SEND_ADR_WRITE;
 15725  084C  3002               	movlw	2
 15726  084D  0008               	return
 15727  084E                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
 15728                           
 15729                           	psect	text71
 15730  0846                     __ptext71:	
 15731 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
 15732 ;; Defined at:
 15733 ;;		line 451 in file "mcc_generated_files/i2c_master.c"
 15734 ;; Parameters:    Size  Location     Type
 15735 ;;		None
 15736 ;; Auto vars:     Size  Location     Type
 15737 ;;		None
 15738 ;; Return value:  Size  Location     Type
 15739 ;;                  1    wreg      enum E12110
 15740 ;; Registers used:
 15741 ;;		wreg, status,2, status,0, pclath, cstack
 15742 ;; Tracked objects:
 15743 ;;		On entry : 0/0
 15744 ;;		On exit  : 0/0
 15745 ;;		Unchanged: 0/0
 15746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;Total ram usage:        0 bytes
 15752 ;; Hardware stack levels used:    1
 15753 ;; Hardware stack levels required when called:    1
 15754 ;; This function calls:
 15755 ;;		_I2C_MasterEnableRestart
 15756 ;; This function is called by:
 15757 ;;		_I2C_DO_TX
 15758 ;;		_I2C_MasterFsm
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _I2C_DO_SEND_RESTART_READ
 15764  0846                     _I2C_DO_SEND_RESTART_READ:	
 15765                           
 15766                           ;i2c_master.c: 453: I2C_MasterEnableRestart();
 15767                           
 15768                           ;incstack = 0
 15769                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15770  0846  3188  2016         	fcall	_I2C_MasterEnableRestart
 15771                           
 15772                           ;i2c_master.c: 454: return I2C_SEND_ADR_READ;
 15773  0848  3001               	movlw	1
 15774  0849  0008               	return
 15775  084A                     __end_of_I2C_DO_SEND_RESTART_READ:	
 15776                           
 15777                           	psect	text72
 15778  0884                     __ptext72:	
 15779 ;; *************** function _I2C_DO_RCEN *****************
 15780 ;; Defined at:
 15781 ;;		line 404 in file "mcc_generated_files/i2c_master.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;		None
 15784 ;; Auto vars:     Size  Location     Type
 15785 ;;		None
 15786 ;; Return value:  Size  Location     Type
 15787 ;;                  1    wreg      enum E12110
 15788 ;; Registers used:
 15789 ;;		wreg, status,2, status,0, pclath, cstack
 15790 ;; Tracked objects:
 15791 ;;		On entry : 0/0
 15792 ;;		On exit  : 0/0
 15793 ;;		Unchanged: 0/0
 15794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;Total ram usage:        0 bytes
 15800 ;; Hardware stack levels used:    1
 15801 ;; Hardware stack levels required when called:    1
 15802 ;; This function calls:
 15803 ;;		_I2C_MasterStartRx
 15804 ;; This function is called by:
 15805 ;;		_I2C_MasterFsm
 15806 ;; This function uses a non-reentrant model
 15807 ;;
 15808                           
 15809                           
 15810                           ;psect for function _I2C_DO_RCEN
 15811  0884                     _I2C_DO_RCEN:	
 15812                           
 15813                           ;i2c_master.c: 406: I2C_Status.addressNackCheck = 0;
 15814                           
 15815                           ;incstack = 0
 15816                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15817  0884  0022               	movlb	2	; select bank2
 15818  0885  103D               	bcf	(_I2C_Status^(0+256)+29),0
 15819                           
 15820                           ;i2c_master.c: 407: I2C_MasterStartRx();
 15821  0886  3188  201C         	fcall	_I2C_MasterStartRx
 15822                           
 15823                           ;i2c_master.c: 408: return I2C_RX;
 15824  0888  3004               	movlw	4
 15825  0889  0008               	return
 15826  088A                     __end_of_I2C_DO_RCEN:	
 15827                           
 15828                           	psect	text73
 15829  0CF9                     __ptext73:	
 15830 ;; *************** function _I2C_DO_RX *****************
 15831 ;; Defined at:
 15832 ;;		line 380 in file "mcc_generated_files/i2c_master.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;		None
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;		None
 15837 ;; Return value:  Size  Location     Type
 15838 ;;                  1    wreg      enum E12110
 15839 ;; Registers used:
 15840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;Total ram usage:        1 bytes
 15851 ;; Hardware stack levels used:    1
 15852 ;; Hardware stack levels required when called:    3
 15853 ;; This function calls:
 15854 ;;		Absolute function
 15855 ;;		_I2C_CallbackReturnReset
 15856 ;;		_I2C_CallbackReturnStop
 15857 ;;		_I2C_DO_RX_NACK_RESTART
 15858 ;;		_I2C_DO_RX_NACK_STOP
 15859 ;;		_I2C_MasterGetRxData
 15860 ;;		_rd1RegCompleteHandler
 15861 ;;		_rd2RegCompleteHandler
 15862 ;;		_rdBlkRegCompleteHandler
 15863 ;;		_wr1RegCompleteHandler
 15864 ;;		_wr2RegCompleteHandler
 15865 ;;		i2c_master@I2C_MasterSendAck
 15866 ;; This function is called by:
 15867 ;;		_I2C_MasterFsm
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           
 15872                           ;psect for function _I2C_DO_RX
 15873  0CF9                     _I2C_DO_RX:	
 15874                           
 15875                           ;i2c_master.c: 382: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 15876                           
 15877                           ;incstack = 0
 15878                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15879  0CF9  3188  201F  318C   	fcall	_I2C_MasterGetRxData
 15880  0CFC  00FA               	movwf	??_I2C_DO_RX
 15881  0CFD  0022               	movlb	2	; select bank2
 15882  0CFE  0837               	movf	(low ((_I2C_Status| (0+256)+23)))^0,w
 15883  0CFF  0086               	movwf	6
 15884  0D00  0838               	movf	((low ((_I2C_Status| (0+256)+23))+1))^0,w
 15885  0D01  0087               	movwf	7
 15886  0D02  087A               	movf	??_I2C_DO_RX,w
 15887  0D03  0081               	movwf	1
 15888  0D04  3001               	movlw	1
 15889  0D05  07B7               	addwf	(low ((_I2C_Status| (0+256)+23)))^0,f
 15890  0D06  3000               	movlw	0
 15891  0D07  3DB8               	addwfc	((low ((_I2C_Status| (0+256)+23))+1))^0,f
 15892                           
 15893                           ;i2c_master.c: 383: if(--I2C_Status.data_length)
 15894  0D08  3001               	movlw	1
 15895  0D09  02B9               	subwf	(_I2C_Status^(0+256)+25),f
 15896  0D0A  3000               	movlw	0
 15897  0D0B  3BBA               	subwfb	((_I2C_Status+1)^(0+256)+25),f
 15898  0D0C  0839               	movf	(_I2C_Status^(0+256)+25),w
 15899  0D0D  043A               	iorwf	((_I2C_Status+1)^(0+256)+25),w
 15900  0D0E  1903               	btfsc	3,2
 15901  0D0F  2D14               	goto	i1l298
 15902                           
 15903                           ;i2c_master.c: 384: {
 15904                           ;i2c_master.c: 385: I2C_MasterSendAck();
 15905  0D10  3188  2042         	fcall	i2c_master@I2C_MasterSendAck
 15906                           
 15907                           ;i2c_master.c: 386: return I2C_RCEN;
 15908  0D12  3005               	movlw	5
 15909                           
 15910                           ;i2c_master.c: 387: }
 15911  0D13  0008               	return
 15912  0D14                     i1l298:	
 15913                           
 15914                           ;i2c_master.c: 388: else
 15915                           ;i2c_master.c: 389: {
 15916                           ;i2c_master.c: 390: I2C_Status.bufferFree = 1;
 15917  0D14  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 15918                           
 15919                           ;i2c_master.c: 391: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 15920  0D15  2D1C               	goto	i1l3959
 15921  0D16                     i1l3949:	
 15922                           ;i2c_master.c: 392: {
 15923                           ;i2c_master.c: 393: case I2C_RESTART_WRITE:
 15924                           
 15925                           
 15926                           ;i2c_master.c: 394: case I2C_RESTART_READ:
 15927                           ;i2c_master.c: 395: return I2C_DO_RX_NACK_RESTART();
 15928  0D16  3188  205E         	fcall	_I2C_DO_RX_NACK_RESTART
 15929  0D18  0008               	return
 15930  0D19                     i1l3953:	
 15931                           ;i2c_master.c: 397: case I2C_CONTINUE:
 15932                           
 15933                           ;i2c_master.c: 396: default:
 15934                           
 15935                           
 15936                           ;i2c_master.c: 398: case I2C_STOP:
 15937                           ;i2c_master.c: 399: return I2C_DO_RX_NACK_STOP();
 15938  0D19  3188  205A         	fcall	_I2C_DO_RX_NACK_STOP
 15939                           
 15940                           ;i2c_master.c: 400: }
 15941  0D1B  0008               	return
 15942  0D1C                     i1l3959:	
 15943  0D1C  0022               	movlb	2	; select bank2
 15944  0D1D  082C               	movf	(low ((_I2C_Status| (0+256)+12)))^0,w
 15945  0D1E  00FA               	movwf	??_I2C_DO_RX
 15946  0D1F  087A               	movf	??_I2C_DO_RX,w
 15947  0D20  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 15948  0D21  0821               	movf	(_I2C_Status+1)^(0+256),w
 15949  0D22  008A               	movwf	10
 15950  0D23  0820               	movf	_I2C_Status^(0+256),w
 15951  0D24  000A               	callw
 15952  0D25  318C               	pagesel	$
 15953                           
 15954                           ; Switch size 1, requested type "space"
 15955                           ; Number of cases is 4, Range of values is 1 to 4
 15956                           ; switch strategies available:
 15957                           ; Name         Instructions Cycles
 15958                           ; simple_byte           13     7 (average)
 15959                           ; direct_byte           17     9 (fixed)
 15960                           ; jumptable            263     9 (fixed)
 15961                           ;	Chosen strategy is simple_byte
 15962  0D26  3A01               	xorlw	1	; case 1
 15963  0D27  1903               	skipnz
 15964  0D28  2D19               	goto	i1l3953
 15965  0D29  3A03               	xorlw	3	; case 2
 15966  0D2A  1903               	skipnz
 15967  0D2B  2D16               	goto	i1l3949
 15968  0D2C  3A01               	xorlw	1	; case 3
 15969  0D2D  1903               	skipnz
 15970  0D2E  2D16               	goto	i1l3949
 15971  0D2F  3A07               	xorlw	7	; case 4
 15972  0D30  1903               	skipnz
 15973  0D31  2D19               	goto	i1l3953
 15974  0D32  2D19               	goto	i1l3953
 15975  0D33  0008               	return
 15976  0D34                     __end_of_I2C_DO_RX:	
 15977                           
 15978                           	psect	text74
 15979  0E7E                     __ptext74:	
 15980 ;; *************** function _I2C_DO_TX *****************
 15981 ;; Defined at:
 15982 ;;		line 356 in file "mcc_generated_files/i2c_master.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;		None
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;		None
 15987 ;; Return value:  Size  Location     Type
 15988 ;;                  1    wreg      enum E12110
 15989 ;; Registers used:
 15990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15991 ;; Tracked objects:
 15992 ;;		On entry : 0/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;Total ram usage:        4 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    3
 16003 ;; This function calls:
 16004 ;;		Absolute function
 16005 ;;		_I2C_CallbackReturnReset
 16006 ;;		_I2C_CallbackReturnStop
 16007 ;;		_I2C_DO_SEND_RESTART_READ
 16008 ;;		_I2C_DO_SEND_RESTART_WRITE
 16009 ;;		_I2C_DO_SEND_STOP
 16010 ;;		_I2C_MasterIsNack
 16011 ;;		_I2C_MasterSendTxData
 16012 ;;		_rd1RegCompleteHandler
 16013 ;;		_rd2RegCompleteHandler
 16014 ;;		_rdBlkRegCompleteHandler
 16015 ;;		_wr1RegCompleteHandler
 16016 ;;		_wr2RegCompleteHandler
 16017 ;; This function is called by:
 16018 ;;		_I2C_MasterFsm
 16019 ;; This function uses a non-reentrant model
 16020 ;;
 16021                           
 16022                           
 16023                           ;psect for function _I2C_DO_TX
 16024  0E7E                     _I2C_DO_TX:	
 16025                           
 16026                           ;i2c_master.c: 358: if(I2C_MasterIsNack())
 16027                           
 16028                           ;incstack = 0
 16029                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16030  0E7E  3188  207E  318E   	fcall	_I2C_MasterIsNack
 16031  0E81  3A00               	xorlw	0
 16032  0E82  1D03               	btfss	3,2
 16033  0E83  2E8E               	goto	i1l3923
 16034  0E84  2EAB               	goto	i1l282
 16035  0E85                     i1l3909:	
 16036                           ;i2c_master.c: 361: {
 16037                           ;i2c_master.c: 362: case I2C_RESTART_READ:
 16038                           
 16039                           ;i2c_master.c: 359: {
 16040                           ;i2c_master.c: 360: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 16041                           
 16042                           
 16043                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_READ();
 16044  0E85  3188  2046         	fcall	_I2C_DO_SEND_RESTART_READ
 16045  0E87  0008               	return
 16046  0E88                     i1l3913:	
 16047                           ;i2c_master.c: 364: case I2C_RESTART_WRITE:
 16048                           
 16049                           
 16050                           ;i2c_master.c: 365: return I2C_DO_SEND_RESTART_WRITE();
 16051  0E88  3188  204A         	fcall	_I2C_DO_SEND_RESTART_WRITE
 16052  0E8A  0008               	return
 16053  0E8B                     i1l3917:	
 16054                           ;i2c_master.c: 367: case I2C_CONTINUE:
 16055                           
 16056                           ;i2c_master.c: 366: default:
 16057                           
 16058                           
 16059                           ;i2c_master.c: 368: case I2C_STOP:
 16060                           ;i2c_master.c: 369: return I2C_DO_SEND_STOP();
 16061  0E8B  3188  2052         	fcall	_I2C_DO_SEND_STOP
 16062                           
 16063                           ;i2c_master.c: 370: }
 16064  0E8D  0008               	return
 16065  0E8E                     i1l3923:	
 16066  0E8E  0022               	movlb	2	; select bank2
 16067  0E8F  082F               	movf	(low ((_I2C_Status| (0+256)+15)))^0,w
 16068  0E90  00FA               	movwf	??_I2C_DO_TX
 16069  0E91  087A               	movf	??_I2C_DO_TX,w
 16070  0E92  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 16071  0E93  3006               	movlw	6
 16072  0E94  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 16073  0E95  0086               	movwf	6
 16074  0E96  3001               	movlw	1	; select bank2/3
 16075  0E97  0087               	movwf	7
 16076  0E98  3F41               	moviw [1]fsr1
 16077  0E99  008A               	movwf	10
 16078  0E9A  3F40               	moviw [0]fsr1
 16079  0E9B  000A               	callw
 16080  0E9C  318E               	pagesel	$
 16081                           
 16082                           ; Switch size 1, requested type "space"
 16083                           ; Number of cases is 4, Range of values is 1 to 4
 16084                           ; switch strategies available:
 16085                           ; Name         Instructions Cycles
 16086                           ; simple_byte           13     7 (average)
 16087                           ; direct_byte           17     9 (fixed)
 16088                           ; jumptable            263     9 (fixed)
 16089                           ;	Chosen strategy is simple_byte
 16090  0E9D  3A01               	xorlw	1	; case 1
 16091  0E9E  1903               	skipnz
 16092  0E9F  2E8B               	goto	i1l3917
 16093  0EA0  3A03               	xorlw	3	; case 2
 16094  0EA1  1903               	skipnz
 16095  0EA2  2E85               	goto	i1l3909
 16096  0EA3  3A01               	xorlw	1	; case 3
 16097  0EA4  1903               	skipnz
 16098  0EA5  2E88               	goto	i1l3913
 16099  0EA6  3A07               	xorlw	7	; case 4
 16100  0EA7  1903               	skipnz
 16101  0EA8  2E8B               	goto	i1l3917
 16102  0EA9  2E8B               	goto	i1l3917
 16103                           
 16104                           ;i2c_master.c: 371: }
 16105  0EAA  0008               	return
 16106  0EAB                     i1l282:	
 16107                           
 16108                           ;i2c_master.c: 372: else
 16109                           ;i2c_master.c: 373: {
 16110                           ;i2c_master.c: 374: I2C_Status.addressNackCheck = 0;
 16111  0EAB  0022               	movlb	2	; select bank2
 16112  0EAC  103D               	bcf	(_I2C_Status^(0+256)+29),0
 16113                           
 16114                           ;i2c_master.c: 375: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 16115  0EAD  0838               	movf	((low ((_I2C_Status| (0+256)+23))+1))^0,w
 16116  0EAE  00FB               	movwf	??_I2C_DO_TX+1
 16117  0EAF  0837               	movf	(low ((_I2C_Status| (0+256)+23)))^0,w
 16118  0EB0  00FA               	movwf	??_I2C_DO_TX
 16119  0EB1  0AB7               	incf	(low ((_I2C_Status| (0+256)+23)))^0,f
 16120  0EB2  1903               	skipnz
 16121  0EB3  0AB8               	incf	((low ((_I2C_Status| (0+256)+23))+1))^0,f
 16122  0EB4  087A               	movf	??_I2C_DO_TX,w
 16123  0EB5  0086               	movwf	6
 16124  0EB6  087B               	movf	??_I2C_DO_TX+1,w
 16125  0EB7  0087               	movwf	7
 16126  0EB8  0801               	movf	1,w
 16127  0EB9  3188  206A  318E   	fcall	_I2C_MasterSendTxData
 16128                           
 16129                           ;i2c_master.c: 376: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 16130  0EBC  3001               	movlw	1
 16131  0EBD  0022               	movlb	2	; select bank2
 16132  0EBE  02B9               	subwf	(_I2C_Status^(0+256)+25),f
 16133  0EBF  3000               	movlw	0
 16134  0EC0  3BBA               	subwfb	((_I2C_Status+1)^(0+256)+25),f
 16135  0EC1  0839               	movf	(_I2C_Status^(0+256)+25),w
 16136  0EC2  043A               	iorwf	((_I2C_Status+1)^(0+256)+25),w
 16137  0EC3  1D03               	btfss	3,2
 16138  0EC4  2EC7               	goto	i1l3931
 16139  0EC5  3006               	movlw	6
 16140  0EC6  2EC8               	goto	L2
 16141  0EC7                     i1l3931:	
 16142  0EC7  3003               	movlw	3
 16143  0EC8                     L2:	
 16144  0EC8  00FC               	movwf	_I2C_DO_TX$613
 16145  0EC9  3000               	movlw	0
 16146  0ECA  00FD               	movwf	_I2C_DO_TX$613+1
 16147  0ECB  087C               	movf	_I2C_DO_TX$613,w
 16148  0ECC  0008               	return
 16149  0ECD                     __end_of_I2C_DO_TX:	
 16150                           
 16151                           	psect	text75
 16152  0896                     __ptext75:	
 16153 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 16154 ;; Defined at:
 16155 ;;		line 349 in file "mcc_generated_files/i2c_master.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;		None
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;		None
 16160 ;; Return value:  Size  Location     Type
 16161 ;;                  1    wreg      enum E12110
 16162 ;; Registers used:
 16163 ;;		wreg, status,2, status,0, pclath, cstack
 16164 ;; Tracked objects:
 16165 ;;		On entry : 0/0
 16166 ;;		On exit  : 0/0
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;Total ram usage:        0 bytes
 16174 ;; Hardware stack levels used:    1
 16175 ;; Hardware stack levels required when called:    1
 16176 ;; This function calls:
 16177 ;;		_I2C_MasterSendTxData
 16178 ;; This function is called by:
 16179 ;;		_I2C_MasterFsm
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183                           
 16184                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 16185  0896                     _I2C_DO_SEND_ADR_WRITE:	
 16186                           
 16187                           ;i2c_master.c: 351: I2C_Status.addressNackCheck = 1;
 16188                           
 16189                           ;incstack = 0
 16190                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 16191  0896  0022               	movlb	2	; select bank2
 16192  0897  143D               	bsf	(_I2C_Status^(0+256)+29),0
 16193                           
 16194                           ;i2c_master.c: 352: I2C_MasterSendTxData(I2C_Status.address << 1);
 16195  0898  3536               	lslf	(_I2C_Status^(0+256)+22),w
 16196  0899  3188  206A         	fcall	_I2C_MasterSendTxData
 16197                           
 16198                           ;i2c_master.c: 353: return I2C_TX;
 16199  089B  3003               	movlw	3
 16200  089C  0008               	return
 16201  089D                     __end_of_I2C_DO_SEND_ADR_WRITE:	
 16202                           
 16203                           	psect	text76
 16204  08A4                     __ptext76:	
 16205 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 16206 ;; Defined at:
 16207 ;;		line 342 in file "mcc_generated_files/i2c_master.c"
 16208 ;; Parameters:    Size  Location     Type
 16209 ;;		None
 16210 ;; Auto vars:     Size  Location     Type
 16211 ;;		None
 16212 ;; Return value:  Size  Location     Type
 16213 ;;                  1    wreg      enum E12110
 16214 ;; Registers used:
 16215 ;;		wreg, status,2, status,0, pclath, cstack
 16216 ;; Tracked objects:
 16217 ;;		On entry : 0/0
 16218 ;;		On exit  : 0/0
 16219 ;;		Unchanged: 0/0
 16220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;Total ram usage:        0 bytes
 16226 ;; Hardware stack levels used:    1
 16227 ;; Hardware stack levels required when called:    1
 16228 ;; This function calls:
 16229 ;;		_I2C_MasterSendTxData
 16230 ;; This function is called by:
 16231 ;;		_I2C_MasterFsm
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           
 16236                           ;psect for function _I2C_DO_SEND_ADR_READ
 16237  08A4                     _I2C_DO_SEND_ADR_READ:	
 16238                           
 16239                           ;i2c_master.c: 344: I2C_Status.addressNackCheck = 1;
 16240                           
 16241                           ;incstack = 0
 16242                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 16243  08A4  0022               	movlb	2	; select bank2
 16244  08A5  143D               	bsf	(_I2C_Status^(0+256)+29),0
 16245                           
 16246                           ;i2c_master.c: 345: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 16247  08A6  1403               	setc
 16248  08A7  0D36               	rlf	(_I2C_Status^(0+256)+22),w
 16249  08A8  3188  206A         	fcall	_I2C_MasterSendTxData
 16250                           
 16251                           ;i2c_master.c: 346: return I2C_RCEN;
 16252  08AA  3005               	movlw	5
 16253  08AB  0008               	return
 16254  08AC                     __end_of_I2C_DO_SEND_ADR_READ:	
 16255                           
 16256                           	psect	text77
 16257  086F                     __ptext77:	
 16258 ;; *************** function _I2C_DO_IDLE *****************
 16259 ;; Defined at:
 16260 ;;		line 335 in file "mcc_generated_files/i2c_master.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;		None
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;		None
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      enum E12110
 16267 ;; Registers used:
 16268 ;;		wreg, status,2
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;Total ram usage:        0 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; This function calls:
 16281 ;;		Nothing
 16282 ;; This function is called by:
 16283 ;;		_I2C_MasterFsm
 16284 ;; This function uses a non-reentrant model
 16285 ;;
 16286                           
 16287                           
 16288                           ;psect for function _I2C_DO_IDLE
 16289  086F                     _I2C_DO_IDLE:	
 16290                           
 16291                           ;i2c_master.c: 337: I2C_Status.busy = 0;
 16292                           
 16293                           ;incstack = 0
 16294                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 16295  086F  0022               	movlb	2	; select bank2
 16296  0870  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 16297                           
 16298                           ;i2c_master.c: 338: I2C_Status.error = I2C_NOERR;
 16299  0871  01BC               	clrf	(_I2C_Status^(0+256)+28)
 16300                           
 16301                           ;i2c_master.c: 339: return I2C_RESET;
 16302  0872  300E               	movlw	14
 16303  0873  0008               	return
 16304  0874                     __end_of_I2C_DO_IDLE:	
 16305                           
 16306                           	psect	text78
 16307  0B3D                     __ptext78:	
 16308 ;; *************** function _I2C_DO_TX_EMPTY *****************
 16309 ;; Defined at:
 16310 ;;		line 411 in file "mcc_generated_files/i2c_master.c"
 16311 ;; Parameters:    Size  Location     Type
 16312 ;;		None
 16313 ;; Auto vars:     Size  Location     Type
 16314 ;;		None
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  1    wreg      enum E12110
 16317 ;; Registers used:
 16318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;Total ram usage:        1 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    3
 16331 ;; This function calls:
 16332 ;;		Absolute function
 16333 ;;		_I2C_CallbackReturnReset
 16334 ;;		_I2C_CallbackReturnStop
 16335 ;;		_I2C_DO_SEND_RESTART
 16336 ;;		_I2C_DO_SEND_STOP
 16337 ;;		_I2C_MasterSetIrq
 16338 ;;		_rd1RegCompleteHandler
 16339 ;;		_rd2RegCompleteHandler
 16340 ;;		_rdBlkRegCompleteHandler
 16341 ;;		_wr1RegCompleteHandler
 16342 ;;		_wr2RegCompleteHandler
 16343 ;; This function is called by:
 16344 ;;		_I2C_MasterFsm
 16345 ;; This function uses a non-reentrant model
 16346 ;;
 16347                           
 16348                           
 16349                           ;psect for function _I2C_DO_TX_EMPTY
 16350  0B3D                     _I2C_DO_TX_EMPTY:	
 16351                           
 16352                           ;i2c_master.c: 413: I2C_Status.bufferFree = 1;
 16353                           
 16354                           ;incstack = 0
 16355                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16356  0B3D  0022               	movlb	2	; select bank2
 16357  0B3E  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 16358                           
 16359                           ;i2c_master.c: 414: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 16360  0B3F  2B4A               	goto	i1l3987
 16361  0B40                     i1l3971:	
 16362                           ;i2c_master.c: 415: {
 16363                           ;i2c_master.c: 416: case I2C_RESTART_READ:
 16364                           
 16365                           
 16366                           ;i2c_master.c: 417: case I2C_RESTART_WRITE:
 16367                           ;i2c_master.c: 418: return I2C_DO_SEND_RESTART();
 16368  0B40  3188  204E         	fcall	_I2C_DO_SEND_RESTART
 16369  0B42  0008               	return
 16370  0B43                     i1l3975:	
 16371                           ;i2c_master.c: 419: case I2C_CONTINUE:
 16372                           
 16373                           
 16374                           ;i2c_master.c: 420: I2C_MasterSetIrq();
 16375  0B43  3188  2022         	fcall	_I2C_MasterSetIrq
 16376                           
 16377                           ;i2c_master.c: 421: return I2C_TX;
 16378  0B45  3003               	movlw	3
 16379  0B46  0008               	return
 16380  0B47                     i1l3981:	
 16381                           ;i2c_master.c: 423: case I2C_STOP:
 16382                           
 16383                           ;i2c_master.c: 422: default:
 16384                           
 16385                           
 16386                           ;i2c_master.c: 424: return I2C_DO_SEND_STOP();
 16387  0B47  3188  2052         	fcall	_I2C_DO_SEND_STOP
 16388                           
 16389                           ;i2c_master.c: 425: }
 16390  0B49  0008               	return
 16391  0B4A                     i1l3987:	
 16392  0B4A  0022               	movlb	2	; select bank2
 16393  0B4B  082C               	movf	(low ((_I2C_Status| (0+256)+12)))^0,w
 16394  0B4C  00FA               	movwf	??_I2C_DO_TX_EMPTY
 16395  0B4D  087A               	movf	??_I2C_DO_TX_EMPTY,w
 16396  0B4E  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 16397  0B4F  0821               	movf	(_I2C_Status+1)^(0+256),w
 16398  0B50  008A               	movwf	10
 16399  0B51  0820               	movf	_I2C_Status^(0+256),w
 16400  0B52  000A               	callw
 16401  0B53  318B               	pagesel	$
 16402                           
 16403                           ; Switch size 1, requested type "space"
 16404                           ; Number of cases is 4, Range of values is 1 to 4
 16405                           ; switch strategies available:
 16406                           ; Name         Instructions Cycles
 16407                           ; simple_byte           13     7 (average)
 16408                           ; direct_byte           17     9 (fixed)
 16409                           ; jumptable            263     9 (fixed)
 16410                           ;	Chosen strategy is simple_byte
 16411  0B54  3A01               	xorlw	1	; case 1
 16412  0B55  1903               	skipnz
 16413  0B56  2B47               	goto	i1l3981
 16414  0B57  3A03               	xorlw	3	; case 2
 16415  0B58  1903               	skipnz
 16416  0B59  2B40               	goto	i1l3971
 16417  0B5A  3A01               	xorlw	1	; case 3
 16418  0B5B  1903               	skipnz
 16419  0B5C  2B40               	goto	i1l3971
 16420  0B5D  3A07               	xorlw	7	; case 4
 16421  0B5E  1903               	skipnz
 16422  0B5F  2B43               	goto	i1l3975
 16423  0B60  2B47               	goto	i1l3981
 16424  0B61  0008               	return
 16425  0B62                     __end_of_I2C_DO_TX_EMPTY:	
 16426                           
 16427                           	psect	text79
 16428  0822                     __ptext79:	
 16429 ;; *************** function _I2C_MasterSetIrq *****************
 16430 ;; Defined at:
 16431 ;;		line 647 in file "mcc_generated_files/i2c_master.c"
 16432 ;; Parameters:    Size  Location     Type
 16433 ;;		None
 16434 ;; Auto vars:     Size  Location     Type
 16435 ;;		None
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  1    wreg      void 
 16438 ;; Registers used:
 16439 ;;		None
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:        0 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; This function calls:
 16452 ;;		Nothing
 16453 ;; This function is called by:
 16454 ;;		_I2C_DO_TX_EMPTY
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           
 16459                           ;psect for function _I2C_MasterSetIrq
 16460  0822                     _I2C_MasterSetIrq:	
 16461                           
 16462                           ;i2c_master.c: 649: PIR1bits.SSP1IF = 1;
 16463                           
 16464                           ;incstack = 0
 16465                           ; Regs used in _I2C_MasterSetIrq: []
 16466  0822  0020               	movlb	0	; select bank0
 16467  0823  1590               	bsf	16,3	;volatile
 16468  0824  0008               	return
 16469  0825                     __end_of_I2C_MasterSetIrq:	
 16470                           
 16471                           	psect	text80
 16472  087E                     __ptext80:	
 16473 ;; *************** function _I2C_MasterIsNack *****************
 16474 ;; Defined at:
 16475 ;;		line 599 in file "mcc_generated_files/i2c_master.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;		None
 16478 ;; Auto vars:     Size  Location     Type
 16479 ;;		None
 16480 ;; Return value:  Size  Location     Type
 16481 ;;                  1    wreg      unsigned char 
 16482 ;; Registers used:
 16483 ;;		wreg, status,2, status,0
 16484 ;; Tracked objects:
 16485 ;;		On entry : 0/0
 16486 ;;		On exit  : 0/0
 16487 ;;		Unchanged: 0/0
 16488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;Total ram usage:        0 bytes
 16494 ;; Hardware stack levels used:    1
 16495 ;; This function calls:
 16496 ;;		Nothing
 16497 ;; This function is called by:
 16498 ;;		_I2C_MasterFsm
 16499 ;;		_I2C_DO_TX
 16500 ;; This function uses a non-reentrant model
 16501 ;;
 16502                           
 16503                           
 16504                           ;psect for function _I2C_MasterIsNack
 16505  087E                     _I2C_MasterIsNack:	
 16506                           
 16507                           ;i2c_master.c: 601: return SSP1CON2bits.ACKSTAT;
 16508                           
 16509                           ;incstack = 0
 16510                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 16511  087E  0024               	movlb	4	; select bank4
 16512  087F  0E16               	swapf	22,w	;volatile
 16513  0880  0C89               	rrf	9,f
 16514  0881  0C89               	rrf	9,f
 16515  0882  3901               	andlw	1
 16516  0883  0008               	return
 16517  0884                     __end_of_I2C_MasterIsNack:	
 16518                           
 16519                           	psect	text81
 16520  086A                     __ptext81:	
 16521 ;; *************** function _I2C_MasterSendTxData *****************
 16522 ;; Defined at:
 16523 ;;		line 569 in file "mcc_generated_files/i2c_master.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;  data            1    wreg     unsigned char 
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  data            1    0[COMMON] unsigned char 
 16528 ;; Return value:  Size  Location     Type
 16529 ;;                  1    wreg      void 
 16530 ;; Registers used:
 16531 ;;		wreg
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16541 ;;Total ram usage:        1 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; This function calls:
 16544 ;;		Nothing
 16545 ;; This function is called by:
 16546 ;;		_I2C_DO_SEND_ADR_READ
 16547 ;;		_I2C_DO_SEND_ADR_WRITE
 16548 ;;		_I2C_DO_TX
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           
 16553                           ;psect for function _I2C_MasterSendTxData
 16554  086A                     _I2C_MasterSendTxData:	
 16555                           
 16556                           ;incstack = 0
 16557                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 16558                           ;I2C_MasterSendTxData@data stored from wreg
 16559  086A  00F0               	movwf	I2C_MasterSendTxData@data
 16560                           
 16561                           ;i2c_master.c: 571: SSP1BUF = data;
 16562  086B  0870               	movf	I2C_MasterSendTxData@data,w
 16563  086C  0024               	movlb	4	; select bank4
 16564  086D  0091               	movwf	17	;volatile
 16565  086E  0008               	return
 16566  086F                     __end_of_I2C_MasterSendTxData:	
 16567                           
 16568                           	psect	text82
 16569  0842                     __ptext82:	
 16570 ;; *************** function i2c_master@I2C_MasterSendAck *****************
 16571 ;; Defined at:
 16572 ;;		line 604 in file "mcc_generated_files/i2c_master.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;		None
 16577 ;; Return value:  Size  Location     Type
 16578 ;;                  1    wreg      void 
 16579 ;; Registers used:
 16580 ;;		None
 16581 ;; Tracked objects:
 16582 ;;		On entry : 0/0
 16583 ;;		On exit  : 0/0
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;Total ram usage:        0 bytes
 16591 ;; Hardware stack levels used:    1
 16592 ;; This function calls:
 16593 ;;		Nothing
 16594 ;; This function is called by:
 16595 ;;		_I2C_DO_RX
 16596 ;;		_I2C_DO_RX_ACK
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function i2c_master@I2C_MasterSendAck
 16602  0842                     i2c_master@I2C_MasterSendAck:	
 16603                           
 16604                           ;i2c_master.c: 606: SSP1CON2bits.ACKDT = 0;
 16605                           
 16606                           ;incstack = 0
 16607                           ; Regs used in i2c_master@I2C_MasterSendAck: []
 16608  0842  0024               	movlb	4	; select bank4
 16609  0843  1296               	bcf	22,5	;volatile
 16610                           
 16611                           ;i2c_master.c: 607: SSP1CON2bits.ACKEN = 1;
 16612  0844  1616               	bsf	22,4	;volatile
 16613  0845  0008               	return
 16614  0846                     __end_ofi2c_master@I2C_MasterSendAck:	
 16615                           
 16616                           	psect	text83
 16617  081F                     __ptext83:	
 16618 ;; *************** function _I2C_MasterGetRxData *****************
 16619 ;; Defined at:
 16620 ;;		line 564 in file "mcc_generated_files/i2c_master.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;		None
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;		None
 16625 ;; Return value:  Size  Location     Type
 16626 ;;                  1    wreg      unsigned char 
 16627 ;; Registers used:
 16628 ;;		wreg
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;Total ram usage:        0 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; This function calls:
 16641 ;;		Nothing
 16642 ;; This function is called by:
 16643 ;;		_I2C_DO_RX
 16644 ;; This function uses a non-reentrant model
 16645 ;;
 16646                           
 16647                           
 16648                           ;psect for function _I2C_MasterGetRxData
 16649  081F                     _I2C_MasterGetRxData:	
 16650                           
 16651                           ;i2c_master.c: 566: return SSP1BUF;
 16652                           
 16653                           ;incstack = 0
 16654                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 16655  081F  0024               	movlb	4	; select bank4
 16656  0820  0811               	movf	17,w	;volatile
 16657  0821  0008               	return
 16658  0822                     __end_of_I2C_MasterGetRxData:	
 16659                           
 16660                           	psect	text84
 16661  083E                     __ptext84:	
 16662 ;; *************** function i2c_master@I2C_MasterSendNack *****************
 16663 ;; Defined at:
 16664 ;;		line 610 in file "mcc_generated_files/i2c_master.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;		None
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;		None
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  1    wreg      void 
 16671 ;; Registers used:
 16672 ;;		None
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;Total ram usage:        0 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; This function calls:
 16685 ;;		Nothing
 16686 ;; This function is called by:
 16687 ;;		_I2C_DO_RX_NACK_STOP
 16688 ;;		_I2C_DO_RX_NACK_RESTART
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           
 16693                           ;psect for function i2c_master@I2C_MasterSendNack
 16694  083E                     i2c_master@I2C_MasterSendNack:	
 16695                           
 16696                           ;i2c_master.c: 612: SSP1CON2bits.ACKDT = 1;
 16697                           
 16698                           ;incstack = 0
 16699                           ; Regs used in i2c_master@I2C_MasterSendNack: []
 16700  083E  0024               	movlb	4	; select bank4
 16701  083F  1696               	bsf	22,5	;volatile
 16702                           
 16703                           ;i2c_master.c: 613: SSP1CON2bits.ACKEN = 1;
 16704  0840  1616               	bsf	22,4	;volatile
 16705  0841  0008               	return
 16706  0842                     __end_ofi2c_master@I2C_MasterSendNack:	
 16707                           
 16708                           	psect	text85
 16709  081C                     __ptext85:	
 16710 ;; *************** function _I2C_MasterStartRx *****************
 16711 ;; Defined at:
 16712 ;;		line 584 in file "mcc_generated_files/i2c_master.c"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;		None
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;		None
 16717 ;; Return value:  Size  Location     Type
 16718 ;;                  1    wreg      void 
 16719 ;; Registers used:
 16720 ;;		None
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;Total ram usage:        0 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; This function calls:
 16733 ;;		Nothing
 16734 ;; This function is called by:
 16735 ;;		_I2C_DO_RCEN
 16736 ;; This function uses a non-reentrant model
 16737 ;;
 16738                           
 16739                           
 16740                           ;psect for function _I2C_MasterStartRx
 16741  081C                     _I2C_MasterStartRx:	
 16742                           
 16743                           ;i2c_master.c: 586: SSP1CON2bits.RCEN = 1;
 16744                           
 16745                           ;incstack = 0
 16746                           ; Regs used in _I2C_MasterStartRx: []
 16747  081C  0024               	movlb	4	; select bank4
 16748  081D  1596               	bsf	22,3	;volatile
 16749  081E  0008               	return
 16750  081F                     __end_of_I2C_MasterStartRx:	
 16751                           
 16752                           	psect	text86
 16753  07FE                     __ptext86:	
 16754 ;; *************** function _I2C_CallbackReturnReset *****************
 16755 ;; Defined at:
 16756 ;;		line 526 in file "mcc_generated_files/i2c_master.c"
 16757 ;; Parameters:    Size  Location     Type
 16758 ;;  funPtr          1    9[COMMON] PTR void 
 16759 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 16760 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 16761 ;; Auto vars:     Size  Location     Type
 16762 ;;		None
 16763 ;; Return value:  Size  Location     Type
 16764 ;;                  1    wreg      enum E97
 16765 ;; Registers used:
 16766 ;;		wreg
 16767 ;; Tracked objects:
 16768 ;;		On entry : 0/0
 16769 ;;		On exit  : 0/0
 16770 ;;		Unchanged: 0/0
 16771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16772 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;Total ram usage:        1 bytes
 16777 ;; Hardware stack levels used:    1
 16778 ;; This function calls:
 16779 ;;		Nothing
 16780 ;; This function is called by:
 16781 ;;		_I2C_Open
 16782 ;;		_I2C_DO_TX
 16783 ;;		_I2C_DO_RX
 16784 ;;		_I2C_DO_TX_EMPTY
 16785 ;;		_I2C_DO_ADDRESS_NACK
 16786 ;;		_I2C_DO_RX_EMPTY
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           
 16791                           ;psect for function _I2C_CallbackReturnReset
 16792  07FE                     _I2C_CallbackReturnReset:	
 16793                           
 16794                           ;i2c_master.c: 528: return I2C_RESET_LINK;
 16795                           
 16796                           ;incstack = 0
 16797                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 16798  07FE  3005               	movlw	5
 16799  07FF  0008               	return
 16800  0800                     __end_of_I2C_CallbackReturnReset:	
 16801                           
 16802                           	psect	text87
 16803  0002                     __ptext87:	
 16804 ;; *************** function _I2C_CallbackReturnStop *****************
 16805 ;; Defined at:
 16806 ;;		line 521 in file "mcc_generated_files/i2c_master.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;  funPtr          1    9[COMMON] PTR void 
 16809 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 16810 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;		None
 16813 ;; Return value:  Size  Location     Type
 16814 ;;                  1    wreg      enum E97
 16815 ;; Registers used:
 16816 ;;		wreg
 16817 ;; Tracked objects:
 16818 ;;		On entry : 0/0
 16819 ;;		On exit  : 0/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16822 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;Total ram usage:        1 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; This function calls:
 16829 ;;		Nothing
 16830 ;; This function is called by:
 16831 ;;		_I2C_Open
 16832 ;;		_I2C_SetCallback
 16833 ;;		i1_I2C_SetCallback
 16834 ;;		_I2C_DO_TX
 16835 ;;		_I2C_DO_RX
 16836 ;;		_I2C_DO_TX_EMPTY
 16837 ;;		_I2C_DO_ADDRESS_NACK
 16838 ;;		_I2C_DO_RX_EMPTY
 16839 ;; This function uses a non-reentrant model
 16840 ;;
 16841                           
 16842                           
 16843                           ;psect for function _I2C_CallbackReturnStop
 16844  0002                     _I2C_CallbackReturnStop:	
 16845                           
 16846                           ;i2c_master.c: 523: return I2C_STOP;
 16847                           
 16848                           ;incstack = 0
 16849                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 16850  0002  3001               	movlw	1
 16851  0003  0008               	return
 16852  0004                     __end_of_I2C_CallbackReturnStop:	
 16853                           
 16854                           	psect	text88
 16855  0A2F                     __ptext88:	
 16856 ;; *************** function _rdBlkRegCompleteHandler *****************
 16857 ;; Defined at:
 16858 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 16859 ;; Parameters:    Size  Location     Type
 16860 ;;  ptr             1    9[COMMON] PTR void 
 16861 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 16862 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 16863 ;; Auto vars:     Size  Location     Type
 16864 ;;		None
 16865 ;; Return value:  Size  Location     Type
 16866 ;;                  1    wreg      enum E97
 16867 ;; Registers used:
 16868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16869 ;; Tracked objects:
 16870 ;;		On entry : 0/0
 16871 ;;		On exit  : 0/0
 16872 ;;		Unchanged: 0/0
 16873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16874 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16878 ;;Total ram usage:        1 bytes
 16879 ;; Hardware stack levels used:    1
 16880 ;; Hardware stack levels required when called:    2
 16881 ;; This function calls:
 16882 ;;		_I2C_SetDataCompleteCallback
 16883 ;;		i1_I2C_SetBuffer
 16884 ;; This function is called by:
 16885 ;;		_I2C_ReadDataBlock
 16886 ;;		_I2C_DO_TX
 16887 ;;		_I2C_DO_RX
 16888 ;;		_I2C_DO_TX_EMPTY
 16889 ;;		_I2C_DO_ADDRESS_NACK
 16890 ;;		_I2C_DO_RX_EMPTY
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           
 16895                           ;psect for function _rdBlkRegCompleteHandler
 16896  0A2F                     _rdBlkRegCompleteHandler:	
 16897                           
 16898                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 16899                           
 16900                           ;incstack = 0
 16901                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16902  0A2F  0879               	movf	rdBlkRegCompleteHandler@ptr,w
 16903  0A30  3E02               	addlw	2
 16904  0A31  0086               	movwf	6
 16905  0A32  0187               	clrf	7
 16906  0A33  0801               	movf	1,w
 16907  0A34  00F0               	movwf	i1I2C_SetBuffer@buffer
 16908  0A35  3000               	movlw	0
 16909  0A36  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 16910  0A37  0879               	movf	rdBlkRegCompleteHandler@ptr,w
 16911  0A38  0086               	movwf	6
 16912  0A39  0187               	clrf	7
 16913  0A3A  3F40               	moviw [0]fsr1
 16914  0A3B  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 16915  0A3C  3F41               	moviw [1]fsr1
 16916  0A3D  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 16917  0A3E  3189  212A  318A   	fcall	i1_I2C_SetBuffer
 16918                           
 16919                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 16920  0A41  3000               	movlw	0
 16921  0A42  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 16922  0A43  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 16923  0A44  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 16924  0A45  3189  211E         	fcall	_I2C_SetDataCompleteCallback
 16925                           
 16926                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 16927  0A47  3002               	movlw	2
 16928  0A48  0008               	return
 16929  0A49                     __end_of_rdBlkRegCompleteHandler:	
 16930                           
 16931                           	psect	text89
 16932  0997                     __ptext89:	
 16933 ;; *************** function _wr1RegCompleteHandler *****************
 16934 ;; Defined at:
 16935 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 16936 ;; Parameters:    Size  Location     Type
 16937 ;;  ptr             1    9[COMMON] PTR void 
 16938 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 16939 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 16940 ;; Auto vars:     Size  Location     Type
 16941 ;;		None
 16942 ;; Return value:  Size  Location     Type
 16943 ;;                  1    wreg      enum E97
 16944 ;; Registers used:
 16945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16946 ;; Tracked objects:
 16947 ;;		On entry : 0/0
 16948 ;;		On exit  : 0/0
 16949 ;;		Unchanged: 0/0
 16950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16951 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;Total ram usage:        1 bytes
 16956 ;; Hardware stack levels used:    1
 16957 ;; Hardware stack levels required when called:    2
 16958 ;; This function calls:
 16959 ;;		_I2C_SetDataCompleteCallback
 16960 ;;		i1_I2C_SetBuffer
 16961 ;; This function is called by:
 16962 ;;		_I2C_Write1ByteRegister
 16963 ;;		_I2C_DO_TX
 16964 ;;		_I2C_DO_RX
 16965 ;;		_I2C_DO_TX_EMPTY
 16966 ;;		_I2C_DO_ADDRESS_NACK
 16967 ;;		_I2C_DO_RX_EMPTY
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           
 16972                           ;psect for function _wr1RegCompleteHandler
 16973  0997                     _wr1RegCompleteHandler:	
 16974                           
 16975                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 16976                           
 16977                           ;incstack = 0
 16978                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16979  0997  0879               	movf	wr1RegCompleteHandler@ptr,w
 16980  0998  00F0               	movwf	i1I2C_SetBuffer@buffer
 16981  0999  39FF               	andlw	255
 16982  099A  1D03               	skipz
 16983  099B  3000               	movlw	0
 16984  099C  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 16985  099D  3001               	movlw	1
 16986  099E  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 16987  099F  3000               	movlw	0
 16988  09A0  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 16989  09A1  3189  212A  3189   	fcall	i1_I2C_SetBuffer
 16990                           
 16991                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 16992  09A4  3000               	movlw	0
 16993  09A5  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 16994  09A6  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 16995  09A7  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 16996  09A8  3189  211E         	fcall	_I2C_SetDataCompleteCallback
 16997                           
 16998                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 16999  09AA  3004               	movlw	4
 17000  09AB  0008               	return
 17001  09AC                     __end_of_wr1RegCompleteHandler:	
 17002                           
 17003                           	psect	text90
 17004  0982                     __ptext90:	
 17005 ;; *************** function _rd2RegCompleteHandler *****************
 17006 ;; Defined at:
 17007 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 17008 ;; Parameters:    Size  Location     Type
 17009 ;;  ptr             1    9[COMMON] PTR void 
 17010 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 17011 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;		None
 17014 ;; Return value:  Size  Location     Type
 17015 ;;                  1    wreg      enum E97
 17016 ;; Registers used:
 17017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17023 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;Total ram usage:        1 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    2
 17030 ;; This function calls:
 17031 ;;		_I2C_SetDataCompleteCallback
 17032 ;;		i1_I2C_SetBuffer
 17033 ;; This function is called by:
 17034 ;;		_I2C_Read2ByteRegister
 17035 ;;		_I2C_DO_TX
 17036 ;;		_I2C_DO_RX
 17037 ;;		_I2C_DO_TX_EMPTY
 17038 ;;		_I2C_DO_ADDRESS_NACK
 17039 ;;		_I2C_DO_RX_EMPTY
 17040 ;; This function uses a non-reentrant model
 17041 ;;
 17042                           
 17043                           
 17044                           ;psect for function _rd2RegCompleteHandler
 17045  0982                     _rd2RegCompleteHandler:	
 17046                           
 17047                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 17048                           
 17049                           ;incstack = 0
 17050                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17051  0982  0879               	movf	rd2RegCompleteHandler@ptr,w
 17052  0983  00F0               	movwf	i1I2C_SetBuffer@buffer
 17053  0984  39FF               	andlw	255
 17054  0985  1D03               	skipz
 17055  0986  3000               	movlw	0
 17056  0987  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 17057  0988  3002               	movlw	2
 17058  0989  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 17059  098A  3000               	movlw	0
 17060  098B  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 17061  098C  3189  212A  3189   	fcall	i1_I2C_SetBuffer
 17062                           
 17063                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 17064  098F  3000               	movlw	0
 17065  0990  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 17066  0991  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 17067  0992  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 17068  0993  3189  211E         	fcall	_I2C_SetDataCompleteCallback
 17069                           
 17070                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 17071  0995  3002               	movlw	2
 17072  0996  0008               	return
 17073  0997                     __end_of_rd2RegCompleteHandler:	
 17074                           
 17075                           	psect	text91
 17076  096D                     __ptext91:	
 17077 ;; *************** function _rd1RegCompleteHandler *****************
 17078 ;; Defined at:
 17079 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;  ptr             1    9[COMMON] PTR void 
 17082 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 17083 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;		None
 17086 ;; Return value:  Size  Location     Type
 17087 ;;                  1    wreg      enum E97
 17088 ;; Registers used:
 17089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17090 ;; Tracked objects:
 17091 ;;		On entry : 0/0
 17092 ;;		On exit  : 0/0
 17093 ;;		Unchanged: 0/0
 17094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17095 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;Total ram usage:        1 bytes
 17100 ;; Hardware stack levels used:    1
 17101 ;; Hardware stack levels required when called:    2
 17102 ;; This function calls:
 17103 ;;		_I2C_SetDataCompleteCallback
 17104 ;;		i1_I2C_SetBuffer
 17105 ;; This function is called by:
 17106 ;;		_I2C_Read1ByteRegister
 17107 ;;		_I2C_DO_TX
 17108 ;;		_I2C_DO_RX
 17109 ;;		_I2C_DO_TX_EMPTY
 17110 ;;		_I2C_DO_ADDRESS_NACK
 17111 ;;		_I2C_DO_RX_EMPTY
 17112 ;; This function uses a non-reentrant model
 17113 ;;
 17114                           
 17115                           
 17116                           ;psect for function _rd1RegCompleteHandler
 17117  096D                     _rd1RegCompleteHandler:	
 17118                           
 17119                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 17120                           
 17121                           ;incstack = 0
 17122                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17123  096D  0879               	movf	rd1RegCompleteHandler@ptr,w
 17124  096E  00F0               	movwf	i1I2C_SetBuffer@buffer
 17125  096F  39FF               	andlw	255
 17126  0970  1D03               	skipz
 17127  0971  3000               	movlw	0
 17128  0972  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 17129  0973  3001               	movlw	1
 17130  0974  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 17131  0975  3000               	movlw	0
 17132  0976  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 17133  0977  3189  212A  3189   	fcall	i1_I2C_SetBuffer
 17134                           
 17135                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 17136  097A  3000               	movlw	0
 17137  097B  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 17138  097C  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 17139  097D  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 17140  097E  3189  211E         	fcall	_I2C_SetDataCompleteCallback
 17141                           
 17142                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 17143  0980  3002               	movlw	2
 17144  0981  0008               	return
 17145  0982                     __end_of_rd1RegCompleteHandler:	
 17146                           
 17147                           	psect	text92
 17148  0958                     __ptext92:	
 17149 ;; *************** function _wr2RegCompleteHandler *****************
 17150 ;; Defined at:
 17151 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  ptr             1    9[COMMON] PTR void 
 17154 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 17155 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;		None
 17158 ;; Return value:  Size  Location     Type
 17159 ;;                  1    wreg      enum E97
 17160 ;; Registers used:
 17161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17162 ;; Tracked objects:
 17163 ;;		On entry : 0/0
 17164 ;;		On exit  : 0/0
 17165 ;;		Unchanged: 0/0
 17166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17167 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;Total ram usage:        1 bytes
 17172 ;; Hardware stack levels used:    1
 17173 ;; Hardware stack levels required when called:    2
 17174 ;; This function calls:
 17175 ;;		_I2C_SetDataCompleteCallback
 17176 ;;		i1_I2C_SetBuffer
 17177 ;; This function is called by:
 17178 ;;		_I2C_Write2ByteRegister
 17179 ;;		_I2C_DO_TX
 17180 ;;		_I2C_DO_RX
 17181 ;;		_I2C_DO_TX_EMPTY
 17182 ;;		_I2C_DO_ADDRESS_NACK
 17183 ;;		_I2C_DO_RX_EMPTY
 17184 ;; This function uses a non-reentrant model
 17185 ;;
 17186                           
 17187                           
 17188                           ;psect for function _wr2RegCompleteHandler
 17189  0958                     _wr2RegCompleteHandler:	
 17190                           
 17191                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 17192                           
 17193                           ;incstack = 0
 17194                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17195  0958  0879               	movf	wr2RegCompleteHandler@ptr,w
 17196  0959  00F0               	movwf	i1I2C_SetBuffer@buffer
 17197  095A  39FF               	andlw	255
 17198  095B  1D03               	skipz
 17199  095C  3000               	movlw	0
 17200  095D  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 17201  095E  3002               	movlw	2
 17202  095F  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 17203  0960  3000               	movlw	0
 17204  0961  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 17205  0962  3189  212A  3189   	fcall	i1_I2C_SetBuffer
 17206                           
 17207                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 17208  0965  3000               	movlw	0
 17209  0966  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 17210  0967  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 17211  0968  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 17212  0969  3189  211E         	fcall	_I2C_SetDataCompleteCallback
 17213                           
 17214                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 17215  096B  3004               	movlw	4
 17216  096C  0008               	return
 17217  096D                     __end_of_wr2RegCompleteHandler:	
 17218                           
 17219                           	psect	text93
 17220  092A                     __ptext93:	
 17221 ;; *************** function i1_I2C_SetBuffer *****************
 17222 ;; Defined at:
 17223 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 17224 ;; Parameters:    Size  Location     Type
 17225 ;;  buffer          2    0[COMMON] PTR void 
 17226 ;;		 -> RxBuff(8), Command(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 17227 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
 17228 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
 17229 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
 17230 ;;  bufferSize      2    2[COMMON] unsigned int 
 17231 ;; Auto vars:     Size  Location     Type
 17232 ;;		None
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      void 
 17235 ;; Registers used:
 17236 ;;		wreg
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;Total ram usage:        4 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; This function calls:
 17249 ;;		Nothing
 17250 ;; This function is called by:
 17251 ;;		_rd1RegCompleteHandler
 17252 ;;		_rd2RegCompleteHandler
 17253 ;;		_wr1RegCompleteHandler
 17254 ;;		_wr2RegCompleteHandler
 17255 ;;		_rdBlkRegCompleteHandler
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           
 17260                           ;psect for function i1_I2C_SetBuffer
 17261  092A                     i1_I2C_SetBuffer:	
 17262                           
 17263                           ;i2c_master.c: 266: if(I2C_Status.bufferFree)
 17264                           
 17265                           ;incstack = 0
 17266                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 17267  092A  0022               	movlb	2	; select bank2
 17268  092B  1DBD               	btfss	(_I2C_Status^(0+256)+29),3
 17269  092C  0008               	return
 17270                           
 17271                           ;i2c_master.c: 267: {
 17272                           ;i2c_master.c: 268: I2C_Status.data_ptr = buffer;
 17273  092D  0871               	movf	i1I2C_SetBuffer@buffer+1,w
 17274  092E  00B8               	movwf	((low ((_I2C_Status| (0+256)+23))+1))^0
 17275  092F  0870               	movf	i1I2C_SetBuffer@buffer,w
 17276  0930  00B7               	movwf	(low ((_I2C_Status| (0+256)+23)))^0
 17277                           
 17278                           ;i2c_master.c: 269: I2C_Status.data_length = bufferSize;
 17279  0931  0873               	movf	i1I2C_SetBuffer@bufferSize+1,w
 17280  0932  00BA               	movwf	((_I2C_Status+1)^(0+256)+25)
 17281  0933  0872               	movf	i1I2C_SetBuffer@bufferSize,w
 17282  0934  00B9               	movwf	(_I2C_Status^(0+256)+25)
 17283                           
 17284                           ;i2c_master.c: 270: I2C_Status.bufferFree = 0;
 17285  0935  11BD               	bcf	(_I2C_Status^(0+256)+29),3
 17286  0936  0008               	return
 17287  0937                     __end_ofi1_I2C_SetBuffer:	
 17288                           
 17289                           	psect	text94
 17290  091E                     __ptext94:	
 17291 ;; *************** function _I2C_SetDataCompleteCallback *****************
 17292 ;; Defined at:
 17293 ;;		line 274 in file "mcc_generated_files/i2c_master.c"
 17294 ;; Parameters:    Size  Location     Type
 17295 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 17296 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 17297 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 17298 ;;  ptr             1    7[COMMON] PTR void 
 17299 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 17300 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;		None
 17303 ;; Return value:  Size  Location     Type
 17304 ;;                  1    wreg      void 
 17305 ;; Registers used:
 17306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17307 ;; Tracked objects:
 17308 ;;		On entry : 0/0
 17309 ;;		On exit  : 0/0
 17310 ;;		Unchanged: 0/0
 17311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17312 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;Total ram usage:        4 bytes
 17317 ;; Hardware stack levels used:    1
 17318 ;; Hardware stack levels required when called:    1
 17319 ;; This function calls:
 17320 ;;		i1_I2C_SetCallback
 17321 ;; This function is called by:
 17322 ;;		_rd1RegCompleteHandler
 17323 ;;		_rd2RegCompleteHandler
 17324 ;;		_wr1RegCompleteHandler
 17325 ;;		_wr2RegCompleteHandler
 17326 ;;		_rdBlkRegCompleteHandler
 17327 ;;		_I2C_Read1ByteRegister
 17328 ;;		_I2C_Read2ByteRegister
 17329 ;;		_I2C_Write1ByteRegister
 17330 ;;		_I2C_Write2ByteRegister
 17331 ;;		_I2C_ReadDataBlock
 17332 ;; This function uses a non-reentrant model
 17333 ;;
 17334                           
 17335                           
 17336                           ;psect for function _I2C_SetDataCompleteCallback
 17337  091E                     _I2C_SetDataCompleteCallback:	
 17338                           
 17339                           ;i2c_master.c: 276: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 17340                           
 17341                           ;incstack = 0
 17342                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17343  091E  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
 17344  091F  00F1               	movwf	i1I2C_SetCallback@cb+1
 17345  0920  0875               	movf	I2C_SetDataCompleteCallback@cb,w
 17346  0921  00F0               	movwf	i1I2C_SetCallback@cb
 17347  0922  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
 17348  0923  00F8               	movwf	??_I2C_SetDataCompleteCallback
 17349  0924  0878               	movf	??_I2C_SetDataCompleteCallback,w
 17350  0925  00F2               	movwf	i1I2C_SetCallback@ptr
 17351  0926  3000               	movlw	0
 17352  0927  318B  2362         	fcall	i1_I2C_SetCallback
 17353  0929  0008               	return
 17354  092A                     __end_of_I2C_SetDataCompleteCallback:	
 17355                           
 17356                           	psect	text95
 17357  0B62                     __ptext95:	
 17358 ;; *************** function i1_I2C_SetCallback *****************
 17359 ;; Defined at:
 17360 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;  idx             1    wreg     enum E12128
 17363 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 17364 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 17365 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 17366 ;;  ptr             1    2[COMMON] PTR void 
 17367 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 17368 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;  idx             1    4[COMMON] enum E12128
 17371 ;; Return value:  Size  Location     Type
 17372 ;;                  1    wreg      void 
 17373 ;; Registers used:
 17374 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17380 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17384 ;;Total ram usage:        5 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; This function calls:
 17387 ;;		Nothing
 17388 ;; This function is called by:
 17389 ;;		_I2C_SetDataCompleteCallback
 17390 ;; This function uses a non-reentrant model
 17391 ;;
 17392                           
 17393                           
 17394                           ;psect for function i1_I2C_SetCallback
 17395  0B62                     i1_I2C_SetCallback:	
 17396                           
 17397                           ;incstack = 0
 17398                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 17399                           ;i1I2C_SetCallback@idx stored from wreg
 17400  0B62  00F4               	movwf	i1I2C_SetCallback@idx
 17401                           
 17402                           ;i2c_master.c: 306: if(cb)
 17403  0B63  0870               	movf	i1I2C_SetCallback@cb,w
 17404  0B64  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 17405  0B65  1903               	btfsc	3,2
 17406  0B66  2B7A               	goto	i1l3213
 17407                           
 17408                           ;i2c_master.c: 307: {
 17409                           ;i2c_master.c: 308: I2C_Status.callbackTable[idx] = cb;
 17410  0B67  3574               	lslf	i1I2C_SetCallback@idx,w
 17411  0B68  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 17412  0B69  0086               	movwf	6
 17413  0B6A  3001               	movlw	1	; select bank2/3
 17414  0B6B  0087               	movwf	7
 17415  0B6C  0870               	movf	i1I2C_SetCallback@cb,w
 17416  0B6D  3FC0               	movwi [0]fsr1
 17417  0B6E  0871               	movf	i1I2C_SetCallback@cb+1,w
 17418  0B6F  3FC1               	movwi [1]fsr1
 17419                           
 17420                           ;i2c_master.c: 309: I2C_Status.callbackPayload[idx] = ptr;
 17421  0B70  0872               	movf	i1I2C_SetCallback@ptr,w
 17422  0B71  00F3               	movwf	??i1_I2C_SetCallback
 17423  0B72  0874               	movf	i1I2C_SetCallback@idx,w
 17424  0B73  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 17425  0B74  0086               	movwf	6
 17426  0B75  3001               	movlw	1	; select bank2/3
 17427  0B76  0087               	movwf	7
 17428  0B77  0873               	movf	??i1_I2C_SetCallback,w
 17429  0B78  0081               	movwf	1
 17430                           
 17431                           ;i2c_master.c: 310: }
 17432  0B79  0008               	return
 17433  0B7A                     i1l3213:	
 17434                           
 17435                           ;i2c_master.c: 311: else
 17436                           ;i2c_master.c: 312: {
 17437                           ;i2c_master.c: 313: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 17438  0B7A  3574               	lslf	i1I2C_SetCallback@idx,w
 17439  0B7B  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 17440  0B7C  0086               	movwf	6
 17441  0B7D  3001               	movlw	1	; select bank2/3
 17442  0B7E  0087               	movwf	7
 17443  0B7F  3002               	movlw	low _I2C_CallbackReturnStop
 17444  0B80  3FC0               	movwi [0]fsr1
 17445  0B81  3000               	movlw	high _I2C_CallbackReturnStop
 17446  0B82  3FC1               	movwi [1]fsr1
 17447                           
 17448                           ;i2c_master.c: 314: I2C_Status.callbackPayload[idx] = (0);
 17449  0B83  0874               	movf	i1I2C_SetCallback@idx,w
 17450  0B84  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 17451  0B85  0086               	movwf	6
 17452  0B86  3001               	movlw	1	; select bank2/3
 17453  0B87  0087               	movwf	7
 17454  0B88  0181               	clrf	1
 17455  0B89  0008               	return
 17456  0B8A                     __end_ofi1_I2C_SetCallback:	
 17457                           
 17458                           	psect	text96
 17459  0819                     __ptext96:	
 17460 ;; *************** function _I2C_MasterStop *****************
 17461 ;; Defined at:
 17462 ;;		line 594 in file "mcc_generated_files/i2c_master.c"
 17463 ;; Parameters:    Size  Location     Type
 17464 ;;		None
 17465 ;; Auto vars:     Size  Location     Type
 17466 ;;		None
 17467 ;; Return value:  Size  Location     Type
 17468 ;;                  1    wreg      void 
 17469 ;; Registers used:
 17470 ;;		None
 17471 ;; Tracked objects:
 17472 ;;		On entry : 0/0
 17473 ;;		On exit  : 0/0
 17474 ;;		Unchanged: 0/0
 17475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;Total ram usage:        0 bytes
 17481 ;; Hardware stack levels used:    1
 17482 ;; This function calls:
 17483 ;;		Nothing
 17484 ;; This function is called by:
 17485 ;;		_I2C_DO_SEND_STOP
 17486 ;; This function uses a non-reentrant model
 17487 ;;
 17488                           
 17489                           
 17490                           ;psect for function _I2C_MasterStop
 17491  0819                     _I2C_MasterStop:	
 17492                           
 17493                           ;i2c_master.c: 596: SSP1CON2bits.PEN = 1;
 17494                           
 17495                           ;incstack = 0
 17496                           ; Regs used in _I2C_MasterStop: []
 17497  0819  0024               	movlb	4	; select bank4
 17498  081A  1516               	bsf	22,2	;volatile
 17499  081B  0008               	return
 17500  081C                     __end_of_I2C_MasterStop:	
 17501                           
 17502                           	psect	text97
 17503  0816                     __ptext97:	
 17504 ;; *************** function _I2C_MasterEnableRestart *****************
 17505 ;; Defined at:
 17506 ;;		line 574 in file "mcc_generated_files/i2c_master.c"
 17507 ;; Parameters:    Size  Location     Type
 17508 ;;		None
 17509 ;; Auto vars:     Size  Location     Type
 17510 ;;		None
 17511 ;; Return value:  Size  Location     Type
 17512 ;;                  1    wreg      void 
 17513 ;; Registers used:
 17514 ;;		None
 17515 ;; Tracked objects:
 17516 ;;		On entry : 0/0
 17517 ;;		On exit  : 0/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;Total ram usage:        0 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; This function calls:
 17527 ;;		Nothing
 17528 ;; This function is called by:
 17529 ;;		_I2C_DO_SEND_RESTART_READ
 17530 ;;		_I2C_DO_SEND_RESTART_WRITE
 17531 ;;		_I2C_DO_SEND_RESTART
 17532 ;;		_I2C_DO_RX_EMPTY
 17533 ;; This function uses a non-reentrant model
 17534 ;;
 17535                           
 17536                           
 17537                           ;psect for function _I2C_MasterEnableRestart
 17538  0816                     _I2C_MasterEnableRestart:	
 17539                           
 17540                           ;i2c_master.c: 576: SSP1CON2bits.RSEN = 1;
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _I2C_MasterEnableRestart: []
 17544  0816  0024               	movlb	4	; select bank4
 17545  0817  1496               	bsf	22,1	;volatile
 17546  0818  0008               	return
 17547  0819                     __end_of_I2C_MasterEnableRestart:	
 17548                           
 17549                           	psect	text98
 17550  0A9C                     __ptext98:	
 17551 ;; *************** function _EUSART_Transmit_ISR *****************
 17552 ;; Defined at:
 17553 ;;		line 206 in file "mcc_generated_files/eusart.c"
 17554 ;; Parameters:    Size  Location     Type
 17555 ;;		None
 17556 ;; Auto vars:     Size  Location     Type
 17557 ;;		None
 17558 ;; Return value:  Size  Location     Type
 17559 ;;                  1    wreg      void 
 17560 ;; Registers used:
 17561 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17562 ;; Tracked objects:
 17563 ;;		On entry : 0/0
 17564 ;;		On exit  : 0/0
 17565 ;;		Unchanged: 0/0
 17566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;Total ram usage:        1 bytes
 17572 ;; Hardware stack levels used:    1
 17573 ;; This function calls:
 17574 ;;		Nothing
 17575 ;; This function is called by:
 17576 ;;		_EUSART_Initialize
 17577 ;;		_INTERRUPT_InterruptManager
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           
 17582                           ;psect for function _EUSART_Transmit_ISR
 17583  0A9C                     _EUSART_Transmit_ISR:	
 17584                           
 17585                           ;eusart.c: 210: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 17586                           
 17587                           ;incstack = 0
 17588                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17589  0A9C  3008               	movlw	8
 17590  0A9D  0021               	movlb	1	; select bank1
 17591  0A9E  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 17592  0A9F  1803               	skipnc
 17593  0AA0  2AB7               	goto	i1l696
 17594                           
 17595                           ;eusart.c: 211: {
 17596                           ;eusart.c: 212: TX1REG = eusartTxBuffer[eusartTxTail++];
 17597  0AA1  084B               	movf	_eusartTxTail^(0+128),w
 17598  0AA2  3E4E               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 17599  0AA3  0086               	movwf	6
 17600  0AA4  3001               	movlw	1	; select bank2/3
 17601  0AA5  0087               	movwf	7
 17602  0AA6  0801               	movf	1,w
 17603  0AA7  0023               	movlb	3	; select bank3
 17604  0AA8  009A               	movwf	26	;volatile
 17605  0AA9  3001               	movlw	1
 17606  0AAA  00F0               	movwf	??_EUSART_Transmit_ISR
 17607  0AAB  0870               	movf	??_EUSART_Transmit_ISR,w
 17608  0AAC  0021               	movlb	1	; select bank1
 17609  0AAD  07CB               	addwf	_eusartTxTail^(0+128),f	;volatile
 17610                           
 17611                           ;eusart.c: 213: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 17612  0AAE  3008               	movlw	8
 17613  0AAF  024B               	subwf	_eusartTxTail^(0+128),w	;volatile
 17614  0AB0  1803               	btfsc	3,0
 17615                           
 17616                           ;eusart.c: 214: {
 17617                           ;eusart.c: 215: eusartTxTail = 0;
 17618  0AB1  01CB               	clrf	_eusartTxTail^(0+128)	;volatile
 17619                           
 17620                           ;eusart.c: 216: }
 17621                           ;eusart.c: 217: eusartTxBufferRemaining++;
 17622  0AB2  3001               	movlw	1
 17623  0AB3  00F0               	movwf	??_EUSART_Transmit_ISR
 17624  0AB4  0870               	movf	??_EUSART_Transmit_ISR,w
 17625  0AB5  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 17626                           
 17627                           ;eusart.c: 218: }
 17628  0AB6  0008               	return
 17629  0AB7                     i1l696:	
 17630                           
 17631                           ;eusart.c: 219: else
 17632                           ;eusart.c: 220: {
 17633                           ;eusart.c: 221: PIE1bits.TXIE = 0;
 17634  0AB7  1210               	bcf	16,4	;volatile
 17635  0AB8  0008               	return
 17636  0AB9                     __end_of_EUSART_Transmit_ISR:	
 17637                           
 17638                           	psect	text99
 17639  0CBF                     __ptext99:	
 17640 ;; *************** function _EUSART_Receive_ISR *****************
 17641 ;; Defined at:
 17642 ;;		line 225 in file "mcc_generated_files/eusart.c"
 17643 ;; Parameters:    Size  Location     Type
 17644 ;;		None
 17645 ;; Auto vars:     Size  Location     Type
 17646 ;;		None
 17647 ;; Return value:  Size  Location     Type
 17648 ;;                  1    wreg      void 
 17649 ;; Registers used:
 17650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17651 ;; Tracked objects:
 17652 ;;		On entry : 0/0
 17653 ;;		On exit  : 0/0
 17654 ;;		Unchanged: 0/0
 17655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17660 ;;Total ram usage:        0 bytes
 17661 ;; Hardware stack levels used:    1
 17662 ;; Hardware stack levels required when called:    2
 17663 ;; This function calls:
 17664 ;;		Absolute function
 17665 ;;		_EUSART_DefaultErrorHandler
 17666 ;;		_EUSART_DefaultFramingErrorHandler
 17667 ;;		_EUSART_DefaultOverrunErrorHandler
 17668 ;;		_EUSART_RxDataHandler
 17669 ;; This function is called by:
 17670 ;;		_EUSART_Initialize
 17671 ;;		_INTERRUPT_InterruptManager
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           
 17676                           ;psect for function _EUSART_Receive_ISR
 17677  0CBF                     _EUSART_Receive_ISR:	
 17678                           
 17679                           ;eusart.c: 228: eusartRxStatusBuffer[eusartRxHead].status = 0;
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17683  0CBF  0020               	movlb	0	; select bank0
 17684  0CC0  086A               	movf	_eusartRxHead,w	;volatile
 17685  0CC1  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17686  0CC2  0086               	movwf	6
 17687  0CC3  3001               	movlw	1	; select bank2/3
 17688  0CC4  0087               	movwf	7
 17689  0CC5  0181               	clrf	1
 17690                           
 17691                           ;eusart.c: 230: if(RC1STAbits.FERR){
 17692  0CC6  0023               	movlb	3	; select bank3
 17693  0CC7  1D1D               	btfss	29,2	;volatile
 17694  0CC8  2CD6               	goto	i1l4395
 17695                           
 17696                           ;eusart.c: 231: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17697  0CC9  0020               	movlb	0	; select bank0
 17698  0CCA  086A               	movf	_eusartRxHead,w	;volatile
 17699  0CCB  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17700  0CCC  0086               	movwf	6
 17701  0CCD  3001               	movlw	1	; select bank2/3
 17702  0CCE  0087               	movwf	7
 17703  0CCF  1481               	bsf	1,1
 17704                           
 17705                           ;eusart.c: 232: EUSART_FramingErrorHandler();
 17706  0CD0  0022               	movlb	2	; select bank2
 17707  0CD1  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 17708  0CD2  008A               	movwf	10
 17709  0CD3  0864               	movf	_EUSART_FramingErrorHandler^(0+256),w
 17710  0CD4  000A               	callw
 17711  0CD5  318C               	pagesel	$
 17712  0CD6                     i1l4395:	
 17713                           
 17714                           ;eusart.c: 233: }
 17715                           ;eusart.c: 235: if(RC1STAbits.OERR){
 17716  0CD6  0023               	movlb	3	; select bank3
 17717  0CD7  1C9D               	btfss	29,1	;volatile
 17718  0CD8  2CE6               	goto	i1l4401
 17719                           
 17720                           ;eusart.c: 236: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17721  0CD9  0020               	movlb	0	; select bank0
 17722  0CDA  086A               	movf	_eusartRxHead,w	;volatile
 17723  0CDB  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17724  0CDC  0086               	movwf	6
 17725  0CDD  3001               	movlw	1	; select bank2/3
 17726  0CDE  0087               	movwf	7
 17727  0CDF  1501               	bsf	1,2
 17728                           
 17729                           ;eusart.c: 237: EUSART_OverrunErrorHandler();
 17730  0CE0  0022               	movlb	2	; select bank2
 17731  0CE1  0863               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 17732  0CE2  008A               	movwf	10
 17733  0CE3  0862               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 17734  0CE4  000A               	callw
 17735  0CE5  318C               	pagesel	$
 17736  0CE6                     i1l4401:	
 17737                           
 17738                           ;eusart.c: 238: }
 17739                           ;eusart.c: 240: if(eusartRxStatusBuffer[eusartRxHead].status){
 17740  0CE6  0020               	movlb	0	; select bank0
 17741  0CE7  086A               	movf	_eusartRxHead,w	;volatile
 17742  0CE8  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17743  0CE9  0086               	movwf	6
 17744  0CEA  3001               	movlw	1	; select bank2/3
 17745  0CEB  0087               	movwf	7
 17746  0CEC  0801               	movf	1,w
 17747  0CED  1903               	btfsc	3,2
 17748  0CEE  2CF6               	goto	i1l4405
 17749                           
 17750                           ;eusart.c: 241: EUSART_ErrorHandler();
 17751  0CEF  0022               	movlb	2	; select bank2
 17752  0CF0  0861               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 17753  0CF1  008A               	movwf	10
 17754  0CF2  0860               	movf	_EUSART_ErrorHandler^(0+256),w
 17755  0CF3  000A               	callw
 17756  0CF4  318C               	pagesel	$
 17757                           
 17758                           ;eusart.c: 242: } else {
 17759  0CF5  0008               	return
 17760  0CF6                     i1l4405:	
 17761                           
 17762                           ;eusart.c: 243: EUSART_RxDataHandler();
 17763  0CF6  318A  2216         	fcall	_EUSART_RxDataHandler
 17764  0CF8  0008               	return
 17765  0CF9                     __end_of_EUSART_Receive_ISR:	
 17766                           
 17767                           	psect	text100
 17768  083A                     __ptext100:	
 17769 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17770 ;; Defined at:
 17771 ;;		line 261 in file "mcc_generated_files/eusart.c"
 17772 ;; Parameters:    Size  Location     Type
 17773 ;;		None
 17774 ;; Auto vars:     Size  Location     Type
 17775 ;;		None
 17776 ;; Return value:  Size  Location     Type
 17777 ;;                  1    wreg      void 
 17778 ;; Registers used:
 17779 ;;		None
 17780 ;; Tracked objects:
 17781 ;;		On entry : 0/0
 17782 ;;		On exit  : 0/0
 17783 ;;		Unchanged: 0/0
 17784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;Total ram usage:        0 bytes
 17790 ;; Hardware stack levels used:    1
 17791 ;; This function calls:
 17792 ;;		Nothing
 17793 ;; This function is called by:
 17794 ;;		_EUSART_Initialize
 17795 ;;		_EUSART_Receive_ISR
 17796 ;; This function uses a non-reentrant model
 17797 ;;
 17798                           
 17799                           
 17800                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17801  083A                     _EUSART_DefaultOverrunErrorHandler:	
 17802                           
 17803                           ;eusart.c: 264: RC1STAbits.CREN = 0;
 17804                           
 17805                           ;incstack = 0
 17806                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17807  083A  0023               	movlb	3	; select bank3
 17808  083B  121D               	bcf	29,4	;volatile
 17809                           
 17810                           ;eusart.c: 265: RC1STAbits.CREN = 1;
 17811  083C  161D               	bsf	29,4	;volatile
 17812  083D  0008               	return
 17813  083E                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 17814                           
 17815                           	psect	text101
 17816  0811                     __ptext101:	
 17817 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17818 ;; Defined at:
 17819 ;;		line 259 in file "mcc_generated_files/eusart.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;		None
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;		None
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1    wreg      void 
 17826 ;; Registers used:
 17827 ;;		None
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;Total ram usage:        0 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; This function calls:
 17840 ;;		Nothing
 17841 ;; This function is called by:
 17842 ;;		_EUSART_Initialize
 17843 ;;		_EUSART_Receive_ISR
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           
 17848                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17849  0811                     _EUSART_DefaultFramingErrorHandler:	
 17850                           
 17851                           ;incstack = 0
 17852                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17853  0811  0008               	return
 17854  0812                     __end_of_EUSART_DefaultFramingErrorHandler:	
 17855                           
 17856                           	psect	text102
 17857  0813                     __ptext102:	
 17858 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17859 ;; Defined at:
 17860 ;;		line 269 in file "mcc_generated_files/eusart.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;		None
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;		None
 17865 ;; Return value:  Size  Location     Type
 17866 ;;                  1    wreg      void 
 17867 ;; Registers used:
 17868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17869 ;; Tracked objects:
 17870 ;;		On entry : 0/0
 17871 ;;		On exit  : 0/0
 17872 ;;		Unchanged: 0/0
 17873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;Total ram usage:        0 bytes
 17879 ;; Hardware stack levels used:    1
 17880 ;; Hardware stack levels required when called:    1
 17881 ;; This function calls:
 17882 ;;		_EUSART_RxDataHandler
 17883 ;; This function is called by:
 17884 ;;		_EUSART_Initialize
 17885 ;;		_EUSART_Receive_ISR
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _EUSART_DefaultErrorHandler
 17891  0813                     _EUSART_DefaultErrorHandler:	
 17892                           
 17893                           ;eusart.c: 270: EUSART_RxDataHandler();
 17894                           
 17895                           ;incstack = 0
 17896                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17897  0813  318A  2216         	fcall	_EUSART_RxDataHandler
 17898  0815  0008               	return
 17899  0816                     __end_of_EUSART_DefaultErrorHandler:	
 17900                           
 17901                           	psect	text103
 17902  0A16                     __ptext103:	
 17903 ;; *************** function _EUSART_RxDataHandler *****************
 17904 ;; Defined at:
 17905 ;;		line 249 in file "mcc_generated_files/eusart.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;		None
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;		None
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      void 
 17912 ;; Registers used:
 17913 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;Total ram usage:        1 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; This function calls:
 17926 ;;		Nothing
 17927 ;; This function is called by:
 17928 ;;		_EUSART_Receive_ISR
 17929 ;;		_EUSART_DefaultErrorHandler
 17930 ;; This function uses a non-reentrant model
 17931 ;;
 17932                           
 17933                           
 17934                           ;psect for function _EUSART_RxDataHandler
 17935  0A16                     _EUSART_RxDataHandler:	
 17936                           
 17937                           ;eusart.c: 251: eusartRxBuffer[eusartRxHead++] = RC1REG;
 17938                           
 17939                           ;incstack = 0
 17940                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17941  0A16  0023               	movlb	3	; select bank3
 17942  0A17  0819               	movf	25,w	;volatile
 17943  0A18  00F0               	movwf	??_EUSART_RxDataHandler
 17944  0A19  0020               	movlb	0	; select bank0
 17945  0A1A  086A               	movf	_eusartRxHead,w
 17946  0A1B  3E46               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17947  0A1C  0086               	movwf	6
 17948  0A1D  3001               	movlw	1	; select bank2/3
 17949  0A1E  0087               	movwf	7
 17950  0A1F  0870               	movf	??_EUSART_RxDataHandler,w
 17951  0A20  0081               	movwf	1
 17952  0A21  3001               	movlw	1
 17953  0A22  00F0               	movwf	??_EUSART_RxDataHandler
 17954  0A23  0870               	movf	??_EUSART_RxDataHandler,w
 17955  0A24  07EA               	addwf	_eusartRxHead,f	;volatile
 17956                           
 17957                           ;eusart.c: 252: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17958  0A25  3008               	movlw	8
 17959  0A26  026A               	subwf	_eusartRxHead,w	;volatile
 17960  0A27  1803               	btfsc	3,0
 17961                           
 17962                           ;eusart.c: 253: {
 17963                           ;eusart.c: 254: eusartRxHead = 0;
 17964  0A28  01EA               	clrf	_eusartRxHead	;volatile
 17965                           
 17966                           ;eusart.c: 255: }
 17967                           ;eusart.c: 256: eusartRxCount++;
 17968  0A29  3001               	movlw	1
 17969  0A2A  00F0               	movwf	??_EUSART_RxDataHandler
 17970  0A2B  0870               	movf	??_EUSART_RxDataHandler,w
 17971  0A2C  0021               	movlb	1	; select bank1
 17972  0A2D  07CA               	addwf	_eusartRxCount^(0+128),f	;volatile
 17973  0A2E  0008               	return
 17974  0A2F                     __end_of_EUSART_RxDataHandler:	
 17975  007E                     btemp	set	126	;btemp
 17976  007E                     int$flags	set	126
 17977  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    57
    Data        5
    BSS         113
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      76
    BANK1            80     24      80
    BANK2            80      5      79
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$2278$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$2284$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$2290$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$2296$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    COS_TskMan$2302	const PTR FTN()void  size(2) Largest target is 1
		 -> SHT25_StateMachine(), 

    I2C_DO_TX_EMPTY$2295	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$2290	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$2289	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$2284	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$2283	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2278	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2277	const PTR FTN()enum E12110 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> SHT3x_CalcRelativeHumidity@str(BANK1[8]), SHT3x_CalcTemperatureC@str(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1519$tptr	PTR FTN()void  size(2) Largest target is 1
		 -> SHT25_StateMachine(), 

    COS_tsk.tptr	PTR FTN()void  size(2) Largest target is 1
		 -> SHT25_StateMachine(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Led2_PWM(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Led2_PWM(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), Absolute function(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12110[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S86$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 8
		 -> RxBuff(BANK2[8]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> Command(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_Led2_PWM
    _Led2_PWM->_PWM3_LoadDutyValue
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_COS_TskMan
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _SHT25_StateMachine->_SHT3x_CalcTemperatureC
    _SHT3x_CalcTemperatureC->___ftadd
    _abs->___fttol
    ___ftadd->___ftdiv
    ___awtoft->_abs
    _SHT3x_CalcRelativeHumidity->___ftdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _I2C_MasterIsr->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _SHT25_StateMachine->_SHT3x_CalcRelativeHumidity
    _SHT25_StateMachine->_SHT3x_CalcTemperatureC

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _COS_TskMan->_SHT25_StateMachine

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39246
                           _COS_Init
                     _COS_TmrHandler
                         _COS_TskMan
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                     _ADC_Initialize
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              6 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _COS_TskMan                                           4     4      0   38268
                                             69 BANK0      4     4      0
                 _SHT25_StateMachine *
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2096
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _SHT25_StateMachine                                   5     5      0   36172
                                              0 BANK2      5     5      0
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
         _SHT3x_CalcRelativeHumidity
             _SHT3x_CalcTemperatureC
 ---------------------------------------------------------------------------------
 (3) _SHT3x_CalcTemperatureC                              32    30      2   18825
                                             61 BANK0      8     6      2
                                              0 BANK1     24    24      0
                       _EUSART_Write
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                             ___lmul
                           ___lwtoft
                                _abs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             18 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     288
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3623
                                             48 BANK0     13     7      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    2672
                                             22 BANK0      6     3      3
                           ___ftpack
                            ___fttol (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) _SHT3x_CalcRelativeHumidity                          32    30      2   12055
                                             48 BANK0      8     6      2
                                              0 BANK1     24    24      0
                       _EUSART_Write
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___lmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    19      4    1320
                                             18 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     311
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2679
                                             12 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     700
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     480
                                              4 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3439
                                             16 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    3089
                                             32 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              4 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteNBytes                                      4     1      3    3631
                                             13 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_SetAddressNackCallback                           4     1      3    1818
                                              9 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C_SetCallback                                      5     2      3     862
                                              4 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWrite                                      0     0      0      46
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadNBytes                                       4     1      3    1661
                                              9 BANK0      4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_SetBuffer                                        4     0      4    1229
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _I2C_Open                                             3     3      0     144
                                              6 BANK0      3     3      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (5) _I2C_SetInterruptHandler                              2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterRead                                       0     0      0      46
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOperation                                  3     3      0      46
                                              4 BANK0      3     3      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Close                                            2     2      0      24
                                              4 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _COS_TmrHandler                                       6     6      0      70
                                              4 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _COS_Init                                             5     5      0      70
                                              4 BANK0      5     5      0
                     _COS_TimerSetup
 ---------------------------------------------------------------------------------
 (2) _COS_TimerSetup                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0   40778
                                              3 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                      _I2C_MasterIsr *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0     120
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR2_CallBack                                        0     0      0     120
                   Absolute function *
                           _Led2_PWM *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led2_PWM                                            1     1      0     120
                                              4 COMMON     1     1      0
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (11) _PWM3_LoadDutyValue                                  4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterIsr                                        0     0      0   40658
                      _I2C_MasterFsm
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterFsm                                        3     3      0   40658
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                   _I2C_MasterIsNack
               i1_I2C_MasterClearIrq
 ---------------------------------------------------------------------------------
 (10) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_TX_EMPTY                                     1     1      0   10142
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_TX                                           4     4      0   10188
                                             10 COMMON     4     4      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_ACK                                       0     0      0       0
        i2c_master@I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX                                           1     1      0   10142
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
        i2c_master@I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (11) i2c_master@I2C_MasterSendAck                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
       i2c_master@I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
       i2c_master@I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (11) i2c_master@I2C_MasterSendNack                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_ADDRESS_NACK                                 1     1      0   10142
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _wr2RegCompleteHandler                               1     0      1    1971
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _wr1RegCompleteHandler                               1     0      1    1971
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rdBlkRegCompleteHandler                             1     0      1    1993
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rd2RegCompleteHandler                               1     0      1    1971
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rd1RegCompleteHandler                               1     0      1    1971
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) i1_I2C_SetBuffer                                     4     0      4     179
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (12) _I2C_SetDataCompleteCallback                         4     1      3    1770
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (13) i1_I2C_SetCallback                                   5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _COS_Init
     _COS_TimerSetup
   _COS_TmrHandler
   _COS_TskMan
     _SHT25_StateMachine *
       _I2C_ReadNBytes
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterRead
           _I2C_MasterOperation
             _I2C_MasterStart
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterEnableIrq
           _I2C_MasterOpen
           _I2C_SetInterruptHandler
         _I2C_SetBuffer
       _I2C_WriteNBytes
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterEnableIrq
           _I2C_MasterOpen
           _I2C_SetInterruptHandler
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
       _SHT3x_CalcRelativeHumidity
         _EUSART_Write
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
         ___lmul
         ___lwtoft
           ___ftpack
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _SHT3x_CalcTemperatureC
         _EUSART_Write
         ___awtoft
           ___ftpack
           ___fttol (ARG)
           _abs (ARG)
             ___fttol (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
         ___lmul
         ___lwtoft
           ___ftpack
         _abs
           ___fttol (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
     ___wmul *
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _I2C_MasterIsr *
     _I2C_MasterFsm
       _I2C_DO_ADDRESS_NACK *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_DO_IDLE *
       _I2C_DO_RCEN *
         _I2C_MasterStartRx
       _I2C_DO_RESET *
       _I2C_DO_RX *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_RX_NACK_RESTART *
           i2c_master@I2C_MasterSendNack
         _I2C_DO_RX_NACK_STOP *
           i2c_master@I2C_MasterSendNack
         _I2C_MasterGetRxData *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         i2c_master@I2C_MasterSendAck *
       _I2C_DO_RX_ACK *
         i2c_master@I2C_MasterSendAck
       _I2C_DO_RX_NACK_RESTART *
         i2c_master@I2C_MasterSendNack
       _I2C_DO_RX_NACK_STOP *
         i2c_master@I2C_MasterSendNack
       _I2C_DO_SEND_ADR_READ *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_ADR_WRITE *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_RESTART *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_READ *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_WRITE *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_STOP *
         _I2C_MasterStop
       _I2C_DO_TX *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART_READ *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_RESTART_WRITE *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _I2C_MasterIsNack *
         _I2C_MasterSendTxData *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_DO_TX_EMPTY *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _I2C_MasterSetIrq *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_MasterIsNack *
       i1_I2C_MasterClearIrq *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _Led2_PWM *
         _PWM3_LoadDutyValue
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     18      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      5      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F9      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 28 06:23:43 2020

                  ?_EUSART_SetRxInterruptHandler 0024                           ??_I2C_DO_SEND_ADR_READ 0070  
                             __size_of_I2C_Close 001E                 __end_of_TMR2_SetInterruptHandler 08FD  
                        ??_I2C_DO_SEND_ADR_WRITE 0071                                      __CFG_CP$OFF 0000  
                            ___wmul@multiplicand 0026                            ??_I2C_DO_SEND_RESTART 0070  
                                    ?_COS_TskMan 0070                                     ___ftadd@exp1 005C  
                                   ___ftadd@exp2 005B                                      __CFG_LVP$ON 0000  
                   __size_of_I2C_MasterOperation 001C                                     ___ftadd@sign 005A  
                  __size_of_I2C_MasterSendTxData 0005                                              l910 07E1  
                                            l684 0BBF                                              l892 0DD4  
                                            l899 0FA4                                              _PR2 001B  
                                            _abs 07EF                           ??_EUSART_RxDataHandler 0070  
                 ?_EUSART_SetFramingErrorHandler 0024                                  _TMR2_Initialize 09D6  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                     ??_I2C_SetAddressNackCallback 002C  
                       ??_I2C_CallbackReturnStop 007A                                     _I2C_DO_RESET 0874  
                                   __CFG_ZCD$OFF 0000                                     ___ftdiv@cntr 004A  
                    __size_of_SHT25_StateMachine 00D3                                     ___ftdiv@sign 004F  
                                           ?_abs 0032                          ??_rd2RegCompleteHandler 007A  
                                           l1153 0A59                                             l1085 03F2  
                                           l1094 04C3                                             l1361 0F70  
                                           l1362 0F78                                             l1354 0F5D  
                                           l1445 075C                                             l1189 0A89  
                                           l3311 0C93                                             l3313 0C9F  
                                           l1385 039A                                             l3251 0A7B  
                                           l3323 0CBA                                             l3253 0A7D  
                                           l3261 0BF3                                             l3341 0C4C  
                                           l3319 0CB1                                             l3335 0C34  
                                           l3417 0AD4                                             l3249 0A75  
                                           l3281 0F49                                             l3273 0F33  
                                           l3337 0C40                                             l3345 0C55  
                                           l3601 04CA                                             l3603 058D  
                                           l3541 0BD7                                             l3277 0F3A  
                                           l3613 0C6D                                             l4093 0194  
                                           l3527 0BB4                                             l3287 0F62  
                                           l3279 0F44                                             l3289 0F6A  
                                           l3801 0616                                             l3609 0C63  
                                           l4329 0A83                                             l3387 0E7B  
                                           l3715 0673                                             l3563 0504  
                                           l3643 032A                                             l4445 0FED  
                                           l3709 065D                                             l3805 061E  
                                           l3821 0708                                             l3573 051A  
                                           l3557 04EC                                             l3629 0B02  
                                           l3661 0353                                             l3591 054E  
                                           l3671 0375                                             l3639 0323  
                                           l4703 04A7                                             l3737 06CD  
                                           l3729 06B4                                             l3841 0746  
                                           l3585 053F                                             l3681 0396  
                                           l3673 0379                                             l3649 0339  
                                           l3753 0D61                                             l4713 07B5  
                                           l3771 05A9                                             l3579 0520  
                                           l3667 0366                                             l4707 04AE  
                                __end_of_COS_tsk 102F                                             l3853 076D  
                                           l3685 03AC                                             l3669 0370  
                                           l3749 0D4B                                             l3871 0BAB  
                                           l3863 0B8C                                             l3847 0753  
                                           l3839 0738                                             l3599 0552  
                                           l3679 038C                                             l4671 040B  
                                           l4735 07E2                                             l3793 0602  
                                           l3777 05BF                                             l3849 075F  
                                           l3689 03BE                                             l4665 03F5  
                                           l3875 0AD9                                             l3699 03D9  
                                           l4683 0434                                             l3789 05FA  
                                           l3879 0AF0                                             l4699 048B  
                                           STR_1 1039                                             STR_2 1039  
                                           _LATA 010C                                             _LATB 010D  
                                           u2215 0F7F                                             u2135 0F3F  
                                           u3015 061F                                             _LATC 010E  
                                           u3025 0625                                             u2155 0F58  
                                           u3115 0754                                             u2315 0C37  
                                           u2245 0C96                                             u2175 0F65  
                                           u3055 070F                                             u2335 0C46  
                                           u2265 0CA0                                             u2345 0C4D  
                                           _T2PR 001B                                             u2275 0CAA  
                                           u3315 02B7                                             u3085 0739  
                                           u2285 0CB2                                             u3325 02D3  
                                           u3405 0A8F                                             u3334 02EA  
                                           u3335 02E8                                             u2545 0C6E  
                                           u2705 0367                                             u2555 0C75  
                                           u3275 00A9                                             u2485 0535  
                                           u3285 00C5                                             u3294 00DC  
                                           u2735 037A                                             u3295 00DA  
                                           u2835 0685                                             u2675 0354  
                                           u3395 0A8A                                             u2845 0695  
                                           u2765 038D                                             u2855 06B5  
                                           u2865 06C4                                             u2945 05CB  
                                           u2875 06CE                                             u2955 05DB  
                                           u2975 0603                                             u2985 0609  
                                           _TMR2 001A                                             _WPUA 020C  
                                           _WPUB 020D                                             _WPUC 020E  
                        ??_wr2RegCompleteHandler 007A                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             abs@a 0032  
                                           _main 0A49                         ?_I2C_CallbackReturnReset 0079  
                                   ___ftpack@arg 0024             __size_ofi2c_master@I2C_MasterSendAck 0004  
                                   ___ftpack@exp 0027                     ??_SHT3x_CalcRelativeHumidity 0052  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                               __end_of_I2C_Open 0E7E                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 004C  
                        _I2C_SetInterruptHandler 08AC                                    __CFG_MCLRE$ON 0000  
                                   ___ftmul@cntr 003E                                     ___ftmul@sign 003F  
               __size_of_rdBlkRegCompleteHandler 001A                                    _I2C_DO_TX$613 007C  
                                   ___fttol@exp1 0031                                            ??_abs 0034  
                                   ___fttol@lval 002D                                 ?_I2C_MasterClose 0070  
                                _I2C_WriteNBytes 0B8A                                 __end_of_COS_Init 0DEF  
                                  ?_EUSART_Write 0070              __size_of_I2C_SetAddressNackCallback 000D  
                 __size_of_OSCILLATOR_Initialize 0007                                 ?_I2C_MasterStart 0070  
                                  _I2C_DO_RX_ACK 0856                                 ?_I2C_MasterWrite 0070  
                  __end_of_OSCILLATOR_Initialize 08A4                                            ?_main 0070  
                                __end_of___ftadd 03F1                                    __CFG_WDTE$OFF 0000  
                                __end_of___ftdiv 06EF                                  __end_of___ftmul 0646  
                                          _T1CON 0018                                  __end_of___fttol 0776  
                                          _T2CON 001C                                            _T2HLT 001D  
                                __end_of___lwdiv 0CBF                                            _T2TMR 001A  
                                          _T2RST 001F                                  __end_of___lwmod 0C5A  
                                          i1l282 0EAB                                            i1l471 0032  
                                          i1l473 003F                                            i1l298 0D14  
                                          i1l467 0018                                            i1l469 0025  
                                          i1l478 0047                                            i1l696 0AB7  
                   __size_of_I2C_DO_RX_NACK_STOP 0004                                            _TMR1H 0017  
                                          _TMR1L 0016                                ??_I2C_DO_TX_EMPTY 007A  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _SSPEN 10AD  
                                          _RXPPS 0E24                              ___lmul@multiplicand 0028  
                              __end_of_I2C_DO_RX 0D34                                __end_of_I2C_DO_TX 0ECD  
                               __end_of_TMR2_ISR 0958              __size_of_SHT3x_CalcRelativeHumidity 011B  
                                  ___awtoft@sign 003B                                  __end_of_dpowers 1039  
                              __end_of_I2C_Close 0AD7                           __size_of_I2C_MasterFsm 002A  
                         __size_of_I2C_MasterIsr 0003                                    ___ftpack@sign 0028  
                 I2C_MasterOperation@returnValue 0026             __end_ofi2c_master@I2C_MasterSendNack 0842  
          __size_ofi2c_master@I2C_MasterSendNack 0004                     i2c_master@I2C_MasterSendNack 083E  
                        _I2C_MasterEnableRestart 0816                          __end_of_PWM3_Initialize 091E  
                                          pclath 000A                                 ?_I2C_SetCallback 0024  
                   I2C_SetAddressNackCallback@cb 0029                                            status 0003  
                               __end_of_Led2_PWM 0F2A                                            wtemp0 007E  
                                __end_of_sprintf 0592                                ?_I2C_DO_SEND_STOP 0070  
                         __size_of_I2C_SetBuffer 0015                                ??i1_I2C_SetBuffer 0074  
                            __size_of_COS_TskMan 0079                               ??_I2C_DO_SEND_STOP 0070  
                                  _fsmStateTable 1000                                  __initialization 004E  
                                   __end_of_main 0A64                __size_of_I2C_DO_SEND_RESTART_READ 0004  
                      ?_I2C_DO_SEND_RESTART_READ 0070                                   ??_EUSART_Write 0024  
                                 ?_I2C_DO_RX_ACK 0070                          __end_of_TMR2_Initialize 09EB  
                                 __CFG_LPBOR$OFF 0000                      ?_INTERRUPT_InterruptManager 0070  
                 ??_EUSART_SetRxInterruptHandler 0026                         _TMR2_SetInterruptHandler 08F4  
                                         ??_main 0069                                    ___fttol@sign1 002C  
                   __end_ofi1_I2C_MasterClearIrq 0828                                ?_I2C_MasterIsNack 0070  
                                 __CFG_PLLEN$OFF 0000                                      _BreathState 00EB  
                              ?_I2C_MasterSetIrq 0070                               ??_I2C_MasterIsNack 0070  
                           i1I2C_SetCallback@idx 0074                             i1I2C_SetCallback@ptr 0072  
                               _SensirionRH_UBP8 00A4                                   _COS_TmrHandler 0F8F  
                             ??_I2C_MasterSetIrq 0070        __end_of_EUSART_DefaultFramingErrorHandler 0812  
     __size_of_EUSART_DefaultFramingErrorHandler 0001              ??_EUSART_DefaultFramingErrorHandler 0070  
             ?_EUSART_DefaultFramingErrorHandler 0070                _EUSART_DefaultFramingErrorHandler 0811  
                                         _ADCON0 009D                                           _ADCON1 009E  
                                         _ADCON2 009F                       _EUSART_OverrunErrorHandler 0162  
                __end_of_I2C_CallbackReturnReset 0800                                   _COS_TimerSetup 088A  
                                         _ADRESH 009C                                           _ADRESL 009B  
                __size_of_I2C_CallbackReturnStop 0002                    I2C_SetDataCompleteCallback@cb 0075  
                               __end_of___awtoft 0B19                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                               __end_of___ftpack 0F8F                                           _BORCON 0116  
                                         _RC1REG 0199                                           _RC1STA 019D  
                                         _RB4PPS 0E9C                                           _RB6PPS 0E9E  
                                         _RB7PPS 0E9F                                           _RC5PPS 0EA5  
                                         _ODCONA 028C                                           _ODCONB 028D  
                                         i1l4011 0B23                                           _ODCONC 028E  
                                         i1l3213 0B7A                                           i1l4007 0B20  
                                         i1l4017 0B26                                           i1l4043 0ECE  
                                         i1l4061 0F04                                           i1l4063 0F07  
                                         i1l4055 0EF4                                           i1l4047 0EDF  
                                         i1l4071 0F17                                           i1l4401 0CE6  
                                         i1l4161 0C15                                           i1l4049 0EE4  
                                         i1l4073 0F23                                           i1l4405 0CF6  
                                         i1l3913 0E88                                           i1l4395 0CD6  
                                         i1l3931 0EC7                                           i1l3923 0E8E  
                                         i1l3917 0E8B                                           i1l3909 0E85  
                                         i1l3953 0D19                                           i1l3971 0B40  
                                         i1l3981 0B47                                           i1l3949 0D16  
                                         i1l3975 0B43                                           i1l3959 0D1C  
                                         i1l3987 0B4A                                           _INLVLA 038C  
                                         _INLVLB 038D                                           _INLVLC 038E  
                                         u240_25 0A0F                                 __end_of___lwtoft 09D6  
                                         _OSCCON 0099                        ??_I2C_SetInterruptHandler 0026  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                                         _TX1REG 019A                                           _SSP1IE 0483  
                                         _SSP1IF 0083                                           _TX1STA 019E  
                            _I2C_MasterEnableIrq 0837                                   __CFG_PWRTE$OFF 0000  
                            _I2C_MasterGetRxData 081F                          __end_of_I2C_WriteNBytes 0BB2  
                                     _Timer2Flag 00C6                                           _RxBuff 0156  
                        __size_of_I2C_ReadNBytes 0020                                           ___ftge 0D34  
                                         ___lmul 0C5A                      __size_of_PWM3_LoadDutyValue 0016  
                                         ___wmul 0A80                                    _I2C_MasterFsm 0C03  
                                  _I2C_MasterIsr 0828                                        ??___ftadd 0056  
                                 __CFG_STVREN$ON 0000                                        ??___ftdiv 0046  
                                      ??___ftmul 0036                                        ??___fttol 0028  
                                      ??___lwdiv 0028                                        ??___lwmod 0030  
                            _EUSART_Transmit_ISR 0A9C                                I2C_SetCallback@cb 0024  
                        __size_of_I2C_MasterRead 0004                          __size_of_I2C_MasterOpen 000B  
                        __size_of_I2C_MasterStop 0003                          __size_of_I2C_Initialize 0009  
                                  _I2C_SetBuffer 09AC                     __end_of_I2C_MasterDisableIrq 0834  
                          ___ftmul@f3_as_product 003B                             ?_I2C_MasterEnableIrq 0070  
                         __end_of_COS_TmrHandler 1000                              _I2C_DO_ADDRESS_NACK 0B19  
                           ?_I2C_MasterGetRxData 0070                                        ?_I2C_Open 0070  
             __end_of_I2C_SetAddressNackCallback 0944                       _I2C_SetAddressNackCallback 0937  
                         __end_of_COS_TimerSetup 0890                              UART_Display@counter 00BC  
                      ??_I2C_MasterEnableRestart 0070         TMR2_SetInterruptHandler@InterruptHandler 0024  
        I2C_SetInterruptHandler@InterruptHandler 0024                                        ??_sprintf 0036  
         SHT3x_CalcTemperatureC@Temperature_UBP8 00DC           SHT3x_CalcTemperatureC@TemperatureFloat 00E6  
                           ?_EUSART_Transmit_ISR 0070                              _RelativeHumidityRaw 00CD  
                               ?_PWM3_Initialize 0070                                _SYSTEM_Initialize 09EB  
             __end_of_SHT3x_CalcRelativeHumidity 02FB                       _SHT3x_CalcRelativeHumidity 01E0  
                        __end_of__initialization 006F                                 _TemperatureRaw_H 00C2  
                               _TemperatureRaw_L 00C1  SHT3x_CalcRelativeHumidity@RelativeHumidity_UBP8 00DF  
SHT3x_CalcRelativeHumidity@RelativeHumidityFloat 00D9                                        ?_COS_Init 0070  
                                     ___ftadd@f1 0050                                       ___ftadd@f2 0053  
                          __end_of_TMR2_CallBack 0908                              _I2C_MasterOperation 0A64  
                                     ___ftge@ff1 0024                                       ___ftge@ff2 0027  
                                 _NewMessageFlag 00BD                               ?_SYSTEM_Initialize 0070  
                           ?_I2C_DO_ADDRESS_NACK 0070                                       ___ftdiv@f1 0043  
                                     ___ftdiv@f2 0040                                       ___ftdiv@f3 004B  
                                     ___awtoft@c 0036             __end_of_EUSART_SetTxInterruptHandler 08EB  
          __size_of_EUSART_SetTxInterruptHandler 0009                     _EUSART_SetTxInterruptHandler 08E2  
                        _rdBlkRegCompleteHandler 0A2F                                       ___ftmul@f1 0030  
                                     ___ftmul@f2 0033                                       ___fttol@f1 0024  
                                 __pcstackCOMMON 0070                                   ?_I2C_MasterFsm 0070  
                                 ?_I2C_MasterIsr 0070                                  ??_I2C_DO_RX_ACK 0070  
                                   __pidataBANK1 0879                           _I2C_CallbackReturnStop 0002  
                            ??_SYSTEM_Initialize 0027                                        ?_TMR2_ISR 0070  
                               ?_TMR2_Initialize 0070                                   ?_I2C_SetBuffer 0024  
                 __size_of_I2C_DO_SEND_ADR_WRITE 0007               __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                  __end_of_I2C_DO_SEND_ADR_WRITE 089D                                     ??_COS_TskMan 0065  
                                     ___lwtoft@c 002C                       ?_I2C_DO_SEND_RESTART_WRITE 0070  
                           ?_I2C_MasterOperation 0070                            ??_I2C_MasterEnableIrq 0024  
                          ??_I2C_MasterGetRxData 0070                                        ?_Led2_PWM 0070  
                                ?_COS_TmrHandler 0070                                   _OPTION_REGbits 0095  
                          I2C_ReadNBytes@address 002C                                       ??_I2C_Open 0026  
                           _eusartRxStatusBuffer 013E                                  ?_COS_TimerSetup 0070  
                     __end_of_I2C_MasterClearIrq 082E                  ??_EUSART_SetOverrunErrorHandler 0026  
                      __end_of_SYSTEM_Initialize 0A00                            ??_EUSART_Transmit_ISR 0070  
           SHT3x_CalcTemperatureC@Temperature_L8 00E1             SHT3x_CalcTemperatureC@Temperature_U8 00E0  
           SHT3x_CalcTemperatureC@TemperatureInt 00DE                                       __pbssBANK0 0069  
                                     __pbssBANK1 00A0                                       __pbssBANK2 0120  
                                 _TemperatureRaw 00CF    SHT3x_CalcRelativeHumidity@RelativeHumidity_L8 00E4  
  SHT3x_CalcRelativeHumidity@RelativeHumidity_U8 00E3    SHT3x_CalcRelativeHumidity@RelativeHumidityInt 00E1  
                           __end_of_EUSART_Write 0BDA                                    ??_I2C_DO_IDLE 0070  
                 __size_of_rd2RegCompleteHandler 0015                                    ??_I2C_DO_RCEN 0070  
                  __end_of_rd2RegCompleteHandler 0997                     __end_of_I2C_MasterSendTxData 086F  
                             ?_I2C_MasterSendAck 0070                                _I2C_MasterStartRx 081C  
                                     ??_COS_Init 0024                   __size_of_wr2RegCompleteHandler 0015  
                          ??_I2C_DO_ADDRESS_NACK 007A                        _SensirionTemperature_UBP8 00A6  
                  __end_of_wr2RegCompleteHandler 096D                         ??_SHT3x_CalcTemperatureC 005F  
                    __size_of_EUSART_Receive_ISR 003A                              _I2C_DO_RX_NACK_STOP 085A  
                           i1_I2C_MasterClearIrq 0825                            _rd1RegCompleteHandler 096D  
                             ?_I2C_MasterStartRx 0070                               __end_of_COS_TskMan 07EF  
                  SHT3x_CalcRelativeHumidity@str 00D1                                 ?_I2C_WriteNBytes 002D  
                         I2C_WriteNBytes@address 0030                            _wr1RegCompleteHandler 0997  
                                     __pmaintext 0A49                              ??_I2C_MasterSendAck 0070  
                       rd1RegCompleteHandler@ptr 0079                    ?_EUSART_SetTxInterruptHandler 0024  
               _EUSART_TxDefaultInterruptHandler 0168                                          ?___ftge 0024  
                    __end_of_I2C_DO_SEND_RESTART 0852                                  _I2C_DO_TX_EMPTY 0B3D  
                                        ?___lmul 0024                              I2C_SetBuffer@buffer 0024  
                                        ?___wmul 0024                                  __CFG_PPS1WAY$ON 0000  
                                     ??_TMR2_ISR 0075                                       __pintentry 0004  
                            ??_I2C_MasterStartRx 0070                    __size_of_I2C_DO_SEND_ADR_READ 0008  
                                 ___lmul@product 002C                 __size_of_I2C_CallbackReturnReset 0002  
                                      ?___awtoft 0036                                        ?___ftpack 0024  
                   ??_EUSART_DefaultErrorHandler 0071                            ??_I2C_MasterOperation 0024  
                 I2C_SetDataCompleteCallback@ptr 0077                          __size_of_ADC_Initialize 0009  
                                      ?___lwtoft 002C                         ??_I2C_DO_RX_NACK_RESTART 0070  
              __end_of_I2C_DO_SEND_RESTART_WRITE 084E                             ?_I2C_DO_RX_NACK_STOP 0070  
                                  _eusartRxCount 00CA                                       ??_Led2_PWM 0074  
                                __CFG_WDTCCS$SWC 0000                                          _COS_tsk 1020  
                     __end_of_SHT25_StateMachine 04C4                    __size_of_EUSART_RxDataHandler 0019  
                                i1_I2C_SetBuffer 092A                                          _OSCTUNE 0098  
                                        _PWM3DCH 0618                                          _PWM3DCL 0617  
                                        _PWM3CON 0619                                          _SSP1ADD 0212  
                                        _SLRCONA 030C                                          _SLRCONB 030D  
                                        _SLRCONC 030E                                          _SSP1BUF 0211  
                       ??_EUSART_SetErrorHandler 0026                        __end_of_I2C_MasterStartRx 081F  
                           I2C_Close@returnValue 0025                     ?_I2C_SetDataCompleteCallback 0075  
                                      _I2C_DO_RX 0CF9                                        _I2C_DO_TX 0E7E  
               __end_of_I2C_DO_SEND_RESTART_READ 084A                                        _I2C_Close 0AB9  
                                        _Command 00EC                        ??_rdBlkRegCompleteHandler 007A  
                          ?i1_I2C_MasterClearIrq 0070                                        _I2C_Timer 00A2  
                           _I2C_MasterDisableIrq 0831                                  ??_I2C_MasterFsm 0020  
                                ??_I2C_MasterIsr 007E                             _ADC_InterruptHandler 00B6  
            __size_of_EUSART_DefaultErrorHandler 0003                       ??_TMR2_SetInterruptHandler 0026  
                                 _I2C_ReadNBytes 0AD7                              __end_of_I2C_DO_IDLE 0874  
                            __end_of_I2C_DO_RCEN 088A                                  __size_of___ftge 003C  
                                __size_of___lmul 0030                                          ___ftadd 02FB  
                                        ___ftdiv 0646                                  ??_I2C_SetBuffer 0028  
                                __size_of___wmul 001C                                          ___ftmul 0592  
                                        ___fttol 06EF                                          ___lwdiv 0C8A  
                                        ___lwmod 0C2D                          I2C_SetBuffer@bufferSize 0026  
                             I2C_ReadNBytes@data 0029                                   _I2C_MasterRead 0862  
                                 _I2C_MasterOpen 0908                                   _I2C_MasterStop 0819  
                                 _I2C_Initialize 08EB                                       ??___awtoft 0039  
                                     ??___ftpack 0029                        __size_of_I2C_DO_SEND_STOP 0004  
                                        __ptext1 09EB                                          __ptext2 09D6  
                                        __ptext3 08F4                                          __ptext4 0913  
                                        __ptext5 0D70                                          __ptext6 089D  
                                        __ptext7 08EB                                          __ptext8 0DEF  
                                        __ptext9 08E2                            ??_I2C_DO_RX_NACK_STOP 0070  
                                     ??___lwtoft 002F                                          _counter 00AA  
                                        _dpowers 102F                            _OSCILLATOR_Initialize 089D  
                                      _T2CONbits 001C                                     __size_of_abs 000F  
                             I2C_SetCallback@idx 0028                         __size_of_I2C_MasterClose 0003  
                       ??_PIN_MANAGER_Initialize 0024                    I2C_CallbackReturnReset@funPtr 0079  
                                      _T2HLTbits 001D                               I2C_SetCallback@ptr 0026  
                       wr1RegCompleteHandler@ptr 0079                         __size_of_I2C_MasterStart 0003  
                      i1I2C_SetBuffer@bufferSize 0072                         __size_of_I2C_MasterWrite 0004  
                     __size_of_SYSTEM_Initialize 0015                                          _sprintf 04C4  
                                        clrloop0 0891                             end_of_initialization 006F  
                                      _T2RSTbits 001F                                       ?_I2C_DO_RX 0070  
                                     ?_I2C_DO_TX 0070            __end_of_EUSART_SetOverrunErrorHandler 08D9  
         __size_of_EUSART_SetOverrunErrorHandler 0009                    _EUSART_SetOverrunErrorHandler 08D0  
                      __size_of_I2C_MasterIsNack 0006                                       ?_I2C_Close 0070  
                                _TimeSlotCounter 00C7                           ?_rd1RegCompleteHandler 0079  
                              i1_I2C_SetCallback 0B62                          __end_of_I2C_DO_TX_EMPTY 0B62  
                      __size_of_I2C_MasterSetIrq 0003                            ?_I2C_MasterDisableIrq 0070  
                         __end_of_I2C_ReadNBytes 0AF7                                _EUSART_Initialize 0DEF  
                __size_of_SHT3x_CalcTemperatureC 016D                           ?_wr1RegCompleteHandler 0079  
                             ?i1_I2C_SetCallback 0070                               ?_EUSART_Initialize 0070  
                       __size_of_I2C_SetCallback 0029                           __end_of_I2C_MasterRead 0866  
                         __end_of_I2C_MasterOpen 0913                           __end_of_I2C_MasterStop 081C  
                         __end_of_I2C_Initialize 08F4                                        _U8Message 00E9  
                            ??i1_I2C_SetCallback 0073                              ??_EUSART_Initialize 0026  
                 ??_EUSART_SetTxInterruptHandler 0026                          __end_ofi1_I2C_SetBuffer 0937  
                __end_of_rdBlkRegCompleteHandler 0A49                             _I2C_MasterSendTxData 086A  
                                      _SSPDATPPS 0E21                  __size_of_I2C_DO_RX_NACK_RESTART 0004  
                                      _SSPCLKPPS 0E20                                 __CFG_FOSC$INTOSC 0000  
                    ?_I2C_SetAddressNackCallback 0029                            __size_of_EUSART_Write 0028  
                              __size_of_I2C_Open 0049                  __size_of_EUSART_SetErrorHandler 0009  
                     __size_of_I2C_MasterStartRx 0003                        __end_ofi1_I2C_SetCallback 0B8A  
                         ??i1_I2C_MasterClearIrq 0070                        __end_of_EUSART_Initialize 0E35  
                    ?_SHT3x_CalcRelativeHumidity 0050                                      _I2C_DO_IDLE 086F  
                                    _I2C_DO_RCEN 0884                  _SHT3x_CalcRelativeHumidity$2276 00DC  
                     rdBlkRegCompleteHandler@ptr 0079                                      ___ftdiv@exp 004E  
                                ?_I2C_ReadNBytes 0029                          ?_I2C_CallbackReturnStop 0079  
                     __end_of_PWM3_LoadDutyValue 0A16                         _I2C_DO_SEND_RESTART_READ 0846  
                              __size_of_COS_Init 0043                                      ___ftmul@exp 003A  
                   I2C_CallbackReturnStop@funPtr 0079                                  ?_I2C_MasterRead 0070  
                                ?_I2C_MasterOpen 0070                                  ?_I2C_MasterStop 0070  
                                ?_I2C_Initialize 0070             __end_of_TMR2_DefaultInterruptHandler 0813  
          __size_of_TMR2_DefaultInterruptHandler 0001                     _TMR2_DefaultInterruptHandler 0812  
                        _I2C_CallbackReturnReset 07FE                                   __end_of___ftge 0D70  
                                 __end_of___lmul 0C8A               __end_of_EUSART_DefaultErrorHandler 0816  
                     _EUSART_DefaultErrorHandler 0813                                 ??_COS_TmrHandler 0024  
                                 __end_of___wmul 0A9C             __size_of_I2C_SetDataCompleteCallback 000C  
                                   _EUSART_Write 0BB2                                __size_of_TMR2_ISR 0014  
                                 _ADC_Initialize 08B5                                 ??_COS_TimerSetup 0024  
                          ?_I2C_MasterSendTxData 0070                           ?_OSCILLATOR_Initialize 0070  
                    ??_I2C_DO_SEND_RESTART_WRITE 0070                           _SHT3x_CalcTemperatureC 0073  
                            start_initialization 004E                  __size_of_PIN_MANAGER_Initialize 003C  
                                    __end_of_abs 07FE                                __size_of_Led2_PWM 005D  
                                  ?_I2C_DO_RESET 0070                                        _ErrorStat 00C4  
                       ?_I2C_SetInterruptHandler 0024     EUSART_SetRxInterruptHandler@interruptHandler 0024  
   EUSART_SetTxInterruptHandler@interruptHandler 0024                                      ??_I2C_DO_RX 007A  
                                    ??_I2C_DO_TX 007A                              i1I2C_SetCallback@cb 0070  
                              ??_I2C_MasterClose 0024                           ??_I2C_MasterDisableIrq 0024  
                                    ??_I2C_Close 0024                                ??_I2C_MasterStart 0024  
                              ??_I2C_MasterWrite 0027                   __end_of_I2C_CallbackReturnStop 0004  
                         _I2C_DO_RX_NACK_RESTART 085E                                 ?_I2C_DO_TX_EMPTY 0070  
                             _I2C_MasterClearIrq 082B                   ?_EUSART_SetOverrunErrorHandler 0024  
                       __size_of_PWM3_Initialize 000B                       _EUSART_FramingErrorHandler 0164  
                                       ??___ftge 002A                                         ??___lmul 002C  
                                       ??___wmul 0028                           _EUSART_SetErrorHandler 08BE  
                                    _CCPTMRSbits 029E                      __end_of_I2C_MasterEnableIrq 083A  
                                   _COS_tcnt_val 00AE                              ?_I2C_MasterClearIrq 0070  
                                   _COS_tcnt_lst 00AC                           __end_of_ADC_Initialize 08BE  
                    __end_of_I2C_MasterGetRxData 0822                                      __pdataBANK1 00E9  
                          __end_of_I2C_DO_RX_ACK 085A                    ?_TMR2_DefaultInterruptHandler 0070  
                               _I2C_DO_SEND_STOP 0852                                ??_I2C_SetCallback 0027  
                               ?i1_I2C_SetBuffer 0070                              I2C_Open@returnValue 0028  
                       ?_I2C_MasterEnableRestart 0070            SHT3x_CalcTemperatureC@TemperatureTemp 00E2  
                              __size_of___awtoft 0022                                __size_of___ftpack 0065  
                         __size_of_TMR2_CallBack 000B                      __end_of_EUSART_Transmit_ISR 0AB9  
                          _I2C_DO_SEND_ADR_WRITE 0896   SHT3x_CalcRelativeHumidity@RelativeHumidityTemp 00E5  
                                      ___latbits 0002                                __size_of___lwtoft 0015  
                                  __pcstackBANK0 0020                                    __pcstackBANK1 00D1  
                                  __pcstackBANK2 016A                                   ??_I2C_DO_RESET 0070  
                       __size_of_TMR2_Initialize 0015                              ?_I2C_MasterSendNack 0070  
                   __end_of_I2C_DO_SEND_ADR_READ 08AC                             ??_I2C_MasterClearIrq 0024  
                    __end_of_I2C_DO_ADDRESS_NACK 0B3D                       __size_ofi1_I2C_SetCallback 0028  
                     __end_of_EUSART_Receive_ISR 0CF9                                 _I2C_MasterIsNack 087E  
                     __size_of_EUSART_Initialize 0046                        _I2C_DO_SEND_RESTART_WRITE 084A  
                                    sprintf@flag 003B                                      sprintf@prec 003C  
               _EUSART_RxDefaultInterruptHandler 0166                                 _I2C_MasterSetIrq 0822  
                                      __pnvBANK0 006B                                        __pnvBANK1 00EE  
                                      __pnvBANK2 015E                               _SHT25_StateMachine 03F1  
                          _rd2RegCompleteHandler 0982                            __end_of_fsmStateTable 1020  
                   __end_of_EUSART_RxDataHandler 0A2F                                 ___lwdiv@dividend 0026  
                         _PIN_MANAGER_Initialize 0D70                            _wr2RegCompleteHandler 0958  
                      ??_I2C_CallbackReturnReset 007A                      __end_of_I2C_MasterOperation 0A80  
                           ??_I2C_MasterSendNack 0070                         rd2RegCompleteHandler@ptr 0079  
                                      __ptext100 083A                                        __ptext101 0811  
                                      __ptext102 0813                                        __ptext103 0A16  
                                       ?___ftadd 0050                                         ?___ftdiv 0040  
                            ?_SHT25_StateMachine 0070                                         ?___ftmul 0030  
                                       ?___fttol 0024                                         ?___lwdiv 0024  
                                       ?___lwmod 002C                                  ?_ADC_Initialize 0070  
                                   _eusartRxHead 006A                                     _eusartTxHead 00CC  
                                   _eusartRxTail 0069                           ??_I2C_MasterSendTxData 0070  
                                   _eusartTxTail 00CB                     ??_INTERRUPT_InterruptManager 0023  
                       __size_of_I2C_WriteNBytes 0028                          _eusartTxBufferRemaining 00EF  
                   __size_of_I2C_DO_SEND_RESTART 0004                                         _BAUD1CON 019F  
                __end_of_I2C_SetInterruptHandler 08B5                          I2C_MasterOperation@read 0025  
                                       _I2C_Open 0E35                                 ___lwdiv@quotient 0029  
                           ??_SHT25_StateMachine 016A                                I2C_ReadNBytes@len 002A  
                                       ?_sprintf 0032                                         _T2CLKCON 001E  
                        ??_rd1RegCompleteHandler 007A                                        _dutyValue 00A8  
                                 _eusartRxBuffer 0146                          ??_wr1RegCompleteHandler 007A  
                                 _eusartTxBuffer 014E                                   ___wmul@product 0028  
                                       _COS_Init 0DAC                                         _LATAbits 010C  
         EUSART_SetErrorHandler@interruptHandler 0024                                         _LATBbits 010D  
                                      clear_ram0 0890                                    _TMR2_CallBack 08FD  
                                       _PIE1bits 0090                                         _PIE2bits 0091  
                              _eusartRxLastError 00C9              __size_of_INTERRUPT_InterruptManager 0048  
                                       _PIR1bits 0010                  ??_EUSART_SetFramingErrorHandler 0026  
                                       _PIR2bits 0011                            __end_of_I2C_MasterFsm 0C2D  
                          __end_of_I2C_MasterIsr 082B                      __end_of_I2C_DO_RX_NACK_STOP 085E  
                           __CFG_WDTCPS$WDTCPS1F 0000                                         _SSP1CON1 0215  
                                       _SSP1CON2 0216        __end_of_EUSART_DefaultOverrunErrorHandler 083E  
     __size_of_EUSART_DefaultOverrunErrorHandler 0004              ??_EUSART_DefaultOverrunErrorHandler 0070  
             ?_EUSART_DefaultOverrunErrorHandler 0070                _EUSART_DefaultOverrunErrorHandler 083A  
                                       _TMR2_ISR 0944                      _SHT3x_CalcTemperatureC$2275 00D9  
                __end_of_I2C_MasterEnableRestart 0819                                         _SSP1STAT 0214  
                      SHT3x_CalcTemperatureC@str 00D1                            __end_of_I2C_SetBuffer 09C1  
                              ??_PWM3_Initialize 0024                                       _ADCON0bits 009D  
                              ___wmul@multiplier 0024                           ?_I2C_DO_SEND_ADR_WRITE 0070  
                                       _AddressW 00EA                         I2C_MasterSendTxData@data 0070  
            __end_ofi2c_master@I2C_MasterSendAck 0846                      i2c_master@I2C_MasterSendAck 0842  
                                       _Led2_PWM 0ECD                   ??_TMR2_DefaultInterruptHandler 0070  
              __size_of_TMR2_SetInterruptHandler 0009                        ?_TMR2_SetInterruptHandler 0024  
                       wr2RegCompleteHandler@ptr 0079                                ___lmul@multiplier 0024  
                              COS_Init@tempbyte1 0027                                COS_Init@tempbyte2 0028  
                     ??_I2C_DO_SEND_RESTART_READ 0070                         ?_rdBlkRegCompleteHandler 0079  
                               ??_I2C_ReadNBytes 002C                                       _I2C_Status 0120  
                                   ?_I2C_DO_IDLE 0070                                     ?_I2C_DO_RCEN 0070  
                              ??_TMR2_Initialize 0026                           ?_rd2RegCompleteHandler 0079  
                                 ?_TMR2_CallBack 0070                                 ??_I2C_MasterRead 0027  
                            I2C_WriteNBytes@data 002D                                 ??_I2C_MasterOpen 0024  
                         ?_wr2RegCompleteHandler 0079                                 ??_I2C_MasterStop 0070  
                               ??_I2C_Initialize 0024                                      _COS_sec_tmr 00B2  
                          i1I2C_SetBuffer@buffer 0070                             __end_of_I2C_DO_RESET 0879  
                        ??_OSCILLATOR_Initialize 0024                              _EUSART_ErrorHandler 0160  
                                    _COS_tsk_ena 00EE                                      _COS_tsk_ind 00C8  
                                    _COS_tsk_msk 006B                                      _COS_tsk_tmr 00B0  
                           _I2C_DO_SEND_ADR_READ 08A4                                 __size_of___ftadd 00F6  
                        ?_SHT3x_CalcTemperatureC 005D                                 __size_of___ftdiv 00A9  
                    ?_EUSART_DefaultErrorHandler 0070                                 __size_of___ftmul 00B4  
                               __size_of___fttol 0087                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                                         ___awtoft 0AF7  
                                       ___ftpack 0F2A                               _PWM3_LoadDutyValue 0A00  
                                       ___lwtoft 09C1                                  _I2C_MasterClose 082E  
                  I2C_SetAddressNackCallback@ptr 002B                                       sprintf@val 003D  
                                I2C_Open@address 0027                                  _I2C_MasterStart 0834  
                                       _checksum 00C3                                  _I2C_MasterWrite 0866  
                                ___lwdiv@divisor 0024                             _EUSART_RxDataHandler 0A16  
                                   _TimerCounter 00A0                                ??_I2C_WriteNBytes 0030  
                                ___lwdiv@counter 002B                                         __ptext10 08D9  
                                       __ptext11 08D0                                         __ptext20 0D34  
                                       __ptext12 08C7                                         __ptext21 02FB  
                                       __ptext13 08BE                                         __ptext30 0592  
                                       __ptext22 0AF7                                         __ptext14 08B5  
                                       __ptext31 0646                                         __ptext23 01E0  
                                       __ptext15 0776                                         __ptext40 0E35  
                                       __ptext32 0F2A                                         __ptext24 04C4  
                                       __ptext16 0A80                                         __ptext41 08AC  
                                       __ptext33 0BB2                                         __ptext25 0C2D  
                                       __ptext17 03F1                                         __ptext50 082B  
                                       __ptext42 0908                                         __ptext34 0B8A  
                                       __ptext26 0C8A                                         __ptext18 0073  
                                       __ptext51 0F8F                                         __ptext43 0837  
                                       __ptext35 0937                                         __ptext27 09C1  
                                       __ptext19 07EF                                         __ptext60 0828  
                                       __ptext52 0DAC                                         __ptext44 0862  
                                       __ptext36 0BDA                                         __ptext28 0C5A  
                                       __ptext61 0C03                                         __ptext53 088A  
                                       __ptext45 0A64                                         __ptext37 0866  
                                       __ptext29 06EF                                         __ptext70 084A  
                                       __ptext62 0825                                         __ptext46 0834  
                                       __ptext38 0AD7                                         __ptext71 0846  
                                       __ptext63 0B19                                         __ptext55 0944  
                                       __ptext47 0AB9                                         __ptext39 09AC  
                                       __ptext80 087E                                         __ptext72 0884  
                                       __ptext64 0874                                         __ptext56 08FD  
                                       __ptext48 0831                                         __ptext81 086A  
                                       __ptext73 0CF9                                         __ptext65 085E  
                                       __ptext57 0ECD                                         __ptext49 082E  
                                       __ptext90 0982                                         __ptext82 0842  
                                       __ptext74 0E7E                                         __ptext66 085A  
                                       __ptext58 0812                              ?_PWM3_LoadDutyValue 0070  
                                       __ptext91 096D                                         __ptext83 081F  
                                       __ptext75 0896                                         __ptext67 0856  
                                       __ptext59 0A00                                         __ptext92 0958  
                                       __ptext84 083E                                         __ptext76 08A4  
                                       __ptext68 0852                                         __ptext93 092A  
                                       __ptext85 081C                                         __ptext77 086F  
                                       __ptext69 084E                                         __ptext94 091E  
                                       __ptext86 07FE                                         __ptext78 0B3D  
                                       __ptext95 0B62                                         __ptext87 0002  
                                       __ptext79 0822                                         __ptext96 0819  
                                       __ptext88 0A2F                                         __ptext97 0816  
                                       __ptext89 0997                                         __ptext98 0A9C  
                                       __ptext99 0CBF                                     _SSP1CON1bits 0215  
                                   _SSP1CON2bits 0216              __end_of_I2C_SetDataCompleteCallback 092A  
                    _I2C_SetDataCompleteCallback 091E                                      _SHT25_Fault 00C5  
                        ?_I2C_DO_RX_NACK_RESTART 0070                                 __size_of_sprintf 00CE  
                                    _SHT25_State 00BE                         __end_of_I2C_DO_SEND_STOP 0856  
                                  __size_of_main 001B                    __size_ofi1_I2C_MasterClearIrq 0003  
                           __CFG_WDTCWS$WDTCWSSW 0000                          ?_EUSART_SetErrorHandler 0024  
                                _I2C_SetCallback 0BDA                    ??_I2C_SetDataCompleteCallback 0078  
                                     _RC1STAbits 019D                 __size_of_I2C_SetInterruptHandler 0009  
  EUSART_SetOverrunErrorHandler@interruptHandler 0024                             ??_PWM3_LoadDutyValue 0072  
                 __end_of_SHT3x_CalcTemperatureC 01E0                                         int$flags 007E  
                          ?_I2C_DO_SEND_ADR_READ 0070               __end_of_INTERRUPT_InterruptManager 004C  
                     _INTERRUPT_InterruptManager 0004            __end_of_EUSART_SetFramingErrorHandler 08D0  
         __size_of_EUSART_SetFramingErrorHandler 0009                    _EUSART_SetFramingErrorHandler 08C7  
                                   _SSP1STATbits 0214                         __end_of_I2C_MasterIsNack 0884  
                                     _COS_TskMan 0776                         __end_of_I2C_MasterSetIrq 0825  
                                     _INTCONbits 000B                               I2C_WriteNBytes@len 002E  
                          ?_EUSART_RxDataHandler 0070                                       _COS_ms_tmr 00B4  
                 __end_of_I2C_DO_RX_NACK_RESTART 0862                                         intlevel1 0000  
                                      sprintf@ap 003A                                        sprintf@sp 003F  
                                ??_TMR2_CallBack 0075                 __size_of_I2C_MasterEnableRestart 0003  
                               ___lwmod@dividend 002E                          ?_PIN_MANAGER_Initialize 0070  
                 __end_of_EUSART_SetErrorHandler 08C7                                __CFG_CLKOUTEN$OFF 0000  
                            _I2C_DO_SEND_RESTART 084E                    __size_of_I2C_MasterDisableIrq 0003  
                               ??_ADC_Initialize 0024             __end_of_EUSART_SetRxInterruptHandler 08E2  
          __size_of_EUSART_SetRxInterruptHandler 0009                     _EUSART_SetRxInterruptHandler 08D9  
                             _EUSART_Receive_ISR 0CBF    EUSART_SetFramingErrorHandler@interruptHandler 0024  
                        __end_of_I2C_MasterClose 0831                         __size_of_I2C_DO_TX_EMPTY 0025  
                    PWM3_LoadDutyValue@dutyValue 0070                          __end_of_I2C_MasterStart 0837  
                        __end_of_I2C_MasterWrite 086A                                    __pstringtext1 1000  
                                  __pstringtext2 1020                                    __pstringtext3 102F  
                                  __pstringtext4 1039                                    __pstringtext5 0000  
                           ?_I2C_DO_SEND_RESTART 0070                                         sprintf@c 0040  
                                       sprintf@f 0032                              ?_EUSART_Receive_ISR 0070  
                        COS_TmrHandler@tempbyte1 0028                          COS_TmrHandler@tempbyte2 0029  
                   __size_of_I2C_MasterEnableIrq 0003                                  ___lwmod@divisor 002C  
                          TMR2_ISR@CountCallBack 00B8                     __size_of_I2C_MasterGetRxData 0003  
                                ___lwmod@counter 0031                          __size_of_COS_TmrHandler 0071  
                                     _TX1STAbits 019E                         __size_ofi1_I2C_SetBuffer 000D  
                    __size_of_I2C_MasterClearIrq 0003                          __size_of_COS_TimerSetup 0006  
                             EUSART_Write@txData 0025                     __size_of_EUSART_Transmit_ISR 001D  
                        __end_of_I2C_SetCallback 0C03                   __end_of_PIN_MANAGER_Initialize 0DAC  
                 __size_of_rd1RegCompleteHandler 0015                    __end_of_rd1RegCompleteHandler 0982  
                         __size_of_I2C_DO_RX_ACK 0004                            _RelativeHumidityRaw_H 00C0  
                          _RelativeHumidityRaw_L 00BF                   __size_of_wr1RegCompleteHandler 0015  
                           ??_EUSART_Receive_ISR 0071                            __size_of_I2C_DO_RESET 0005  
                  __end_of_wr1RegCompleteHandler 09AC                            _TMR2_InterruptHandler 015E  
                          _MSSP_InterruptHandler 00BA                     __size_of_I2C_DO_ADDRESS_NACK 0024  
                           __size_of_I2C_DO_IDLE 0005                             __size_of_I2C_DO_RCEN 0006  
                                _PWM3_Initialize 0913                               __size_of_I2C_DO_RX 003B  
                             __size_of_I2C_DO_TX 004F  
