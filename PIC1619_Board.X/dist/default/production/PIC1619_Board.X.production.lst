

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 28 18:17:52 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	text70,local,class=CODE,merge=1,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	text75,local,class=CODE,merge=1,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	psect	text98,local,class=CODE,merge=1,delta=2
   123                           	psect	text99,local,class=CODE,merge=1,delta=2
   124                           	psect	text100,local,class=CODE,merge=1,delta=2
   125                           	psect	text101,local,class=CODE,merge=1,delta=2
   126                           	psect	text102,local,class=CODE,merge=1,delta=2
   127                           	psect	text103,local,class=CODE,merge=1,delta=2
   128                           	psect	text104,local,class=CODE,merge=1,delta=2
   129                           	psect	text105,local,class=CODE,merge=1,delta=2
   130                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text108,local,class=CODE,merge=1,delta=2
   133                           	psect	text109,local,class=CODE,merge=1,delta=2
   134                           	psect	text110,local,class=CODE,merge=1,delta=2
   135                           	psect	text111,local,class=CODE,merge=1,delta=2
   136                           	psect	text112,local,class=CODE,merge=1,delta=2
   137                           	psect	text113,local,class=CODE,merge=1,delta=2
   138                           	dabs	1,0x7E,2
   139  0000                     
   140                           ; Version 1.45
   141                           ; Generated 16/11/2017 GMT
   142                           ; 
   143                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   144                           ; All rights reserved.
   145                           ; 
   146                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   147                           ; 
   148                           ; Redistribution and use in source and binary forms, with or without modification, are
   149                           ; permitted provided that the following conditions are met:
   150                           ; 
   151                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   152                           ;        conditions and the following disclaimer.
   153                           ; 
   154                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   155                           ;        of conditions and the following disclaimer in the documentation and/or other
   156                           ;        materials provided with the distribution.
   157                           ; 
   158                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   159                           ;        software without specific prior written permission.
   160                           ; 
   161                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   162                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   163                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   164                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   165                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   166                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   167                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   168                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   169                           ; 
   170                           ; 
   171                           ; Code-generator required, PIC16F1619 Definitions
   172                           ; 
   173                           ; SFR Addresses
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001B                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  0090                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  0111                     	;# 
   231  0112                     	;# 
   232  0113                     	;# 
   233  0114                     	;# 
   234  0115                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  0118                     	;# 
   238  0119                     	;# 
   239  011C                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  018E                     	;# 
   243  0191                     	;# 
   244  0191                     	;# 
   245  0192                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0199                     	;# 
   253  0199                     	;# 
   254  0199                     	;# 
   255  019A                     	;# 
   256  019A                     	;# 
   257  019A                     	;# 
   258  019B                     	;# 
   259  019B                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019C                     	;# 
   264  019C                     	;# 
   265  019C                     	;# 
   266  019D                     	;# 
   267  019D                     	;# 
   268  019D                     	;# 
   269  019E                     	;# 
   270  019E                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  019F                     	;# 
   274  019F                     	;# 
   275  019F                     	;# 
   276  019F                     	;# 
   277  020C                     	;# 
   278  020D                     	;# 
   279  020E                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0216                     	;# 
   293  0216                     	;# 
   294  0217                     	;# 
   295  0217                     	;# 
   296  028C                     	;# 
   297  028D                     	;# 
   298  028E                     	;# 
   299  0291                     	;# 
   300  0291                     	;# 
   301  0292                     	;# 
   302  0293                     	;# 
   303  0294                     	;# 
   304  0298                     	;# 
   305  0298                     	;# 
   306  0299                     	;# 
   307  029A                     	;# 
   308  029B                     	;# 
   309  029E                     	;# 
   310  030C                     	;# 
   311  030D                     	;# 
   312  030E                     	;# 
   313  038C                     	;# 
   314  038D                     	;# 
   315  038E                     	;# 
   316  0391                     	;# 
   317  0392                     	;# 
   318  0393                     	;# 
   319  0394                     	;# 
   320  0395                     	;# 
   321  0396                     	;# 
   322  0397                     	;# 
   323  0398                     	;# 
   324  0399                     	;# 
   325  040E                     	;# 
   326  0413                     	;# 
   327  0413                     	;# 
   328  0414                     	;# 
   329  0414                     	;# 
   330  0415                     	;# 
   331  0416                     	;# 
   332  0417                     	;# 
   333  0418                     	;# 
   334  041A                     	;# 
   335  041A                     	;# 
   336  041B                     	;# 
   337  041B                     	;# 
   338  041C                     	;# 
   339  041D                     	;# 
   340  041E                     	;# 
   341  041F                     	;# 
   342  0493                     	;# 
   343  0494                     	;# 
   344  0495                     	;# 
   345  0496                     	;# 
   346  049A                     	;# 
   347  049B                     	;# 
   348  049C                     	;# 
   349  049D                     	;# 
   350  058C                     	;# 
   351  058C                     	;# 
   352  058D                     	;# 
   353  058E                     	;# 
   354  058E                     	;# 
   355  058F                     	;# 
   356  0590                     	;# 
   357  0590                     	;# 
   358  0591                     	;# 
   359  0592                     	;# 
   360  0592                     	;# 
   361  0593                     	;# 
   362  0594                     	;# 
   363  0594                     	;# 
   364  0595                     	;# 
   365  0596                     	;# 
   366  0596                     	;# 
   367  0597                     	;# 
   368  0598                     	;# 
   369  0599                     	;# 
   370  059A                     	;# 
   371  059B                     	;# 
   372  059B                     	;# 
   373  059C                     	;# 
   374  059D                     	;# 
   375  060C                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  060F                     	;# 
   381  0610                     	;# 
   382  0611                     	;# 
   383  0612                     	;# 
   384  0613                     	;# 
   385  0614                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  0691                     	;# 
   393  0692                     	;# 
   394  0693                     	;# 
   395  0694                     	;# 
   396  0695                     	;# 
   397  0696                     	;# 
   398  0697                     	;# 
   399  0699                     	;# 
   400  069A                     	;# 
   401  0711                     	;# 
   402  0712                     	;# 
   403  0713                     	;# 
   404  0714                     	;# 
   405  0715                     	;# 
   406  0718                     	;# 
   407  0718                     	;# 
   408  0719                     	;# 
   409  071A                     	;# 
   410  071A                     	;# 
   411  071B                     	;# 
   412  071C                     	;# 
   413  071D                     	;# 
   414  0791                     	;# 
   415  0791                     	;# 
   416  0792                     	;# 
   417  0793                     	;# 
   418  0793                     	;# 
   419  0794                     	;# 
   420  0795                     	;# 
   421  0795                     	;# 
   422  0796                     	;# 
   423  0797                     	;# 
   424  0797                     	;# 
   425  0798                     	;# 
   426  0799                     	;# 
   427  079A                     	;# 
   428  080C                     	;# 
   429  080C                     	;# 
   430  080D                     	;# 
   431  080E                     	;# 
   432  080E                     	;# 
   433  080F                     	;# 
   434  0810                     	;# 
   435  0810                     	;# 
   436  0811                     	;# 
   437  0812                     	;# 
   438  0812                     	;# 
   439  0813                     	;# 
   440  0814                     	;# 
   441  0815                     	;# 
   442  0816                     	;# 
   443  0817                     	;# 
   444  0818                     	;# 
   445  0819                     	;# 
   446  081A                     	;# 
   447  081A                     	;# 
   448  081B                     	;# 
   449  081C                     	;# 
   450  081C                     	;# 
   451  081D                     	;# 
   452  088C                     	;# 
   453  088D                     	;# 
   454  088E                     	;# 
   455  088F                     	;# 
   456  088F                     	;# 
   457  0890                     	;# 
   458  0891                     	;# 
   459  0892                     	;# 
   460  0893                     	;# 
   461  0893                     	;# 
   462  0894                     	;# 
   463  0895                     	;# 
   464  0896                     	;# 
   465  0897                     	;# 
   466  0897                     	;# 
   467  0898                     	;# 
   468  0899                     	;# 
   469  0D8C                     	;# 
   470  0D8C                     	;# 
   471  0D8D                     	;# 
   472  0D8E                     	;# 
   473  0D8F                     	;# 
   474  0D8F                     	;# 
   475  0D90                     	;# 
   476  0D91                     	;# 
   477  0D92                     	;# 
   478  0D92                     	;# 
   479  0D93                     	;# 
   480  0D94                     	;# 
   481  0D95                     	;# 
   482  0D95                     	;# 
   483  0D96                     	;# 
   484  0D97                     	;# 
   485  0D98                     	;# 
   486  0D99                     	;# 
   487  0D9A                     	;# 
   488  0D9B                     	;# 
   489  0D9C                     	;# 
   490  0D9D                     	;# 
   491  0D9E                     	;# 
   492  0D9E                     	;# 
   493  0D9F                     	;# 
   494  0DA0                     	;# 
   495  0DA1                     	;# 
   496  0DA1                     	;# 
   497  0DA2                     	;# 
   498  0DA3                     	;# 
   499  0DA4                     	;# 
   500  0DA4                     	;# 
   501  0DA5                     	;# 
   502  0DA6                     	;# 
   503  0DA7                     	;# 
   504  0DA7                     	;# 
   505  0DA8                     	;# 
   506  0DA9                     	;# 
   507  0DAA                     	;# 
   508  0DAB                     	;# 
   509  0DAC                     	;# 
   510  0DAD                     	;# 
   511  0DAE                     	;# 
   512  0DAF                     	;# 
   513  0E0F                     	;# 
   514  0E10                     	;# 
   515  0E11                     	;# 
   516  0E12                     	;# 
   517  0E13                     	;# 
   518  0E14                     	;# 
   519  0E15                     	;# 
   520  0E16                     	;# 
   521  0E17                     	;# 
   522  0E18                     	;# 
   523  0E19                     	;# 
   524  0E1A                     	;# 
   525  0E1B                     	;# 
   526  0E1C                     	;# 
   527  0E1D                     	;# 
   528  0E1E                     	;# 
   529  0E1F                     	;# 
   530  0E20                     	;# 
   531  0E21                     	;# 
   532  0E22                     	;# 
   533  0E23                     	;# 
   534  0E24                     	;# 
   535  0E25                     	;# 
   536  0E26                     	;# 
   537  0E27                     	;# 
   538  0E28                     	;# 
   539  0E29                     	;# 
   540  0E2A                     	;# 
   541  0E2B                     	;# 
   542  0E2C                     	;# 
   543  0E2D                     	;# 
   544  0E2E                     	;# 
   545  0E90                     	;# 
   546  0E91                     	;# 
   547  0E92                     	;# 
   548  0E94                     	;# 
   549  0E95                     	;# 
   550  0E9C                     	;# 
   551  0E9D                     	;# 
   552  0E9E                     	;# 
   553  0E9F                     	;# 
   554  0EA0                     	;# 
   555  0EA1                     	;# 
   556  0EA2                     	;# 
   557  0EA3                     	;# 
   558  0EA4                     	;# 
   559  0EA5                     	;# 
   560  0EA6                     	;# 
   561  0EA7                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0F20                     	;# 
   580  0F21                     	;# 
   581  0F22                     	;# 
   582  0F23                     	;# 
   583  0F24                     	;# 
   584  0F25                     	;# 
   585  0F26                     	;# 
   586  0F27                     	;# 
   587  0F28                     	;# 
   588  0F29                     	;# 
   589  0F2A                     	;# 
   590  0F2B                     	;# 
   591  0F2C                     	;# 
   592  0F2D                     	;# 
   593  0F2E                     	;# 
   594  0F2F                     	;# 
   595  0F30                     	;# 
   596  0F31                     	;# 
   597  0F32                     	;# 
   598  0F33                     	;# 
   599  0F34                     	;# 
   600  0F35                     	;# 
   601  0F36                     	;# 
   602  0F37                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0010                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001E                     	;# 
   647  001F                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0094                     	;# 
   656  0095                     	;# 
   657  0096                     	;# 
   658  0098                     	;# 
   659  0099                     	;# 
   660  009A                     	;# 
   661  009B                     	;# 
   662  009B                     	;# 
   663  009C                     	;# 
   664  009D                     	;# 
   665  009E                     	;# 
   666  009F                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  0111                     	;# 
   671  0112                     	;# 
   672  0113                     	;# 
   673  0114                     	;# 
   674  0115                     	;# 
   675  0116                     	;# 
   676  0117                     	;# 
   677  0118                     	;# 
   678  0119                     	;# 
   679  011C                     	;# 
   680  018C                     	;# 
   681  018D                     	;# 
   682  018E                     	;# 
   683  0191                     	;# 
   684  0191                     	;# 
   685  0192                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0194                     	;# 
   689  0195                     	;# 
   690  0196                     	;# 
   691  0197                     	;# 
   692  0199                     	;# 
   693  0199                     	;# 
   694  0199                     	;# 
   695  019A                     	;# 
   696  019A                     	;# 
   697  019A                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019B                     	;# 
   702  019B                     	;# 
   703  019C                     	;# 
   704  019C                     	;# 
   705  019C                     	;# 
   706  019D                     	;# 
   707  019D                     	;# 
   708  019D                     	;# 
   709  019E                     	;# 
   710  019E                     	;# 
   711  019E                     	;# 
   712  019F                     	;# 
   713  019F                     	;# 
   714  019F                     	;# 
   715  019F                     	;# 
   716  019F                     	;# 
   717  020C                     	;# 
   718  020D                     	;# 
   719  020E                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0216                     	;# 
   733  0216                     	;# 
   734  0217                     	;# 
   735  0217                     	;# 
   736  028C                     	;# 
   737  028D                     	;# 
   738  028E                     	;# 
   739  0291                     	;# 
   740  0291                     	;# 
   741  0292                     	;# 
   742  0293                     	;# 
   743  0294                     	;# 
   744  0298                     	;# 
   745  0298                     	;# 
   746  0299                     	;# 
   747  029A                     	;# 
   748  029B                     	;# 
   749  029E                     	;# 
   750  030C                     	;# 
   751  030D                     	;# 
   752  030E                     	;# 
   753  038C                     	;# 
   754  038D                     	;# 
   755  038E                     	;# 
   756  0391                     	;# 
   757  0392                     	;# 
   758  0393                     	;# 
   759  0394                     	;# 
   760  0395                     	;# 
   761  0396                     	;# 
   762  0397                     	;# 
   763  0398                     	;# 
   764  0399                     	;# 
   765  040E                     	;# 
   766  0413                     	;# 
   767  0413                     	;# 
   768  0414                     	;# 
   769  0414                     	;# 
   770  0415                     	;# 
   771  0416                     	;# 
   772  0417                     	;# 
   773  0418                     	;# 
   774  041A                     	;# 
   775  041A                     	;# 
   776  041B                     	;# 
   777  041B                     	;# 
   778  041C                     	;# 
   779  041D                     	;# 
   780  041E                     	;# 
   781  041F                     	;# 
   782  0493                     	;# 
   783  0494                     	;# 
   784  0495                     	;# 
   785  0496                     	;# 
   786  049A                     	;# 
   787  049B                     	;# 
   788  049C                     	;# 
   789  049D                     	;# 
   790  058C                     	;# 
   791  058C                     	;# 
   792  058D                     	;# 
   793  058E                     	;# 
   794  058E                     	;# 
   795  058F                     	;# 
   796  0590                     	;# 
   797  0590                     	;# 
   798  0591                     	;# 
   799  0592                     	;# 
   800  0592                     	;# 
   801  0593                     	;# 
   802  0594                     	;# 
   803  0594                     	;# 
   804  0595                     	;# 
   805  0596                     	;# 
   806  0596                     	;# 
   807  0597                     	;# 
   808  0598                     	;# 
   809  0599                     	;# 
   810  059A                     	;# 
   811  059B                     	;# 
   812  059B                     	;# 
   813  059C                     	;# 
   814  059D                     	;# 
   815  060C                     	;# 
   816  060C                     	;# 
   817  060D                     	;# 
   818  060E                     	;# 
   819  060F                     	;# 
   820  060F                     	;# 
   821  0610                     	;# 
   822  0611                     	;# 
   823  0612                     	;# 
   824  0613                     	;# 
   825  0614                     	;# 
   826  0617                     	;# 
   827  0618                     	;# 
   828  0619                     	;# 
   829  061A                     	;# 
   830  061B                     	;# 
   831  061C                     	;# 
   832  0691                     	;# 
   833  0692                     	;# 
   834  0693                     	;# 
   835  0694                     	;# 
   836  0695                     	;# 
   837  0696                     	;# 
   838  0697                     	;# 
   839  0699                     	;# 
   840  069A                     	;# 
   841  0711                     	;# 
   842  0712                     	;# 
   843  0713                     	;# 
   844  0714                     	;# 
   845  0715                     	;# 
   846  0718                     	;# 
   847  0718                     	;# 
   848  0719                     	;# 
   849  071A                     	;# 
   850  071A                     	;# 
   851  071B                     	;# 
   852  071C                     	;# 
   853  071D                     	;# 
   854  0791                     	;# 
   855  0791                     	;# 
   856  0792                     	;# 
   857  0793                     	;# 
   858  0793                     	;# 
   859  0794                     	;# 
   860  0795                     	;# 
   861  0795                     	;# 
   862  0796                     	;# 
   863  0797                     	;# 
   864  0797                     	;# 
   865  0798                     	;# 
   866  0799                     	;# 
   867  079A                     	;# 
   868  080C                     	;# 
   869  080C                     	;# 
   870  080D                     	;# 
   871  080E                     	;# 
   872  080E                     	;# 
   873  080F                     	;# 
   874  0810                     	;# 
   875  0810                     	;# 
   876  0811                     	;# 
   877  0812                     	;# 
   878  0812                     	;# 
   879  0813                     	;# 
   880  0814                     	;# 
   881  0815                     	;# 
   882  0816                     	;# 
   883  0817                     	;# 
   884  0818                     	;# 
   885  0819                     	;# 
   886  081A                     	;# 
   887  081A                     	;# 
   888  081B                     	;# 
   889  081C                     	;# 
   890  081C                     	;# 
   891  081D                     	;# 
   892  088C                     	;# 
   893  088D                     	;# 
   894  088E                     	;# 
   895  088F                     	;# 
   896  088F                     	;# 
   897  0890                     	;# 
   898  0891                     	;# 
   899  0892                     	;# 
   900  0893                     	;# 
   901  0893                     	;# 
   902  0894                     	;# 
   903  0895                     	;# 
   904  0896                     	;# 
   905  0897                     	;# 
   906  0897                     	;# 
   907  0898                     	;# 
   908  0899                     	;# 
   909  0D8C                     	;# 
   910  0D8C                     	;# 
   911  0D8D                     	;# 
   912  0D8E                     	;# 
   913  0D8F                     	;# 
   914  0D8F                     	;# 
   915  0D90                     	;# 
   916  0D91                     	;# 
   917  0D92                     	;# 
   918  0D92                     	;# 
   919  0D93                     	;# 
   920  0D94                     	;# 
   921  0D95                     	;# 
   922  0D95                     	;# 
   923  0D96                     	;# 
   924  0D97                     	;# 
   925  0D98                     	;# 
   926  0D99                     	;# 
   927  0D9A                     	;# 
   928  0D9B                     	;# 
   929  0D9C                     	;# 
   930  0D9D                     	;# 
   931  0D9E                     	;# 
   932  0D9E                     	;# 
   933  0D9F                     	;# 
   934  0DA0                     	;# 
   935  0DA1                     	;# 
   936  0DA1                     	;# 
   937  0DA2                     	;# 
   938  0DA3                     	;# 
   939  0DA4                     	;# 
   940  0DA4                     	;# 
   941  0DA5                     	;# 
   942  0DA6                     	;# 
   943  0DA7                     	;# 
   944  0DA7                     	;# 
   945  0DA8                     	;# 
   946  0DA9                     	;# 
   947  0DAA                     	;# 
   948  0DAB                     	;# 
   949  0DAC                     	;# 
   950  0DAD                     	;# 
   951  0DAE                     	;# 
   952  0DAF                     	;# 
   953  0E0F                     	;# 
   954  0E10                     	;# 
   955  0E11                     	;# 
   956  0E12                     	;# 
   957  0E13                     	;# 
   958  0E14                     	;# 
   959  0E15                     	;# 
   960  0E16                     	;# 
   961  0E17                     	;# 
   962  0E18                     	;# 
   963  0E19                     	;# 
   964  0E1A                     	;# 
   965  0E1B                     	;# 
   966  0E1C                     	;# 
   967  0E1D                     	;# 
   968  0E1E                     	;# 
   969  0E1F                     	;# 
   970  0E20                     	;# 
   971  0E21                     	;# 
   972  0E22                     	;# 
   973  0E23                     	;# 
   974  0E24                     	;# 
   975  0E25                     	;# 
   976  0E26                     	;# 
   977  0E27                     	;# 
   978  0E28                     	;# 
   979  0E29                     	;# 
   980  0E2A                     	;# 
   981  0E2B                     	;# 
   982  0E2C                     	;# 
   983  0E2D                     	;# 
   984  0E2E                     	;# 
   985  0E90                     	;# 
   986  0E91                     	;# 
   987  0E92                     	;# 
   988  0E94                     	;# 
   989  0E95                     	;# 
   990  0E9C                     	;# 
   991  0E9D                     	;# 
   992  0E9E                     	;# 
   993  0E9F                     	;# 
   994  0EA0                     	;# 
   995  0EA1                     	;# 
   996  0EA2                     	;# 
   997  0EA3                     	;# 
   998  0EA4                     	;# 
   999  0EA5                     	;# 
  1000  0EA6                     	;# 
  1001  0EA7                     	;# 
  1002  0F0F                     	;# 
  1003  0F10                     	;# 
  1004  0F11                     	;# 
  1005  0F12                     	;# 
  1006  0F13                     	;# 
  1007  0F14                     	;# 
  1008  0F15                     	;# 
  1009  0F16                     	;# 
  1010  0F17                     	;# 
  1011  0F18                     	;# 
  1012  0F19                     	;# 
  1013  0F1A                     	;# 
  1014  0F1B                     	;# 
  1015  0F1C                     	;# 
  1016  0F1D                     	;# 
  1017  0F1E                     	;# 
  1018  0F1F                     	;# 
  1019  0F20                     	;# 
  1020  0F21                     	;# 
  1021  0F22                     	;# 
  1022  0F23                     	;# 
  1023  0F24                     	;# 
  1024  0F25                     	;# 
  1025  0F26                     	;# 
  1026  0F27                     	;# 
  1027  0F28                     	;# 
  1028  0F29                     	;# 
  1029  0F2A                     	;# 
  1030  0F2B                     	;# 
  1031  0F2C                     	;# 
  1032  0F2D                     	;# 
  1033  0F2E                     	;# 
  1034  0F2F                     	;# 
  1035  0F30                     	;# 
  1036  0F31                     	;# 
  1037  0F32                     	;# 
  1038  0F33                     	;# 
  1039  0F34                     	;# 
  1040  0F35                     	;# 
  1041  0F36                     	;# 
  1042  0F37                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0013                     	;# 
  1073  0014                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001A                     	;# 
  1082  001B                     	;# 
  1083  001B                     	;# 
  1084  001C                     	;# 
  1085  001D                     	;# 
  1086  001E                     	;# 
  1087  001F                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0098                     	;# 
  1099  0099                     	;# 
  1100  009A                     	;# 
  1101  009B                     	;# 
  1102  009B                     	;# 
  1103  009C                     	;# 
  1104  009D                     	;# 
  1105  009E                     	;# 
  1106  009F                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010E                     	;# 
  1110  0111                     	;# 
  1111  0112                     	;# 
  1112  0113                     	;# 
  1113  0114                     	;# 
  1114  0115                     	;# 
  1115  0116                     	;# 
  1116  0117                     	;# 
  1117  0118                     	;# 
  1118  0119                     	;# 
  1119  011C                     	;# 
  1120  018C                     	;# 
  1121  018D                     	;# 
  1122  018E                     	;# 
  1123  0191                     	;# 
  1124  0191                     	;# 
  1125  0192                     	;# 
  1126  0193                     	;# 
  1127  0193                     	;# 
  1128  0194                     	;# 
  1129  0195                     	;# 
  1130  0196                     	;# 
  1131  0197                     	;# 
  1132  0199                     	;# 
  1133  0199                     	;# 
  1134  0199                     	;# 
  1135  019A                     	;# 
  1136  019A                     	;# 
  1137  019A                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019C                     	;# 
  1146  019D                     	;# 
  1147  019D                     	;# 
  1148  019D                     	;# 
  1149  019E                     	;# 
  1150  019E                     	;# 
  1151  019E                     	;# 
  1152  019F                     	;# 
  1153  019F                     	;# 
  1154  019F                     	;# 
  1155  019F                     	;# 
  1156  019F                     	;# 
  1157  020C                     	;# 
  1158  020D                     	;# 
  1159  020E                     	;# 
  1160  0211                     	;# 
  1161  0211                     	;# 
  1162  0212                     	;# 
  1163  0212                     	;# 
  1164  0213                     	;# 
  1165  0213                     	;# 
  1166  0214                     	;# 
  1167  0214                     	;# 
  1168  0215                     	;# 
  1169  0215                     	;# 
  1170  0215                     	;# 
  1171  0215                     	;# 
  1172  0216                     	;# 
  1173  0216                     	;# 
  1174  0217                     	;# 
  1175  0217                     	;# 
  1176  028C                     	;# 
  1177  028D                     	;# 
  1178  028E                     	;# 
  1179  0291                     	;# 
  1180  0291                     	;# 
  1181  0292                     	;# 
  1182  0293                     	;# 
  1183  0294                     	;# 
  1184  0298                     	;# 
  1185  0298                     	;# 
  1186  0299                     	;# 
  1187  029A                     	;# 
  1188  029B                     	;# 
  1189  029E                     	;# 
  1190  030C                     	;# 
  1191  030D                     	;# 
  1192  030E                     	;# 
  1193  038C                     	;# 
  1194  038D                     	;# 
  1195  038E                     	;# 
  1196  0391                     	;# 
  1197  0392                     	;# 
  1198  0393                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  0397                     	;# 
  1203  0398                     	;# 
  1204  0399                     	;# 
  1205  040E                     	;# 
  1206  0413                     	;# 
  1207  0413                     	;# 
  1208  0414                     	;# 
  1209  0414                     	;# 
  1210  0415                     	;# 
  1211  0416                     	;# 
  1212  0417                     	;# 
  1213  0418                     	;# 
  1214  041A                     	;# 
  1215  041A                     	;# 
  1216  041B                     	;# 
  1217  041B                     	;# 
  1218  041C                     	;# 
  1219  041D                     	;# 
  1220  041E                     	;# 
  1221  041F                     	;# 
  1222  0493                     	;# 
  1223  0494                     	;# 
  1224  0495                     	;# 
  1225  0496                     	;# 
  1226  049A                     	;# 
  1227  049B                     	;# 
  1228  049C                     	;# 
  1229  049D                     	;# 
  1230  058C                     	;# 
  1231  058C                     	;# 
  1232  058D                     	;# 
  1233  058E                     	;# 
  1234  058E                     	;# 
  1235  058F                     	;# 
  1236  0590                     	;# 
  1237  0590                     	;# 
  1238  0591                     	;# 
  1239  0592                     	;# 
  1240  0592                     	;# 
  1241  0593                     	;# 
  1242  0594                     	;# 
  1243  0594                     	;# 
  1244  0595                     	;# 
  1245  0596                     	;# 
  1246  0596                     	;# 
  1247  0597                     	;# 
  1248  0598                     	;# 
  1249  0599                     	;# 
  1250  059A                     	;# 
  1251  059B                     	;# 
  1252  059B                     	;# 
  1253  059C                     	;# 
  1254  059D                     	;# 
  1255  060C                     	;# 
  1256  060C                     	;# 
  1257  060D                     	;# 
  1258  060E                     	;# 
  1259  060F                     	;# 
  1260  060F                     	;# 
  1261  0610                     	;# 
  1262  0611                     	;# 
  1263  0612                     	;# 
  1264  0613                     	;# 
  1265  0614                     	;# 
  1266  0617                     	;# 
  1267  0618                     	;# 
  1268  0619                     	;# 
  1269  061A                     	;# 
  1270  061B                     	;# 
  1271  061C                     	;# 
  1272  0691                     	;# 
  1273  0692                     	;# 
  1274  0693                     	;# 
  1275  0694                     	;# 
  1276  0695                     	;# 
  1277  0696                     	;# 
  1278  0697                     	;# 
  1279  0699                     	;# 
  1280  069A                     	;# 
  1281  0711                     	;# 
  1282  0712                     	;# 
  1283  0713                     	;# 
  1284  0714                     	;# 
  1285  0715                     	;# 
  1286  0718                     	;# 
  1287  0718                     	;# 
  1288  0719                     	;# 
  1289  071A                     	;# 
  1290  071A                     	;# 
  1291  071B                     	;# 
  1292  071C                     	;# 
  1293  071D                     	;# 
  1294  0791                     	;# 
  1295  0791                     	;# 
  1296  0792                     	;# 
  1297  0793                     	;# 
  1298  0793                     	;# 
  1299  0794                     	;# 
  1300  0795                     	;# 
  1301  0795                     	;# 
  1302  0796                     	;# 
  1303  0797                     	;# 
  1304  0797                     	;# 
  1305  0798                     	;# 
  1306  0799                     	;# 
  1307  079A                     	;# 
  1308  080C                     	;# 
  1309  080C                     	;# 
  1310  080D                     	;# 
  1311  080E                     	;# 
  1312  080E                     	;# 
  1313  080F                     	;# 
  1314  0810                     	;# 
  1315  0810                     	;# 
  1316  0811                     	;# 
  1317  0812                     	;# 
  1318  0812                     	;# 
  1319  0813                     	;# 
  1320  0814                     	;# 
  1321  0815                     	;# 
  1322  0816                     	;# 
  1323  0817                     	;# 
  1324  0818                     	;# 
  1325  0819                     	;# 
  1326  081A                     	;# 
  1327  081A                     	;# 
  1328  081B                     	;# 
  1329  081C                     	;# 
  1330  081C                     	;# 
  1331  081D                     	;# 
  1332  088C                     	;# 
  1333  088D                     	;# 
  1334  088E                     	;# 
  1335  088F                     	;# 
  1336  088F                     	;# 
  1337  0890                     	;# 
  1338  0891                     	;# 
  1339  0892                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0894                     	;# 
  1343  0895                     	;# 
  1344  0896                     	;# 
  1345  0897                     	;# 
  1346  0897                     	;# 
  1347  0898                     	;# 
  1348  0899                     	;# 
  1349  0D8C                     	;# 
  1350  0D8C                     	;# 
  1351  0D8D                     	;# 
  1352  0D8E                     	;# 
  1353  0D8F                     	;# 
  1354  0D8F                     	;# 
  1355  0D90                     	;# 
  1356  0D91                     	;# 
  1357  0D92                     	;# 
  1358  0D92                     	;# 
  1359  0D93                     	;# 
  1360  0D94                     	;# 
  1361  0D95                     	;# 
  1362  0D95                     	;# 
  1363  0D96                     	;# 
  1364  0D97                     	;# 
  1365  0D98                     	;# 
  1366  0D99                     	;# 
  1367  0D9A                     	;# 
  1368  0D9B                     	;# 
  1369  0D9C                     	;# 
  1370  0D9D                     	;# 
  1371  0D9E                     	;# 
  1372  0D9E                     	;# 
  1373  0D9F                     	;# 
  1374  0DA0                     	;# 
  1375  0DA1                     	;# 
  1376  0DA1                     	;# 
  1377  0DA2                     	;# 
  1378  0DA3                     	;# 
  1379  0DA4                     	;# 
  1380  0DA4                     	;# 
  1381  0DA5                     	;# 
  1382  0DA6                     	;# 
  1383  0DA7                     	;# 
  1384  0DA7                     	;# 
  1385  0DA8                     	;# 
  1386  0DA9                     	;# 
  1387  0DAA                     	;# 
  1388  0DAB                     	;# 
  1389  0DAC                     	;# 
  1390  0DAD                     	;# 
  1391  0DAE                     	;# 
  1392  0DAF                     	;# 
  1393  0E0F                     	;# 
  1394  0E10                     	;# 
  1395  0E11                     	;# 
  1396  0E12                     	;# 
  1397  0E13                     	;# 
  1398  0E14                     	;# 
  1399  0E15                     	;# 
  1400  0E16                     	;# 
  1401  0E17                     	;# 
  1402  0E18                     	;# 
  1403  0E19                     	;# 
  1404  0E1A                     	;# 
  1405  0E1B                     	;# 
  1406  0E1C                     	;# 
  1407  0E1D                     	;# 
  1408  0E1E                     	;# 
  1409  0E1F                     	;# 
  1410  0E20                     	;# 
  1411  0E21                     	;# 
  1412  0E22                     	;# 
  1413  0E23                     	;# 
  1414  0E24                     	;# 
  1415  0E25                     	;# 
  1416  0E26                     	;# 
  1417  0E27                     	;# 
  1418  0E28                     	;# 
  1419  0E29                     	;# 
  1420  0E2A                     	;# 
  1421  0E2B                     	;# 
  1422  0E2C                     	;# 
  1423  0E2D                     	;# 
  1424  0E2E                     	;# 
  1425  0E90                     	;# 
  1426  0E91                     	;# 
  1427  0E92                     	;# 
  1428  0E94                     	;# 
  1429  0E95                     	;# 
  1430  0E9C                     	;# 
  1431  0E9D                     	;# 
  1432  0E9E                     	;# 
  1433  0E9F                     	;# 
  1434  0EA0                     	;# 
  1435  0EA1                     	;# 
  1436  0EA2                     	;# 
  1437  0EA3                     	;# 
  1438  0EA4                     	;# 
  1439  0EA5                     	;# 
  1440  0EA6                     	;# 
  1441  0EA7                     	;# 
  1442  0F0F                     	;# 
  1443  0F10                     	;# 
  1444  0F11                     	;# 
  1445  0F12                     	;# 
  1446  0F13                     	;# 
  1447  0F14                     	;# 
  1448  0F15                     	;# 
  1449  0F16                     	;# 
  1450  0F17                     	;# 
  1451  0F18                     	;# 
  1452  0F19                     	;# 
  1453  0F1A                     	;# 
  1454  0F1B                     	;# 
  1455  0F1C                     	;# 
  1456  0F1D                     	;# 
  1457  0F1E                     	;# 
  1458  0F1F                     	;# 
  1459  0F20                     	;# 
  1460  0F21                     	;# 
  1461  0F22                     	;# 
  1462  0F23                     	;# 
  1463  0F24                     	;# 
  1464  0F25                     	;# 
  1465  0F26                     	;# 
  1466  0F27                     	;# 
  1467  0F28                     	;# 
  1468  0F29                     	;# 
  1469  0F2A                     	;# 
  1470  0F2B                     	;# 
  1471  0F2C                     	;# 
  1472  0F2D                     	;# 
  1473  0F2E                     	;# 
  1474  0F2F                     	;# 
  1475  0F30                     	;# 
  1476  0F31                     	;# 
  1477  0F32                     	;# 
  1478  0F33                     	;# 
  1479  0F34                     	;# 
  1480  0F35                     	;# 
  1481  0F36                     	;# 
  1482  0F37                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0010                     	;# 
  1510  0011                     	;# 
  1511  0012                     	;# 
  1512  0013                     	;# 
  1513  0014                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  001D                     	;# 
  1526  001E                     	;# 
  1527  001F                     	;# 
  1528  008C                     	;# 
  1529  008D                     	;# 
  1530  008E                     	;# 
  1531  0090                     	;# 
  1532  0091                     	;# 
  1533  0092                     	;# 
  1534  0093                     	;# 
  1535  0094                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0098                     	;# 
  1539  0099                     	;# 
  1540  009A                     	;# 
  1541  009B                     	;# 
  1542  009B                     	;# 
  1543  009C                     	;# 
  1544  009D                     	;# 
  1545  009E                     	;# 
  1546  009F                     	;# 
  1547  010C                     	;# 
  1548  010D                     	;# 
  1549  010E                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011C                     	;# 
  1560  018C                     	;# 
  1561  018D                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0197                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  020C                     	;# 
  1598  020D                     	;# 
  1599  020E                     	;# 
  1600  0211                     	;# 
  1601  0211                     	;# 
  1602  0212                     	;# 
  1603  0212                     	;# 
  1604  0213                     	;# 
  1605  0213                     	;# 
  1606  0214                     	;# 
  1607  0214                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  028C                     	;# 
  1617  028D                     	;# 
  1618  028E                     	;# 
  1619  0291                     	;# 
  1620  0291                     	;# 
  1621  0292                     	;# 
  1622  0293                     	;# 
  1623  0294                     	;# 
  1624  0298                     	;# 
  1625  0298                     	;# 
  1626  0299                     	;# 
  1627  029A                     	;# 
  1628  029B                     	;# 
  1629  029E                     	;# 
  1630  030C                     	;# 
  1631  030D                     	;# 
  1632  030E                     	;# 
  1633  038C                     	;# 
  1634  038D                     	;# 
  1635  038E                     	;# 
  1636  0391                     	;# 
  1637  0392                     	;# 
  1638  0393                     	;# 
  1639  0394                     	;# 
  1640  0395                     	;# 
  1641  0396                     	;# 
  1642  0397                     	;# 
  1643  0398                     	;# 
  1644  0399                     	;# 
  1645  040E                     	;# 
  1646  0413                     	;# 
  1647  0413                     	;# 
  1648  0414                     	;# 
  1649  0414                     	;# 
  1650  0415                     	;# 
  1651  0416                     	;# 
  1652  0417                     	;# 
  1653  0418                     	;# 
  1654  041A                     	;# 
  1655  041A                     	;# 
  1656  041B                     	;# 
  1657  041B                     	;# 
  1658  041C                     	;# 
  1659  041D                     	;# 
  1660  041E                     	;# 
  1661  041F                     	;# 
  1662  0493                     	;# 
  1663  0494                     	;# 
  1664  0495                     	;# 
  1665  0496                     	;# 
  1666  049A                     	;# 
  1667  049B                     	;# 
  1668  049C                     	;# 
  1669  049D                     	;# 
  1670  058C                     	;# 
  1671  058C                     	;# 
  1672  058D                     	;# 
  1673  058E                     	;# 
  1674  058E                     	;# 
  1675  058F                     	;# 
  1676  0590                     	;# 
  1677  0590                     	;# 
  1678  0591                     	;# 
  1679  0592                     	;# 
  1680  0592                     	;# 
  1681  0593                     	;# 
  1682  0594                     	;# 
  1683  0594                     	;# 
  1684  0595                     	;# 
  1685  0596                     	;# 
  1686  0596                     	;# 
  1687  0597                     	;# 
  1688  0598                     	;# 
  1689  0599                     	;# 
  1690  059A                     	;# 
  1691  059B                     	;# 
  1692  059B                     	;# 
  1693  059C                     	;# 
  1694  059D                     	;# 
  1695  060C                     	;# 
  1696  060C                     	;# 
  1697  060D                     	;# 
  1698  060E                     	;# 
  1699  060F                     	;# 
  1700  060F                     	;# 
  1701  0610                     	;# 
  1702  0611                     	;# 
  1703  0612                     	;# 
  1704  0613                     	;# 
  1705  0614                     	;# 
  1706  0617                     	;# 
  1707  0618                     	;# 
  1708  0619                     	;# 
  1709  061A                     	;# 
  1710  061B                     	;# 
  1711  061C                     	;# 
  1712  0691                     	;# 
  1713  0692                     	;# 
  1714  0693                     	;# 
  1715  0694                     	;# 
  1716  0695                     	;# 
  1717  0696                     	;# 
  1718  0697                     	;# 
  1719  0699                     	;# 
  1720  069A                     	;# 
  1721  0711                     	;# 
  1722  0712                     	;# 
  1723  0713                     	;# 
  1724  0714                     	;# 
  1725  0715                     	;# 
  1726  0718                     	;# 
  1727  0718                     	;# 
  1728  0719                     	;# 
  1729  071A                     	;# 
  1730  071A                     	;# 
  1731  071B                     	;# 
  1732  071C                     	;# 
  1733  071D                     	;# 
  1734  0791                     	;# 
  1735  0791                     	;# 
  1736  0792                     	;# 
  1737  0793                     	;# 
  1738  0793                     	;# 
  1739  0794                     	;# 
  1740  0795                     	;# 
  1741  0795                     	;# 
  1742  0796                     	;# 
  1743  0797                     	;# 
  1744  0797                     	;# 
  1745  0798                     	;# 
  1746  0799                     	;# 
  1747  079A                     	;# 
  1748  080C                     	;# 
  1749  080C                     	;# 
  1750  080D                     	;# 
  1751  080E                     	;# 
  1752  080E                     	;# 
  1753  080F                     	;# 
  1754  0810                     	;# 
  1755  0810                     	;# 
  1756  0811                     	;# 
  1757  0812                     	;# 
  1758  0812                     	;# 
  1759  0813                     	;# 
  1760  0814                     	;# 
  1761  0815                     	;# 
  1762  0816                     	;# 
  1763  0817                     	;# 
  1764  0818                     	;# 
  1765  0819                     	;# 
  1766  081A                     	;# 
  1767  081A                     	;# 
  1768  081B                     	;# 
  1769  081C                     	;# 
  1770  081C                     	;# 
  1771  081D                     	;# 
  1772  088C                     	;# 
  1773  088D                     	;# 
  1774  088E                     	;# 
  1775  088F                     	;# 
  1776  088F                     	;# 
  1777  0890                     	;# 
  1778  0891                     	;# 
  1779  0892                     	;# 
  1780  0893                     	;# 
  1781  0893                     	;# 
  1782  0894                     	;# 
  1783  0895                     	;# 
  1784  0896                     	;# 
  1785  0897                     	;# 
  1786  0897                     	;# 
  1787  0898                     	;# 
  1788  0899                     	;# 
  1789  0D8C                     	;# 
  1790  0D8C                     	;# 
  1791  0D8D                     	;# 
  1792  0D8E                     	;# 
  1793  0D8F                     	;# 
  1794  0D8F                     	;# 
  1795  0D90                     	;# 
  1796  0D91                     	;# 
  1797  0D92                     	;# 
  1798  0D92                     	;# 
  1799  0D93                     	;# 
  1800  0D94                     	;# 
  1801  0D95                     	;# 
  1802  0D95                     	;# 
  1803  0D96                     	;# 
  1804  0D97                     	;# 
  1805  0D98                     	;# 
  1806  0D99                     	;# 
  1807  0D9A                     	;# 
  1808  0D9B                     	;# 
  1809  0D9C                     	;# 
  1810  0D9D                     	;# 
  1811  0D9E                     	;# 
  1812  0D9E                     	;# 
  1813  0D9F                     	;# 
  1814  0DA0                     	;# 
  1815  0DA1                     	;# 
  1816  0DA1                     	;# 
  1817  0DA2                     	;# 
  1818  0DA3                     	;# 
  1819  0DA4                     	;# 
  1820  0DA4                     	;# 
  1821  0DA5                     	;# 
  1822  0DA6                     	;# 
  1823  0DA7                     	;# 
  1824  0DA7                     	;# 
  1825  0DA8                     	;# 
  1826  0DA9                     	;# 
  1827  0DAA                     	;# 
  1828  0DAB                     	;# 
  1829  0DAC                     	;# 
  1830  0DAD                     	;# 
  1831  0DAE                     	;# 
  1832  0DAF                     	;# 
  1833  0E0F                     	;# 
  1834  0E10                     	;# 
  1835  0E11                     	;# 
  1836  0E12                     	;# 
  1837  0E13                     	;# 
  1838  0E14                     	;# 
  1839  0E15                     	;# 
  1840  0E16                     	;# 
  1841  0E17                     	;# 
  1842  0E18                     	;# 
  1843  0E19                     	;# 
  1844  0E1A                     	;# 
  1845  0E1B                     	;# 
  1846  0E1C                     	;# 
  1847  0E1D                     	;# 
  1848  0E1E                     	;# 
  1849  0E1F                     	;# 
  1850  0E20                     	;# 
  1851  0E21                     	;# 
  1852  0E22                     	;# 
  1853  0E23                     	;# 
  1854  0E24                     	;# 
  1855  0E25                     	;# 
  1856  0E26                     	;# 
  1857  0E27                     	;# 
  1858  0E28                     	;# 
  1859  0E29                     	;# 
  1860  0E2A                     	;# 
  1861  0E2B                     	;# 
  1862  0E2C                     	;# 
  1863  0E2D                     	;# 
  1864  0E2E                     	;# 
  1865  0E90                     	;# 
  1866  0E91                     	;# 
  1867  0E92                     	;# 
  1868  0E94                     	;# 
  1869  0E95                     	;# 
  1870  0E9C                     	;# 
  1871  0E9D                     	;# 
  1872  0E9E                     	;# 
  1873  0E9F                     	;# 
  1874  0EA0                     	;# 
  1875  0EA1                     	;# 
  1876  0EA2                     	;# 
  1877  0EA3                     	;# 
  1878  0EA4                     	;# 
  1879  0EA5                     	;# 
  1880  0EA6                     	;# 
  1881  0EA7                     	;# 
  1882  0F0F                     	;# 
  1883  0F10                     	;# 
  1884  0F11                     	;# 
  1885  0F12                     	;# 
  1886  0F13                     	;# 
  1887  0F14                     	;# 
  1888  0F15                     	;# 
  1889  0F16                     	;# 
  1890  0F17                     	;# 
  1891  0F18                     	;# 
  1892  0F19                     	;# 
  1893  0F1A                     	;# 
  1894  0F1B                     	;# 
  1895  0F1C                     	;# 
  1896  0F1D                     	;# 
  1897  0F1E                     	;# 
  1898  0F1F                     	;# 
  1899  0F20                     	;# 
  1900  0F21                     	;# 
  1901  0F22                     	;# 
  1902  0F23                     	;# 
  1903  0F24                     	;# 
  1904  0F25                     	;# 
  1905  0F26                     	;# 
  1906  0F27                     	;# 
  1907  0F28                     	;# 
  1908  0F29                     	;# 
  1909  0F2A                     	;# 
  1910  0F2B                     	;# 
  1911  0F2C                     	;# 
  1912  0F2D                     	;# 
  1913  0F2E                     	;# 
  1914  0F2F                     	;# 
  1915  0F30                     	;# 
  1916  0F31                     	;# 
  1917  0F32                     	;# 
  1918  0F33                     	;# 
  1919  0F34                     	;# 
  1920  0F35                     	;# 
  1921  0F36                     	;# 
  1922  0F37                     	;# 
  1923  0FE4                     	;# 
  1924  0FE5                     	;# 
  1925  0FE6                     	;# 
  1926  0FE7                     	;# 
  1927  0FE8                     	;# 
  1928  0FE9                     	;# 
  1929  0FEA                     	;# 
  1930  0FEB                     	;# 
  1931  0FED                     	;# 
  1932  0FEE                     	;# 
  1933  0FEF                     	;# 
  1934  0000                     	;# 
  1935  0001                     	;# 
  1936  0002                     	;# 
  1937  0003                     	;# 
  1938  0004                     	;# 
  1939  0005                     	;# 
  1940  0006                     	;# 
  1941  0007                     	;# 
  1942  0008                     	;# 
  1943  0009                     	;# 
  1944  000A                     	;# 
  1945  000B                     	;# 
  1946  000C                     	;# 
  1947  000D                     	;# 
  1948  000E                     	;# 
  1949  0010                     	;# 
  1950  0011                     	;# 
  1951  0012                     	;# 
  1952  0013                     	;# 
  1953  0014                     	;# 
  1954  0015                     	;# 
  1955  0016                     	;# 
  1956  0016                     	;# 
  1957  0017                     	;# 
  1958  0018                     	;# 
  1959  0019                     	;# 
  1960  001A                     	;# 
  1961  001A                     	;# 
  1962  001B                     	;# 
  1963  001B                     	;# 
  1964  001C                     	;# 
  1965  001D                     	;# 
  1966  001E                     	;# 
  1967  001F                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0093                     	;# 
  1975  0094                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0098                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  009F                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0111                     	;# 
  1991  0112                     	;# 
  1992  0113                     	;# 
  1993  0114                     	;# 
  1994  0115                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  0118                     	;# 
  1998  0119                     	;# 
  1999  011C                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  0191                     	;# 
  2004  0191                     	;# 
  2005  0192                     	;# 
  2006  0193                     	;# 
  2007  0193                     	;# 
  2008  0194                     	;# 
  2009  0195                     	;# 
  2010  0196                     	;# 
  2011  0197                     	;# 
  2012  0199                     	;# 
  2013  0199                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019A                     	;# 
  2017  019A                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019B                     	;# 
  2021  019B                     	;# 
  2022  019B                     	;# 
  2023  019C                     	;# 
  2024  019C                     	;# 
  2025  019C                     	;# 
  2026  019D                     	;# 
  2027  019D                     	;# 
  2028  019D                     	;# 
  2029  019E                     	;# 
  2030  019E                     	;# 
  2031  019E                     	;# 
  2032  019F                     	;# 
  2033  019F                     	;# 
  2034  019F                     	;# 
  2035  019F                     	;# 
  2036  019F                     	;# 
  2037  020C                     	;# 
  2038  020D                     	;# 
  2039  020E                     	;# 
  2040  0211                     	;# 
  2041  0211                     	;# 
  2042  0212                     	;# 
  2043  0212                     	;# 
  2044  0213                     	;# 
  2045  0213                     	;# 
  2046  0214                     	;# 
  2047  0214                     	;# 
  2048  0215                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0215                     	;# 
  2052  0216                     	;# 
  2053  0216                     	;# 
  2054  0217                     	;# 
  2055  0217                     	;# 
  2056  028C                     	;# 
  2057  028D                     	;# 
  2058  028E                     	;# 
  2059  0291                     	;# 
  2060  0291                     	;# 
  2061  0292                     	;# 
  2062  0293                     	;# 
  2063  0294                     	;# 
  2064  0298                     	;# 
  2065  0298                     	;# 
  2066  0299                     	;# 
  2067  029A                     	;# 
  2068  029B                     	;# 
  2069  029E                     	;# 
  2070  030C                     	;# 
  2071  030D                     	;# 
  2072  030E                     	;# 
  2073  038C                     	;# 
  2074  038D                     	;# 
  2075  038E                     	;# 
  2076  0391                     	;# 
  2077  0392                     	;# 
  2078  0393                     	;# 
  2079  0394                     	;# 
  2080  0395                     	;# 
  2081  0396                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  040E                     	;# 
  2086  0413                     	;# 
  2087  0413                     	;# 
  2088  0414                     	;# 
  2089  0414                     	;# 
  2090  0415                     	;# 
  2091  0416                     	;# 
  2092  0417                     	;# 
  2093  0418                     	;# 
  2094  041A                     	;# 
  2095  041A                     	;# 
  2096  041B                     	;# 
  2097  041B                     	;# 
  2098  041C                     	;# 
  2099  041D                     	;# 
  2100  041E                     	;# 
  2101  041F                     	;# 
  2102  0493                     	;# 
  2103  0494                     	;# 
  2104  0495                     	;# 
  2105  0496                     	;# 
  2106  049A                     	;# 
  2107  049B                     	;# 
  2108  049C                     	;# 
  2109  049D                     	;# 
  2110  058C                     	;# 
  2111  058C                     	;# 
  2112  058D                     	;# 
  2113  058E                     	;# 
  2114  058E                     	;# 
  2115  058F                     	;# 
  2116  0590                     	;# 
  2117  0590                     	;# 
  2118  0591                     	;# 
  2119  0592                     	;# 
  2120  0592                     	;# 
  2121  0593                     	;# 
  2122  0594                     	;# 
  2123  0594                     	;# 
  2124  0595                     	;# 
  2125  0596                     	;# 
  2126  0596                     	;# 
  2127  0597                     	;# 
  2128  0598                     	;# 
  2129  0599                     	;# 
  2130  059A                     	;# 
  2131  059B                     	;# 
  2132  059B                     	;# 
  2133  059C                     	;# 
  2134  059D                     	;# 
  2135  060C                     	;# 
  2136  060C                     	;# 
  2137  060D                     	;# 
  2138  060E                     	;# 
  2139  060F                     	;# 
  2140  060F                     	;# 
  2141  0610                     	;# 
  2142  0611                     	;# 
  2143  0612                     	;# 
  2144  0613                     	;# 
  2145  0614                     	;# 
  2146  0617                     	;# 
  2147  0618                     	;# 
  2148  0619                     	;# 
  2149  061A                     	;# 
  2150  061B                     	;# 
  2151  061C                     	;# 
  2152  0691                     	;# 
  2153  0692                     	;# 
  2154  0693                     	;# 
  2155  0694                     	;# 
  2156  0695                     	;# 
  2157  0696                     	;# 
  2158  0697                     	;# 
  2159  0699                     	;# 
  2160  069A                     	;# 
  2161  0711                     	;# 
  2162  0712                     	;# 
  2163  0713                     	;# 
  2164  0714                     	;# 
  2165  0715                     	;# 
  2166  0718                     	;# 
  2167  0718                     	;# 
  2168  0719                     	;# 
  2169  071A                     	;# 
  2170  071A                     	;# 
  2171  071B                     	;# 
  2172  071C                     	;# 
  2173  071D                     	;# 
  2174  0791                     	;# 
  2175  0791                     	;# 
  2176  0792                     	;# 
  2177  0793                     	;# 
  2178  0793                     	;# 
  2179  0794                     	;# 
  2180  0795                     	;# 
  2181  0795                     	;# 
  2182  0796                     	;# 
  2183  0797                     	;# 
  2184  0797                     	;# 
  2185  0798                     	;# 
  2186  0799                     	;# 
  2187  079A                     	;# 
  2188  080C                     	;# 
  2189  080C                     	;# 
  2190  080D                     	;# 
  2191  080E                     	;# 
  2192  080E                     	;# 
  2193  080F                     	;# 
  2194  0810                     	;# 
  2195  0810                     	;# 
  2196  0811                     	;# 
  2197  0812                     	;# 
  2198  0812                     	;# 
  2199  0813                     	;# 
  2200  0814                     	;# 
  2201  0815                     	;# 
  2202  0816                     	;# 
  2203  0817                     	;# 
  2204  0818                     	;# 
  2205  0819                     	;# 
  2206  081A                     	;# 
  2207  081A                     	;# 
  2208  081B                     	;# 
  2209  081C                     	;# 
  2210  081C                     	;# 
  2211  081D                     	;# 
  2212  088C                     	;# 
  2213  088D                     	;# 
  2214  088E                     	;# 
  2215  088F                     	;# 
  2216  088F                     	;# 
  2217  0890                     	;# 
  2218  0891                     	;# 
  2219  0892                     	;# 
  2220  0893                     	;# 
  2221  0893                     	;# 
  2222  0894                     	;# 
  2223  0895                     	;# 
  2224  0896                     	;# 
  2225  0897                     	;# 
  2226  0897                     	;# 
  2227  0898                     	;# 
  2228  0899                     	;# 
  2229  0D8C                     	;# 
  2230  0D8C                     	;# 
  2231  0D8D                     	;# 
  2232  0D8E                     	;# 
  2233  0D8F                     	;# 
  2234  0D8F                     	;# 
  2235  0D90                     	;# 
  2236  0D91                     	;# 
  2237  0D92                     	;# 
  2238  0D92                     	;# 
  2239  0D93                     	;# 
  2240  0D94                     	;# 
  2241  0D95                     	;# 
  2242  0D95                     	;# 
  2243  0D96                     	;# 
  2244  0D97                     	;# 
  2245  0D98                     	;# 
  2246  0D99                     	;# 
  2247  0D9A                     	;# 
  2248  0D9B                     	;# 
  2249  0D9C                     	;# 
  2250  0D9D                     	;# 
  2251  0D9E                     	;# 
  2252  0D9E                     	;# 
  2253  0D9F                     	;# 
  2254  0DA0                     	;# 
  2255  0DA1                     	;# 
  2256  0DA1                     	;# 
  2257  0DA2                     	;# 
  2258  0DA3                     	;# 
  2259  0DA4                     	;# 
  2260  0DA4                     	;# 
  2261  0DA5                     	;# 
  2262  0DA6                     	;# 
  2263  0DA7                     	;# 
  2264  0DA7                     	;# 
  2265  0DA8                     	;# 
  2266  0DA9                     	;# 
  2267  0DAA                     	;# 
  2268  0DAB                     	;# 
  2269  0DAC                     	;# 
  2270  0DAD                     	;# 
  2271  0DAE                     	;# 
  2272  0DAF                     	;# 
  2273  0E0F                     	;# 
  2274  0E10                     	;# 
  2275  0E11                     	;# 
  2276  0E12                     	;# 
  2277  0E13                     	;# 
  2278  0E14                     	;# 
  2279  0E15                     	;# 
  2280  0E16                     	;# 
  2281  0E17                     	;# 
  2282  0E18                     	;# 
  2283  0E19                     	;# 
  2284  0E1A                     	;# 
  2285  0E1B                     	;# 
  2286  0E1C                     	;# 
  2287  0E1D                     	;# 
  2288  0E1E                     	;# 
  2289  0E1F                     	;# 
  2290  0E20                     	;# 
  2291  0E21                     	;# 
  2292  0E22                     	;# 
  2293  0E23                     	;# 
  2294  0E24                     	;# 
  2295  0E25                     	;# 
  2296  0E26                     	;# 
  2297  0E27                     	;# 
  2298  0E28                     	;# 
  2299  0E29                     	;# 
  2300  0E2A                     	;# 
  2301  0E2B                     	;# 
  2302  0E2C                     	;# 
  2303  0E2D                     	;# 
  2304  0E2E                     	;# 
  2305  0E90                     	;# 
  2306  0E91                     	;# 
  2307  0E92                     	;# 
  2308  0E94                     	;# 
  2309  0E95                     	;# 
  2310  0E9C                     	;# 
  2311  0E9D                     	;# 
  2312  0E9E                     	;# 
  2313  0E9F                     	;# 
  2314  0EA0                     	;# 
  2315  0EA1                     	;# 
  2316  0EA2                     	;# 
  2317  0EA3                     	;# 
  2318  0EA4                     	;# 
  2319  0EA5                     	;# 
  2320  0EA6                     	;# 
  2321  0EA7                     	;# 
  2322  0F0F                     	;# 
  2323  0F10                     	;# 
  2324  0F11                     	;# 
  2325  0F12                     	;# 
  2326  0F13                     	;# 
  2327  0F14                     	;# 
  2328  0F15                     	;# 
  2329  0F16                     	;# 
  2330  0F17                     	;# 
  2331  0F18                     	;# 
  2332  0F19                     	;# 
  2333  0F1A                     	;# 
  2334  0F1B                     	;# 
  2335  0F1C                     	;# 
  2336  0F1D                     	;# 
  2337  0F1E                     	;# 
  2338  0F1F                     	;# 
  2339  0F20                     	;# 
  2340  0F21                     	;# 
  2341  0F22                     	;# 
  2342  0F23                     	;# 
  2343  0F24                     	;# 
  2344  0F25                     	;# 
  2345  0F26                     	;# 
  2346  0F27                     	;# 
  2347  0F28                     	;# 
  2348  0F29                     	;# 
  2349  0F2A                     	;# 
  2350  0F2B                     	;# 
  2351  0F2C                     	;# 
  2352  0F2D                     	;# 
  2353  0F2E                     	;# 
  2354  0F2F                     	;# 
  2355  0F30                     	;# 
  2356  0F31                     	;# 
  2357  0F32                     	;# 
  2358  0F33                     	;# 
  2359  0F34                     	;# 
  2360  0F35                     	;# 
  2361  0F36                     	;# 
  2362  0F37                     	;# 
  2363  0FE4                     	;# 
  2364  0FE5                     	;# 
  2365  0FE6                     	;# 
  2366  0FE7                     	;# 
  2367  0FE8                     	;# 
  2368  0FE9                     	;# 
  2369  0FEA                     	;# 
  2370  0FEB                     	;# 
  2371  0FED                     	;# 
  2372  0FEE                     	;# 
  2373  0FEF                     	;# 
  2374  0000                     	;# 
  2375  0001                     	;# 
  2376  0002                     	;# 
  2377  0003                     	;# 
  2378  0004                     	;# 
  2379  0005                     	;# 
  2380  0006                     	;# 
  2381  0007                     	;# 
  2382  0008                     	;# 
  2383  0009                     	;# 
  2384  000A                     	;# 
  2385  000B                     	;# 
  2386  000C                     	;# 
  2387  000D                     	;# 
  2388  000E                     	;# 
  2389  0010                     	;# 
  2390  0011                     	;# 
  2391  0012                     	;# 
  2392  0013                     	;# 
  2393  0014                     	;# 
  2394  0015                     	;# 
  2395  0016                     	;# 
  2396  0016                     	;# 
  2397  0017                     	;# 
  2398  0018                     	;# 
  2399  0019                     	;# 
  2400  001A                     	;# 
  2401  001A                     	;# 
  2402  001B                     	;# 
  2403  001B                     	;# 
  2404  001C                     	;# 
  2405  001D                     	;# 
  2406  001E                     	;# 
  2407  001F                     	;# 
  2408  008C                     	;# 
  2409  008D                     	;# 
  2410  008E                     	;# 
  2411  0090                     	;# 
  2412  0091                     	;# 
  2413  0092                     	;# 
  2414  0093                     	;# 
  2415  0094                     	;# 
  2416  0095                     	;# 
  2417  0096                     	;# 
  2418  0098                     	;# 
  2419  0099                     	;# 
  2420  009A                     	;# 
  2421  009B                     	;# 
  2422  009B                     	;# 
  2423  009C                     	;# 
  2424  009D                     	;# 
  2425  009E                     	;# 
  2426  009F                     	;# 
  2427  010C                     	;# 
  2428  010D                     	;# 
  2429  010E                     	;# 
  2430  0111                     	;# 
  2431  0112                     	;# 
  2432  0113                     	;# 
  2433  0114                     	;# 
  2434  0115                     	;# 
  2435  0116                     	;# 
  2436  0117                     	;# 
  2437  0118                     	;# 
  2438  0119                     	;# 
  2439  011C                     	;# 
  2440  018C                     	;# 
  2441  018D                     	;# 
  2442  018E                     	;# 
  2443  0191                     	;# 
  2444  0191                     	;# 
  2445  0192                     	;# 
  2446  0193                     	;# 
  2447  0193                     	;# 
  2448  0194                     	;# 
  2449  0195                     	;# 
  2450  0196                     	;# 
  2451  0197                     	;# 
  2452  0199                     	;# 
  2453  0199                     	;# 
  2454  0199                     	;# 
  2455  019A                     	;# 
  2456  019A                     	;# 
  2457  019A                     	;# 
  2458  019B                     	;# 
  2459  019B                     	;# 
  2460  019B                     	;# 
  2461  019B                     	;# 
  2462  019B                     	;# 
  2463  019C                     	;# 
  2464  019C                     	;# 
  2465  019C                     	;# 
  2466  019D                     	;# 
  2467  019D                     	;# 
  2468  019D                     	;# 
  2469  019E                     	;# 
  2470  019E                     	;# 
  2471  019E                     	;# 
  2472  019F                     	;# 
  2473  019F                     	;# 
  2474  019F                     	;# 
  2475  019F                     	;# 
  2476  019F                     	;# 
  2477  020C                     	;# 
  2478  020D                     	;# 
  2479  020E                     	;# 
  2480  0211                     	;# 
  2481  0211                     	;# 
  2482  0212                     	;# 
  2483  0212                     	;# 
  2484  0213                     	;# 
  2485  0213                     	;# 
  2486  0214                     	;# 
  2487  0214                     	;# 
  2488  0215                     	;# 
  2489  0215                     	;# 
  2490  0215                     	;# 
  2491  0215                     	;# 
  2492  0216                     	;# 
  2493  0216                     	;# 
  2494  0217                     	;# 
  2495  0217                     	;# 
  2496  028C                     	;# 
  2497  028D                     	;# 
  2498  028E                     	;# 
  2499  0291                     	;# 
  2500  0291                     	;# 
  2501  0292                     	;# 
  2502  0293                     	;# 
  2503  0294                     	;# 
  2504  0298                     	;# 
  2505  0298                     	;# 
  2506  0299                     	;# 
  2507  029A                     	;# 
  2508  029B                     	;# 
  2509  029E                     	;# 
  2510  030C                     	;# 
  2511  030D                     	;# 
  2512  030E                     	;# 
  2513  038C                     	;# 
  2514  038D                     	;# 
  2515  038E                     	;# 
  2516  0391                     	;# 
  2517  0392                     	;# 
  2518  0393                     	;# 
  2519  0394                     	;# 
  2520  0395                     	;# 
  2521  0396                     	;# 
  2522  0397                     	;# 
  2523  0398                     	;# 
  2524  0399                     	;# 
  2525  040E                     	;# 
  2526  0413                     	;# 
  2527  0413                     	;# 
  2528  0414                     	;# 
  2529  0414                     	;# 
  2530  0415                     	;# 
  2531  0416                     	;# 
  2532  0417                     	;# 
  2533  0418                     	;# 
  2534  041A                     	;# 
  2535  041A                     	;# 
  2536  041B                     	;# 
  2537  041B                     	;# 
  2538  041C                     	;# 
  2539  041D                     	;# 
  2540  041E                     	;# 
  2541  041F                     	;# 
  2542  0493                     	;# 
  2543  0494                     	;# 
  2544  0495                     	;# 
  2545  0496                     	;# 
  2546  049A                     	;# 
  2547  049B                     	;# 
  2548  049C                     	;# 
  2549  049D                     	;# 
  2550  058C                     	;# 
  2551  058C                     	;# 
  2552  058D                     	;# 
  2553  058E                     	;# 
  2554  058E                     	;# 
  2555  058F                     	;# 
  2556  0590                     	;# 
  2557  0590                     	;# 
  2558  0591                     	;# 
  2559  0592                     	;# 
  2560  0592                     	;# 
  2561  0593                     	;# 
  2562  0594                     	;# 
  2563  0594                     	;# 
  2564  0595                     	;# 
  2565  0596                     	;# 
  2566  0596                     	;# 
  2567  0597                     	;# 
  2568  0598                     	;# 
  2569  0599                     	;# 
  2570  059A                     	;# 
  2571  059B                     	;# 
  2572  059B                     	;# 
  2573  059C                     	;# 
  2574  059D                     	;# 
  2575  060C                     	;# 
  2576  060C                     	;# 
  2577  060D                     	;# 
  2578  060E                     	;# 
  2579  060F                     	;# 
  2580  060F                     	;# 
  2581  0610                     	;# 
  2582  0611                     	;# 
  2583  0612                     	;# 
  2584  0613                     	;# 
  2585  0614                     	;# 
  2586  0617                     	;# 
  2587  0618                     	;# 
  2588  0619                     	;# 
  2589  061A                     	;# 
  2590  061B                     	;# 
  2591  061C                     	;# 
  2592  0691                     	;# 
  2593  0692                     	;# 
  2594  0693                     	;# 
  2595  0694                     	;# 
  2596  0695                     	;# 
  2597  0696                     	;# 
  2598  0697                     	;# 
  2599  0699                     	;# 
  2600  069A                     	;# 
  2601  0711                     	;# 
  2602  0712                     	;# 
  2603  0713                     	;# 
  2604  0714                     	;# 
  2605  0715                     	;# 
  2606  0718                     	;# 
  2607  0718                     	;# 
  2608  0719                     	;# 
  2609  071A                     	;# 
  2610  071A                     	;# 
  2611  071B                     	;# 
  2612  071C                     	;# 
  2613  071D                     	;# 
  2614  0791                     	;# 
  2615  0791                     	;# 
  2616  0792                     	;# 
  2617  0793                     	;# 
  2618  0793                     	;# 
  2619  0794                     	;# 
  2620  0795                     	;# 
  2621  0795                     	;# 
  2622  0796                     	;# 
  2623  0797                     	;# 
  2624  0797                     	;# 
  2625  0798                     	;# 
  2626  0799                     	;# 
  2627  079A                     	;# 
  2628  080C                     	;# 
  2629  080C                     	;# 
  2630  080D                     	;# 
  2631  080E                     	;# 
  2632  080E                     	;# 
  2633  080F                     	;# 
  2634  0810                     	;# 
  2635  0810                     	;# 
  2636  0811                     	;# 
  2637  0812                     	;# 
  2638  0812                     	;# 
  2639  0813                     	;# 
  2640  0814                     	;# 
  2641  0815                     	;# 
  2642  0816                     	;# 
  2643  0817                     	;# 
  2644  0818                     	;# 
  2645  0819                     	;# 
  2646  081A                     	;# 
  2647  081A                     	;# 
  2648  081B                     	;# 
  2649  081C                     	;# 
  2650  081C                     	;# 
  2651  081D                     	;# 
  2652  088C                     	;# 
  2653  088D                     	;# 
  2654  088E                     	;# 
  2655  088F                     	;# 
  2656  088F                     	;# 
  2657  0890                     	;# 
  2658  0891                     	;# 
  2659  0892                     	;# 
  2660  0893                     	;# 
  2661  0893                     	;# 
  2662  0894                     	;# 
  2663  0895                     	;# 
  2664  0896                     	;# 
  2665  0897                     	;# 
  2666  0897                     	;# 
  2667  0898                     	;# 
  2668  0899                     	;# 
  2669  0D8C                     	;# 
  2670  0D8C                     	;# 
  2671  0D8D                     	;# 
  2672  0D8E                     	;# 
  2673  0D8F                     	;# 
  2674  0D8F                     	;# 
  2675  0D90                     	;# 
  2676  0D91                     	;# 
  2677  0D92                     	;# 
  2678  0D92                     	;# 
  2679  0D93                     	;# 
  2680  0D94                     	;# 
  2681  0D95                     	;# 
  2682  0D95                     	;# 
  2683  0D96                     	;# 
  2684  0D97                     	;# 
  2685  0D98                     	;# 
  2686  0D99                     	;# 
  2687  0D9A                     	;# 
  2688  0D9B                     	;# 
  2689  0D9C                     	;# 
  2690  0D9D                     	;# 
  2691  0D9E                     	;# 
  2692  0D9E                     	;# 
  2693  0D9F                     	;# 
  2694  0DA0                     	;# 
  2695  0DA1                     	;# 
  2696  0DA1                     	;# 
  2697  0DA2                     	;# 
  2698  0DA3                     	;# 
  2699  0DA4                     	;# 
  2700  0DA4                     	;# 
  2701  0DA5                     	;# 
  2702  0DA6                     	;# 
  2703  0DA7                     	;# 
  2704  0DA7                     	;# 
  2705  0DA8                     	;# 
  2706  0DA9                     	;# 
  2707  0DAA                     	;# 
  2708  0DAB                     	;# 
  2709  0DAC                     	;# 
  2710  0DAD                     	;# 
  2711  0DAE                     	;# 
  2712  0DAF                     	;# 
  2713  0E0F                     	;# 
  2714  0E10                     	;# 
  2715  0E11                     	;# 
  2716  0E12                     	;# 
  2717  0E13                     	;# 
  2718  0E14                     	;# 
  2719  0E15                     	;# 
  2720  0E16                     	;# 
  2721  0E17                     	;# 
  2722  0E18                     	;# 
  2723  0E19                     	;# 
  2724  0E1A                     	;# 
  2725  0E1B                     	;# 
  2726  0E1C                     	;# 
  2727  0E1D                     	;# 
  2728  0E1E                     	;# 
  2729  0E1F                     	;# 
  2730  0E20                     	;# 
  2731  0E21                     	;# 
  2732  0E22                     	;# 
  2733  0E23                     	;# 
  2734  0E24                     	;# 
  2735  0E25                     	;# 
  2736  0E26                     	;# 
  2737  0E27                     	;# 
  2738  0E28                     	;# 
  2739  0E29                     	;# 
  2740  0E2A                     	;# 
  2741  0E2B                     	;# 
  2742  0E2C                     	;# 
  2743  0E2D                     	;# 
  2744  0E2E                     	;# 
  2745  0E90                     	;# 
  2746  0E91                     	;# 
  2747  0E92                     	;# 
  2748  0E94                     	;# 
  2749  0E95                     	;# 
  2750  0E9C                     	;# 
  2751  0E9D                     	;# 
  2752  0E9E                     	;# 
  2753  0E9F                     	;# 
  2754  0EA0                     	;# 
  2755  0EA1                     	;# 
  2756  0EA2                     	;# 
  2757  0EA3                     	;# 
  2758  0EA4                     	;# 
  2759  0EA5                     	;# 
  2760  0EA6                     	;# 
  2761  0EA7                     	;# 
  2762  0F0F                     	;# 
  2763  0F10                     	;# 
  2764  0F11                     	;# 
  2765  0F12                     	;# 
  2766  0F13                     	;# 
  2767  0F14                     	;# 
  2768  0F15                     	;# 
  2769  0F16                     	;# 
  2770  0F17                     	;# 
  2771  0F18                     	;# 
  2772  0F19                     	;# 
  2773  0F1A                     	;# 
  2774  0F1B                     	;# 
  2775  0F1C                     	;# 
  2776  0F1D                     	;# 
  2777  0F1E                     	;# 
  2778  0F1F                     	;# 
  2779  0F20                     	;# 
  2780  0F21                     	;# 
  2781  0F22                     	;# 
  2782  0F23                     	;# 
  2783  0F24                     	;# 
  2784  0F25                     	;# 
  2785  0F26                     	;# 
  2786  0F27                     	;# 
  2787  0F28                     	;# 
  2788  0F29                     	;# 
  2789  0F2A                     	;# 
  2790  0F2B                     	;# 
  2791  0F2C                     	;# 
  2792  0F2D                     	;# 
  2793  0F2E                     	;# 
  2794  0F2F                     	;# 
  2795  0F30                     	;# 
  2796  0F31                     	;# 
  2797  0F32                     	;# 
  2798  0F33                     	;# 
  2799  0F34                     	;# 
  2800  0F35                     	;# 
  2801  0F36                     	;# 
  2802  0F37                     	;# 
  2803  0FE4                     	;# 
  2804  0FE5                     	;# 
  2805  0FE6                     	;# 
  2806  0FE7                     	;# 
  2807  0FE8                     	;# 
  2808  0FE9                     	;# 
  2809  0FEA                     	;# 
  2810  0FEB                     	;# 
  2811  0FED                     	;# 
  2812  0FEE                     	;# 
  2813  0FEF                     	;# 
  2814  0000                     	;# 
  2815  0001                     	;# 
  2816  0002                     	;# 
  2817  0003                     	;# 
  2818  0004                     	;# 
  2819  0005                     	;# 
  2820  0006                     	;# 
  2821  0007                     	;# 
  2822  0008                     	;# 
  2823  0009                     	;# 
  2824  000A                     	;# 
  2825  000B                     	;# 
  2826  000C                     	;# 
  2827  000D                     	;# 
  2828  000E                     	;# 
  2829  0010                     	;# 
  2830  0011                     	;# 
  2831  0012                     	;# 
  2832  0013                     	;# 
  2833  0014                     	;# 
  2834  0015                     	;# 
  2835  0016                     	;# 
  2836  0016                     	;# 
  2837  0017                     	;# 
  2838  0018                     	;# 
  2839  0019                     	;# 
  2840  001A                     	;# 
  2841  001A                     	;# 
  2842  001B                     	;# 
  2843  001B                     	;# 
  2844  001C                     	;# 
  2845  001D                     	;# 
  2846  001E                     	;# 
  2847  001F                     	;# 
  2848  008C                     	;# 
  2849  008D                     	;# 
  2850  008E                     	;# 
  2851  0090                     	;# 
  2852  0091                     	;# 
  2853  0092                     	;# 
  2854  0093                     	;# 
  2855  0094                     	;# 
  2856  0095                     	;# 
  2857  0096                     	;# 
  2858  0098                     	;# 
  2859  0099                     	;# 
  2860  009A                     	;# 
  2861  009B                     	;# 
  2862  009B                     	;# 
  2863  009C                     	;# 
  2864  009D                     	;# 
  2865  009E                     	;# 
  2866  009F                     	;# 
  2867  010C                     	;# 
  2868  010D                     	;# 
  2869  010E                     	;# 
  2870  0111                     	;# 
  2871  0112                     	;# 
  2872  0113                     	;# 
  2873  0114                     	;# 
  2874  0115                     	;# 
  2875  0116                     	;# 
  2876  0117                     	;# 
  2877  0118                     	;# 
  2878  0119                     	;# 
  2879  011C                     	;# 
  2880  018C                     	;# 
  2881  018D                     	;# 
  2882  018E                     	;# 
  2883  0191                     	;# 
  2884  0191                     	;# 
  2885  0192                     	;# 
  2886  0193                     	;# 
  2887  0193                     	;# 
  2888  0194                     	;# 
  2889  0195                     	;# 
  2890  0196                     	;# 
  2891  0197                     	;# 
  2892  0199                     	;# 
  2893  0199                     	;# 
  2894  0199                     	;# 
  2895  019A                     	;# 
  2896  019A                     	;# 
  2897  019A                     	;# 
  2898  019B                     	;# 
  2899  019B                     	;# 
  2900  019B                     	;# 
  2901  019B                     	;# 
  2902  019B                     	;# 
  2903  019C                     	;# 
  2904  019C                     	;# 
  2905  019C                     	;# 
  2906  019D                     	;# 
  2907  019D                     	;# 
  2908  019D                     	;# 
  2909  019E                     	;# 
  2910  019E                     	;# 
  2911  019E                     	;# 
  2912  019F                     	;# 
  2913  019F                     	;# 
  2914  019F                     	;# 
  2915  019F                     	;# 
  2916  019F                     	;# 
  2917  020C                     	;# 
  2918  020D                     	;# 
  2919  020E                     	;# 
  2920  0211                     	;# 
  2921  0211                     	;# 
  2922  0212                     	;# 
  2923  0212                     	;# 
  2924  0213                     	;# 
  2925  0213                     	;# 
  2926  0214                     	;# 
  2927  0214                     	;# 
  2928  0215                     	;# 
  2929  0215                     	;# 
  2930  0215                     	;# 
  2931  0215                     	;# 
  2932  0216                     	;# 
  2933  0216                     	;# 
  2934  0217                     	;# 
  2935  0217                     	;# 
  2936  028C                     	;# 
  2937  028D                     	;# 
  2938  028E                     	;# 
  2939  0291                     	;# 
  2940  0291                     	;# 
  2941  0292                     	;# 
  2942  0293                     	;# 
  2943  0294                     	;# 
  2944  0298                     	;# 
  2945  0298                     	;# 
  2946  0299                     	;# 
  2947  029A                     	;# 
  2948  029B                     	;# 
  2949  029E                     	;# 
  2950  030C                     	;# 
  2951  030D                     	;# 
  2952  030E                     	;# 
  2953  038C                     	;# 
  2954  038D                     	;# 
  2955  038E                     	;# 
  2956  0391                     	;# 
  2957  0392                     	;# 
  2958  0393                     	;# 
  2959  0394                     	;# 
  2960  0395                     	;# 
  2961  0396                     	;# 
  2962  0397                     	;# 
  2963  0398                     	;# 
  2964  0399                     	;# 
  2965  040E                     	;# 
  2966  0413                     	;# 
  2967  0413                     	;# 
  2968  0414                     	;# 
  2969  0414                     	;# 
  2970  0415                     	;# 
  2971  0416                     	;# 
  2972  0417                     	;# 
  2973  0418                     	;# 
  2974  041A                     	;# 
  2975  041A                     	;# 
  2976  041B                     	;# 
  2977  041B                     	;# 
  2978  041C                     	;# 
  2979  041D                     	;# 
  2980  041E                     	;# 
  2981  041F                     	;# 
  2982  0493                     	;# 
  2983  0494                     	;# 
  2984  0495                     	;# 
  2985  0496                     	;# 
  2986  049A                     	;# 
  2987  049B                     	;# 
  2988  049C                     	;# 
  2989  049D                     	;# 
  2990  058C                     	;# 
  2991  058C                     	;# 
  2992  058D                     	;# 
  2993  058E                     	;# 
  2994  058E                     	;# 
  2995  058F                     	;# 
  2996  0590                     	;# 
  2997  0590                     	;# 
  2998  0591                     	;# 
  2999  0592                     	;# 
  3000  0592                     	;# 
  3001  0593                     	;# 
  3002  0594                     	;# 
  3003  0594                     	;# 
  3004  0595                     	;# 
  3005  0596                     	;# 
  3006  0596                     	;# 
  3007  0597                     	;# 
  3008  0598                     	;# 
  3009  0599                     	;# 
  3010  059A                     	;# 
  3011  059B                     	;# 
  3012  059B                     	;# 
  3013  059C                     	;# 
  3014  059D                     	;# 
  3015  060C                     	;# 
  3016  060C                     	;# 
  3017  060D                     	;# 
  3018  060E                     	;# 
  3019  060F                     	;# 
  3020  060F                     	;# 
  3021  0610                     	;# 
  3022  0611                     	;# 
  3023  0612                     	;# 
  3024  0613                     	;# 
  3025  0614                     	;# 
  3026  0617                     	;# 
  3027  0618                     	;# 
  3028  0619                     	;# 
  3029  061A                     	;# 
  3030  061B                     	;# 
  3031  061C                     	;# 
  3032  0691                     	;# 
  3033  0692                     	;# 
  3034  0693                     	;# 
  3035  0694                     	;# 
  3036  0695                     	;# 
  3037  0696                     	;# 
  3038  0697                     	;# 
  3039  0699                     	;# 
  3040  069A                     	;# 
  3041  0711                     	;# 
  3042  0712                     	;# 
  3043  0713                     	;# 
  3044  0714                     	;# 
  3045  0715                     	;# 
  3046  0718                     	;# 
  3047  0718                     	;# 
  3048  0719                     	;# 
  3049  071A                     	;# 
  3050  071A                     	;# 
  3051  071B                     	;# 
  3052  071C                     	;# 
  3053  071D                     	;# 
  3054  0791                     	;# 
  3055  0791                     	;# 
  3056  0792                     	;# 
  3057  0793                     	;# 
  3058  0793                     	;# 
  3059  0794                     	;# 
  3060  0795                     	;# 
  3061  0795                     	;# 
  3062  0796                     	;# 
  3063  0797                     	;# 
  3064  0797                     	;# 
  3065  0798                     	;# 
  3066  0799                     	;# 
  3067  079A                     	;# 
  3068  080C                     	;# 
  3069  080C                     	;# 
  3070  080D                     	;# 
  3071  080E                     	;# 
  3072  080E                     	;# 
  3073  080F                     	;# 
  3074  0810                     	;# 
  3075  0810                     	;# 
  3076  0811                     	;# 
  3077  0812                     	;# 
  3078  0812                     	;# 
  3079  0813                     	;# 
  3080  0814                     	;# 
  3081  0815                     	;# 
  3082  0816                     	;# 
  3083  0817                     	;# 
  3084  0818                     	;# 
  3085  0819                     	;# 
  3086  081A                     	;# 
  3087  081A                     	;# 
  3088  081B                     	;# 
  3089  081C                     	;# 
  3090  081C                     	;# 
  3091  081D                     	;# 
  3092  088C                     	;# 
  3093  088D                     	;# 
  3094  088E                     	;# 
  3095  088F                     	;# 
  3096  088F                     	;# 
  3097  0890                     	;# 
  3098  0891                     	;# 
  3099  0892                     	;# 
  3100  0893                     	;# 
  3101  0893                     	;# 
  3102  0894                     	;# 
  3103  0895                     	;# 
  3104  0896                     	;# 
  3105  0897                     	;# 
  3106  0897                     	;# 
  3107  0898                     	;# 
  3108  0899                     	;# 
  3109  0D8C                     	;# 
  3110  0D8C                     	;# 
  3111  0D8D                     	;# 
  3112  0D8E                     	;# 
  3113  0D8F                     	;# 
  3114  0D8F                     	;# 
  3115  0D90                     	;# 
  3116  0D91                     	;# 
  3117  0D92                     	;# 
  3118  0D92                     	;# 
  3119  0D93                     	;# 
  3120  0D94                     	;# 
  3121  0D95                     	;# 
  3122  0D95                     	;# 
  3123  0D96                     	;# 
  3124  0D97                     	;# 
  3125  0D98                     	;# 
  3126  0D99                     	;# 
  3127  0D9A                     	;# 
  3128  0D9B                     	;# 
  3129  0D9C                     	;# 
  3130  0D9D                     	;# 
  3131  0D9E                     	;# 
  3132  0D9E                     	;# 
  3133  0D9F                     	;# 
  3134  0DA0                     	;# 
  3135  0DA1                     	;# 
  3136  0DA1                     	;# 
  3137  0DA2                     	;# 
  3138  0DA3                     	;# 
  3139  0DA4                     	;# 
  3140  0DA4                     	;# 
  3141  0DA5                     	;# 
  3142  0DA6                     	;# 
  3143  0DA7                     	;# 
  3144  0DA7                     	;# 
  3145  0DA8                     	;# 
  3146  0DA9                     	;# 
  3147  0DAA                     	;# 
  3148  0DAB                     	;# 
  3149  0DAC                     	;# 
  3150  0DAD                     	;# 
  3151  0DAE                     	;# 
  3152  0DAF                     	;# 
  3153  0E0F                     	;# 
  3154  0E10                     	;# 
  3155  0E11                     	;# 
  3156  0E12                     	;# 
  3157  0E13                     	;# 
  3158  0E14                     	;# 
  3159  0E15                     	;# 
  3160  0E16                     	;# 
  3161  0E17                     	;# 
  3162  0E18                     	;# 
  3163  0E19                     	;# 
  3164  0E1A                     	;# 
  3165  0E1B                     	;# 
  3166  0E1C                     	;# 
  3167  0E1D                     	;# 
  3168  0E1E                     	;# 
  3169  0E1F                     	;# 
  3170  0E20                     	;# 
  3171  0E21                     	;# 
  3172  0E22                     	;# 
  3173  0E23                     	;# 
  3174  0E24                     	;# 
  3175  0E25                     	;# 
  3176  0E26                     	;# 
  3177  0E27                     	;# 
  3178  0E28                     	;# 
  3179  0E29                     	;# 
  3180  0E2A                     	;# 
  3181  0E2B                     	;# 
  3182  0E2C                     	;# 
  3183  0E2D                     	;# 
  3184  0E2E                     	;# 
  3185  0E90                     	;# 
  3186  0E91                     	;# 
  3187  0E92                     	;# 
  3188  0E94                     	;# 
  3189  0E95                     	;# 
  3190  0E9C                     	;# 
  3191  0E9D                     	;# 
  3192  0E9E                     	;# 
  3193  0E9F                     	;# 
  3194  0EA0                     	;# 
  3195  0EA1                     	;# 
  3196  0EA2                     	;# 
  3197  0EA3                     	;# 
  3198  0EA4                     	;# 
  3199  0EA5                     	;# 
  3200  0EA6                     	;# 
  3201  0EA7                     	;# 
  3202  0F0F                     	;# 
  3203  0F10                     	;# 
  3204  0F11                     	;# 
  3205  0F12                     	;# 
  3206  0F13                     	;# 
  3207  0F14                     	;# 
  3208  0F15                     	;# 
  3209  0F16                     	;# 
  3210  0F17                     	;# 
  3211  0F18                     	;# 
  3212  0F19                     	;# 
  3213  0F1A                     	;# 
  3214  0F1B                     	;# 
  3215  0F1C                     	;# 
  3216  0F1D                     	;# 
  3217  0F1E                     	;# 
  3218  0F1F                     	;# 
  3219  0F20                     	;# 
  3220  0F21                     	;# 
  3221  0F22                     	;# 
  3222  0F23                     	;# 
  3223  0F24                     	;# 
  3224  0F25                     	;# 
  3225  0F26                     	;# 
  3226  0F27                     	;# 
  3227  0F28                     	;# 
  3228  0F29                     	;# 
  3229  0F2A                     	;# 
  3230  0F2B                     	;# 
  3231  0F2C                     	;# 
  3232  0F2D                     	;# 
  3233  0F2E                     	;# 
  3234  0F2F                     	;# 
  3235  0F30                     	;# 
  3236  0F31                     	;# 
  3237  0F32                     	;# 
  3238  0F33                     	;# 
  3239  0F34                     	;# 
  3240  0F35                     	;# 
  3241  0F36                     	;# 
  3242  0F37                     	;# 
  3243  0FE4                     	;# 
  3244  0FE5                     	;# 
  3245  0FE6                     	;# 
  3246  0FE7                     	;# 
  3247  0FE8                     	;# 
  3248  0FE9                     	;# 
  3249  0FEA                     	;# 
  3250  0FEB                     	;# 
  3251  0FED                     	;# 
  3252  0FEE                     	;# 
  3253  0FEF                     	;# 
  3254  0000                     	;# 
  3255  0001                     	;# 
  3256  0002                     	;# 
  3257  0003                     	;# 
  3258  0004                     	;# 
  3259  0005                     	;# 
  3260  0006                     	;# 
  3261  0007                     	;# 
  3262  0008                     	;# 
  3263  0009                     	;# 
  3264  000A                     	;# 
  3265  000B                     	;# 
  3266  000C                     	;# 
  3267  000D                     	;# 
  3268  000E                     	;# 
  3269  0010                     	;# 
  3270  0011                     	;# 
  3271  0012                     	;# 
  3272  0013                     	;# 
  3273  0014                     	;# 
  3274  0015                     	;# 
  3275  0016                     	;# 
  3276  0016                     	;# 
  3277  0017                     	;# 
  3278  0018                     	;# 
  3279  0019                     	;# 
  3280  001A                     	;# 
  3281  001A                     	;# 
  3282  001B                     	;# 
  3283  001B                     	;# 
  3284  001C                     	;# 
  3285  001D                     	;# 
  3286  001E                     	;# 
  3287  001F                     	;# 
  3288  008C                     	;# 
  3289  008D                     	;# 
  3290  008E                     	;# 
  3291  0090                     	;# 
  3292  0091                     	;# 
  3293  0092                     	;# 
  3294  0093                     	;# 
  3295  0094                     	;# 
  3296  0095                     	;# 
  3297  0096                     	;# 
  3298  0098                     	;# 
  3299  0099                     	;# 
  3300  009A                     	;# 
  3301  009B                     	;# 
  3302  009B                     	;# 
  3303  009C                     	;# 
  3304  009D                     	;# 
  3305  009E                     	;# 
  3306  009F                     	;# 
  3307  010C                     	;# 
  3308  010D                     	;# 
  3309  010E                     	;# 
  3310  0111                     	;# 
  3311  0112                     	;# 
  3312  0113                     	;# 
  3313  0114                     	;# 
  3314  0115                     	;# 
  3315  0116                     	;# 
  3316  0117                     	;# 
  3317  0118                     	;# 
  3318  0119                     	;# 
  3319  011C                     	;# 
  3320  018C                     	;# 
  3321  018D                     	;# 
  3322  018E                     	;# 
  3323  0191                     	;# 
  3324  0191                     	;# 
  3325  0192                     	;# 
  3326  0193                     	;# 
  3327  0193                     	;# 
  3328  0194                     	;# 
  3329  0195                     	;# 
  3330  0196                     	;# 
  3331  0197                     	;# 
  3332  0199                     	;# 
  3333  0199                     	;# 
  3334  0199                     	;# 
  3335  019A                     	;# 
  3336  019A                     	;# 
  3337  019A                     	;# 
  3338  019B                     	;# 
  3339  019B                     	;# 
  3340  019B                     	;# 
  3341  019B                     	;# 
  3342  019B                     	;# 
  3343  019C                     	;# 
  3344  019C                     	;# 
  3345  019C                     	;# 
  3346  019D                     	;# 
  3347  019D                     	;# 
  3348  019D                     	;# 
  3349  019E                     	;# 
  3350  019E                     	;# 
  3351  019E                     	;# 
  3352  019F                     	;# 
  3353  019F                     	;# 
  3354  019F                     	;# 
  3355  019F                     	;# 
  3356  019F                     	;# 
  3357  020C                     	;# 
  3358  020D                     	;# 
  3359  020E                     	;# 
  3360  0211                     	;# 
  3361  0211                     	;# 
  3362  0212                     	;# 
  3363  0212                     	;# 
  3364  0213                     	;# 
  3365  0213                     	;# 
  3366  0214                     	;# 
  3367  0214                     	;# 
  3368  0215                     	;# 
  3369  0215                     	;# 
  3370  0215                     	;# 
  3371  0215                     	;# 
  3372  0216                     	;# 
  3373  0216                     	;# 
  3374  0217                     	;# 
  3375  0217                     	;# 
  3376  028C                     	;# 
  3377  028D                     	;# 
  3378  028E                     	;# 
  3379  0291                     	;# 
  3380  0291                     	;# 
  3381  0292                     	;# 
  3382  0293                     	;# 
  3383  0294                     	;# 
  3384  0298                     	;# 
  3385  0298                     	;# 
  3386  0299                     	;# 
  3387  029A                     	;# 
  3388  029B                     	;# 
  3389  029E                     	;# 
  3390  030C                     	;# 
  3391  030D                     	;# 
  3392  030E                     	;# 
  3393  038C                     	;# 
  3394  038D                     	;# 
  3395  038E                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  0393                     	;# 
  3399  0394                     	;# 
  3400  0395                     	;# 
  3401  0396                     	;# 
  3402  0397                     	;# 
  3403  0398                     	;# 
  3404  0399                     	;# 
  3405  040E                     	;# 
  3406  0413                     	;# 
  3407  0413                     	;# 
  3408  0414                     	;# 
  3409  0414                     	;# 
  3410  0415                     	;# 
  3411  0416                     	;# 
  3412  0417                     	;# 
  3413  0418                     	;# 
  3414  041A                     	;# 
  3415  041A                     	;# 
  3416  041B                     	;# 
  3417  041B                     	;# 
  3418  041C                     	;# 
  3419  041D                     	;# 
  3420  041E                     	;# 
  3421  041F                     	;# 
  3422  0493                     	;# 
  3423  0494                     	;# 
  3424  0495                     	;# 
  3425  0496                     	;# 
  3426  049A                     	;# 
  3427  049B                     	;# 
  3428  049C                     	;# 
  3429  049D                     	;# 
  3430  058C                     	;# 
  3431  058C                     	;# 
  3432  058D                     	;# 
  3433  058E                     	;# 
  3434  058E                     	;# 
  3435  058F                     	;# 
  3436  0590                     	;# 
  3437  0590                     	;# 
  3438  0591                     	;# 
  3439  0592                     	;# 
  3440  0592                     	;# 
  3441  0593                     	;# 
  3442  0594                     	;# 
  3443  0594                     	;# 
  3444  0595                     	;# 
  3445  0596                     	;# 
  3446  0596                     	;# 
  3447  0597                     	;# 
  3448  0598                     	;# 
  3449  0599                     	;# 
  3450  059A                     	;# 
  3451  059B                     	;# 
  3452  059B                     	;# 
  3453  059C                     	;# 
  3454  059D                     	;# 
  3455  060C                     	;# 
  3456  060C                     	;# 
  3457  060D                     	;# 
  3458  060E                     	;# 
  3459  060F                     	;# 
  3460  060F                     	;# 
  3461  0610                     	;# 
  3462  0611                     	;# 
  3463  0612                     	;# 
  3464  0613                     	;# 
  3465  0614                     	;# 
  3466  0617                     	;# 
  3467  0618                     	;# 
  3468  0619                     	;# 
  3469  061A                     	;# 
  3470  061B                     	;# 
  3471  061C                     	;# 
  3472  0691                     	;# 
  3473  0692                     	;# 
  3474  0693                     	;# 
  3475  0694                     	;# 
  3476  0695                     	;# 
  3477  0696                     	;# 
  3478  0697                     	;# 
  3479  0699                     	;# 
  3480  069A                     	;# 
  3481  0711                     	;# 
  3482  0712                     	;# 
  3483  0713                     	;# 
  3484  0714                     	;# 
  3485  0715                     	;# 
  3486  0718                     	;# 
  3487  0718                     	;# 
  3488  0719                     	;# 
  3489  071A                     	;# 
  3490  071A                     	;# 
  3491  071B                     	;# 
  3492  071C                     	;# 
  3493  071D                     	;# 
  3494  0791                     	;# 
  3495  0791                     	;# 
  3496  0792                     	;# 
  3497  0793                     	;# 
  3498  0793                     	;# 
  3499  0794                     	;# 
  3500  0795                     	;# 
  3501  0795                     	;# 
  3502  0796                     	;# 
  3503  0797                     	;# 
  3504  0797                     	;# 
  3505  0798                     	;# 
  3506  0799                     	;# 
  3507  079A                     	;# 
  3508  080C                     	;# 
  3509  080C                     	;# 
  3510  080D                     	;# 
  3511  080E                     	;# 
  3512  080E                     	;# 
  3513  080F                     	;# 
  3514  0810                     	;# 
  3515  0810                     	;# 
  3516  0811                     	;# 
  3517  0812                     	;# 
  3518  0812                     	;# 
  3519  0813                     	;# 
  3520  0814                     	;# 
  3521  0815                     	;# 
  3522  0816                     	;# 
  3523  0817                     	;# 
  3524  0818                     	;# 
  3525  0819                     	;# 
  3526  081A                     	;# 
  3527  081A                     	;# 
  3528  081B                     	;# 
  3529  081C                     	;# 
  3530  081C                     	;# 
  3531  081D                     	;# 
  3532  088C                     	;# 
  3533  088D                     	;# 
  3534  088E                     	;# 
  3535  088F                     	;# 
  3536  088F                     	;# 
  3537  0890                     	;# 
  3538  0891                     	;# 
  3539  0892                     	;# 
  3540  0893                     	;# 
  3541  0893                     	;# 
  3542  0894                     	;# 
  3543  0895                     	;# 
  3544  0896                     	;# 
  3545  0897                     	;# 
  3546  0897                     	;# 
  3547  0898                     	;# 
  3548  0899                     	;# 
  3549  0D8C                     	;# 
  3550  0D8C                     	;# 
  3551  0D8D                     	;# 
  3552  0D8E                     	;# 
  3553  0D8F                     	;# 
  3554  0D8F                     	;# 
  3555  0D90                     	;# 
  3556  0D91                     	;# 
  3557  0D92                     	;# 
  3558  0D92                     	;# 
  3559  0D93                     	;# 
  3560  0D94                     	;# 
  3561  0D95                     	;# 
  3562  0D95                     	;# 
  3563  0D96                     	;# 
  3564  0D97                     	;# 
  3565  0D98                     	;# 
  3566  0D99                     	;# 
  3567  0D9A                     	;# 
  3568  0D9B                     	;# 
  3569  0D9C                     	;# 
  3570  0D9D                     	;# 
  3571  0D9E                     	;# 
  3572  0D9E                     	;# 
  3573  0D9F                     	;# 
  3574  0DA0                     	;# 
  3575  0DA1                     	;# 
  3576  0DA1                     	;# 
  3577  0DA2                     	;# 
  3578  0DA3                     	;# 
  3579  0DA4                     	;# 
  3580  0DA4                     	;# 
  3581  0DA5                     	;# 
  3582  0DA6                     	;# 
  3583  0DA7                     	;# 
  3584  0DA7                     	;# 
  3585  0DA8                     	;# 
  3586  0DA9                     	;# 
  3587  0DAA                     	;# 
  3588  0DAB                     	;# 
  3589  0DAC                     	;# 
  3590  0DAD                     	;# 
  3591  0DAE                     	;# 
  3592  0DAF                     	;# 
  3593  0E0F                     	;# 
  3594  0E10                     	;# 
  3595  0E11                     	;# 
  3596  0E12                     	;# 
  3597  0E13                     	;# 
  3598  0E14                     	;# 
  3599  0E15                     	;# 
  3600  0E16                     	;# 
  3601  0E17                     	;# 
  3602  0E18                     	;# 
  3603  0E19                     	;# 
  3604  0E1A                     	;# 
  3605  0E1B                     	;# 
  3606  0E1C                     	;# 
  3607  0E1D                     	;# 
  3608  0E1E                     	;# 
  3609  0E1F                     	;# 
  3610  0E20                     	;# 
  3611  0E21                     	;# 
  3612  0E22                     	;# 
  3613  0E23                     	;# 
  3614  0E24                     	;# 
  3615  0E25                     	;# 
  3616  0E26                     	;# 
  3617  0E27                     	;# 
  3618  0E28                     	;# 
  3619  0E29                     	;# 
  3620  0E2A                     	;# 
  3621  0E2B                     	;# 
  3622  0E2C                     	;# 
  3623  0E2D                     	;# 
  3624  0E2E                     	;# 
  3625  0E90                     	;# 
  3626  0E91                     	;# 
  3627  0E92                     	;# 
  3628  0E94                     	;# 
  3629  0E95                     	;# 
  3630  0E9C                     	;# 
  3631  0E9D                     	;# 
  3632  0E9E                     	;# 
  3633  0E9F                     	;# 
  3634  0EA0                     	;# 
  3635  0EA1                     	;# 
  3636  0EA2                     	;# 
  3637  0EA3                     	;# 
  3638  0EA4                     	;# 
  3639  0EA5                     	;# 
  3640  0EA6                     	;# 
  3641  0EA7                     	;# 
  3642  0F0F                     	;# 
  3643  0F10                     	;# 
  3644  0F11                     	;# 
  3645  0F12                     	;# 
  3646  0F13                     	;# 
  3647  0F14                     	;# 
  3648  0F15                     	;# 
  3649  0F16                     	;# 
  3650  0F17                     	;# 
  3651  0F18                     	;# 
  3652  0F19                     	;# 
  3653  0F1A                     	;# 
  3654  0F1B                     	;# 
  3655  0F1C                     	;# 
  3656  0F1D                     	;# 
  3657  0F1E                     	;# 
  3658  0F1F                     	;# 
  3659  0F20                     	;# 
  3660  0F21                     	;# 
  3661  0F22                     	;# 
  3662  0F23                     	;# 
  3663  0F24                     	;# 
  3664  0F25                     	;# 
  3665  0F26                     	;# 
  3666  0F27                     	;# 
  3667  0F28                     	;# 
  3668  0F29                     	;# 
  3669  0F2A                     	;# 
  3670  0F2B                     	;# 
  3671  0F2C                     	;# 
  3672  0F2D                     	;# 
  3673  0F2E                     	;# 
  3674  0F2F                     	;# 
  3675  0F30                     	;# 
  3676  0F31                     	;# 
  3677  0F32                     	;# 
  3678  0F33                     	;# 
  3679  0F34                     	;# 
  3680  0F35                     	;# 
  3681  0F36                     	;# 
  3682  0F37                     	;# 
  3683  0FE4                     	;# 
  3684  0FE5                     	;# 
  3685  0FE6                     	;# 
  3686  0FE7                     	;# 
  3687  0FE8                     	;# 
  3688  0FE9                     	;# 
  3689  0FEA                     	;# 
  3690  0FEB                     	;# 
  3691  0FED                     	;# 
  3692  0FEE                     	;# 
  3693  0FEF                     	;# 
  3694  0000                     	;# 
  3695  0001                     	;# 
  3696  0002                     	;# 
  3697  0003                     	;# 
  3698  0004                     	;# 
  3699  0005                     	;# 
  3700  0006                     	;# 
  3701  0007                     	;# 
  3702  0008                     	;# 
  3703  0009                     	;# 
  3704  000A                     	;# 
  3705  000B                     	;# 
  3706  000C                     	;# 
  3707  000D                     	;# 
  3708  000E                     	;# 
  3709  0010                     	;# 
  3710  0011                     	;# 
  3711  0012                     	;# 
  3712  0013                     	;# 
  3713  0014                     	;# 
  3714  0015                     	;# 
  3715  0016                     	;# 
  3716  0016                     	;# 
  3717  0017                     	;# 
  3718  0018                     	;# 
  3719  0019                     	;# 
  3720  001A                     	;# 
  3721  001A                     	;# 
  3722  001B                     	;# 
  3723  001B                     	;# 
  3724  001C                     	;# 
  3725  001D                     	;# 
  3726  001E                     	;# 
  3727  001F                     	;# 
  3728  008C                     	;# 
  3729  008D                     	;# 
  3730  008E                     	;# 
  3731  0090                     	;# 
  3732  0091                     	;# 
  3733  0092                     	;# 
  3734  0093                     	;# 
  3735  0094                     	;# 
  3736  0095                     	;# 
  3737  0096                     	;# 
  3738  0098                     	;# 
  3739  0099                     	;# 
  3740  009A                     	;# 
  3741  009B                     	;# 
  3742  009B                     	;# 
  3743  009C                     	;# 
  3744  009D                     	;# 
  3745  009E                     	;# 
  3746  009F                     	;# 
  3747  010C                     	;# 
  3748  010D                     	;# 
  3749  010E                     	;# 
  3750  0111                     	;# 
  3751  0112                     	;# 
  3752  0113                     	;# 
  3753  0114                     	;# 
  3754  0115                     	;# 
  3755  0116                     	;# 
  3756  0117                     	;# 
  3757  0118                     	;# 
  3758  0119                     	;# 
  3759  011C                     	;# 
  3760  018C                     	;# 
  3761  018D                     	;# 
  3762  018E                     	;# 
  3763  0191                     	;# 
  3764  0191                     	;# 
  3765  0192                     	;# 
  3766  0193                     	;# 
  3767  0193                     	;# 
  3768  0194                     	;# 
  3769  0195                     	;# 
  3770  0196                     	;# 
  3771  0197                     	;# 
  3772  0199                     	;# 
  3773  0199                     	;# 
  3774  0199                     	;# 
  3775  019A                     	;# 
  3776  019A                     	;# 
  3777  019A                     	;# 
  3778  019B                     	;# 
  3779  019B                     	;# 
  3780  019B                     	;# 
  3781  019B                     	;# 
  3782  019B                     	;# 
  3783  019C                     	;# 
  3784  019C                     	;# 
  3785  019C                     	;# 
  3786  019D                     	;# 
  3787  019D                     	;# 
  3788  019D                     	;# 
  3789  019E                     	;# 
  3790  019E                     	;# 
  3791  019E                     	;# 
  3792  019F                     	;# 
  3793  019F                     	;# 
  3794  019F                     	;# 
  3795  019F                     	;# 
  3796  019F                     	;# 
  3797  020C                     	;# 
  3798  020D                     	;# 
  3799  020E                     	;# 
  3800  0211                     	;# 
  3801  0211                     	;# 
  3802  0212                     	;# 
  3803  0212                     	;# 
  3804  0213                     	;# 
  3805  0213                     	;# 
  3806  0214                     	;# 
  3807  0214                     	;# 
  3808  0215                     	;# 
  3809  0215                     	;# 
  3810  0215                     	;# 
  3811  0215                     	;# 
  3812  0216                     	;# 
  3813  0216                     	;# 
  3814  0217                     	;# 
  3815  0217                     	;# 
  3816  028C                     	;# 
  3817  028D                     	;# 
  3818  028E                     	;# 
  3819  0291                     	;# 
  3820  0291                     	;# 
  3821  0292                     	;# 
  3822  0293                     	;# 
  3823  0294                     	;# 
  3824  0298                     	;# 
  3825  0298                     	;# 
  3826  0299                     	;# 
  3827  029A                     	;# 
  3828  029B                     	;# 
  3829  029E                     	;# 
  3830  030C                     	;# 
  3831  030D                     	;# 
  3832  030E                     	;# 
  3833  038C                     	;# 
  3834  038D                     	;# 
  3835  038E                     	;# 
  3836  0391                     	;# 
  3837  0392                     	;# 
  3838  0393                     	;# 
  3839  0394                     	;# 
  3840  0395                     	;# 
  3841  0396                     	;# 
  3842  0397                     	;# 
  3843  0398                     	;# 
  3844  0399                     	;# 
  3845  040E                     	;# 
  3846  0413                     	;# 
  3847  0413                     	;# 
  3848  0414                     	;# 
  3849  0414                     	;# 
  3850  0415                     	;# 
  3851  0416                     	;# 
  3852  0417                     	;# 
  3853  0418                     	;# 
  3854  041A                     	;# 
  3855  041A                     	;# 
  3856  041B                     	;# 
  3857  041B                     	;# 
  3858  041C                     	;# 
  3859  041D                     	;# 
  3860  041E                     	;# 
  3861  041F                     	;# 
  3862  0493                     	;# 
  3863  0494                     	;# 
  3864  0495                     	;# 
  3865  0496                     	;# 
  3866  049A                     	;# 
  3867  049B                     	;# 
  3868  049C                     	;# 
  3869  049D                     	;# 
  3870  058C                     	;# 
  3871  058C                     	;# 
  3872  058D                     	;# 
  3873  058E                     	;# 
  3874  058E                     	;# 
  3875  058F                     	;# 
  3876  0590                     	;# 
  3877  0590                     	;# 
  3878  0591                     	;# 
  3879  0592                     	;# 
  3880  0592                     	;# 
  3881  0593                     	;# 
  3882  0594                     	;# 
  3883  0594                     	;# 
  3884  0595                     	;# 
  3885  0596                     	;# 
  3886  0596                     	;# 
  3887  0597                     	;# 
  3888  0598                     	;# 
  3889  0599                     	;# 
  3890  059A                     	;# 
  3891  059B                     	;# 
  3892  059B                     	;# 
  3893  059C                     	;# 
  3894  059D                     	;# 
  3895  060C                     	;# 
  3896  060C                     	;# 
  3897  060D                     	;# 
  3898  060E                     	;# 
  3899  060F                     	;# 
  3900  060F                     	;# 
  3901  0610                     	;# 
  3902  0611                     	;# 
  3903  0612                     	;# 
  3904  0613                     	;# 
  3905  0614                     	;# 
  3906  0617                     	;# 
  3907  0618                     	;# 
  3908  0619                     	;# 
  3909  061A                     	;# 
  3910  061B                     	;# 
  3911  061C                     	;# 
  3912  0691                     	;# 
  3913  0692                     	;# 
  3914  0693                     	;# 
  3915  0694                     	;# 
  3916  0695                     	;# 
  3917  0696                     	;# 
  3918  0697                     	;# 
  3919  0699                     	;# 
  3920  069A                     	;# 
  3921  0711                     	;# 
  3922  0712                     	;# 
  3923  0713                     	;# 
  3924  0714                     	;# 
  3925  0715                     	;# 
  3926  0718                     	;# 
  3927  0718                     	;# 
  3928  0719                     	;# 
  3929  071A                     	;# 
  3930  071A                     	;# 
  3931  071B                     	;# 
  3932  071C                     	;# 
  3933  071D                     	;# 
  3934  0791                     	;# 
  3935  0791                     	;# 
  3936  0792                     	;# 
  3937  0793                     	;# 
  3938  0793                     	;# 
  3939  0794                     	;# 
  3940  0795                     	;# 
  3941  0795                     	;# 
  3942  0796                     	;# 
  3943  0797                     	;# 
  3944  0797                     	;# 
  3945  0798                     	;# 
  3946  0799                     	;# 
  3947  079A                     	;# 
  3948  080C                     	;# 
  3949  080C                     	;# 
  3950  080D                     	;# 
  3951  080E                     	;# 
  3952  080E                     	;# 
  3953  080F                     	;# 
  3954  0810                     	;# 
  3955  0810                     	;# 
  3956  0811                     	;# 
  3957  0812                     	;# 
  3958  0812                     	;# 
  3959  0813                     	;# 
  3960  0814                     	;# 
  3961  0815                     	;# 
  3962  0816                     	;# 
  3963  0817                     	;# 
  3964  0818                     	;# 
  3965  0819                     	;# 
  3966  081A                     	;# 
  3967  081A                     	;# 
  3968  081B                     	;# 
  3969  081C                     	;# 
  3970  081C                     	;# 
  3971  081D                     	;# 
  3972  088C                     	;# 
  3973  088D                     	;# 
  3974  088E                     	;# 
  3975  088F                     	;# 
  3976  088F                     	;# 
  3977  0890                     	;# 
  3978  0891                     	;# 
  3979  0892                     	;# 
  3980  0893                     	;# 
  3981  0893                     	;# 
  3982  0894                     	;# 
  3983  0895                     	;# 
  3984  0896                     	;# 
  3985  0897                     	;# 
  3986  0897                     	;# 
  3987  0898                     	;# 
  3988  0899                     	;# 
  3989  0D8C                     	;# 
  3990  0D8C                     	;# 
  3991  0D8D                     	;# 
  3992  0D8E                     	;# 
  3993  0D8F                     	;# 
  3994  0D8F                     	;# 
  3995  0D90                     	;# 
  3996  0D91                     	;# 
  3997  0D92                     	;# 
  3998  0D92                     	;# 
  3999  0D93                     	;# 
  4000  0D94                     	;# 
  4001  0D95                     	;# 
  4002  0D95                     	;# 
  4003  0D96                     	;# 
  4004  0D97                     	;# 
  4005  0D98                     	;# 
  4006  0D99                     	;# 
  4007  0D9A                     	;# 
  4008  0D9B                     	;# 
  4009  0D9C                     	;# 
  4010  0D9D                     	;# 
  4011  0D9E                     	;# 
  4012  0D9E                     	;# 
  4013  0D9F                     	;# 
  4014  0DA0                     	;# 
  4015  0DA1                     	;# 
  4016  0DA1                     	;# 
  4017  0DA2                     	;# 
  4018  0DA3                     	;# 
  4019  0DA4                     	;# 
  4020  0DA4                     	;# 
  4021  0DA5                     	;# 
  4022  0DA6                     	;# 
  4023  0DA7                     	;# 
  4024  0DA7                     	;# 
  4025  0DA8                     	;# 
  4026  0DA9                     	;# 
  4027  0DAA                     	;# 
  4028  0DAB                     	;# 
  4029  0DAC                     	;# 
  4030  0DAD                     	;# 
  4031  0DAE                     	;# 
  4032  0DAF                     	;# 
  4033  0E0F                     	;# 
  4034  0E10                     	;# 
  4035  0E11                     	;# 
  4036  0E12                     	;# 
  4037  0E13                     	;# 
  4038  0E14                     	;# 
  4039  0E15                     	;# 
  4040  0E16                     	;# 
  4041  0E17                     	;# 
  4042  0E18                     	;# 
  4043  0E19                     	;# 
  4044  0E1A                     	;# 
  4045  0E1B                     	;# 
  4046  0E1C                     	;# 
  4047  0E1D                     	;# 
  4048  0E1E                     	;# 
  4049  0E1F                     	;# 
  4050  0E20                     	;# 
  4051  0E21                     	;# 
  4052  0E22                     	;# 
  4053  0E23                     	;# 
  4054  0E24                     	;# 
  4055  0E25                     	;# 
  4056  0E26                     	;# 
  4057  0E27                     	;# 
  4058  0E28                     	;# 
  4059  0E29                     	;# 
  4060  0E2A                     	;# 
  4061  0E2B                     	;# 
  4062  0E2C                     	;# 
  4063  0E2D                     	;# 
  4064  0E2E                     	;# 
  4065  0E90                     	;# 
  4066  0E91                     	;# 
  4067  0E92                     	;# 
  4068  0E94                     	;# 
  4069  0E95                     	;# 
  4070  0E9C                     	;# 
  4071  0E9D                     	;# 
  4072  0E9E                     	;# 
  4073  0E9F                     	;# 
  4074  0EA0                     	;# 
  4075  0EA1                     	;# 
  4076  0EA2                     	;# 
  4077  0EA3                     	;# 
  4078  0EA4                     	;# 
  4079  0EA5                     	;# 
  4080  0EA6                     	;# 
  4081  0EA7                     	;# 
  4082  0F0F                     	;# 
  4083  0F10                     	;# 
  4084  0F11                     	;# 
  4085  0F12                     	;# 
  4086  0F13                     	;# 
  4087  0F14                     	;# 
  4088  0F15                     	;# 
  4089  0F16                     	;# 
  4090  0F17                     	;# 
  4091  0F18                     	;# 
  4092  0F19                     	;# 
  4093  0F1A                     	;# 
  4094  0F1B                     	;# 
  4095  0F1C                     	;# 
  4096  0F1D                     	;# 
  4097  0F1E                     	;# 
  4098  0F1F                     	;# 
  4099  0F20                     	;# 
  4100  0F21                     	;# 
  4101  0F22                     	;# 
  4102  0F23                     	;# 
  4103  0F24                     	;# 
  4104  0F25                     	;# 
  4105  0F26                     	;# 
  4106  0F27                     	;# 
  4107  0F28                     	;# 
  4108  0F29                     	;# 
  4109  0F2A                     	;# 
  4110  0F2B                     	;# 
  4111  0F2C                     	;# 
  4112  0F2D                     	;# 
  4113  0F2E                     	;# 
  4114  0F2F                     	;# 
  4115  0F30                     	;# 
  4116  0F31                     	;# 
  4117  0F32                     	;# 
  4118  0F33                     	;# 
  4119  0F34                     	;# 
  4120  0F35                     	;# 
  4121  0F36                     	;# 
  4122  0F37                     	;# 
  4123  0FE4                     	;# 
  4124  0FE5                     	;# 
  4125  0FE6                     	;# 
  4126  0FE7                     	;# 
  4127  0FE8                     	;# 
  4128  0FE9                     	;# 
  4129  0FEA                     	;# 
  4130  0FEB                     	;# 
  4131  0FED                     	;# 
  4132  0FEE                     	;# 
  4133  0FEF                     	;# 
  4134  0000                     	;# 
  4135  0001                     	;# 
  4136  0002                     	;# 
  4137  0003                     	;# 
  4138  0004                     	;# 
  4139  0005                     	;# 
  4140  0006                     	;# 
  4141  0007                     	;# 
  4142  0008                     	;# 
  4143  0009                     	;# 
  4144  000A                     	;# 
  4145  000B                     	;# 
  4146  000C                     	;# 
  4147  000D                     	;# 
  4148  000E                     	;# 
  4149  0010                     	;# 
  4150  0011                     	;# 
  4151  0012                     	;# 
  4152  0013                     	;# 
  4153  0014                     	;# 
  4154  0015                     	;# 
  4155  0016                     	;# 
  4156  0016                     	;# 
  4157  0017                     	;# 
  4158  0018                     	;# 
  4159  0019                     	;# 
  4160  001A                     	;# 
  4161  001A                     	;# 
  4162  001B                     	;# 
  4163  001B                     	;# 
  4164  001C                     	;# 
  4165  001D                     	;# 
  4166  001E                     	;# 
  4167  001F                     	;# 
  4168  008C                     	;# 
  4169  008D                     	;# 
  4170  008E                     	;# 
  4171  0090                     	;# 
  4172  0091                     	;# 
  4173  0092                     	;# 
  4174  0093                     	;# 
  4175  0094                     	;# 
  4176  0095                     	;# 
  4177  0096                     	;# 
  4178  0098                     	;# 
  4179  0099                     	;# 
  4180  009A                     	;# 
  4181  009B                     	;# 
  4182  009B                     	;# 
  4183  009C                     	;# 
  4184  009D                     	;# 
  4185  009E                     	;# 
  4186  009F                     	;# 
  4187  010C                     	;# 
  4188  010D                     	;# 
  4189  010E                     	;# 
  4190  0111                     	;# 
  4191  0112                     	;# 
  4192  0113                     	;# 
  4193  0114                     	;# 
  4194  0115                     	;# 
  4195  0116                     	;# 
  4196  0117                     	;# 
  4197  0118                     	;# 
  4198  0119                     	;# 
  4199  011C                     	;# 
  4200  018C                     	;# 
  4201  018D                     	;# 
  4202  018E                     	;# 
  4203  0191                     	;# 
  4204  0191                     	;# 
  4205  0192                     	;# 
  4206  0193                     	;# 
  4207  0193                     	;# 
  4208  0194                     	;# 
  4209  0195                     	;# 
  4210  0196                     	;# 
  4211  0197                     	;# 
  4212  0199                     	;# 
  4213  0199                     	;# 
  4214  0199                     	;# 
  4215  019A                     	;# 
  4216  019A                     	;# 
  4217  019A                     	;# 
  4218  019B                     	;# 
  4219  019B                     	;# 
  4220  019B                     	;# 
  4221  019B                     	;# 
  4222  019B                     	;# 
  4223  019C                     	;# 
  4224  019C                     	;# 
  4225  019C                     	;# 
  4226  019D                     	;# 
  4227  019D                     	;# 
  4228  019D                     	;# 
  4229  019E                     	;# 
  4230  019E                     	;# 
  4231  019E                     	;# 
  4232  019F                     	;# 
  4233  019F                     	;# 
  4234  019F                     	;# 
  4235  019F                     	;# 
  4236  019F                     	;# 
  4237  020C                     	;# 
  4238  020D                     	;# 
  4239  020E                     	;# 
  4240  0211                     	;# 
  4241  0211                     	;# 
  4242  0212                     	;# 
  4243  0212                     	;# 
  4244  0213                     	;# 
  4245  0213                     	;# 
  4246  0214                     	;# 
  4247  0214                     	;# 
  4248  0215                     	;# 
  4249  0215                     	;# 
  4250  0215                     	;# 
  4251  0215                     	;# 
  4252  0216                     	;# 
  4253  0216                     	;# 
  4254  0217                     	;# 
  4255  0217                     	;# 
  4256  028C                     	;# 
  4257  028D                     	;# 
  4258  028E                     	;# 
  4259  0291                     	;# 
  4260  0291                     	;# 
  4261  0292                     	;# 
  4262  0293                     	;# 
  4263  0294                     	;# 
  4264  0298                     	;# 
  4265  0298                     	;# 
  4266  0299                     	;# 
  4267  029A                     	;# 
  4268  029B                     	;# 
  4269  029E                     	;# 
  4270  030C                     	;# 
  4271  030D                     	;# 
  4272  030E                     	;# 
  4273  038C                     	;# 
  4274  038D                     	;# 
  4275  038E                     	;# 
  4276  0391                     	;# 
  4277  0392                     	;# 
  4278  0393                     	;# 
  4279  0394                     	;# 
  4280  0395                     	;# 
  4281  0396                     	;# 
  4282  0397                     	;# 
  4283  0398                     	;# 
  4284  0399                     	;# 
  4285  040E                     	;# 
  4286  0413                     	;# 
  4287  0413                     	;# 
  4288  0414                     	;# 
  4289  0414                     	;# 
  4290  0415                     	;# 
  4291  0416                     	;# 
  4292  0417                     	;# 
  4293  0418                     	;# 
  4294  041A                     	;# 
  4295  041A                     	;# 
  4296  041B                     	;# 
  4297  041B                     	;# 
  4298  041C                     	;# 
  4299  041D                     	;# 
  4300  041E                     	;# 
  4301  041F                     	;# 
  4302  0493                     	;# 
  4303  0494                     	;# 
  4304  0495                     	;# 
  4305  0496                     	;# 
  4306  049A                     	;# 
  4307  049B                     	;# 
  4308  049C                     	;# 
  4309  049D                     	;# 
  4310  058C                     	;# 
  4311  058C                     	;# 
  4312  058D                     	;# 
  4313  058E                     	;# 
  4314  058E                     	;# 
  4315  058F                     	;# 
  4316  0590                     	;# 
  4317  0590                     	;# 
  4318  0591                     	;# 
  4319  0592                     	;# 
  4320  0592                     	;# 
  4321  0593                     	;# 
  4322  0594                     	;# 
  4323  0594                     	;# 
  4324  0595                     	;# 
  4325  0596                     	;# 
  4326  0596                     	;# 
  4327  0597                     	;# 
  4328  0598                     	;# 
  4329  0599                     	;# 
  4330  059A                     	;# 
  4331  059B                     	;# 
  4332  059B                     	;# 
  4333  059C                     	;# 
  4334  059D                     	;# 
  4335  060C                     	;# 
  4336  060C                     	;# 
  4337  060D                     	;# 
  4338  060E                     	;# 
  4339  060F                     	;# 
  4340  060F                     	;# 
  4341  0610                     	;# 
  4342  0611                     	;# 
  4343  0612                     	;# 
  4344  0613                     	;# 
  4345  0614                     	;# 
  4346  0617                     	;# 
  4347  0618                     	;# 
  4348  0619                     	;# 
  4349  061A                     	;# 
  4350  061B                     	;# 
  4351  061C                     	;# 
  4352  0691                     	;# 
  4353  0692                     	;# 
  4354  0693                     	;# 
  4355  0694                     	;# 
  4356  0695                     	;# 
  4357  0696                     	;# 
  4358  0697                     	;# 
  4359  0699                     	;# 
  4360  069A                     	;# 
  4361  0711                     	;# 
  4362  0712                     	;# 
  4363  0713                     	;# 
  4364  0714                     	;# 
  4365  0715                     	;# 
  4366  0718                     	;# 
  4367  0718                     	;# 
  4368  0719                     	;# 
  4369  071A                     	;# 
  4370  071A                     	;# 
  4371  071B                     	;# 
  4372  071C                     	;# 
  4373  071D                     	;# 
  4374  0791                     	;# 
  4375  0791                     	;# 
  4376  0792                     	;# 
  4377  0793                     	;# 
  4378  0793                     	;# 
  4379  0794                     	;# 
  4380  0795                     	;# 
  4381  0795                     	;# 
  4382  0796                     	;# 
  4383  0797                     	;# 
  4384  0797                     	;# 
  4385  0798                     	;# 
  4386  0799                     	;# 
  4387  079A                     	;# 
  4388  080C                     	;# 
  4389  080C                     	;# 
  4390  080D                     	;# 
  4391  080E                     	;# 
  4392  080E                     	;# 
  4393  080F                     	;# 
  4394  0810                     	;# 
  4395  0810                     	;# 
  4396  0811                     	;# 
  4397  0812                     	;# 
  4398  0812                     	;# 
  4399  0813                     	;# 
  4400  0814                     	;# 
  4401  0815                     	;# 
  4402  0816                     	;# 
  4403  0817                     	;# 
  4404  0818                     	;# 
  4405  0819                     	;# 
  4406  081A                     	;# 
  4407  081A                     	;# 
  4408  081B                     	;# 
  4409  081C                     	;# 
  4410  081C                     	;# 
  4411  081D                     	;# 
  4412  088C                     	;# 
  4413  088D                     	;# 
  4414  088E                     	;# 
  4415  088F                     	;# 
  4416  088F                     	;# 
  4417  0890                     	;# 
  4418  0891                     	;# 
  4419  0892                     	;# 
  4420  0893                     	;# 
  4421  0893                     	;# 
  4422  0894                     	;# 
  4423  0895                     	;# 
  4424  0896                     	;# 
  4425  0897                     	;# 
  4426  0897                     	;# 
  4427  0898                     	;# 
  4428  0899                     	;# 
  4429  0D8C                     	;# 
  4430  0D8C                     	;# 
  4431  0D8D                     	;# 
  4432  0D8E                     	;# 
  4433  0D8F                     	;# 
  4434  0D8F                     	;# 
  4435  0D90                     	;# 
  4436  0D91                     	;# 
  4437  0D92                     	;# 
  4438  0D92                     	;# 
  4439  0D93                     	;# 
  4440  0D94                     	;# 
  4441  0D95                     	;# 
  4442  0D95                     	;# 
  4443  0D96                     	;# 
  4444  0D97                     	;# 
  4445  0D98                     	;# 
  4446  0D99                     	;# 
  4447  0D9A                     	;# 
  4448  0D9B                     	;# 
  4449  0D9C                     	;# 
  4450  0D9D                     	;# 
  4451  0D9E                     	;# 
  4452  0D9E                     	;# 
  4453  0D9F                     	;# 
  4454  0DA0                     	;# 
  4455  0DA1                     	;# 
  4456  0DA1                     	;# 
  4457  0DA2                     	;# 
  4458  0DA3                     	;# 
  4459  0DA4                     	;# 
  4460  0DA4                     	;# 
  4461  0DA5                     	;# 
  4462  0DA6                     	;# 
  4463  0DA7                     	;# 
  4464  0DA7                     	;# 
  4465  0DA8                     	;# 
  4466  0DA9                     	;# 
  4467  0DAA                     	;# 
  4468  0DAB                     	;# 
  4469  0DAC                     	;# 
  4470  0DAD                     	;# 
  4471  0DAE                     	;# 
  4472  0DAF                     	;# 
  4473  0E0F                     	;# 
  4474  0E10                     	;# 
  4475  0E11                     	;# 
  4476  0E12                     	;# 
  4477  0E13                     	;# 
  4478  0E14                     	;# 
  4479  0E15                     	;# 
  4480  0E16                     	;# 
  4481  0E17                     	;# 
  4482  0E18                     	;# 
  4483  0E19                     	;# 
  4484  0E1A                     	;# 
  4485  0E1B                     	;# 
  4486  0E1C                     	;# 
  4487  0E1D                     	;# 
  4488  0E1E                     	;# 
  4489  0E1F                     	;# 
  4490  0E20                     	;# 
  4491  0E21                     	;# 
  4492  0E22                     	;# 
  4493  0E23                     	;# 
  4494  0E24                     	;# 
  4495  0E25                     	;# 
  4496  0E26                     	;# 
  4497  0E27                     	;# 
  4498  0E28                     	;# 
  4499  0E29                     	;# 
  4500  0E2A                     	;# 
  4501  0E2B                     	;# 
  4502  0E2C                     	;# 
  4503  0E2D                     	;# 
  4504  0E2E                     	;# 
  4505  0E90                     	;# 
  4506  0E91                     	;# 
  4507  0E92                     	;# 
  4508  0E94                     	;# 
  4509  0E95                     	;# 
  4510  0E9C                     	;# 
  4511  0E9D                     	;# 
  4512  0E9E                     	;# 
  4513  0E9F                     	;# 
  4514  0EA0                     	;# 
  4515  0EA1                     	;# 
  4516  0EA2                     	;# 
  4517  0EA3                     	;# 
  4518  0EA4                     	;# 
  4519  0EA5                     	;# 
  4520  0EA6                     	;# 
  4521  0EA7                     	;# 
  4522  0F0F                     	;# 
  4523  0F10                     	;# 
  4524  0F11                     	;# 
  4525  0F12                     	;# 
  4526  0F13                     	;# 
  4527  0F14                     	;# 
  4528  0F15                     	;# 
  4529  0F16                     	;# 
  4530  0F17                     	;# 
  4531  0F18                     	;# 
  4532  0F19                     	;# 
  4533  0F1A                     	;# 
  4534  0F1B                     	;# 
  4535  0F1C                     	;# 
  4536  0F1D                     	;# 
  4537  0F1E                     	;# 
  4538  0F1F                     	;# 
  4539  0F20                     	;# 
  4540  0F21                     	;# 
  4541  0F22                     	;# 
  4542  0F23                     	;# 
  4543  0F24                     	;# 
  4544  0F25                     	;# 
  4545  0F26                     	;# 
  4546  0F27                     	;# 
  4547  0F28                     	;# 
  4548  0F29                     	;# 
  4549  0F2A                     	;# 
  4550  0F2B                     	;# 
  4551  0F2C                     	;# 
  4552  0F2D                     	;# 
  4553  0F2E                     	;# 
  4554  0F2F                     	;# 
  4555  0F30                     	;# 
  4556  0F31                     	;# 
  4557  0F32                     	;# 
  4558  0F33                     	;# 
  4559  0F34                     	;# 
  4560  0F35                     	;# 
  4561  0F36                     	;# 
  4562  0F37                     	;# 
  4563  0FE4                     	;# 
  4564  0FE5                     	;# 
  4565  0FE6                     	;# 
  4566  0FE7                     	;# 
  4567  0FE8                     	;# 
  4568  0FE9                     	;# 
  4569  0FEA                     	;# 
  4570  0FEB                     	;# 
  4571  0FED                     	;# 
  4572  0FEE                     	;# 
  4573  0FEF                     	;# 
  4574  0000                     	;# 
  4575  0001                     	;# 
  4576  0002                     	;# 
  4577  0003                     	;# 
  4578  0004                     	;# 
  4579  0005                     	;# 
  4580  0006                     	;# 
  4581  0007                     	;# 
  4582  0008                     	;# 
  4583  0009                     	;# 
  4584  000A                     	;# 
  4585  000B                     	;# 
  4586  000C                     	;# 
  4587  000D                     	;# 
  4588  000E                     	;# 
  4589  0010                     	;# 
  4590  0011                     	;# 
  4591  0012                     	;# 
  4592  0013                     	;# 
  4593  0014                     	;# 
  4594  0015                     	;# 
  4595  0016                     	;# 
  4596  0016                     	;# 
  4597  0017                     	;# 
  4598  0018                     	;# 
  4599  0019                     	;# 
  4600  001A                     	;# 
  4601  001A                     	;# 
  4602  001B                     	;# 
  4603  001B                     	;# 
  4604  001C                     	;# 
  4605  001D                     	;# 
  4606  001E                     	;# 
  4607  001F                     	;# 
  4608  008C                     	;# 
  4609  008D                     	;# 
  4610  008E                     	;# 
  4611  0090                     	;# 
  4612  0091                     	;# 
  4613  0092                     	;# 
  4614  0093                     	;# 
  4615  0094                     	;# 
  4616  0095                     	;# 
  4617  0096                     	;# 
  4618  0098                     	;# 
  4619  0099                     	;# 
  4620  009A                     	;# 
  4621  009B                     	;# 
  4622  009B                     	;# 
  4623  009C                     	;# 
  4624  009D                     	;# 
  4625  009E                     	;# 
  4626  009F                     	;# 
  4627  010C                     	;# 
  4628  010D                     	;# 
  4629  010E                     	;# 
  4630  0111                     	;# 
  4631  0112                     	;# 
  4632  0113                     	;# 
  4633  0114                     	;# 
  4634  0115                     	;# 
  4635  0116                     	;# 
  4636  0117                     	;# 
  4637  0118                     	;# 
  4638  0119                     	;# 
  4639  011C                     	;# 
  4640  018C                     	;# 
  4641  018D                     	;# 
  4642  018E                     	;# 
  4643  0191                     	;# 
  4644  0191                     	;# 
  4645  0192                     	;# 
  4646  0193                     	;# 
  4647  0193                     	;# 
  4648  0194                     	;# 
  4649  0195                     	;# 
  4650  0196                     	;# 
  4651  0197                     	;# 
  4652  0199                     	;# 
  4653  0199                     	;# 
  4654  0199                     	;# 
  4655  019A                     	;# 
  4656  019A                     	;# 
  4657  019A                     	;# 
  4658  019B                     	;# 
  4659  019B                     	;# 
  4660  019B                     	;# 
  4661  019B                     	;# 
  4662  019B                     	;# 
  4663  019C                     	;# 
  4664  019C                     	;# 
  4665  019C                     	;# 
  4666  019D                     	;# 
  4667  019D                     	;# 
  4668  019D                     	;# 
  4669  019E                     	;# 
  4670  019E                     	;# 
  4671  019E                     	;# 
  4672  019F                     	;# 
  4673  019F                     	;# 
  4674  019F                     	;# 
  4675  019F                     	;# 
  4676  019F                     	;# 
  4677  020C                     	;# 
  4678  020D                     	;# 
  4679  020E                     	;# 
  4680  0211                     	;# 
  4681  0211                     	;# 
  4682  0212                     	;# 
  4683  0212                     	;# 
  4684  0213                     	;# 
  4685  0213                     	;# 
  4686  0214                     	;# 
  4687  0214                     	;# 
  4688  0215                     	;# 
  4689  0215                     	;# 
  4690  0215                     	;# 
  4691  0215                     	;# 
  4692  0216                     	;# 
  4693  0216                     	;# 
  4694  0217                     	;# 
  4695  0217                     	;# 
  4696  028C                     	;# 
  4697  028D                     	;# 
  4698  028E                     	;# 
  4699  0291                     	;# 
  4700  0291                     	;# 
  4701  0292                     	;# 
  4702  0293                     	;# 
  4703  0294                     	;# 
  4704  0298                     	;# 
  4705  0298                     	;# 
  4706  0299                     	;# 
  4707  029A                     	;# 
  4708  029B                     	;# 
  4709  029E                     	;# 
  4710  030C                     	;# 
  4711  030D                     	;# 
  4712  030E                     	;# 
  4713  038C                     	;# 
  4714  038D                     	;# 
  4715  038E                     	;# 
  4716  0391                     	;# 
  4717  0392                     	;# 
  4718  0393                     	;# 
  4719  0394                     	;# 
  4720  0395                     	;# 
  4721  0396                     	;# 
  4722  0397                     	;# 
  4723  0398                     	;# 
  4724  0399                     	;# 
  4725  040E                     	;# 
  4726  0413                     	;# 
  4727  0413                     	;# 
  4728  0414                     	;# 
  4729  0414                     	;# 
  4730  0415                     	;# 
  4731  0416                     	;# 
  4732  0417                     	;# 
  4733  0418                     	;# 
  4734  041A                     	;# 
  4735  041A                     	;# 
  4736  041B                     	;# 
  4737  041B                     	;# 
  4738  041C                     	;# 
  4739  041D                     	;# 
  4740  041E                     	;# 
  4741  041F                     	;# 
  4742  0493                     	;# 
  4743  0494                     	;# 
  4744  0495                     	;# 
  4745  0496                     	;# 
  4746  049A                     	;# 
  4747  049B                     	;# 
  4748  049C                     	;# 
  4749  049D                     	;# 
  4750  058C                     	;# 
  4751  058C                     	;# 
  4752  058D                     	;# 
  4753  058E                     	;# 
  4754  058E                     	;# 
  4755  058F                     	;# 
  4756  0590                     	;# 
  4757  0590                     	;# 
  4758  0591                     	;# 
  4759  0592                     	;# 
  4760  0592                     	;# 
  4761  0593                     	;# 
  4762  0594                     	;# 
  4763  0594                     	;# 
  4764  0595                     	;# 
  4765  0596                     	;# 
  4766  0596                     	;# 
  4767  0597                     	;# 
  4768  0598                     	;# 
  4769  0599                     	;# 
  4770  059A                     	;# 
  4771  059B                     	;# 
  4772  059B                     	;# 
  4773  059C                     	;# 
  4774  059D                     	;# 
  4775  060C                     	;# 
  4776  060C                     	;# 
  4777  060D                     	;# 
  4778  060E                     	;# 
  4779  060F                     	;# 
  4780  060F                     	;# 
  4781  0610                     	;# 
  4782  0611                     	;# 
  4783  0612                     	;# 
  4784  0613                     	;# 
  4785  0614                     	;# 
  4786  0617                     	;# 
  4787  0618                     	;# 
  4788  0619                     	;# 
  4789  061A                     	;# 
  4790  061B                     	;# 
  4791  061C                     	;# 
  4792  0691                     	;# 
  4793  0692                     	;# 
  4794  0693                     	;# 
  4795  0694                     	;# 
  4796  0695                     	;# 
  4797  0696                     	;# 
  4798  0697                     	;# 
  4799  0699                     	;# 
  4800  069A                     	;# 
  4801  0711                     	;# 
  4802  0712                     	;# 
  4803  0713                     	;# 
  4804  0714                     	;# 
  4805  0715                     	;# 
  4806  0718                     	;# 
  4807  0718                     	;# 
  4808  0719                     	;# 
  4809  071A                     	;# 
  4810  071A                     	;# 
  4811  071B                     	;# 
  4812  071C                     	;# 
  4813  071D                     	;# 
  4814  0791                     	;# 
  4815  0791                     	;# 
  4816  0792                     	;# 
  4817  0793                     	;# 
  4818  0793                     	;# 
  4819  0794                     	;# 
  4820  0795                     	;# 
  4821  0795                     	;# 
  4822  0796                     	;# 
  4823  0797                     	;# 
  4824  0797                     	;# 
  4825  0798                     	;# 
  4826  0799                     	;# 
  4827  079A                     	;# 
  4828  080C                     	;# 
  4829  080C                     	;# 
  4830  080D                     	;# 
  4831  080E                     	;# 
  4832  080E                     	;# 
  4833  080F                     	;# 
  4834  0810                     	;# 
  4835  0810                     	;# 
  4836  0811                     	;# 
  4837  0812                     	;# 
  4838  0812                     	;# 
  4839  0813                     	;# 
  4840  0814                     	;# 
  4841  0815                     	;# 
  4842  0816                     	;# 
  4843  0817                     	;# 
  4844  0818                     	;# 
  4845  0819                     	;# 
  4846  081A                     	;# 
  4847  081A                     	;# 
  4848  081B                     	;# 
  4849  081C                     	;# 
  4850  081C                     	;# 
  4851  081D                     	;# 
  4852  088C                     	;# 
  4853  088D                     	;# 
  4854  088E                     	;# 
  4855  088F                     	;# 
  4856  088F                     	;# 
  4857  0890                     	;# 
  4858  0891                     	;# 
  4859  0892                     	;# 
  4860  0893                     	;# 
  4861  0893                     	;# 
  4862  0894                     	;# 
  4863  0895                     	;# 
  4864  0896                     	;# 
  4865  0897                     	;# 
  4866  0897                     	;# 
  4867  0898                     	;# 
  4868  0899                     	;# 
  4869  0D8C                     	;# 
  4870  0D8C                     	;# 
  4871  0D8D                     	;# 
  4872  0D8E                     	;# 
  4873  0D8F                     	;# 
  4874  0D8F                     	;# 
  4875  0D90                     	;# 
  4876  0D91                     	;# 
  4877  0D92                     	;# 
  4878  0D92                     	;# 
  4879  0D93                     	;# 
  4880  0D94                     	;# 
  4881  0D95                     	;# 
  4882  0D95                     	;# 
  4883  0D96                     	;# 
  4884  0D97                     	;# 
  4885  0D98                     	;# 
  4886  0D99                     	;# 
  4887  0D9A                     	;# 
  4888  0D9B                     	;# 
  4889  0D9C                     	;# 
  4890  0D9D                     	;# 
  4891  0D9E                     	;# 
  4892  0D9E                     	;# 
  4893  0D9F                     	;# 
  4894  0DA0                     	;# 
  4895  0DA1                     	;# 
  4896  0DA1                     	;# 
  4897  0DA2                     	;# 
  4898  0DA3                     	;# 
  4899  0DA4                     	;# 
  4900  0DA4                     	;# 
  4901  0DA5                     	;# 
  4902  0DA6                     	;# 
  4903  0DA7                     	;# 
  4904  0DA7                     	;# 
  4905  0DA8                     	;# 
  4906  0DA9                     	;# 
  4907  0DAA                     	;# 
  4908  0DAB                     	;# 
  4909  0DAC                     	;# 
  4910  0DAD                     	;# 
  4911  0DAE                     	;# 
  4912  0DAF                     	;# 
  4913  0E0F                     	;# 
  4914  0E10                     	;# 
  4915  0E11                     	;# 
  4916  0E12                     	;# 
  4917  0E13                     	;# 
  4918  0E14                     	;# 
  4919  0E15                     	;# 
  4920  0E16                     	;# 
  4921  0E17                     	;# 
  4922  0E18                     	;# 
  4923  0E19                     	;# 
  4924  0E1A                     	;# 
  4925  0E1B                     	;# 
  4926  0E1C                     	;# 
  4927  0E1D                     	;# 
  4928  0E1E                     	;# 
  4929  0E1F                     	;# 
  4930  0E20                     	;# 
  4931  0E21                     	;# 
  4932  0E22                     	;# 
  4933  0E23                     	;# 
  4934  0E24                     	;# 
  4935  0E25                     	;# 
  4936  0E26                     	;# 
  4937  0E27                     	;# 
  4938  0E28                     	;# 
  4939  0E29                     	;# 
  4940  0E2A                     	;# 
  4941  0E2B                     	;# 
  4942  0E2C                     	;# 
  4943  0E2D                     	;# 
  4944  0E2E                     	;# 
  4945  0E90                     	;# 
  4946  0E91                     	;# 
  4947  0E92                     	;# 
  4948  0E94                     	;# 
  4949  0E95                     	;# 
  4950  0E9C                     	;# 
  4951  0E9D                     	;# 
  4952  0E9E                     	;# 
  4953  0E9F                     	;# 
  4954  0EA0                     	;# 
  4955  0EA1                     	;# 
  4956  0EA2                     	;# 
  4957  0EA3                     	;# 
  4958  0EA4                     	;# 
  4959  0EA5                     	;# 
  4960  0EA6                     	;# 
  4961  0EA7                     	;# 
  4962  0F0F                     	;# 
  4963  0F10                     	;# 
  4964  0F11                     	;# 
  4965  0F12                     	;# 
  4966  0F13                     	;# 
  4967  0F14                     	;# 
  4968  0F15                     	;# 
  4969  0F16                     	;# 
  4970  0F17                     	;# 
  4971  0F18                     	;# 
  4972  0F19                     	;# 
  4973  0F1A                     	;# 
  4974  0F1B                     	;# 
  4975  0F1C                     	;# 
  4976  0F1D                     	;# 
  4977  0F1E                     	;# 
  4978  0F1F                     	;# 
  4979  0F20                     	;# 
  4980  0F21                     	;# 
  4981  0F22                     	;# 
  4982  0F23                     	;# 
  4983  0F24                     	;# 
  4984  0F25                     	;# 
  4985  0F26                     	;# 
  4986  0F27                     	;# 
  4987  0F28                     	;# 
  4988  0F29                     	;# 
  4989  0F2A                     	;# 
  4990  0F2B                     	;# 
  4991  0F2C                     	;# 
  4992  0F2D                     	;# 
  4993  0F2E                     	;# 
  4994  0F2F                     	;# 
  4995  0F30                     	;# 
  4996  0F31                     	;# 
  4997  0F32                     	;# 
  4998  0F33                     	;# 
  4999  0F34                     	;# 
  5000  0F35                     	;# 
  5001  0F36                     	;# 
  5002  0F37                     	;# 
  5003  0FE4                     	;# 
  5004  0FE5                     	;# 
  5005  0FE6                     	;# 
  5006  0FE7                     	;# 
  5007  0FE8                     	;# 
  5008  0FE9                     	;# 
  5009  0FEA                     	;# 
  5010  0FEB                     	;# 
  5011  0FED                     	;# 
  5012  0FEE                     	;# 
  5013  0FEF                     	;# 
  5014  0000                     	;# 
  5015  0001                     	;# 
  5016  0002                     	;# 
  5017  0003                     	;# 
  5018  0004                     	;# 
  5019  0005                     	;# 
  5020  0006                     	;# 
  5021  0007                     	;# 
  5022  0008                     	;# 
  5023  0009                     	;# 
  5024  000A                     	;# 
  5025  000B                     	;# 
  5026  000C                     	;# 
  5027  000D                     	;# 
  5028  000E                     	;# 
  5029  0010                     	;# 
  5030  0011                     	;# 
  5031  0012                     	;# 
  5032  0013                     	;# 
  5033  0014                     	;# 
  5034  0015                     	;# 
  5035  0016                     	;# 
  5036  0016                     	;# 
  5037  0017                     	;# 
  5038  0018                     	;# 
  5039  0019                     	;# 
  5040  001A                     	;# 
  5041  001A                     	;# 
  5042  001B                     	;# 
  5043  001B                     	;# 
  5044  001C                     	;# 
  5045  001D                     	;# 
  5046  001E                     	;# 
  5047  001F                     	;# 
  5048  008C                     	;# 
  5049  008D                     	;# 
  5050  008E                     	;# 
  5051  0090                     	;# 
  5052  0091                     	;# 
  5053  0092                     	;# 
  5054  0093                     	;# 
  5055  0094                     	;# 
  5056  0095                     	;# 
  5057  0096                     	;# 
  5058  0098                     	;# 
  5059  0099                     	;# 
  5060  009A                     	;# 
  5061  009B                     	;# 
  5062  009B                     	;# 
  5063  009C                     	;# 
  5064  009D                     	;# 
  5065  009E                     	;# 
  5066  009F                     	;# 
  5067  010C                     	;# 
  5068  010D                     	;# 
  5069  010E                     	;# 
  5070  0111                     	;# 
  5071  0112                     	;# 
  5072  0113                     	;# 
  5073  0114                     	;# 
  5074  0115                     	;# 
  5075  0116                     	;# 
  5076  0117                     	;# 
  5077  0118                     	;# 
  5078  0119                     	;# 
  5079  011C                     	;# 
  5080  018C                     	;# 
  5081  018D                     	;# 
  5082  018E                     	;# 
  5083  0191                     	;# 
  5084  0191                     	;# 
  5085  0192                     	;# 
  5086  0193                     	;# 
  5087  0193                     	;# 
  5088  0194                     	;# 
  5089  0195                     	;# 
  5090  0196                     	;# 
  5091  0197                     	;# 
  5092  0199                     	;# 
  5093  0199                     	;# 
  5094  0199                     	;# 
  5095  019A                     	;# 
  5096  019A                     	;# 
  5097  019A                     	;# 
  5098  019B                     	;# 
  5099  019B                     	;# 
  5100  019B                     	;# 
  5101  019B                     	;# 
  5102  019B                     	;# 
  5103  019C                     	;# 
  5104  019C                     	;# 
  5105  019C                     	;# 
  5106  019D                     	;# 
  5107  019D                     	;# 
  5108  019D                     	;# 
  5109  019E                     	;# 
  5110  019E                     	;# 
  5111  019E                     	;# 
  5112  019F                     	;# 
  5113  019F                     	;# 
  5114  019F                     	;# 
  5115  019F                     	;# 
  5116  019F                     	;# 
  5117  020C                     	;# 
  5118  020D                     	;# 
  5119  020E                     	;# 
  5120  0211                     	;# 
  5121  0211                     	;# 
  5122  0212                     	;# 
  5123  0212                     	;# 
  5124  0213                     	;# 
  5125  0213                     	;# 
  5126  0214                     	;# 
  5127  0214                     	;# 
  5128  0215                     	;# 
  5129  0215                     	;# 
  5130  0215                     	;# 
  5131  0215                     	;# 
  5132  0216                     	;# 
  5133  0216                     	;# 
  5134  0217                     	;# 
  5135  0217                     	;# 
  5136  028C                     	;# 
  5137  028D                     	;# 
  5138  028E                     	;# 
  5139  0291                     	;# 
  5140  0291                     	;# 
  5141  0292                     	;# 
  5142  0293                     	;# 
  5143  0294                     	;# 
  5144  0298                     	;# 
  5145  0298                     	;# 
  5146  0299                     	;# 
  5147  029A                     	;# 
  5148  029B                     	;# 
  5149  029E                     	;# 
  5150  030C                     	;# 
  5151  030D                     	;# 
  5152  030E                     	;# 
  5153  038C                     	;# 
  5154  038D                     	;# 
  5155  038E                     	;# 
  5156  0391                     	;# 
  5157  0392                     	;# 
  5158  0393                     	;# 
  5159  0394                     	;# 
  5160  0395                     	;# 
  5161  0396                     	;# 
  5162  0397                     	;# 
  5163  0398                     	;# 
  5164  0399                     	;# 
  5165  040E                     	;# 
  5166  0413                     	;# 
  5167  0413                     	;# 
  5168  0414                     	;# 
  5169  0414                     	;# 
  5170  0415                     	;# 
  5171  0416                     	;# 
  5172  0417                     	;# 
  5173  0418                     	;# 
  5174  041A                     	;# 
  5175  041A                     	;# 
  5176  041B                     	;# 
  5177  041B                     	;# 
  5178  041C                     	;# 
  5179  041D                     	;# 
  5180  041E                     	;# 
  5181  041F                     	;# 
  5182  0493                     	;# 
  5183  0494                     	;# 
  5184  0495                     	;# 
  5185  0496                     	;# 
  5186  049A                     	;# 
  5187  049B                     	;# 
  5188  049C                     	;# 
  5189  049D                     	;# 
  5190  058C                     	;# 
  5191  058C                     	;# 
  5192  058D                     	;# 
  5193  058E                     	;# 
  5194  058E                     	;# 
  5195  058F                     	;# 
  5196  0590                     	;# 
  5197  0590                     	;# 
  5198  0591                     	;# 
  5199  0592                     	;# 
  5200  0592                     	;# 
  5201  0593                     	;# 
  5202  0594                     	;# 
  5203  0594                     	;# 
  5204  0595                     	;# 
  5205  0596                     	;# 
  5206  0596                     	;# 
  5207  0597                     	;# 
  5208  0598                     	;# 
  5209  0599                     	;# 
  5210  059A                     	;# 
  5211  059B                     	;# 
  5212  059B                     	;# 
  5213  059C                     	;# 
  5214  059D                     	;# 
  5215  060C                     	;# 
  5216  060C                     	;# 
  5217  060D                     	;# 
  5218  060E                     	;# 
  5219  060F                     	;# 
  5220  060F                     	;# 
  5221  0610                     	;# 
  5222  0611                     	;# 
  5223  0612                     	;# 
  5224  0613                     	;# 
  5225  0614                     	;# 
  5226  0617                     	;# 
  5227  0618                     	;# 
  5228  0619                     	;# 
  5229  061A                     	;# 
  5230  061B                     	;# 
  5231  061C                     	;# 
  5232  0691                     	;# 
  5233  0692                     	;# 
  5234  0693                     	;# 
  5235  0694                     	;# 
  5236  0695                     	;# 
  5237  0696                     	;# 
  5238  0697                     	;# 
  5239  0699                     	;# 
  5240  069A                     	;# 
  5241  0711                     	;# 
  5242  0712                     	;# 
  5243  0713                     	;# 
  5244  0714                     	;# 
  5245  0715                     	;# 
  5246  0718                     	;# 
  5247  0718                     	;# 
  5248  0719                     	;# 
  5249  071A                     	;# 
  5250  071A                     	;# 
  5251  071B                     	;# 
  5252  071C                     	;# 
  5253  071D                     	;# 
  5254  0791                     	;# 
  5255  0791                     	;# 
  5256  0792                     	;# 
  5257  0793                     	;# 
  5258  0793                     	;# 
  5259  0794                     	;# 
  5260  0795                     	;# 
  5261  0795                     	;# 
  5262  0796                     	;# 
  5263  0797                     	;# 
  5264  0797                     	;# 
  5265  0798                     	;# 
  5266  0799                     	;# 
  5267  079A                     	;# 
  5268  080C                     	;# 
  5269  080C                     	;# 
  5270  080D                     	;# 
  5271  080E                     	;# 
  5272  080E                     	;# 
  5273  080F                     	;# 
  5274  0810                     	;# 
  5275  0810                     	;# 
  5276  0811                     	;# 
  5277  0812                     	;# 
  5278  0812                     	;# 
  5279  0813                     	;# 
  5280  0814                     	;# 
  5281  0815                     	;# 
  5282  0816                     	;# 
  5283  0817                     	;# 
  5284  0818                     	;# 
  5285  0819                     	;# 
  5286  081A                     	;# 
  5287  081A                     	;# 
  5288  081B                     	;# 
  5289  081C                     	;# 
  5290  081C                     	;# 
  5291  081D                     	;# 
  5292  088C                     	;# 
  5293  088D                     	;# 
  5294  088E                     	;# 
  5295  088F                     	;# 
  5296  088F                     	;# 
  5297  0890                     	;# 
  5298  0891                     	;# 
  5299  0892                     	;# 
  5300  0893                     	;# 
  5301  0893                     	;# 
  5302  0894                     	;# 
  5303  0895                     	;# 
  5304  0896                     	;# 
  5305  0897                     	;# 
  5306  0897                     	;# 
  5307  0898                     	;# 
  5308  0899                     	;# 
  5309  0D8C                     	;# 
  5310  0D8C                     	;# 
  5311  0D8D                     	;# 
  5312  0D8E                     	;# 
  5313  0D8F                     	;# 
  5314  0D8F                     	;# 
  5315  0D90                     	;# 
  5316  0D91                     	;# 
  5317  0D92                     	;# 
  5318  0D92                     	;# 
  5319  0D93                     	;# 
  5320  0D94                     	;# 
  5321  0D95                     	;# 
  5322  0D95                     	;# 
  5323  0D96                     	;# 
  5324  0D97                     	;# 
  5325  0D98                     	;# 
  5326  0D99                     	;# 
  5327  0D9A                     	;# 
  5328  0D9B                     	;# 
  5329  0D9C                     	;# 
  5330  0D9D                     	;# 
  5331  0D9E                     	;# 
  5332  0D9E                     	;# 
  5333  0D9F                     	;# 
  5334  0DA0                     	;# 
  5335  0DA1                     	;# 
  5336  0DA1                     	;# 
  5337  0DA2                     	;# 
  5338  0DA3                     	;# 
  5339  0DA4                     	;# 
  5340  0DA4                     	;# 
  5341  0DA5                     	;# 
  5342  0DA6                     	;# 
  5343  0DA7                     	;# 
  5344  0DA7                     	;# 
  5345  0DA8                     	;# 
  5346  0DA9                     	;# 
  5347  0DAA                     	;# 
  5348  0DAB                     	;# 
  5349  0DAC                     	;# 
  5350  0DAD                     	;# 
  5351  0DAE                     	;# 
  5352  0DAF                     	;# 
  5353  0E0F                     	;# 
  5354  0E10                     	;# 
  5355  0E11                     	;# 
  5356  0E12                     	;# 
  5357  0E13                     	;# 
  5358  0E14                     	;# 
  5359  0E15                     	;# 
  5360  0E16                     	;# 
  5361  0E17                     	;# 
  5362  0E18                     	;# 
  5363  0E19                     	;# 
  5364  0E1A                     	;# 
  5365  0E1B                     	;# 
  5366  0E1C                     	;# 
  5367  0E1D                     	;# 
  5368  0E1E                     	;# 
  5369  0E1F                     	;# 
  5370  0E20                     	;# 
  5371  0E21                     	;# 
  5372  0E22                     	;# 
  5373  0E23                     	;# 
  5374  0E24                     	;# 
  5375  0E25                     	;# 
  5376  0E26                     	;# 
  5377  0E27                     	;# 
  5378  0E28                     	;# 
  5379  0E29                     	;# 
  5380  0E2A                     	;# 
  5381  0E2B                     	;# 
  5382  0E2C                     	;# 
  5383  0E2D                     	;# 
  5384  0E2E                     	;# 
  5385  0E90                     	;# 
  5386  0E91                     	;# 
  5387  0E92                     	;# 
  5388  0E94                     	;# 
  5389  0E95                     	;# 
  5390  0E9C                     	;# 
  5391  0E9D                     	;# 
  5392  0E9E                     	;# 
  5393  0E9F                     	;# 
  5394  0EA0                     	;# 
  5395  0EA1                     	;# 
  5396  0EA2                     	;# 
  5397  0EA3                     	;# 
  5398  0EA4                     	;# 
  5399  0EA5                     	;# 
  5400  0EA6                     	;# 
  5401  0EA7                     	;# 
  5402  0F0F                     	;# 
  5403  0F10                     	;# 
  5404  0F11                     	;# 
  5405  0F12                     	;# 
  5406  0F13                     	;# 
  5407  0F14                     	;# 
  5408  0F15                     	;# 
  5409  0F16                     	;# 
  5410  0F17                     	;# 
  5411  0F18                     	;# 
  5412  0F19                     	;# 
  5413  0F1A                     	;# 
  5414  0F1B                     	;# 
  5415  0F1C                     	;# 
  5416  0F1D                     	;# 
  5417  0F1E                     	;# 
  5418  0F1F                     	;# 
  5419  0F20                     	;# 
  5420  0F21                     	;# 
  5421  0F22                     	;# 
  5422  0F23                     	;# 
  5423  0F24                     	;# 
  5424  0F25                     	;# 
  5425  0F26                     	;# 
  5426  0F27                     	;# 
  5427  0F28                     	;# 
  5428  0F29                     	;# 
  5429  0F2A                     	;# 
  5430  0F2B                     	;# 
  5431  0F2C                     	;# 
  5432  0F2D                     	;# 
  5433  0F2E                     	;# 
  5434  0F2F                     	;# 
  5435  0F30                     	;# 
  5436  0F31                     	;# 
  5437  0F32                     	;# 
  5438  0F33                     	;# 
  5439  0F34                     	;# 
  5440  0F35                     	;# 
  5441  0F36                     	;# 
  5442  0F37                     	;# 
  5443  0FE4                     	;# 
  5444  0FE5                     	;# 
  5445  0FE6                     	;# 
  5446  0FE7                     	;# 
  5447  0FE8                     	;# 
  5448  0FE9                     	;# 
  5449  0FEA                     	;# 
  5450  0FEB                     	;# 
  5451  0FED                     	;# 
  5452  0FEE                     	;# 
  5453  0FEF                     	;# 
  5454  0000                     	;# 
  5455  0001                     	;# 
  5456  0002                     	;# 
  5457  0003                     	;# 
  5458  0004                     	;# 
  5459  0005                     	;# 
  5460  0006                     	;# 
  5461  0007                     	;# 
  5462  0008                     	;# 
  5463  0009                     	;# 
  5464  000A                     	;# 
  5465  000B                     	;# 
  5466  000C                     	;# 
  5467  000D                     	;# 
  5468  000E                     	;# 
  5469  0010                     	;# 
  5470  0011                     	;# 
  5471  0012                     	;# 
  5472  0013                     	;# 
  5473  0014                     	;# 
  5474  0015                     	;# 
  5475  0016                     	;# 
  5476  0016                     	;# 
  5477  0017                     	;# 
  5478  0018                     	;# 
  5479  0019                     	;# 
  5480  001A                     	;# 
  5481  001A                     	;# 
  5482  001B                     	;# 
  5483  001B                     	;# 
  5484  001C                     	;# 
  5485  001D                     	;# 
  5486  001E                     	;# 
  5487  001F                     	;# 
  5488  008C                     	;# 
  5489  008D                     	;# 
  5490  008E                     	;# 
  5491  0090                     	;# 
  5492  0091                     	;# 
  5493  0092                     	;# 
  5494  0093                     	;# 
  5495  0094                     	;# 
  5496  0095                     	;# 
  5497  0096                     	;# 
  5498  0098                     	;# 
  5499  0099                     	;# 
  5500  009A                     	;# 
  5501  009B                     	;# 
  5502  009B                     	;# 
  5503  009C                     	;# 
  5504  009D                     	;# 
  5505  009E                     	;# 
  5506  009F                     	;# 
  5507  010C                     	;# 
  5508  010D                     	;# 
  5509  010E                     	;# 
  5510  0111                     	;# 
  5511  0112                     	;# 
  5512  0113                     	;# 
  5513  0114                     	;# 
  5514  0115                     	;# 
  5515  0116                     	;# 
  5516  0117                     	;# 
  5517  0118                     	;# 
  5518  0119                     	;# 
  5519  011C                     	;# 
  5520  018C                     	;# 
  5521  018D                     	;# 
  5522  018E                     	;# 
  5523  0191                     	;# 
  5524  0191                     	;# 
  5525  0192                     	;# 
  5526  0193                     	;# 
  5527  0193                     	;# 
  5528  0194                     	;# 
  5529  0195                     	;# 
  5530  0196                     	;# 
  5531  0197                     	;# 
  5532  0199                     	;# 
  5533  0199                     	;# 
  5534  0199                     	;# 
  5535  019A                     	;# 
  5536  019A                     	;# 
  5537  019A                     	;# 
  5538  019B                     	;# 
  5539  019B                     	;# 
  5540  019B                     	;# 
  5541  019B                     	;# 
  5542  019B                     	;# 
  5543  019C                     	;# 
  5544  019C                     	;# 
  5545  019C                     	;# 
  5546  019D                     	;# 
  5547  019D                     	;# 
  5548  019D                     	;# 
  5549  019E                     	;# 
  5550  019E                     	;# 
  5551  019E                     	;# 
  5552  019F                     	;# 
  5553  019F                     	;# 
  5554  019F                     	;# 
  5555  019F                     	;# 
  5556  019F                     	;# 
  5557  020C                     	;# 
  5558  020D                     	;# 
  5559  020E                     	;# 
  5560  0211                     	;# 
  5561  0211                     	;# 
  5562  0212                     	;# 
  5563  0212                     	;# 
  5564  0213                     	;# 
  5565  0213                     	;# 
  5566  0214                     	;# 
  5567  0214                     	;# 
  5568  0215                     	;# 
  5569  0215                     	;# 
  5570  0215                     	;# 
  5571  0215                     	;# 
  5572  0216                     	;# 
  5573  0216                     	;# 
  5574  0217                     	;# 
  5575  0217                     	;# 
  5576  028C                     	;# 
  5577  028D                     	;# 
  5578  028E                     	;# 
  5579  0291                     	;# 
  5580  0291                     	;# 
  5581  0292                     	;# 
  5582  0293                     	;# 
  5583  0294                     	;# 
  5584  0298                     	;# 
  5585  0298                     	;# 
  5586  0299                     	;# 
  5587  029A                     	;# 
  5588  029B                     	;# 
  5589  029E                     	;# 
  5590  030C                     	;# 
  5591  030D                     	;# 
  5592  030E                     	;# 
  5593  038C                     	;# 
  5594  038D                     	;# 
  5595  038E                     	;# 
  5596  0391                     	;# 
  5597  0392                     	;# 
  5598  0393                     	;# 
  5599  0394                     	;# 
  5600  0395                     	;# 
  5601  0396                     	;# 
  5602  0397                     	;# 
  5603  0398                     	;# 
  5604  0399                     	;# 
  5605  040E                     	;# 
  5606  0413                     	;# 
  5607  0413                     	;# 
  5608  0414                     	;# 
  5609  0414                     	;# 
  5610  0415                     	;# 
  5611  0416                     	;# 
  5612  0417                     	;# 
  5613  0418                     	;# 
  5614  041A                     	;# 
  5615  041A                     	;# 
  5616  041B                     	;# 
  5617  041B                     	;# 
  5618  041C                     	;# 
  5619  041D                     	;# 
  5620  041E                     	;# 
  5621  041F                     	;# 
  5622  0493                     	;# 
  5623  0494                     	;# 
  5624  0495                     	;# 
  5625  0496                     	;# 
  5626  049A                     	;# 
  5627  049B                     	;# 
  5628  049C                     	;# 
  5629  049D                     	;# 
  5630  058C                     	;# 
  5631  058C                     	;# 
  5632  058D                     	;# 
  5633  058E                     	;# 
  5634  058E                     	;# 
  5635  058F                     	;# 
  5636  0590                     	;# 
  5637  0590                     	;# 
  5638  0591                     	;# 
  5639  0592                     	;# 
  5640  0592                     	;# 
  5641  0593                     	;# 
  5642  0594                     	;# 
  5643  0594                     	;# 
  5644  0595                     	;# 
  5645  0596                     	;# 
  5646  0596                     	;# 
  5647  0597                     	;# 
  5648  0598                     	;# 
  5649  0599                     	;# 
  5650  059A                     	;# 
  5651  059B                     	;# 
  5652  059B                     	;# 
  5653  059C                     	;# 
  5654  059D                     	;# 
  5655  060C                     	;# 
  5656  060C                     	;# 
  5657  060D                     	;# 
  5658  060E                     	;# 
  5659  060F                     	;# 
  5660  060F                     	;# 
  5661  0610                     	;# 
  5662  0611                     	;# 
  5663  0612                     	;# 
  5664  0613                     	;# 
  5665  0614                     	;# 
  5666  0617                     	;# 
  5667  0618                     	;# 
  5668  0619                     	;# 
  5669  061A                     	;# 
  5670  061B                     	;# 
  5671  061C                     	;# 
  5672  0691                     	;# 
  5673  0692                     	;# 
  5674  0693                     	;# 
  5675  0694                     	;# 
  5676  0695                     	;# 
  5677  0696                     	;# 
  5678  0697                     	;# 
  5679  0699                     	;# 
  5680  069A                     	;# 
  5681  0711                     	;# 
  5682  0712                     	;# 
  5683  0713                     	;# 
  5684  0714                     	;# 
  5685  0715                     	;# 
  5686  0718                     	;# 
  5687  0718                     	;# 
  5688  0719                     	;# 
  5689  071A                     	;# 
  5690  071A                     	;# 
  5691  071B                     	;# 
  5692  071C                     	;# 
  5693  071D                     	;# 
  5694  0791                     	;# 
  5695  0791                     	;# 
  5696  0792                     	;# 
  5697  0793                     	;# 
  5698  0793                     	;# 
  5699  0794                     	;# 
  5700  0795                     	;# 
  5701  0795                     	;# 
  5702  0796                     	;# 
  5703  0797                     	;# 
  5704  0797                     	;# 
  5705  0798                     	;# 
  5706  0799                     	;# 
  5707  079A                     	;# 
  5708  080C                     	;# 
  5709  080C                     	;# 
  5710  080D                     	;# 
  5711  080E                     	;# 
  5712  080E                     	;# 
  5713  080F                     	;# 
  5714  0810                     	;# 
  5715  0810                     	;# 
  5716  0811                     	;# 
  5717  0812                     	;# 
  5718  0812                     	;# 
  5719  0813                     	;# 
  5720  0814                     	;# 
  5721  0815                     	;# 
  5722  0816                     	;# 
  5723  0817                     	;# 
  5724  0818                     	;# 
  5725  0819                     	;# 
  5726  081A                     	;# 
  5727  081A                     	;# 
  5728  081B                     	;# 
  5729  081C                     	;# 
  5730  081C                     	;# 
  5731  081D                     	;# 
  5732  088C                     	;# 
  5733  088D                     	;# 
  5734  088E                     	;# 
  5735  088F                     	;# 
  5736  088F                     	;# 
  5737  0890                     	;# 
  5738  0891                     	;# 
  5739  0892                     	;# 
  5740  0893                     	;# 
  5741  0893                     	;# 
  5742  0894                     	;# 
  5743  0895                     	;# 
  5744  0896                     	;# 
  5745  0897                     	;# 
  5746  0897                     	;# 
  5747  0898                     	;# 
  5748  0899                     	;# 
  5749  0D8C                     	;# 
  5750  0D8C                     	;# 
  5751  0D8D                     	;# 
  5752  0D8E                     	;# 
  5753  0D8F                     	;# 
  5754  0D8F                     	;# 
  5755  0D90                     	;# 
  5756  0D91                     	;# 
  5757  0D92                     	;# 
  5758  0D92                     	;# 
  5759  0D93                     	;# 
  5760  0D94                     	;# 
  5761  0D95                     	;# 
  5762  0D95                     	;# 
  5763  0D96                     	;# 
  5764  0D97                     	;# 
  5765  0D98                     	;# 
  5766  0D99                     	;# 
  5767  0D9A                     	;# 
  5768  0D9B                     	;# 
  5769  0D9C                     	;# 
  5770  0D9D                     	;# 
  5771  0D9E                     	;# 
  5772  0D9E                     	;# 
  5773  0D9F                     	;# 
  5774  0DA0                     	;# 
  5775  0DA1                     	;# 
  5776  0DA1                     	;# 
  5777  0DA2                     	;# 
  5778  0DA3                     	;# 
  5779  0DA4                     	;# 
  5780  0DA4                     	;# 
  5781  0DA5                     	;# 
  5782  0DA6                     	;# 
  5783  0DA7                     	;# 
  5784  0DA7                     	;# 
  5785  0DA8                     	;# 
  5786  0DA9                     	;# 
  5787  0DAA                     	;# 
  5788  0DAB                     	;# 
  5789  0DAC                     	;# 
  5790  0DAD                     	;# 
  5791  0DAE                     	;# 
  5792  0DAF                     	;# 
  5793  0E0F                     	;# 
  5794  0E10                     	;# 
  5795  0E11                     	;# 
  5796  0E12                     	;# 
  5797  0E13                     	;# 
  5798  0E14                     	;# 
  5799  0E15                     	;# 
  5800  0E16                     	;# 
  5801  0E17                     	;# 
  5802  0E18                     	;# 
  5803  0E19                     	;# 
  5804  0E1A                     	;# 
  5805  0E1B                     	;# 
  5806  0E1C                     	;# 
  5807  0E1D                     	;# 
  5808  0E1E                     	;# 
  5809  0E1F                     	;# 
  5810  0E20                     	;# 
  5811  0E21                     	;# 
  5812  0E22                     	;# 
  5813  0E23                     	;# 
  5814  0E24                     	;# 
  5815  0E25                     	;# 
  5816  0E26                     	;# 
  5817  0E27                     	;# 
  5818  0E28                     	;# 
  5819  0E29                     	;# 
  5820  0E2A                     	;# 
  5821  0E2B                     	;# 
  5822  0E2C                     	;# 
  5823  0E2D                     	;# 
  5824  0E2E                     	;# 
  5825  0E90                     	;# 
  5826  0E91                     	;# 
  5827  0E92                     	;# 
  5828  0E94                     	;# 
  5829  0E95                     	;# 
  5830  0E9C                     	;# 
  5831  0E9D                     	;# 
  5832  0E9E                     	;# 
  5833  0E9F                     	;# 
  5834  0EA0                     	;# 
  5835  0EA1                     	;# 
  5836  0EA2                     	;# 
  5837  0EA3                     	;# 
  5838  0EA4                     	;# 
  5839  0EA5                     	;# 
  5840  0EA6                     	;# 
  5841  0EA7                     	;# 
  5842  0F0F                     	;# 
  5843  0F10                     	;# 
  5844  0F11                     	;# 
  5845  0F12                     	;# 
  5846  0F13                     	;# 
  5847  0F14                     	;# 
  5848  0F15                     	;# 
  5849  0F16                     	;# 
  5850  0F17                     	;# 
  5851  0F18                     	;# 
  5852  0F19                     	;# 
  5853  0F1A                     	;# 
  5854  0F1B                     	;# 
  5855  0F1C                     	;# 
  5856  0F1D                     	;# 
  5857  0F1E                     	;# 
  5858  0F1F                     	;# 
  5859  0F20                     	;# 
  5860  0F21                     	;# 
  5861  0F22                     	;# 
  5862  0F23                     	;# 
  5863  0F24                     	;# 
  5864  0F25                     	;# 
  5865  0F26                     	;# 
  5866  0F27                     	;# 
  5867  0F28                     	;# 
  5868  0F29                     	;# 
  5869  0F2A                     	;# 
  5870  0F2B                     	;# 
  5871  0F2C                     	;# 
  5872  0F2D                     	;# 
  5873  0F2E                     	;# 
  5874  0F2F                     	;# 
  5875  0F30                     	;# 
  5876  0F31                     	;# 
  5877  0F32                     	;# 
  5878  0F33                     	;# 
  5879  0F34                     	;# 
  5880  0F35                     	;# 
  5881  0F36                     	;# 
  5882  0F37                     	;# 
  5883  0FE4                     	;# 
  5884  0FE5                     	;# 
  5885  0FE6                     	;# 
  5886  0FE7                     	;# 
  5887  0FE8                     	;# 
  5888  0FE9                     	;# 
  5889  0FEA                     	;# 
  5890  0FEB                     	;# 
  5891  0FED                     	;# 
  5892  0FEE                     	;# 
  5893  0FEF                     	;# 
  5894  0000                     	;# 
  5895  0001                     	;# 
  5896  0002                     	;# 
  5897  0003                     	;# 
  5898  0004                     	;# 
  5899  0005                     	;# 
  5900  0006                     	;# 
  5901  0007                     	;# 
  5902  0008                     	;# 
  5903  0009                     	;# 
  5904  000A                     	;# 
  5905  000B                     	;# 
  5906  000C                     	;# 
  5907  000D                     	;# 
  5908  000E                     	;# 
  5909  0010                     	;# 
  5910  0011                     	;# 
  5911  0012                     	;# 
  5912  0013                     	;# 
  5913  0014                     	;# 
  5914  0015                     	;# 
  5915  0016                     	;# 
  5916  0016                     	;# 
  5917  0017                     	;# 
  5918  0018                     	;# 
  5919  0019                     	;# 
  5920  001A                     	;# 
  5921  001A                     	;# 
  5922  001B                     	;# 
  5923  001B                     	;# 
  5924  001C                     	;# 
  5925  001D                     	;# 
  5926  001E                     	;# 
  5927  001F                     	;# 
  5928  008C                     	;# 
  5929  008D                     	;# 
  5930  008E                     	;# 
  5931  0090                     	;# 
  5932  0091                     	;# 
  5933  0092                     	;# 
  5934  0093                     	;# 
  5935  0094                     	;# 
  5936  0095                     	;# 
  5937  0096                     	;# 
  5938  0098                     	;# 
  5939  0099                     	;# 
  5940  009A                     	;# 
  5941  009B                     	;# 
  5942  009B                     	;# 
  5943  009C                     	;# 
  5944  009D                     	;# 
  5945  009E                     	;# 
  5946  009F                     	;# 
  5947  010C                     	;# 
  5948  010D                     	;# 
  5949  010E                     	;# 
  5950  0111                     	;# 
  5951  0112                     	;# 
  5952  0113                     	;# 
  5953  0114                     	;# 
  5954  0115                     	;# 
  5955  0116                     	;# 
  5956  0117                     	;# 
  5957  0118                     	;# 
  5958  0119                     	;# 
  5959  011C                     	;# 
  5960  018C                     	;# 
  5961  018D                     	;# 
  5962  018E                     	;# 
  5963  0191                     	;# 
  5964  0191                     	;# 
  5965  0192                     	;# 
  5966  0193                     	;# 
  5967  0193                     	;# 
  5968  0194                     	;# 
  5969  0195                     	;# 
  5970  0196                     	;# 
  5971  0197                     	;# 
  5972  0199                     	;# 
  5973  0199                     	;# 
  5974  0199                     	;# 
  5975  019A                     	;# 
  5976  019A                     	;# 
  5977  019A                     	;# 
  5978  019B                     	;# 
  5979  019B                     	;# 
  5980  019B                     	;# 
  5981  019B                     	;# 
  5982  019B                     	;# 
  5983  019C                     	;# 
  5984  019C                     	;# 
  5985  019C                     	;# 
  5986  019D                     	;# 
  5987  019D                     	;# 
  5988  019D                     	;# 
  5989  019E                     	;# 
  5990  019E                     	;# 
  5991  019E                     	;# 
  5992  019F                     	;# 
  5993  019F                     	;# 
  5994  019F                     	;# 
  5995  019F                     	;# 
  5996  019F                     	;# 
  5997  020C                     	;# 
  5998  020D                     	;# 
  5999  020E                     	;# 
  6000  0211                     	;# 
  6001  0211                     	;# 
  6002  0212                     	;# 
  6003  0212                     	;# 
  6004  0213                     	;# 
  6005  0213                     	;# 
  6006  0214                     	;# 
  6007  0214                     	;# 
  6008  0215                     	;# 
  6009  0215                     	;# 
  6010  0215                     	;# 
  6011  0215                     	;# 
  6012  0216                     	;# 
  6013  0216                     	;# 
  6014  0217                     	;# 
  6015  0217                     	;# 
  6016  028C                     	;# 
  6017  028D                     	;# 
  6018  028E                     	;# 
  6019  0291                     	;# 
  6020  0291                     	;# 
  6021  0292                     	;# 
  6022  0293                     	;# 
  6023  0294                     	;# 
  6024  0298                     	;# 
  6025  0298                     	;# 
  6026  0299                     	;# 
  6027  029A                     	;# 
  6028  029B                     	;# 
  6029  029E                     	;# 
  6030  030C                     	;# 
  6031  030D                     	;# 
  6032  030E                     	;# 
  6033  038C                     	;# 
  6034  038D                     	;# 
  6035  038E                     	;# 
  6036  0391                     	;# 
  6037  0392                     	;# 
  6038  0393                     	;# 
  6039  0394                     	;# 
  6040  0395                     	;# 
  6041  0396                     	;# 
  6042  0397                     	;# 
  6043  0398                     	;# 
  6044  0399                     	;# 
  6045  040E                     	;# 
  6046  0413                     	;# 
  6047  0413                     	;# 
  6048  0414                     	;# 
  6049  0414                     	;# 
  6050  0415                     	;# 
  6051  0416                     	;# 
  6052  0417                     	;# 
  6053  0418                     	;# 
  6054  041A                     	;# 
  6055  041A                     	;# 
  6056  041B                     	;# 
  6057  041B                     	;# 
  6058  041C                     	;# 
  6059  041D                     	;# 
  6060  041E                     	;# 
  6061  041F                     	;# 
  6062  0493                     	;# 
  6063  0494                     	;# 
  6064  0495                     	;# 
  6065  0496                     	;# 
  6066  049A                     	;# 
  6067  049B                     	;# 
  6068  049C                     	;# 
  6069  049D                     	;# 
  6070  058C                     	;# 
  6071  058C                     	;# 
  6072  058D                     	;# 
  6073  058E                     	;# 
  6074  058E                     	;# 
  6075  058F                     	;# 
  6076  0590                     	;# 
  6077  0590                     	;# 
  6078  0591                     	;# 
  6079  0592                     	;# 
  6080  0592                     	;# 
  6081  0593                     	;# 
  6082  0594                     	;# 
  6083  0594                     	;# 
  6084  0595                     	;# 
  6085  0596                     	;# 
  6086  0596                     	;# 
  6087  0597                     	;# 
  6088  0598                     	;# 
  6089  0599                     	;# 
  6090  059A                     	;# 
  6091  059B                     	;# 
  6092  059B                     	;# 
  6093  059C                     	;# 
  6094  059D                     	;# 
  6095  060C                     	;# 
  6096  060C                     	;# 
  6097  060D                     	;# 
  6098  060E                     	;# 
  6099  060F                     	;# 
  6100  060F                     	;# 
  6101  0610                     	;# 
  6102  0611                     	;# 
  6103  0612                     	;# 
  6104  0613                     	;# 
  6105  0614                     	;# 
  6106  0617                     	;# 
  6107  0618                     	;# 
  6108  0619                     	;# 
  6109  061A                     	;# 
  6110  061B                     	;# 
  6111  061C                     	;# 
  6112  0691                     	;# 
  6113  0692                     	;# 
  6114  0693                     	;# 
  6115  0694                     	;# 
  6116  0695                     	;# 
  6117  0696                     	;# 
  6118  0697                     	;# 
  6119  0699                     	;# 
  6120  069A                     	;# 
  6121  0711                     	;# 
  6122  0712                     	;# 
  6123  0713                     	;# 
  6124  0714                     	;# 
  6125  0715                     	;# 
  6126  0718                     	;# 
  6127  0718                     	;# 
  6128  0719                     	;# 
  6129  071A                     	;# 
  6130  071A                     	;# 
  6131  071B                     	;# 
  6132  071C                     	;# 
  6133  071D                     	;# 
  6134  0791                     	;# 
  6135  0791                     	;# 
  6136  0792                     	;# 
  6137  0793                     	;# 
  6138  0793                     	;# 
  6139  0794                     	;# 
  6140  0795                     	;# 
  6141  0795                     	;# 
  6142  0796                     	;# 
  6143  0797                     	;# 
  6144  0797                     	;# 
  6145  0798                     	;# 
  6146  0799                     	;# 
  6147  079A                     	;# 
  6148  080C                     	;# 
  6149  080C                     	;# 
  6150  080D                     	;# 
  6151  080E                     	;# 
  6152  080E                     	;# 
  6153  080F                     	;# 
  6154  0810                     	;# 
  6155  0810                     	;# 
  6156  0811                     	;# 
  6157  0812                     	;# 
  6158  0812                     	;# 
  6159  0813                     	;# 
  6160  0814                     	;# 
  6161  0815                     	;# 
  6162  0816                     	;# 
  6163  0817                     	;# 
  6164  0818                     	;# 
  6165  0819                     	;# 
  6166  081A                     	;# 
  6167  081A                     	;# 
  6168  081B                     	;# 
  6169  081C                     	;# 
  6170  081C                     	;# 
  6171  081D                     	;# 
  6172  088C                     	;# 
  6173  088D                     	;# 
  6174  088E                     	;# 
  6175  088F                     	;# 
  6176  088F                     	;# 
  6177  0890                     	;# 
  6178  0891                     	;# 
  6179  0892                     	;# 
  6180  0893                     	;# 
  6181  0893                     	;# 
  6182  0894                     	;# 
  6183  0895                     	;# 
  6184  0896                     	;# 
  6185  0897                     	;# 
  6186  0897                     	;# 
  6187  0898                     	;# 
  6188  0899                     	;# 
  6189  0D8C                     	;# 
  6190  0D8C                     	;# 
  6191  0D8D                     	;# 
  6192  0D8E                     	;# 
  6193  0D8F                     	;# 
  6194  0D8F                     	;# 
  6195  0D90                     	;# 
  6196  0D91                     	;# 
  6197  0D92                     	;# 
  6198  0D92                     	;# 
  6199  0D93                     	;# 
  6200  0D94                     	;# 
  6201  0D95                     	;# 
  6202  0D95                     	;# 
  6203  0D96                     	;# 
  6204  0D97                     	;# 
  6205  0D98                     	;# 
  6206  0D99                     	;# 
  6207  0D9A                     	;# 
  6208  0D9B                     	;# 
  6209  0D9C                     	;# 
  6210  0D9D                     	;# 
  6211  0D9E                     	;# 
  6212  0D9E                     	;# 
  6213  0D9F                     	;# 
  6214  0DA0                     	;# 
  6215  0DA1                     	;# 
  6216  0DA1                     	;# 
  6217  0DA2                     	;# 
  6218  0DA3                     	;# 
  6219  0DA4                     	;# 
  6220  0DA4                     	;# 
  6221  0DA5                     	;# 
  6222  0DA6                     	;# 
  6223  0DA7                     	;# 
  6224  0DA7                     	;# 
  6225  0DA8                     	;# 
  6226  0DA9                     	;# 
  6227  0DAA                     	;# 
  6228  0DAB                     	;# 
  6229  0DAC                     	;# 
  6230  0DAD                     	;# 
  6231  0DAE                     	;# 
  6232  0DAF                     	;# 
  6233  0E0F                     	;# 
  6234  0E10                     	;# 
  6235  0E11                     	;# 
  6236  0E12                     	;# 
  6237  0E13                     	;# 
  6238  0E14                     	;# 
  6239  0E15                     	;# 
  6240  0E16                     	;# 
  6241  0E17                     	;# 
  6242  0E18                     	;# 
  6243  0E19                     	;# 
  6244  0E1A                     	;# 
  6245  0E1B                     	;# 
  6246  0E1C                     	;# 
  6247  0E1D                     	;# 
  6248  0E1E                     	;# 
  6249  0E1F                     	;# 
  6250  0E20                     	;# 
  6251  0E21                     	;# 
  6252  0E22                     	;# 
  6253  0E23                     	;# 
  6254  0E24                     	;# 
  6255  0E25                     	;# 
  6256  0E26                     	;# 
  6257  0E27                     	;# 
  6258  0E28                     	;# 
  6259  0E29                     	;# 
  6260  0E2A                     	;# 
  6261  0E2B                     	;# 
  6262  0E2C                     	;# 
  6263  0E2D                     	;# 
  6264  0E2E                     	;# 
  6265  0E90                     	;# 
  6266  0E91                     	;# 
  6267  0E92                     	;# 
  6268  0E94                     	;# 
  6269  0E95                     	;# 
  6270  0E9C                     	;# 
  6271  0E9D                     	;# 
  6272  0E9E                     	;# 
  6273  0E9F                     	;# 
  6274  0EA0                     	;# 
  6275  0EA1                     	;# 
  6276  0EA2                     	;# 
  6277  0EA3                     	;# 
  6278  0EA4                     	;# 
  6279  0EA5                     	;# 
  6280  0EA6                     	;# 
  6281  0EA7                     	;# 
  6282  0F0F                     	;# 
  6283  0F10                     	;# 
  6284  0F11                     	;# 
  6285  0F12                     	;# 
  6286  0F13                     	;# 
  6287  0F14                     	;# 
  6288  0F15                     	;# 
  6289  0F16                     	;# 
  6290  0F17                     	;# 
  6291  0F18                     	;# 
  6292  0F19                     	;# 
  6293  0F1A                     	;# 
  6294  0F1B                     	;# 
  6295  0F1C                     	;# 
  6296  0F1D                     	;# 
  6297  0F1E                     	;# 
  6298  0F1F                     	;# 
  6299  0F20                     	;# 
  6300  0F21                     	;# 
  6301  0F22                     	;# 
  6302  0F23                     	;# 
  6303  0F24                     	;# 
  6304  0F25                     	;# 
  6305  0F26                     	;# 
  6306  0F27                     	;# 
  6307  0F28                     	;# 
  6308  0F29                     	;# 
  6309  0F2A                     	;# 
  6310  0F2B                     	;# 
  6311  0F2C                     	;# 
  6312  0F2D                     	;# 
  6313  0F2E                     	;# 
  6314  0F2F                     	;# 
  6315  0F30                     	;# 
  6316  0F31                     	;# 
  6317  0F32                     	;# 
  6318  0F33                     	;# 
  6319  0F34                     	;# 
  6320  0F35                     	;# 
  6321  0F36                     	;# 
  6322  0F37                     	;# 
  6323  0FE4                     	;# 
  6324  0FE5                     	;# 
  6325  0FE6                     	;# 
  6326  0FE7                     	;# 
  6327  0FE8                     	;# 
  6328  0FE9                     	;# 
  6329  0FEA                     	;# 
  6330  0FEB                     	;# 
  6331  0FED                     	;# 
  6332  0FEE                     	;# 
  6333  0FEF                     	;# 
  6334  0000                     	;# 
  6335  0001                     	;# 
  6336  0002                     	;# 
  6337  0003                     	;# 
  6338  0004                     	;# 
  6339  0005                     	;# 
  6340  0006                     	;# 
  6341  0007                     	;# 
  6342  0008                     	;# 
  6343  0009                     	;# 
  6344  000A                     	;# 
  6345  000B                     	;# 
  6346  000C                     	;# 
  6347  000D                     	;# 
  6348  000E                     	;# 
  6349  0010                     	;# 
  6350  0011                     	;# 
  6351  0012                     	;# 
  6352  0013                     	;# 
  6353  0014                     	;# 
  6354  0015                     	;# 
  6355  0016                     	;# 
  6356  0016                     	;# 
  6357  0017                     	;# 
  6358  0018                     	;# 
  6359  0019                     	;# 
  6360  001A                     	;# 
  6361  001A                     	;# 
  6362  001B                     	;# 
  6363  001B                     	;# 
  6364  001C                     	;# 
  6365  001D                     	;# 
  6366  001E                     	;# 
  6367  001F                     	;# 
  6368  008C                     	;# 
  6369  008D                     	;# 
  6370  008E                     	;# 
  6371  0090                     	;# 
  6372  0091                     	;# 
  6373  0092                     	;# 
  6374  0093                     	;# 
  6375  0094                     	;# 
  6376  0095                     	;# 
  6377  0096                     	;# 
  6378  0098                     	;# 
  6379  0099                     	;# 
  6380  009A                     	;# 
  6381  009B                     	;# 
  6382  009B                     	;# 
  6383  009C                     	;# 
  6384  009D                     	;# 
  6385  009E                     	;# 
  6386  009F                     	;# 
  6387  010C                     	;# 
  6388  010D                     	;# 
  6389  010E                     	;# 
  6390  0111                     	;# 
  6391  0112                     	;# 
  6392  0113                     	;# 
  6393  0114                     	;# 
  6394  0115                     	;# 
  6395  0116                     	;# 
  6396  0117                     	;# 
  6397  0118                     	;# 
  6398  0119                     	;# 
  6399  011C                     	;# 
  6400  018C                     	;# 
  6401  018D                     	;# 
  6402  018E                     	;# 
  6403  0191                     	;# 
  6404  0191                     	;# 
  6405  0192                     	;# 
  6406  0193                     	;# 
  6407  0193                     	;# 
  6408  0194                     	;# 
  6409  0195                     	;# 
  6410  0196                     	;# 
  6411  0197                     	;# 
  6412  0199                     	;# 
  6413  0199                     	;# 
  6414  0199                     	;# 
  6415  019A                     	;# 
  6416  019A                     	;# 
  6417  019A                     	;# 
  6418  019B                     	;# 
  6419  019B                     	;# 
  6420  019B                     	;# 
  6421  019B                     	;# 
  6422  019B                     	;# 
  6423  019C                     	;# 
  6424  019C                     	;# 
  6425  019C                     	;# 
  6426  019D                     	;# 
  6427  019D                     	;# 
  6428  019D                     	;# 
  6429  019E                     	;# 
  6430  019E                     	;# 
  6431  019E                     	;# 
  6432  019F                     	;# 
  6433  019F                     	;# 
  6434  019F                     	;# 
  6435  019F                     	;# 
  6436  019F                     	;# 
  6437  020C                     	;# 
  6438  020D                     	;# 
  6439  020E                     	;# 
  6440  0211                     	;# 
  6441  0211                     	;# 
  6442  0212                     	;# 
  6443  0212                     	;# 
  6444  0213                     	;# 
  6445  0213                     	;# 
  6446  0214                     	;# 
  6447  0214                     	;# 
  6448  0215                     	;# 
  6449  0215                     	;# 
  6450  0215                     	;# 
  6451  0215                     	;# 
  6452  0216                     	;# 
  6453  0216                     	;# 
  6454  0217                     	;# 
  6455  0217                     	;# 
  6456  028C                     	;# 
  6457  028D                     	;# 
  6458  028E                     	;# 
  6459  0291                     	;# 
  6460  0291                     	;# 
  6461  0292                     	;# 
  6462  0293                     	;# 
  6463  0294                     	;# 
  6464  0298                     	;# 
  6465  0298                     	;# 
  6466  0299                     	;# 
  6467  029A                     	;# 
  6468  029B                     	;# 
  6469  029E                     	;# 
  6470  030C                     	;# 
  6471  030D                     	;# 
  6472  030E                     	;# 
  6473  038C                     	;# 
  6474  038D                     	;# 
  6475  038E                     	;# 
  6476  0391                     	;# 
  6477  0392                     	;# 
  6478  0393                     	;# 
  6479  0394                     	;# 
  6480  0395                     	;# 
  6481  0396                     	;# 
  6482  0397                     	;# 
  6483  0398                     	;# 
  6484  0399                     	;# 
  6485  040E                     	;# 
  6486  0413                     	;# 
  6487  0413                     	;# 
  6488  0414                     	;# 
  6489  0414                     	;# 
  6490  0415                     	;# 
  6491  0416                     	;# 
  6492  0417                     	;# 
  6493  0418                     	;# 
  6494  041A                     	;# 
  6495  041A                     	;# 
  6496  041B                     	;# 
  6497  041B                     	;# 
  6498  041C                     	;# 
  6499  041D                     	;# 
  6500  041E                     	;# 
  6501  041F                     	;# 
  6502  0493                     	;# 
  6503  0494                     	;# 
  6504  0495                     	;# 
  6505  0496                     	;# 
  6506  049A                     	;# 
  6507  049B                     	;# 
  6508  049C                     	;# 
  6509  049D                     	;# 
  6510  058C                     	;# 
  6511  058C                     	;# 
  6512  058D                     	;# 
  6513  058E                     	;# 
  6514  058E                     	;# 
  6515  058F                     	;# 
  6516  0590                     	;# 
  6517  0590                     	;# 
  6518  0591                     	;# 
  6519  0592                     	;# 
  6520  0592                     	;# 
  6521  0593                     	;# 
  6522  0594                     	;# 
  6523  0594                     	;# 
  6524  0595                     	;# 
  6525  0596                     	;# 
  6526  0596                     	;# 
  6527  0597                     	;# 
  6528  0598                     	;# 
  6529  0599                     	;# 
  6530  059A                     	;# 
  6531  059B                     	;# 
  6532  059B                     	;# 
  6533  059C                     	;# 
  6534  059D                     	;# 
  6535  060C                     	;# 
  6536  060C                     	;# 
  6537  060D                     	;# 
  6538  060E                     	;# 
  6539  060F                     	;# 
  6540  060F                     	;# 
  6541  0610                     	;# 
  6542  0611                     	;# 
  6543  0612                     	;# 
  6544  0613                     	;# 
  6545  0614                     	;# 
  6546  0617                     	;# 
  6547  0618                     	;# 
  6548  0619                     	;# 
  6549  061A                     	;# 
  6550  061B                     	;# 
  6551  061C                     	;# 
  6552  0691                     	;# 
  6553  0692                     	;# 
  6554  0693                     	;# 
  6555  0694                     	;# 
  6556  0695                     	;# 
  6557  0696                     	;# 
  6558  0697                     	;# 
  6559  0699                     	;# 
  6560  069A                     	;# 
  6561  0711                     	;# 
  6562  0712                     	;# 
  6563  0713                     	;# 
  6564  0714                     	;# 
  6565  0715                     	;# 
  6566  0718                     	;# 
  6567  0718                     	;# 
  6568  0719                     	;# 
  6569  071A                     	;# 
  6570  071A                     	;# 
  6571  071B                     	;# 
  6572  071C                     	;# 
  6573  071D                     	;# 
  6574  0791                     	;# 
  6575  0791                     	;# 
  6576  0792                     	;# 
  6577  0793                     	;# 
  6578  0793                     	;# 
  6579  0794                     	;# 
  6580  0795                     	;# 
  6581  0795                     	;# 
  6582  0796                     	;# 
  6583  0797                     	;# 
  6584  0797                     	;# 
  6585  0798                     	;# 
  6586  0799                     	;# 
  6587  079A                     	;# 
  6588  080C                     	;# 
  6589  080C                     	;# 
  6590  080D                     	;# 
  6591  080E                     	;# 
  6592  080E                     	;# 
  6593  080F                     	;# 
  6594  0810                     	;# 
  6595  0810                     	;# 
  6596  0811                     	;# 
  6597  0812                     	;# 
  6598  0812                     	;# 
  6599  0813                     	;# 
  6600  0814                     	;# 
  6601  0815                     	;# 
  6602  0816                     	;# 
  6603  0817                     	;# 
  6604  0818                     	;# 
  6605  0819                     	;# 
  6606  081A                     	;# 
  6607  081A                     	;# 
  6608  081B                     	;# 
  6609  081C                     	;# 
  6610  081C                     	;# 
  6611  081D                     	;# 
  6612  088C                     	;# 
  6613  088D                     	;# 
  6614  088E                     	;# 
  6615  088F                     	;# 
  6616  088F                     	;# 
  6617  0890                     	;# 
  6618  0891                     	;# 
  6619  0892                     	;# 
  6620  0893                     	;# 
  6621  0893                     	;# 
  6622  0894                     	;# 
  6623  0895                     	;# 
  6624  0896                     	;# 
  6625  0897                     	;# 
  6626  0897                     	;# 
  6627  0898                     	;# 
  6628  0899                     	;# 
  6629  0D8C                     	;# 
  6630  0D8C                     	;# 
  6631  0D8D                     	;# 
  6632  0D8E                     	;# 
  6633  0D8F                     	;# 
  6634  0D8F                     	;# 
  6635  0D90                     	;# 
  6636  0D91                     	;# 
  6637  0D92                     	;# 
  6638  0D92                     	;# 
  6639  0D93                     	;# 
  6640  0D94                     	;# 
  6641  0D95                     	;# 
  6642  0D95                     	;# 
  6643  0D96                     	;# 
  6644  0D97                     	;# 
  6645  0D98                     	;# 
  6646  0D99                     	;# 
  6647  0D9A                     	;# 
  6648  0D9B                     	;# 
  6649  0D9C                     	;# 
  6650  0D9D                     	;# 
  6651  0D9E                     	;# 
  6652  0D9E                     	;# 
  6653  0D9F                     	;# 
  6654  0DA0                     	;# 
  6655  0DA1                     	;# 
  6656  0DA1                     	;# 
  6657  0DA2                     	;# 
  6658  0DA3                     	;# 
  6659  0DA4                     	;# 
  6660  0DA4                     	;# 
  6661  0DA5                     	;# 
  6662  0DA6                     	;# 
  6663  0DA7                     	;# 
  6664  0DA7                     	;# 
  6665  0DA8                     	;# 
  6666  0DA9                     	;# 
  6667  0DAA                     	;# 
  6668  0DAB                     	;# 
  6669  0DAC                     	;# 
  6670  0DAD                     	;# 
  6671  0DAE                     	;# 
  6672  0DAF                     	;# 
  6673  0E0F                     	;# 
  6674  0E10                     	;# 
  6675  0E11                     	;# 
  6676  0E12                     	;# 
  6677  0E13                     	;# 
  6678  0E14                     	;# 
  6679  0E15                     	;# 
  6680  0E16                     	;# 
  6681  0E17                     	;# 
  6682  0E18                     	;# 
  6683  0E19                     	;# 
  6684  0E1A                     	;# 
  6685  0E1B                     	;# 
  6686  0E1C                     	;# 
  6687  0E1D                     	;# 
  6688  0E1E                     	;# 
  6689  0E1F                     	;# 
  6690  0E20                     	;# 
  6691  0E21                     	;# 
  6692  0E22                     	;# 
  6693  0E23                     	;# 
  6694  0E24                     	;# 
  6695  0E25                     	;# 
  6696  0E26                     	;# 
  6697  0E27                     	;# 
  6698  0E28                     	;# 
  6699  0E29                     	;# 
  6700  0E2A                     	;# 
  6701  0E2B                     	;# 
  6702  0E2C                     	;# 
  6703  0E2D                     	;# 
  6704  0E2E                     	;# 
  6705  0E90                     	;# 
  6706  0E91                     	;# 
  6707  0E92                     	;# 
  6708  0E94                     	;# 
  6709  0E95                     	;# 
  6710  0E9C                     	;# 
  6711  0E9D                     	;# 
  6712  0E9E                     	;# 
  6713  0E9F                     	;# 
  6714  0EA0                     	;# 
  6715  0EA1                     	;# 
  6716  0EA2                     	;# 
  6717  0EA3                     	;# 
  6718  0EA4                     	;# 
  6719  0EA5                     	;# 
  6720  0EA6                     	;# 
  6721  0EA7                     	;# 
  6722  0F0F                     	;# 
  6723  0F10                     	;# 
  6724  0F11                     	;# 
  6725  0F12                     	;# 
  6726  0F13                     	;# 
  6727  0F14                     	;# 
  6728  0F15                     	;# 
  6729  0F16                     	;# 
  6730  0F17                     	;# 
  6731  0F18                     	;# 
  6732  0F19                     	;# 
  6733  0F1A                     	;# 
  6734  0F1B                     	;# 
  6735  0F1C                     	;# 
  6736  0F1D                     	;# 
  6737  0F1E                     	;# 
  6738  0F1F                     	;# 
  6739  0F20                     	;# 
  6740  0F21                     	;# 
  6741  0F22                     	;# 
  6742  0F23                     	;# 
  6743  0F24                     	;# 
  6744  0F25                     	;# 
  6745  0F26                     	;# 
  6746  0F27                     	;# 
  6747  0F28                     	;# 
  6748  0F29                     	;# 
  6749  0F2A                     	;# 
  6750  0F2B                     	;# 
  6751  0F2C                     	;# 
  6752  0F2D                     	;# 
  6753  0F2E                     	;# 
  6754  0F2F                     	;# 
  6755  0F30                     	;# 
  6756  0F31                     	;# 
  6757  0F32                     	;# 
  6758  0F33                     	;# 
  6759  0F34                     	;# 
  6760  0F35                     	;# 
  6761  0F36                     	;# 
  6762  0F37                     	;# 
  6763  0FE4                     	;# 
  6764  0FE5                     	;# 
  6765  0FE6                     	;# 
  6766  0FE7                     	;# 
  6767  0FE8                     	;# 
  6768  0FE9                     	;# 
  6769  0FEA                     	;# 
  6770  0FEB                     	;# 
  6771  0FED                     	;# 
  6772  0FEE                     	;# 
  6773  0FEF                     	;# 
  6774  0000                     	;# 
  6775  0001                     	;# 
  6776  0002                     	;# 
  6777  0003                     	;# 
  6778  0004                     	;# 
  6779  0005                     	;# 
  6780  0006                     	;# 
  6781  0007                     	;# 
  6782  0008                     	;# 
  6783  0009                     	;# 
  6784  000A                     	;# 
  6785  000B                     	;# 
  6786  000C                     	;# 
  6787  000D                     	;# 
  6788  000E                     	;# 
  6789  0010                     	;# 
  6790  0011                     	;# 
  6791  0012                     	;# 
  6792  0013                     	;# 
  6793  0014                     	;# 
  6794  0015                     	;# 
  6795  0016                     	;# 
  6796  0016                     	;# 
  6797  0017                     	;# 
  6798  0018                     	;# 
  6799  0019                     	;# 
  6800  001A                     	;# 
  6801  001A                     	;# 
  6802  001B                     	;# 
  6803  001B                     	;# 
  6804  001C                     	;# 
  6805  001D                     	;# 
  6806  001E                     	;# 
  6807  001F                     	;# 
  6808  008C                     	;# 
  6809  008D                     	;# 
  6810  008E                     	;# 
  6811  0090                     	;# 
  6812  0091                     	;# 
  6813  0092                     	;# 
  6814  0093                     	;# 
  6815  0094                     	;# 
  6816  0095                     	;# 
  6817  0096                     	;# 
  6818  0098                     	;# 
  6819  0099                     	;# 
  6820  009A                     	;# 
  6821  009B                     	;# 
  6822  009B                     	;# 
  6823  009C                     	;# 
  6824  009D                     	;# 
  6825  009E                     	;# 
  6826  009F                     	;# 
  6827  010C                     	;# 
  6828  010D                     	;# 
  6829  010E                     	;# 
  6830  0111                     	;# 
  6831  0112                     	;# 
  6832  0113                     	;# 
  6833  0114                     	;# 
  6834  0115                     	;# 
  6835  0116                     	;# 
  6836  0117                     	;# 
  6837  0118                     	;# 
  6838  0119                     	;# 
  6839  011C                     	;# 
  6840  018C                     	;# 
  6841  018D                     	;# 
  6842  018E                     	;# 
  6843  0191                     	;# 
  6844  0191                     	;# 
  6845  0192                     	;# 
  6846  0193                     	;# 
  6847  0193                     	;# 
  6848  0194                     	;# 
  6849  0195                     	;# 
  6850  0196                     	;# 
  6851  0197                     	;# 
  6852  0199                     	;# 
  6853  0199                     	;# 
  6854  0199                     	;# 
  6855  019A                     	;# 
  6856  019A                     	;# 
  6857  019A                     	;# 
  6858  019B                     	;# 
  6859  019B                     	;# 
  6860  019B                     	;# 
  6861  019B                     	;# 
  6862  019B                     	;# 
  6863  019C                     	;# 
  6864  019C                     	;# 
  6865  019C                     	;# 
  6866  019D                     	;# 
  6867  019D                     	;# 
  6868  019D                     	;# 
  6869  019E                     	;# 
  6870  019E                     	;# 
  6871  019E                     	;# 
  6872  019F                     	;# 
  6873  019F                     	;# 
  6874  019F                     	;# 
  6875  019F                     	;# 
  6876  019F                     	;# 
  6877  020C                     	;# 
  6878  020D                     	;# 
  6879  020E                     	;# 
  6880  0211                     	;# 
  6881  0211                     	;# 
  6882  0212                     	;# 
  6883  0212                     	;# 
  6884  0213                     	;# 
  6885  0213                     	;# 
  6886  0214                     	;# 
  6887  0214                     	;# 
  6888  0215                     	;# 
  6889  0215                     	;# 
  6890  0215                     	;# 
  6891  0215                     	;# 
  6892  0216                     	;# 
  6893  0216                     	;# 
  6894  0217                     	;# 
  6895  0217                     	;# 
  6896  028C                     	;# 
  6897  028D                     	;# 
  6898  028E                     	;# 
  6899  0291                     	;# 
  6900  0291                     	;# 
  6901  0292                     	;# 
  6902  0293                     	;# 
  6903  0294                     	;# 
  6904  0298                     	;# 
  6905  0298                     	;# 
  6906  0299                     	;# 
  6907  029A                     	;# 
  6908  029B                     	;# 
  6909  029E                     	;# 
  6910  030C                     	;# 
  6911  030D                     	;# 
  6912  030E                     	;# 
  6913  038C                     	;# 
  6914  038D                     	;# 
  6915  038E                     	;# 
  6916  0391                     	;# 
  6917  0392                     	;# 
  6918  0393                     	;# 
  6919  0394                     	;# 
  6920  0395                     	;# 
  6921  0396                     	;# 
  6922  0397                     	;# 
  6923  0398                     	;# 
  6924  0399                     	;# 
  6925  040E                     	;# 
  6926  0413                     	;# 
  6927  0413                     	;# 
  6928  0414                     	;# 
  6929  0414                     	;# 
  6930  0415                     	;# 
  6931  0416                     	;# 
  6932  0417                     	;# 
  6933  0418                     	;# 
  6934  041A                     	;# 
  6935  041A                     	;# 
  6936  041B                     	;# 
  6937  041B                     	;# 
  6938  041C                     	;# 
  6939  041D                     	;# 
  6940  041E                     	;# 
  6941  041F                     	;# 
  6942  0493                     	;# 
  6943  0494                     	;# 
  6944  0495                     	;# 
  6945  0496                     	;# 
  6946  049A                     	;# 
  6947  049B                     	;# 
  6948  049C                     	;# 
  6949  049D                     	;# 
  6950  058C                     	;# 
  6951  058C                     	;# 
  6952  058D                     	;# 
  6953  058E                     	;# 
  6954  058E                     	;# 
  6955  058F                     	;# 
  6956  0590                     	;# 
  6957  0590                     	;# 
  6958  0591                     	;# 
  6959  0592                     	;# 
  6960  0592                     	;# 
  6961  0593                     	;# 
  6962  0594                     	;# 
  6963  0594                     	;# 
  6964  0595                     	;# 
  6965  0596                     	;# 
  6966  0596                     	;# 
  6967  0597                     	;# 
  6968  0598                     	;# 
  6969  0599                     	;# 
  6970  059A                     	;# 
  6971  059B                     	;# 
  6972  059B                     	;# 
  6973  059C                     	;# 
  6974  059D                     	;# 
  6975  060C                     	;# 
  6976  060C                     	;# 
  6977  060D                     	;# 
  6978  060E                     	;# 
  6979  060F                     	;# 
  6980  060F                     	;# 
  6981  0610                     	;# 
  6982  0611                     	;# 
  6983  0612                     	;# 
  6984  0613                     	;# 
  6985  0614                     	;# 
  6986  0617                     	;# 
  6987  0618                     	;# 
  6988  0619                     	;# 
  6989  061A                     	;# 
  6990  061B                     	;# 
  6991  061C                     	;# 
  6992  0691                     	;# 
  6993  0692                     	;# 
  6994  0693                     	;# 
  6995  0694                     	;# 
  6996  0695                     	;# 
  6997  0696                     	;# 
  6998  0697                     	;# 
  6999  0699                     	;# 
  7000  069A                     	;# 
  7001  0711                     	;# 
  7002  0712                     	;# 
  7003  0713                     	;# 
  7004  0714                     	;# 
  7005  0715                     	;# 
  7006  0718                     	;# 
  7007  0718                     	;# 
  7008  0719                     	;# 
  7009  071A                     	;# 
  7010  071A                     	;# 
  7011  071B                     	;# 
  7012  071C                     	;# 
  7013  071D                     	;# 
  7014  0791                     	;# 
  7015  0791                     	;# 
  7016  0792                     	;# 
  7017  0793                     	;# 
  7018  0793                     	;# 
  7019  0794                     	;# 
  7020  0795                     	;# 
  7021  0795                     	;# 
  7022  0796                     	;# 
  7023  0797                     	;# 
  7024  0797                     	;# 
  7025  0798                     	;# 
  7026  0799                     	;# 
  7027  079A                     	;# 
  7028  080C                     	;# 
  7029  080C                     	;# 
  7030  080D                     	;# 
  7031  080E                     	;# 
  7032  080E                     	;# 
  7033  080F                     	;# 
  7034  0810                     	;# 
  7035  0810                     	;# 
  7036  0811                     	;# 
  7037  0812                     	;# 
  7038  0812                     	;# 
  7039  0813                     	;# 
  7040  0814                     	;# 
  7041  0815                     	;# 
  7042  0816                     	;# 
  7043  0817                     	;# 
  7044  0818                     	;# 
  7045  0819                     	;# 
  7046  081A                     	;# 
  7047  081A                     	;# 
  7048  081B                     	;# 
  7049  081C                     	;# 
  7050  081C                     	;# 
  7051  081D                     	;# 
  7052  088C                     	;# 
  7053  088D                     	;# 
  7054  088E                     	;# 
  7055  088F                     	;# 
  7056  088F                     	;# 
  7057  0890                     	;# 
  7058  0891                     	;# 
  7059  0892                     	;# 
  7060  0893                     	;# 
  7061  0893                     	;# 
  7062  0894                     	;# 
  7063  0895                     	;# 
  7064  0896                     	;# 
  7065  0897                     	;# 
  7066  0897                     	;# 
  7067  0898                     	;# 
  7068  0899                     	;# 
  7069  0D8C                     	;# 
  7070  0D8C                     	;# 
  7071  0D8D                     	;# 
  7072  0D8E                     	;# 
  7073  0D8F                     	;# 
  7074  0D8F                     	;# 
  7075  0D90                     	;# 
  7076  0D91                     	;# 
  7077  0D92                     	;# 
  7078  0D92                     	;# 
  7079  0D93                     	;# 
  7080  0D94                     	;# 
  7081  0D95                     	;# 
  7082  0D95                     	;# 
  7083  0D96                     	;# 
  7084  0D97                     	;# 
  7085  0D98                     	;# 
  7086  0D99                     	;# 
  7087  0D9A                     	;# 
  7088  0D9B                     	;# 
  7089  0D9C                     	;# 
  7090  0D9D                     	;# 
  7091  0D9E                     	;# 
  7092  0D9E                     	;# 
  7093  0D9F                     	;# 
  7094  0DA0                     	;# 
  7095  0DA1                     	;# 
  7096  0DA1                     	;# 
  7097  0DA2                     	;# 
  7098  0DA3                     	;# 
  7099  0DA4                     	;# 
  7100  0DA4                     	;# 
  7101  0DA5                     	;# 
  7102  0DA6                     	;# 
  7103  0DA7                     	;# 
  7104  0DA7                     	;# 
  7105  0DA8                     	;# 
  7106  0DA9                     	;# 
  7107  0DAA                     	;# 
  7108  0DAB                     	;# 
  7109  0DAC                     	;# 
  7110  0DAD                     	;# 
  7111  0DAE                     	;# 
  7112  0DAF                     	;# 
  7113  0E0F                     	;# 
  7114  0E10                     	;# 
  7115  0E11                     	;# 
  7116  0E12                     	;# 
  7117  0E13                     	;# 
  7118  0E14                     	;# 
  7119  0E15                     	;# 
  7120  0E16                     	;# 
  7121  0E17                     	;# 
  7122  0E18                     	;# 
  7123  0E19                     	;# 
  7124  0E1A                     	;# 
  7125  0E1B                     	;# 
  7126  0E1C                     	;# 
  7127  0E1D                     	;# 
  7128  0E1E                     	;# 
  7129  0E1F                     	;# 
  7130  0E20                     	;# 
  7131  0E21                     	;# 
  7132  0E22                     	;# 
  7133  0E23                     	;# 
  7134  0E24                     	;# 
  7135  0E25                     	;# 
  7136  0E26                     	;# 
  7137  0E27                     	;# 
  7138  0E28                     	;# 
  7139  0E29                     	;# 
  7140  0E2A                     	;# 
  7141  0E2B                     	;# 
  7142  0E2C                     	;# 
  7143  0E2D                     	;# 
  7144  0E2E                     	;# 
  7145  0E90                     	;# 
  7146  0E91                     	;# 
  7147  0E92                     	;# 
  7148  0E94                     	;# 
  7149  0E95                     	;# 
  7150  0E9C                     	;# 
  7151  0E9D                     	;# 
  7152  0E9E                     	;# 
  7153  0E9F                     	;# 
  7154  0EA0                     	;# 
  7155  0EA1                     	;# 
  7156  0EA2                     	;# 
  7157  0EA3                     	;# 
  7158  0EA4                     	;# 
  7159  0EA5                     	;# 
  7160  0EA6                     	;# 
  7161  0EA7                     	;# 
  7162  0F0F                     	;# 
  7163  0F10                     	;# 
  7164  0F11                     	;# 
  7165  0F12                     	;# 
  7166  0F13                     	;# 
  7167  0F14                     	;# 
  7168  0F15                     	;# 
  7169  0F16                     	;# 
  7170  0F17                     	;# 
  7171  0F18                     	;# 
  7172  0F19                     	;# 
  7173  0F1A                     	;# 
  7174  0F1B                     	;# 
  7175  0F1C                     	;# 
  7176  0F1D                     	;# 
  7177  0F1E                     	;# 
  7178  0F1F                     	;# 
  7179  0F20                     	;# 
  7180  0F21                     	;# 
  7181  0F22                     	;# 
  7182  0F23                     	;# 
  7183  0F24                     	;# 
  7184  0F25                     	;# 
  7185  0F26                     	;# 
  7186  0F27                     	;# 
  7187  0F28                     	;# 
  7188  0F29                     	;# 
  7189  0F2A                     	;# 
  7190  0F2B                     	;# 
  7191  0F2C                     	;# 
  7192  0F2D                     	;# 
  7193  0F2E                     	;# 
  7194  0F2F                     	;# 
  7195  0F30                     	;# 
  7196  0F31                     	;# 
  7197  0F32                     	;# 
  7198  0F33                     	;# 
  7199  0F34                     	;# 
  7200  0F35                     	;# 
  7201  0F36                     	;# 
  7202  0F37                     	;# 
  7203  0FE4                     	;# 
  7204  0FE5                     	;# 
  7205  0FE6                     	;# 
  7206  0FE7                     	;# 
  7207  0FE8                     	;# 
  7208  0FE9                     	;# 
  7209  0FEA                     	;# 
  7210  0FEB                     	;# 
  7211  0FED                     	;# 
  7212  0FEE                     	;# 
  7213  0FEF                     	;# 
  7214                           
  7215                           	psect	idataBANK1
  7216  0800                     __pidataBANK1:	
  7217                           
  7218                           ;initializer for _U8Message
  7219  0800  3455               	retlw	85
  7220                           
  7221                           ;initializer for _AddressW
  7222  0801  3480               	retlw	128
  7223                           
  7224                           ;initializer for _BreathState
  7225  0802  3401               	retlw	1
  7226                           
  7227                           ;initializer for _Command
  7228  0803  3422               	retlw	34
  7229  0804  3420               	retlw	32
  7230                           
  7231                           	psect	stringtext1
  7232  1000                     __pstringtext1:	
  7233  1000                     _fsmStateTable:	
  7234  1000  34B0               	retlw	low _I2C_DO_IDLE
  7235  1001  3417               	retlw	high _I2C_DO_IDLE
  7236  1002  34E6               	retlw	low _I2C_DO_SEND_ADR_READ
  7237  1003  3417               	retlw	high _I2C_DO_SEND_ADR_READ
  7238  1004  34D8               	retlw	low _I2C_DO_SEND_ADR_WRITE
  7239  1005  3417               	retlw	high _I2C_DO_SEND_ADR_WRITE
  7240  1006  3479               	retlw	low _I2C_DO_TX
  7241  1007  340E               	retlw	high _I2C_DO_TX
  7242  1008  34E4               	retlw	low _I2C_DO_RX
  7243  1009  340C               	retlw	high _I2C_DO_RX
  7244  100A  34C0               	retlw	low _I2C_DO_RCEN
  7245  100B  3417               	retlw	high _I2C_DO_RCEN
  7246  100C  34E6               	retlw	low _I2C_DO_TX_EMPTY
  7247  100D  340A               	retlw	high _I2C_DO_TX_EMPTY
  7248  100E  3487               	retlw	low _I2C_DO_SEND_RESTART_READ
  7249  100F  3417               	retlw	high _I2C_DO_SEND_RESTART_READ
  7250  1010  348B               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  7251  1011  3417               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  7252  1012  348F               	retlw	low _I2C_DO_SEND_RESTART
  7253  1013  3417               	retlw	high _I2C_DO_SEND_RESTART
  7254  1014  3493               	retlw	low _I2C_DO_SEND_STOP
  7255  1015  3417               	retlw	high _I2C_DO_SEND_STOP
  7256  1016  3497               	retlw	low _I2C_DO_RX_ACK
  7257  1017  3417               	retlw	high _I2C_DO_RX_ACK
  7258  1018  349B               	retlw	low _I2C_DO_RX_NACK_STOP
  7259  1019  3417               	retlw	high _I2C_DO_RX_NACK_STOP
  7260  101A  349F               	retlw	low _I2C_DO_RX_NACK_RESTART
  7261  101B  3417               	retlw	high _I2C_DO_RX_NACK_RESTART
  7262  101C  34B5               	retlw	low _I2C_DO_RESET
  7263  101D  3417               	retlw	high _I2C_DO_RESET
  7264  101E  34C2               	retlw	low _I2C_DO_ADDRESS_NACK
  7265  101F  340A               	retlw	high _I2C_DO_ADDRESS_NACK
  7266  1020                     __end_of_fsmStateTable:	
  7267                           
  7268                           	psect	stringtext2
  7269  1020                     __pstringtext2:	
  7270  1020                     _COS_tsk:	
  7271  1020  349C               	retlw	low _SHT25_StateMachine
  7272  1021  3404               	retlw	high _SHT25_StateMachine
  7273  1022  3480               	retlw	128
  7274  1023  3471               	retlw	low _AD_Task
  7275  1024  340C               	retlw	high _AD_Task
  7276  1025  3440               	retlw	64
  7277  1026  3472               	retlw	low _UartDisplay
  7278  1027  3400               	retlw	high _UartDisplay
  7279  1028  3401               	retlw	1
  7280  1029  3400               	retlw	0
  7281  102A  3400               	retlw	0
  7282  102B  3400               	retlw	0
  7283  102C  3400               	retlw	0
  7284  102D  3400               	retlw	0
  7285  102E  3400               	retlw	0
  7286  102F                     __end_of_COS_tsk:	
  7287                           
  7288                           	psect	stringtext3
  7289  102F                     __pstringtext3:	
  7290  102F                     _dpowers:	
  7291  102F  3401               	retlw	1
  7292  1030  3400               	retlw	0
  7293  1031  340A               	retlw	10
  7294  1032  3400               	retlw	0
  7295  1033  3464               	retlw	100
  7296  1034  3400               	retlw	0
  7297  1035  34E8               	retlw	232
  7298  1036  3403               	retlw	3
  7299  1037  3410               	retlw	16
  7300  1038  3427               	retlw	39
  7301  1039                     __end_of_dpowers:	
  7302                           
  7303                           	psect	nvBANK0
  7304  0067                     __pnvBANK0:	
  7305  0067                     _EUSART_RxDefaultInterruptHandler:	
  7306  0067                     	ds	2
  7307  0069                     _COS_tsk_msk:	
  7308  0069                     	ds	1
  7309                           
  7310                           	psect	nvBANK1
  7311  00EF                     __pnvBANK1:	
  7312  00EF                     _eusartTxBufferRemaining:	
  7313  00EF                     	ds	1
  7314                           
  7315                           	psect	nvBANK2
  7316  016A                     __pnvBANK2:	
  7317  016A                     _TMR2_InterruptHandler:	
  7318  016A                     	ds	2
  7319  016C                     _EUSART_TxDefaultInterruptHandler:	
  7320  016C                     	ds	2
  7321  016E                     _COS_tsk_ena:	
  7322  016E                     	ds	1
  7323                           
  7324                           	psect	nvBANK3
  7325  01A0                     __pnvBANK3:	
  7326  01A0                     _EUSART_ErrorHandler:	
  7327  01A0                     	ds	2
  7328  01A2                     _EUSART_OverrunErrorHandler:	
  7329  01A2                     	ds	2
  7330  01A4                     _EUSART_FramingErrorHandler:	
  7331  01A4                     	ds	2
  7332  0018                     _T1CON	set	24
  7333  0016                     _TMR1L	set	22
  7334  0017                     _TMR1H	set	23
  7335  001B                     _PR2	set	27
  7336  001A                     _TMR2	set	26
  7337  001C                     _T2CONbits	set	28
  7338  001F                     _T2RSTbits	set	31
  7339  001D                     _T2HLTbits	set	29
  7340  001C                     _T2CON	set	28
  7341  001A                     _T2TMR	set	26
  7342  001B                     _T2PR	set	27
  7343  001F                     _T2RST	set	31
  7344  001D                     _T2HLT	set	29
  7345  001E                     _T2CLKCON	set	30
  7346  000B                     _INTCONbits	set	11
  7347  0010                     _PIR1bits	set	16
  7348  0011                     _PIR2bits	set	17
  7349  0083                     _SSP1IF	set	131
  7350  009D                     _ADCON0bits	set	157
  7351  009C                     _ADRESH	set	156
  7352  009B                     _ADRESL	set	155
  7353  009F                     _ADCON2	set	159
  7354  009E                     _ADCON1	set	158
  7355  009D                     _ADCON0	set	157
  7356  0095                     _OPTION_REGbits	set	149
  7357  008E                     _TRISC	set	142
  7358  008D                     _TRISB	set	141
  7359  008C                     _TRISA	set	140
  7360  0098                     _OSCTUNE	set	152
  7361  0099                     _OSCCON	set	153
  7362  0091                     _PIE2bits	set	145
  7363  0090                     _PIE1bits	set	144
  7364  0483                     _SSP1IE	set	1155
  7365  010C                     _LATAbits	set	268
  7366  010D                     _LATBbits	set	269
  7367  010E                     _LATC	set	270
  7368  010D                     _LATB	set	269
  7369  010C                     _LATA	set	268
  7370  0116                     _BORCON	set	278
  7371  0199                     _RC1REG	set	409
  7372  019D                     _RC1STAbits	set	413
  7373  019A                     _TX1REG	set	410
  7374  019E                     _TX1STAbits	set	414
  7375  019C                     _SPBRGH	set	412
  7376  019B                     _SPBRGL	set	411
  7377  019E                     _TX1STA	set	414
  7378  019D                     _RC1STA	set	413
  7379  019F                     _BAUD1CON	set	415
  7380  018C                     _ANSELA	set	396
  7381  018D                     _ANSELB	set	397
  7382  018E                     _ANSELC	set	398
  7383  020E                     _WPUC	set	526
  7384  020C                     _WPUA	set	524
  7385  020D                     _WPUB	set	525
  7386  0214                     _SSP1STATbits	set	532
  7387  0216                     _SSP1CON2bits	set	534
  7388  0211                     _SSP1BUF	set	529
  7389  0215                     _SSP1CON1bits	set	533
  7390  0212                     _SSP1ADD	set	530
  7391  0216                     _SSP1CON2	set	534
  7392  0215                     _SSP1CON1	set	533
  7393  0214                     _SSP1STAT	set	532
  7394  10AD                     _SSPEN	set	4269
  7395  029E                     _CCPTMRSbits	set	670
  7396  028E                     _ODCONC	set	654
  7397  028D                     _ODCONB	set	653
  7398  028C                     _ODCONA	set	652
  7399  030E                     _SLRCONC	set	782
  7400  030D                     _SLRCONB	set	781
  7401  030C                     _SLRCONA	set	780
  7402  038E                     _INLVLC	set	910
  7403  038D                     _INLVLB	set	909
  7404  038C                     _INLVLA	set	908
  7405  0617                     _PWM3DCL	set	1559
  7406  0618                     _PWM3DCH	set	1560
  7407  0619                     _PWM3CON	set	1561
  7408  0E20                     _SSPCLKPPS	set	3616
  7409  0E21                     _SSPDATPPS	set	3617
  7410  0E24                     _RXPPS	set	3620
  7411  0EA5                     _RC5PPS	set	3749
  7412  0E9C                     _RB4PPS	set	3740
  7413  0E9F                     _RB7PPS	set	3743
  7414  0E9E                     _RB6PPS	set	3742
  7415                           
  7416                           	psect	stringtext4
  7417  1800                     __pstringtext4:	
  7418  1800                     STR_1:	
  7419  1800  3425               	retlw	37	;'%'
  7420  1801  3434               	retlw	52	;'4'
  7421  1802  3464               	retlw	100	;'d'
  7422  1803  3400               	retlw	0
  7423                           
  7424                           	psect	stringtext5
  7425  0000                     __pstringtext5:	
  7426  1800                     
  7427                           ; #config settings
  7428  0000                     
  7429                           	psect	cinit
  7430  004D                     start_initialization:	
  7431  004D                     __initialization:	
  7432                           
  7433                           ; Initialize objects allocated to BANK1
  7434  004D  3000               	movlw	low __pidataBANK1
  7435  004E  0084               	movwf	4
  7436  004F  3088               	movlw	(high __pidataBANK1)| (0+128)
  7437  0050  0085               	movwf	5
  7438  0051  0021               	movlb	1	; select bank1
  7439  0052  0012               	moviw fsr0++
  7440  0053  00EA               	movwf	__pdataBANK1& (0+127)
  7441  0054  0012               	moviw fsr0++
  7442  0055  00EB               	movwf	(__pdataBANK1+1)& (0+127)
  7443  0056  0012               	moviw fsr0++
  7444  0057  00EC               	movwf	(__pdataBANK1+2)& (0+127)
  7445  0058  0012               	moviw fsr0++
  7446  0059  00ED               	movwf	(__pdataBANK1+3)& (0+127)
  7447  005A  0012               	moviw fsr0++
  7448  005B  00EE               	movwf	(__pdataBANK1+4)& (0+127)
  7449                           
  7450                           ; Clear objects allocated to BANK0
  7451  005C  0020               	movlb	0	; select bank0
  7452  005D  01EA               	clrf	__pbssBANK0& (0+127)
  7453  005E  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  7454                           
  7455                           ; Clear objects allocated to BANK1
  7456  005F  30A0               	movlw	low __pbssBANK1
  7457  0060  0084               	movwf	4
  7458  0061  3000               	movlw	high __pbssBANK1
  7459  0062  0085               	movwf	5
  7460  0063  3033               	movlw	51
  7461  0064  3197  27D2  3180   	fcall	clear_ram0
  7462                           
  7463                           ; Clear objects allocated to BANK2
  7464  0067  3020               	movlw	low __pbssBANK2
  7465  0068  0084               	movwf	4
  7466  0069  3001               	movlw	high __pbssBANK2
  7467  006A  0085               	movwf	5
  7468  006B  304A               	movlw	74
  7469  006C  3197  27D2         	fcall	clear_ram0
  7470  006E                     end_of_initialization:	
  7471                           ;End of C runtime variable initialization code
  7472                           
  7473  006E                     __end_of__initialization:	
  7474  006E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7475  006F  0020               	movlb	0
  7476  0070  3189  29F2         	ljmp	_main	;jump to C main() function
  7477                           
  7478                           	psect	bssBANK0
  7479  006A                     __pbssBANK0:	
  7480  006A                     _eusartRxTail:	
  7481  006A                     	ds	1
  7482  006B                     _eusartRxHead:	
  7483  006B                     	ds	1
  7484                           
  7485                           	psect	bssBANK1
  7486  00A0                     __pbssBANK1:	
  7487  00A0                     _SensirionRH_float:	
  7488  00A0                     	ds	3
  7489  00A3                     _SensirionTemperature_float:	
  7490  00A3                     	ds	3
  7491  00A6                     _TimerCounter:	
  7492  00A6                     	ds	2
  7493  00A8                     _RelativeHumidityRaw:	
  7494  00A8                     	ds	2
  7495  00AA                     _TemperatureRaw:	
  7496  00AA                     	ds	2
  7497  00AC                     _dutyValue:	
  7498  00AC                     	ds	2
  7499  00AE                     _counter:	
  7500  00AE                     	ds	2
  7501  00B0                     _COS_tcnt_lst:	
  7502  00B0                     	ds	2
  7503  00B2                     _COS_tcnt_val:	
  7504  00B2                     	ds	2
  7505  00B4                     _COS_tsk_tmr:	
  7506  00B4                     	ds	2
  7507  00B6                     _COS_ms_tmr:	
  7508  00B6                     	ds	2
  7509  00B8                     TMR2_ISR@CountCallBack:	
  7510  00B8                     	ds	2
  7511  00BA                     _MSSP_InterruptHandler:	
  7512  00BA                     	ds	2
  7513  00BC                     AD@IsMeasureDone:	
  7514  00BC                     	ds	1
  7515  00BD                     AD@TimerCounter:	
  7516  00BD                     	ds	1
  7517  00BE                     _AD_State:	
  7518  00BE                     	ds	1
  7519  00BF                     UART_Display@TimerCounter:	
  7520  00BF                     	ds	1
  7521  00C0                     _UART_STATE:	
  7522  00C0                     	ds	1
  7523  00C1                     UART_Display@counter:	
  7524  00C1                     	ds	1
  7525  00C2                     _NewMessageFlag:	
  7526  00C2                     	ds	1
  7527  00C3                     _IsMeasureDone:	
  7528  00C3                     	ds	1
  7529  00C4                     _SHT25_State:	
  7530  00C4                     	ds	1
  7531  00C5                     _RelativeHumidityRaw_L:	
  7532  00C5                     	ds	1
  7533  00C6                     _RelativeHumidityRaw_H:	
  7534  00C6                     	ds	1
  7535  00C7                     _TemperatureRaw_L:	
  7536  00C7                     	ds	1
  7537  00C8                     _TemperatureRaw_H:	
  7538  00C8                     	ds	1
  7539  00C9                     _checksum:	
  7540  00C9                     	ds	1
  7541  00CA                     _ErrorStat:	
  7542  00CA                     	ds	1
  7543  00CB                     _SHT25_Fault:	
  7544  00CB                     	ds	1
  7545  00CC                     _Timer2Flag:	
  7546  00CC                     	ds	1
  7547  00CD                     _TimeSlotCounter:	
  7548  00CD                     	ds	1
  7549  00CE                     _COS_tsk_ind:	
  7550  00CE                     	ds	1
  7551  00CF                     _eusartRxLastError:	
  7552  00CF                     	ds	1
  7553  00D0                     _eusartRxCount:	
  7554  00D0                     	ds	1
  7555  00D1                     _eusartTxTail:	
  7556  00D1                     	ds	1
  7557  00D2                     _eusartTxHead:	
  7558  00D2                     	ds	1
  7559                           
  7560                           	psect	dataBANK1
  7561  00EA                     __pdataBANK1:	
  7562  00EA                     _U8Message:	
  7563  00EA                     	ds	1
  7564  00EB                     _AddressW:	
  7565  00EB                     	ds	1
  7566  00EC                     _BreathState:	
  7567  00EC                     	ds	1
  7568  00ED                     _Command:	
  7569  00ED                     	ds	2
  7570                           
  7571                           	psect	bssBANK2
  7572  0120                     __pbssBANK2:	
  7573  0120                     _I2C_Status:	
  7574  0120                     	ds	30
  7575  013E                     _eusartRxStatusBuffer:	
  7576  013E                     	ds	8
  7577  0146                     _eusartRxBuffer:	
  7578  0146                     	ds	8
  7579  014E                     _eusartTxBuffer:	
  7580  014E                     	ds	8
  7581  0156                     _AD_Result:	
  7582  0156                     	ds	2
  7583  0158                     _I2C_Timer:	
  7584  0158                     	ds	2
  7585  015A                     _SensirionRH_UBP8:	
  7586  015A                     	ds	2
  7587  015C                     _SensirionTemperature_UBP8:	
  7588  015C                     	ds	2
  7589  015E                     _COS_sec_tmr:	
  7590  015E                     	ds	2
  7591  0160                     _ADC_InterruptHandler:	
  7592  0160                     	ds	2
  7593  0162                     _RxBuff:	
  7594  0162                     	ds	8
  7595                           
  7596                           	psect	clrtext
  7597  17D2                     clear_ram0:	
  7598                           ;	Called with FSR0 containing the base address, and
  7599                           ;	WREG with the size to clear
  7600                           
  7601  17D2  0064               	clrwdt	;clear the watchdog before getting into this loop
  7602  17D3                     clrloop0:	
  7603  17D3  0180               	clrf	0	;clear RAM location pointed to by FSR
  7604  17D4  3101               	addfsr 0,1
  7605  17D5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7606  17D6  2FD3               	goto	clrloop0	;have we reached the end yet?
  7607  17D7  3400               	retlw	0	;all done for this memory range, return
  7608                           
  7609                           	psect	cstackBANK3
  7610  01A6                     __pcstackBANK3:	
  7611  01A6                     _COS_TskMan$2372:	
  7612                           
  7613                           ; 2 bytes @ 0x0
  7614  01A6                     	ds	2
  7615                           
  7616                           	psect	cstackBANK1
  7617  00D3                     __pcstackBANK1:	
  7618  00D3                     ??_SHT25_StateMachine:	
  7619  00D3                     UartDisplay@HumiF:	
  7620                           ; 1 bytes @ 0x0
  7621                           
  7622                           
  7623                           ; 3 bytes @ 0x0
  7624  00D3                     	ds	3
  7625  00D6                     UartDisplay@Temp:	
  7626                           
  7627                           ; 2 bytes @ 0x3
  7628  00D6                     	ds	2
  7629  00D8                     UartDisplay@Humi:	
  7630                           
  7631                           ; 2 bytes @ 0x5
  7632  00D8                     	ds	2
  7633  00DA                     UartDisplay@NtcTempF:	
  7634                           
  7635                           ; 3 bytes @ 0x7
  7636  00DA                     	ds	3
  7637  00DD                     UartDisplay@str:	
  7638                           
  7639                           ; 8 bytes @ 0xA
  7640  00DD                     	ds	8
  7641  00E5                     UartDisplay@NtcTemp:	
  7642                           
  7643                           ; 2 bytes @ 0x12
  7644  00E5                     	ds	2
  7645  00E7                     UartDisplay@TempF:	
  7646                           
  7647                           ; 3 bytes @ 0x14
  7648  00E7                     	ds	3
  7649                           
  7650                           	psect	cstackCOMMON
  7651  0070                     __pcstackCOMMON:	
  7652  0070                     ?_isdigit:	
  7653  0070                     ?_I2C_Open:	
  7654                           ; 1 bit 
  7655                           
  7656  0070                     ?_I2C_MasterWrite:	
  7657                           ; 1 bytes @ 0x0
  7658                           
  7659  0070                     ?_I2C_Close:	
  7660                           ; 1 bytes @ 0x0
  7661                           
  7662  0070                     ?_I2C_MasterRead:	
  7663                           ; 1 bytes @ 0x0
  7664                           
  7665  0070                     ?_I2C_DO_IDLE:	
  7666                           ; 1 bytes @ 0x0
  7667                           
  7668  0070                     ??_I2C_DO_IDLE:	
  7669                           ; 1 bytes @ 0x0
  7670                           
  7671  0070                     ?_I2C_DO_SEND_ADR_READ:	
  7672                           ; 1 bytes @ 0x0
  7673                           
  7674  0070                     ??_I2C_DO_SEND_ADR_READ:	
  7675                           ; 1 bytes @ 0x0
  7676                           
  7677  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  7678                           ; 1 bytes @ 0x0
  7679                           
  7680  0070                     ?_I2C_DO_TX:	
  7681                           ; 1 bytes @ 0x0
  7682                           
  7683  0070                     ?_I2C_DO_RX:	
  7684                           ; 1 bytes @ 0x0
  7685                           
  7686  0070                     ?_I2C_DO_RCEN:	
  7687                           ; 1 bytes @ 0x0
  7688                           
  7689  0070                     ??_I2C_DO_RCEN:	
  7690                           ; 1 bytes @ 0x0
  7691                           
  7692  0070                     ?_I2C_DO_TX_EMPTY:	
  7693                           ; 1 bytes @ 0x0
  7694                           
  7695  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  7696                           ; 1 bytes @ 0x0
  7697                           
  7698  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  7699                           ; 1 bytes @ 0x0
  7700                           
  7701  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  7702                           ; 1 bytes @ 0x0
  7703                           
  7704  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  7705                           ; 1 bytes @ 0x0
  7706                           
  7707  0070                     ?_I2C_DO_SEND_RESTART:	
  7708                           ; 1 bytes @ 0x0
  7709                           
  7710  0070                     ??_I2C_DO_SEND_RESTART:	
  7711                           ; 1 bytes @ 0x0
  7712                           
  7713  0070                     ?_I2C_DO_SEND_STOP:	
  7714                           ; 1 bytes @ 0x0
  7715                           
  7716  0070                     ??_I2C_DO_SEND_STOP:	
  7717                           ; 1 bytes @ 0x0
  7718                           
  7719  0070                     ?_I2C_DO_RX_ACK:	
  7720                           ; 1 bytes @ 0x0
  7721                           
  7722  0070                     ??_I2C_DO_RX_ACK:	
  7723                           ; 1 bytes @ 0x0
  7724                           
  7725  0070                     ?_I2C_DO_RX_NACK_STOP:	
  7726                           ; 1 bytes @ 0x0
  7727                           
  7728  0070                     ??_I2C_DO_RX_NACK_STOP:	
  7729                           ; 1 bytes @ 0x0
  7730                           
  7731  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  7732                           ; 1 bytes @ 0x0
  7733                           
  7734  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  7735                           ; 1 bytes @ 0x0
  7736                           
  7737  0070                     ?_I2C_DO_RESET:	
  7738                           ; 1 bytes @ 0x0
  7739                           
  7740  0070                     ??_I2C_DO_RESET:	
  7741                           ; 1 bytes @ 0x0
  7742                           
  7743  0070                     ?_I2C_DO_ADDRESS_NACK:	
  7744                           ; 1 bytes @ 0x0
  7745                           
  7746  0070                     ?_I2C_MasterIsr:	
  7747                           ; 1 bytes @ 0x0
  7748                           
  7749  0070                     ?_I2C_MasterClearIrq:	
  7750                           ; 1 bytes @ 0x0
  7751                           
  7752  0070                     ?_I2C_MasterOpen:	
  7753                           ; 1 bytes @ 0x0
  7754                           
  7755  0070                     ?_I2C_MasterEnableIrq:	
  7756                           ; 1 bytes @ 0x0
  7757                           
  7758  0070                     ?_I2C_MasterDisableIrq:	
  7759                           ; 1 bytes @ 0x0
  7760                           
  7761  0070                     ?_I2C_MasterClose:	
  7762                           ; 1 bytes @ 0x0
  7763                           
  7764  0070                     ?_I2C_MasterStart:	
  7765                           ; 1 bytes @ 0x0
  7766                           
  7767  0070                     ?_I2C_MasterFsm:	
  7768                           ; 1 bytes @ 0x0
  7769                           
  7770  0070                     ?_I2C_MasterIsNack:	
  7771                           ; 1 bytes @ 0x0
  7772                           
  7773  0070                     ??_I2C_MasterIsNack:	
  7774                           ; 1 bytes @ 0x0
  7775                           
  7776  0070                     ?_I2C_MasterSendTxData:	
  7777                           ; 1 bytes @ 0x0
  7778                           
  7779  0070                     ??_I2C_MasterSendTxData:	
  7780                           ; 1 bytes @ 0x0
  7781                           
  7782  0070                     ?_I2C_MasterGetRxData:	
  7783                           ; 1 bytes @ 0x0
  7784                           
  7785  0070                     ??_I2C_MasterGetRxData:	
  7786                           ; 1 bytes @ 0x0
  7787                           
  7788  0070                     ?_I2C_MasterSendAck:	
  7789                           ; 1 bytes @ 0x0
  7790                           
  7791  0070                     ??_I2C_MasterSendAck:	
  7792                           ; 1 bytes @ 0x0
  7793                           
  7794  0070                     ?_I2C_MasterStartRx:	
  7795                           ; 1 bytes @ 0x0
  7796                           
  7797  0070                     ??_I2C_MasterStartRx:	
  7798                           ; 1 bytes @ 0x0
  7799                           
  7800  0070                     ?_I2C_MasterSetIrq:	
  7801                           ; 1 bytes @ 0x0
  7802                           
  7803  0070                     ??_I2C_MasterSetIrq:	
  7804                           ; 1 bytes @ 0x0
  7805                           
  7806  0070                     ?_I2C_MasterEnableRestart:	
  7807                           ; 1 bytes @ 0x0
  7808                           
  7809  0070                     ??_I2C_MasterEnableRestart:	
  7810                           ; 1 bytes @ 0x0
  7811                           
  7812  0070                     ?_I2C_MasterStop:	
  7813                           ; 1 bytes @ 0x0
  7814                           
  7815  0070                     ??_I2C_MasterStop:	
  7816                           ; 1 bytes @ 0x0
  7817                           
  7818  0070                     ?_I2C_MasterSendNack:	
  7819                           ; 1 bytes @ 0x0
  7820                           
  7821  0070                     ??_I2C_MasterSendNack:	
  7822                           ; 1 bytes @ 0x0
  7823                           
  7824  0070                     ?_TMR2_ISR:	
  7825                           ; 1 bytes @ 0x0
  7826                           
  7827  0070                     ?_PIN_MANAGER_Initialize:	
  7828                           ; 1 bytes @ 0x0
  7829                           
  7830  0070                     ?_OSCILLATOR_Initialize:	
  7831                           ; 1 bytes @ 0x0
  7832                           
  7833  0070                     ?_ADC_Initialize:	
  7834                           ; 1 bytes @ 0x0
  7835                           
  7836  0070                     ?_PWM3_Initialize:	
  7837                           ; 1 bytes @ 0x0
  7838                           
  7839  0070                     ?_TMR2_Initialize:	
  7840                           ; 1 bytes @ 0x0
  7841                           
  7842  0070                     ?_EUSART_Initialize:	
  7843                           ; 1 bytes @ 0x0
  7844                           
  7845  0070                     ?_EUSART_Receive_ISR:	
  7846                           ; 1 bytes @ 0x0
  7847                           
  7848  0070                     ?_EUSART_Transmit_ISR:	
  7849                           ; 1 bytes @ 0x0
  7850                           
  7851  0070                     ??_EUSART_Transmit_ISR:	
  7852                           ; 1 bytes @ 0x0
  7853                           
  7854  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  7855                           ; 1 bytes @ 0x0
  7856                           
  7857  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  7858                           ; 1 bytes @ 0x0
  7859                           
  7860  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  7861                           ; 1 bytes @ 0x0
  7862                           
  7863  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  7864                           ; 1 bytes @ 0x0
  7865                           
  7866  0070                     ?_EUSART_DefaultErrorHandler:	
  7867                           ; 1 bytes @ 0x0
  7868                           
  7869  0070                     ?_EUSART_RxDataHandler:	
  7870                           ; 1 bytes @ 0x0
  7871                           
  7872  0070                     ??_EUSART_RxDataHandler:	
  7873                           ; 1 bytes @ 0x0
  7874                           
  7875  0070                     ?_TMR2_DefaultInterruptHandler:	
  7876                           ; 1 bytes @ 0x0
  7877                           
  7878  0070                     ??_TMR2_DefaultInterruptHandler:	
  7879                           ; 1 bytes @ 0x0
  7880                           
  7881  0070                     ?_TMR2_CallBack:	
  7882                           ; 1 bytes @ 0x0
  7883                           
  7884  0070                     ?_COS_TimerSetup:	
  7885                           ; 1 bytes @ 0x0
  7886                           
  7887  0070                     ?_SHT25_StateMachine:	
  7888                           ; 1 bytes @ 0x0
  7889                           
  7890  0070                     ?_AD_Task:	
  7891                           ; 1 bytes @ 0x0
  7892                           
  7893  0070                     ?_UartDisplay:	
  7894                           ; 1 bytes @ 0x0
  7895                           
  7896  0070                     ?_IsADMeasureDone:	
  7897                           ; 1 bytes @ 0x0
  7898                           
  7899  0070                     ?_I2C_Initialize:	
  7900                           ; 1 bytes @ 0x0
  7901                           
  7902  0070                     ?_I2C_MasterOperation:	
  7903                           ; 1 bytes @ 0x0
  7904                           
  7905  0070                     ?_INTERRUPT_InterruptManager:	
  7906                           ; 1 bytes @ 0x0
  7907                           
  7908  0070                     ?_SYSTEM_Initialize:	
  7909                           ; 1 bytes @ 0x0
  7910                           
  7911  0070                     ?_PWM3_LoadDutyValue:	
  7912                           ; 1 bytes @ 0x0
  7913                           
  7914  0070                     ?_EUSART_Write:	
  7915                           ; 1 bytes @ 0x0
  7916                           
  7917  0070                     ?_ADC_SelectChannel:	
  7918                           ; 1 bytes @ 0x0
  7919                           
  7920  0070                     ?_ADC_StartConversion:	
  7921                           ; 1 bytes @ 0x0
  7922                           
  7923  0070                     ?_COS_Init:	
  7924                           ; 1 bytes @ 0x0
  7925                           
  7926  0070                     ?_COS_TmrHandler:	
  7927                           ; 1 bytes @ 0x0
  7928                           
  7929  0070                     ?_COS_TskMan:	
  7930                           ; 1 bytes @ 0x0
  7931                           
  7932  0070                     ?_Led2_PWM:	
  7933                           ; 1 bytes @ 0x0
  7934                           
  7935  0070                     ?_IsSHT31MeasureDone:	
  7936                           ; 1 bytes @ 0x0
  7937                           
  7938  0070                     ?_main:	
  7939                           ; 1 bytes @ 0x0
  7940                           
  7941  0070                     ?i1_I2C_SetBuffer:	
  7942                           ; 1 bytes @ 0x0
  7943                           
  7944  0070                     ?i1_I2C_SetCallback:	
  7945                           ; 1 bytes @ 0x0
  7946                           
  7947  0070                     ?i1_I2C_MasterClearIrq:	
  7948                           ; 1 bytes @ 0x0
  7949                           
  7950  0070                     ??i1_I2C_MasterClearIrq:	
  7951                           ; 1 bytes @ 0x0
  7952                           
  7953  0070                     I2C_MasterSendTxData@data:	
  7954                           ; 1 bytes @ 0x0
  7955                           
  7956  0070                     PWM3_LoadDutyValue@dutyValue:	
  7957                           ; 1 bytes @ 0x0
  7958                           
  7959  0070                     i1I2C_SetBuffer@buffer:	
  7960                           ; 2 bytes @ 0x0
  7961                           
  7962  0070                     i1I2C_SetCallback@cb:	
  7963                           ; 2 bytes @ 0x0
  7964                           
  7965                           
  7966                           ; 2 bytes @ 0x0
  7967  0070                     	ds	1
  7968  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  7969  0071                     ??_EUSART_Receive_ISR:	
  7970                           ; 1 bytes @ 0x1
  7971                           
  7972  0071                     ??_EUSART_DefaultErrorHandler:	
  7973                           ; 1 bytes @ 0x1
  7974                           
  7975                           
  7976                           ; 1 bytes @ 0x1
  7977  0071                     	ds	1
  7978  0072                     ??_PWM3_LoadDutyValue:	
  7979  0072                     i1I2C_SetCallback@ptr:	
  7980                           ; 1 bytes @ 0x2
  7981                           
  7982  0072                     i1I2C_SetBuffer@bufferSize:	
  7983                           ; 1 bytes @ 0x2
  7984                           
  7985                           
  7986                           ; 2 bytes @ 0x2
  7987  0072                     	ds	1
  7988  0073                     ??i1_I2C_SetCallback:	
  7989                           
  7990                           ; 1 bytes @ 0x3
  7991  0073                     	ds	1
  7992  0074                     ??_Led2_PWM:	
  7993  0074                     ??i1_I2C_SetBuffer:	
  7994                           ; 1 bytes @ 0x4
  7995                           
  7996  0074                     i1I2C_SetCallback@idx:	
  7997                           ; 1 bytes @ 0x4
  7998                           
  7999                           
  8000                           ; 1 bytes @ 0x4
  8001  0074                     	ds	1
  8002  0075                     ?_I2C_SetDataCompleteCallback:	
  8003  0075                     ??_TMR2_ISR:	
  8004                           ; 1 bytes @ 0x5
  8005                           
  8006  0075                     ??_TMR2_CallBack:	
  8007                           ; 1 bytes @ 0x5
  8008                           
  8009  0075                     I2C_SetDataCompleteCallback@cb:	
  8010                           ; 1 bytes @ 0x5
  8011                           
  8012                           
  8013                           ; 2 bytes @ 0x5
  8014  0075                     	ds	2
  8015  0077                     I2C_SetDataCompleteCallback@ptr:	
  8016                           
  8017                           ; 1 bytes @ 0x7
  8018  0077                     	ds	1
  8019  0078                     ??_I2C_SetDataCompleteCallback:	
  8020                           
  8021                           ; 1 bytes @ 0x8
  8022  0078                     	ds	1
  8023  0079                     ?_rd1RegCompleteHandler:	
  8024  0079                     ?_rd2RegCompleteHandler:	
  8025                           ; 1 bytes @ 0x9
  8026                           
  8027  0079                     ?_wr1RegCompleteHandler:	
  8028                           ; 1 bytes @ 0x9
  8029                           
  8030  0079                     ?_wr2RegCompleteHandler:	
  8031                           ; 1 bytes @ 0x9
  8032                           
  8033  0079                     ?_rdBlkRegCompleteHandler:	
  8034                           ; 1 bytes @ 0x9
  8035                           
  8036  0079                     ?_I2C_CallbackReturnStop:	
  8037                           ; 1 bytes @ 0x9
  8038                           
  8039  0079                     ?_I2C_CallbackReturnReset:	
  8040                           ; 1 bytes @ 0x9
  8041                           
  8042  0079                     rd1RegCompleteHandler@ptr:	
  8043                           ; 1 bytes @ 0x9
  8044                           
  8045  0079                     rd2RegCompleteHandler@ptr:	
  8046                           ; 1 bytes @ 0x9
  8047                           
  8048  0079                     wr1RegCompleteHandler@ptr:	
  8049                           ; 1 bytes @ 0x9
  8050                           
  8051  0079                     wr2RegCompleteHandler@ptr:	
  8052                           ; 1 bytes @ 0x9
  8053                           
  8054  0079                     rdBlkRegCompleteHandler@ptr:	
  8055                           ; 1 bytes @ 0x9
  8056                           
  8057  0079                     I2C_CallbackReturnStop@funPtr:	
  8058                           ; 1 bytes @ 0x9
  8059                           
  8060  0079                     I2C_CallbackReturnReset@funPtr:	
  8061                           ; 1 bytes @ 0x9
  8062                           
  8063                           
  8064                           ; 1 bytes @ 0x9
  8065  0079                     	ds	1
  8066  007A                     ??_rd1RegCompleteHandler:	
  8067  007A                     ??_rd2RegCompleteHandler:	
  8068                           ; 1 bytes @ 0xA
  8069                           
  8070  007A                     ??_wr1RegCompleteHandler:	
  8071                           ; 1 bytes @ 0xA
  8072                           
  8073  007A                     ??_wr2RegCompleteHandler:	
  8074                           ; 1 bytes @ 0xA
  8075                           
  8076  007A                     ??_rdBlkRegCompleteHandler:	
  8077                           ; 1 bytes @ 0xA
  8078                           
  8079  007A                     ??_I2C_DO_TX:	
  8080                           ; 1 bytes @ 0xA
  8081                           
  8082  007A                     ??_I2C_DO_RX:	
  8083                           ; 1 bytes @ 0xA
  8084                           
  8085  007A                     ??_I2C_DO_TX_EMPTY:	
  8086                           ; 1 bytes @ 0xA
  8087                           
  8088  007A                     ??_I2C_DO_ADDRESS_NACK:	
  8089                           ; 1 bytes @ 0xA
  8090                           
  8091  007A                     ??_I2C_CallbackReturnStop:	
  8092                           ; 1 bytes @ 0xA
  8093                           
  8094  007A                     ??_I2C_CallbackReturnReset:	
  8095                           ; 1 bytes @ 0xA
  8096                           
  8097                           
  8098                           ; 1 bytes @ 0xA
  8099  007A                     	ds	2
  8100  007C                     _I2C_DO_TX$613:	
  8101                           
  8102                           ; 2 bytes @ 0xC
  8103  007C                     	ds	2
  8104  007E                     ??_I2C_MasterIsr:	
  8105                           
  8106                           	psect	cstackBANK0
  8107  0020                     __pcstackBANK0:	
  8108                           ; 1 bytes @ 0xE
  8109                           
  8110  0020                     ??_I2C_MasterFsm:	
  8111                           
  8112                           ; 1 bytes @ 0x0
  8113  0020                     	ds	3
  8114  0023                     ??_INTERRUPT_InterruptManager:	
  8115                           
  8116                           ; 1 bytes @ 0x3
  8117  0023                     	ds	1
  8118  0024                     ?___ftge:	
  8119  0024                     ?_I2C_SetBuffer:	
  8120                           ; 1 bit 
  8121                           
  8122  0024                     ??_I2C_Close:	
  8123                           ; 1 bytes @ 0x4
  8124                           
  8125  0024                     ?_I2C_SetInterruptHandler:	
  8126                           ; 1 bytes @ 0x4
  8127                           
  8128  0024                     ??_I2C_MasterClearIrq:	
  8129                           ; 1 bytes @ 0x4
  8130                           
  8131  0024                     ??_I2C_MasterOpen:	
  8132                           ; 1 bytes @ 0x4
  8133                           
  8134  0024                     ??_I2C_MasterEnableIrq:	
  8135                           ; 1 bytes @ 0x4
  8136                           
  8137  0024                     ??_I2C_MasterDisableIrq:	
  8138                           ; 1 bytes @ 0x4
  8139                           
  8140  0024                     ??_I2C_MasterClose:	
  8141                           ; 1 bytes @ 0x4
  8142                           
  8143  0024                     ??_I2C_MasterStart:	
  8144                           ; 1 bytes @ 0x4
  8145                           
  8146  0024                     ?_I2C_SetCallback:	
  8147                           ; 1 bytes @ 0x4
  8148                           
  8149  0024                     ??_PIN_MANAGER_Initialize:	
  8150                           ; 1 bytes @ 0x4
  8151                           
  8152  0024                     ??_OSCILLATOR_Initialize:	
  8153                           ; 1 bytes @ 0x4
  8154                           
  8155  0024                     ??_ADC_Initialize:	
  8156                           ; 1 bytes @ 0x4
  8157                           
  8158  0024                     ??_PWM3_Initialize:	
  8159                           ; 1 bytes @ 0x4
  8160                           
  8161  0024                     ?_EUSART_SetRxInterruptHandler:	
  8162                           ; 1 bytes @ 0x4
  8163                           
  8164  0024                     ?_EUSART_SetTxInterruptHandler:	
  8165                           ; 1 bytes @ 0x4
  8166                           
  8167  0024                     ?_EUSART_SetFramingErrorHandler:	
  8168                           ; 1 bytes @ 0x4
  8169                           
  8170  0024                     ?_EUSART_SetOverrunErrorHandler:	
  8171                           ; 1 bytes @ 0x4
  8172                           
  8173  0024                     ?_EUSART_SetErrorHandler:	
  8174                           ; 1 bytes @ 0x4
  8175                           
  8176  0024                     ?_TMR2_SetInterruptHandler:	
  8177                           ; 1 bytes @ 0x4
  8178                           
  8179  0024                     ??_COS_TimerSetup:	
  8180                           ; 1 bytes @ 0x4
  8181                           
  8182  0024                     ??_IsADMeasureDone:	
  8183                           ; 1 bytes @ 0x4
  8184                           
  8185  0024                     ??_isdigit:	
  8186                           ; 1 bytes @ 0x4
  8187                           
  8188  0024                     ??_I2C_Initialize:	
  8189                           ; 1 bytes @ 0x4
  8190                           
  8191  0024                     ??_I2C_MasterOperation:	
  8192                           ; 1 bytes @ 0x4
  8193                           
  8194  0024                     ??_EUSART_Write:	
  8195                           ; 1 bytes @ 0x4
  8196                           
  8197  0024                     ??_ADC_SelectChannel:	
  8198                           ; 1 bytes @ 0x4
  8199                           
  8200  0024                     ??_ADC_StartConversion:	
  8201                           ; 1 bytes @ 0x4
  8202                           
  8203  0024                     ??_COS_Init:	
  8204                           ; 1 bytes @ 0x4
  8205                           
  8206  0024                     ??_COS_TmrHandler:	
  8207                           ; 1 bytes @ 0x4
  8208                           
  8209  0024                     ??_IsSHT31MeasureDone:	
  8210                           ; 1 bytes @ 0x4
  8211                           
  8212  0024                     ?_ADC_GetConversionResult:	
  8213                           ; 1 bytes @ 0x4
  8214                           
  8215  0024                     ?___wmul:	
  8216                           ; 2 bytes @ 0x4
  8217                           
  8218  0024                     ?___lwdiv:	
  8219                           ; 2 bytes @ 0x4
  8220                           
  8221  0024                     ?_GetNtcTemp:	
  8222                           ; 2 bytes @ 0x4
  8223                           
  8224  0024                     ?___ftpack:	
  8225                           ; 3 bytes @ 0x4
  8226                           
  8227  0024                     ?_GetTemperatureC_F:	
  8228                           ; 3 bytes @ 0x4
  8229                           
  8230  0024                     ?_GetRelativeHumidity_F:	
  8231                           ; 3 bytes @ 0x4
  8232                           
  8233  0024                     _isdigit$1995:	
  8234                           ; 3 bytes @ 0x4
  8235                           
  8236  0024                     I2C_SetBuffer@buffer:	
  8237                           ; 1 bytes @ 0x4
  8238                           
  8239  0024                     I2C_SetInterruptHandler@InterruptHandler:	
  8240                           ; 2 bytes @ 0x4
  8241                           
  8242  0024                     I2C_SetCallback@cb:	
  8243                           ; 2 bytes @ 0x4
  8244                           
  8245  0024                     EUSART_SetFramingErrorHandler@interruptHandler:	
  8246                           ; 2 bytes @ 0x4
  8247                           
  8248  0024                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  8249                           ; 2 bytes @ 0x4
  8250                           
  8251  0024                     EUSART_SetErrorHandler@interruptHandler:	
  8252                           ; 2 bytes @ 0x4
  8253                           
  8254  0024                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8255                           ; 2 bytes @ 0x4
  8256                           
  8257  0024                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8258                           ; 2 bytes @ 0x4
  8259                           
  8260  0024                     TMR2_SetInterruptHandler@InterruptHandler:	
  8261                           ; 2 bytes @ 0x4
  8262                           
  8263  0024                     ___wmul@multiplier:	
  8264                           ; 2 bytes @ 0x4
  8265                           
  8266  0024                     ___lwdiv@divisor:	
  8267                           ; 2 bytes @ 0x4
  8268                           
  8269  0024                     ___ftpack@arg:	
  8270                           ; 2 bytes @ 0x4
  8271                           
  8272  0024                     ___ftge@ff1:	
  8273                           ; 3 bytes @ 0x4
  8274                           
  8275                           
  8276                           ; 3 bytes @ 0x4
  8277  0024                     	ds	1
  8278  0025                     I2C_Close@returnValue:	
  8279  0025                     I2C_MasterOperation@read:	
  8280                           ; 1 bytes @ 0x5
  8281                           
  8282  0025                     EUSART_Write@txData:	
  8283                           ; 1 bytes @ 0x5
  8284                           
  8285  0025                     ADC_SelectChannel@channel:	
  8286                           ; 1 bytes @ 0x5
  8287                           
  8288  0025                     isdigit@c:	
  8289                           ; 1 bytes @ 0x5
  8290                           
  8291                           
  8292                           ; 1 bytes @ 0x5
  8293  0025                     	ds	1
  8294  0026                     ??_I2C_Open:	
  8295  0026                     ??_I2C_SetInterruptHandler:	
  8296                           ; 1 bytes @ 0x6
  8297                           
  8298  0026                     ??_TMR2_Initialize:	
  8299                           ; 1 bytes @ 0x6
  8300                           
  8301  0026                     ??_EUSART_Initialize:	
  8302                           ; 1 bytes @ 0x6
  8303                           
  8304  0026                     ??_EUSART_SetRxInterruptHandler:	
  8305                           ; 1 bytes @ 0x6
  8306                           
  8307  0026                     ??_EUSART_SetTxInterruptHandler:	
  8308                           ; 1 bytes @ 0x6
  8309                           
  8310  0026                     ??_EUSART_SetFramingErrorHandler:	
  8311                           ; 1 bytes @ 0x6
  8312                           
  8313  0026                     ??_EUSART_SetOverrunErrorHandler:	
  8314                           ; 1 bytes @ 0x6
  8315                           
  8316  0026                     ??_EUSART_SetErrorHandler:	
  8317                           ; 1 bytes @ 0x6
  8318                           
  8319  0026                     ??_TMR2_SetInterruptHandler:	
  8320                           ; 1 bytes @ 0x6
  8321                           
  8322  0026                     ??_AD_Task:	
  8323                           ; 1 bytes @ 0x6
  8324                           
  8325  0026                     ??_ADC_GetConversionResult:	
  8326                           ; 1 bytes @ 0x6
  8327                           
  8328  0026                     I2C_MasterOperation@returnValue:	
  8329                           ; 1 bytes @ 0x6
  8330                           
  8331  0026                     I2C_SetCallback@ptr:	
  8332                           ; 1 bytes @ 0x6
  8333                           
  8334  0026                     I2C_SetBuffer@bufferSize:	
  8335                           ; 1 bytes @ 0x6
  8336                           
  8337  0026                     ___wmul@multiplicand:	
  8338                           ; 2 bytes @ 0x6
  8339                           
  8340  0026                     ___lwdiv@dividend:	
  8341                           ; 2 bytes @ 0x6
  8342                           
  8343                           
  8344                           ; 2 bytes @ 0x6
  8345  0026                     	ds	1
  8346  0027                     ??_I2C_MasterWrite:	
  8347  0027                     ??_I2C_MasterRead:	
  8348                           ; 1 bytes @ 0x7
  8349                           
  8350  0027                     ??_I2C_SetCallback:	
  8351                           ; 1 bytes @ 0x7
  8352                           
  8353  0027                     ??_GetNtcTemp:	
  8354                           ; 1 bytes @ 0x7
  8355                           
  8356  0027                     ??_SYSTEM_Initialize:	
  8357                           ; 1 bytes @ 0x7
  8358                           
  8359  0027                     ??_GetTemperatureC_F:	
  8360                           ; 1 bytes @ 0x7
  8361                           
  8362  0027                     ??_GetRelativeHumidity_F:	
  8363                           ; 1 bytes @ 0x7
  8364                           
  8365  0027                     I2C_Open@address:	
  8366                           ; 1 bytes @ 0x7
  8367                           
  8368  0027                     COS_Init@tempbyte1:	
  8369                           ; 1 bytes @ 0x7
  8370                           
  8371  0027                     ___ftpack@exp:	
  8372                           ; 1 bytes @ 0x7
  8373                           
  8374  0027                     GetNtcTemp@NtcTemp:	
  8375                           ; 1 bytes @ 0x7
  8376                           
  8377  0027                     ___ftge@ff2:	
  8378                           ; 3 bytes @ 0x7
  8379                           
  8380                           
  8381                           ; 3 bytes @ 0x7
  8382  0027                     	ds	1
  8383  0028                     ??_I2C_SetBuffer:	
  8384  0028                     ??___wmul:	
  8385                           ; 1 bytes @ 0x8
  8386                           
  8387  0028                     ??___lwdiv:	
  8388                           ; 1 bytes @ 0x8
  8389                           
  8390  0028                     I2C_Open@returnValue:	
  8391                           ; 1 bytes @ 0x8
  8392                           
  8393  0028                     I2C_SetCallback@idx:	
  8394                           ; 1 bytes @ 0x8
  8395                           
  8396  0028                     COS_Init@tempbyte2:	
  8397                           ; 1 bytes @ 0x8
  8398                           
  8399  0028                     COS_TmrHandler@tempbyte1:	
  8400                           ; 1 bytes @ 0x8
  8401                           
  8402  0028                     ___ftpack@sign:	
  8403                           ; 1 bytes @ 0x8
  8404                           
  8405  0028                     ___wmul@product:	
  8406                           ; 1 bytes @ 0x8
  8407                           
  8408                           
  8409                           ; 2 bytes @ 0x8
  8410  0028                     	ds	1
  8411  0029                     ?_I2C_SetAddressNackCallback:	
  8412  0029                     ??___ftpack:	
  8413                           ; 1 bytes @ 0x9
  8414                           
  8415  0029                     ?_I2C_ReadNBytes:	
  8416                           ; 1 bytes @ 0x9
  8417                           
  8418  0029                     I2C_ReadNBytes@data:	
  8419                           ; 1 bytes @ 0x9
  8420                           
  8421  0029                     COS_TmrHandler@tempbyte2:	
  8422                           ; 1 bytes @ 0x9
  8423                           
  8424  0029                     ___lwdiv@counter:	
  8425                           ; 1 bytes @ 0x9
  8426                           
  8427  0029                     I2C_SetAddressNackCallback@cb:	
  8428                           ; 1 bytes @ 0x9
  8429                           
  8430                           
  8431                           ; 2 bytes @ 0x9
  8432  0029                     	ds	1
  8433  002A                     ??___ftge:	
  8434  002A                     I2C_ReadNBytes@len:	
  8435                           ; 1 bytes @ 0xA
  8436                           
  8437  002A                     ___lwdiv@quotient:	
  8438                           ; 2 bytes @ 0xA
  8439                           
  8440                           
  8441                           ; 2 bytes @ 0xA
  8442  002A                     	ds	1
  8443  002B                     I2C_SetAddressNackCallback@ptr:	
  8444                           
  8445                           ; 1 bytes @ 0xB
  8446  002B                     	ds	1
  8447  002C                     ??_I2C_SetAddressNackCallback:	
  8448  002C                     ??_I2C_ReadNBytes:	
  8449                           ; 1 bytes @ 0xC
  8450                           
  8451  002C                     ?___lwmod:	
  8452                           ; 1 bytes @ 0xC
  8453                           
  8454  002C                     ?___lwtoft:	
  8455                           ; 2 bytes @ 0xC
  8456                           
  8457  002C                     I2C_ReadNBytes@address:	
  8458                           ; 3 bytes @ 0xC
  8459                           
  8460  002C                     ___lwmod@divisor:	
  8461                           ; 1 bytes @ 0xC
  8462                           
  8463  002C                     ___lwtoft@c:	
  8464                           ; 2 bytes @ 0xC
  8465                           
  8466                           
  8467                           ; 2 bytes @ 0xC
  8468  002C                     	ds	1
  8469  002D                     ?_I2C_WriteNBytes:	
  8470  002D                     I2C_WriteNBytes@data:	
  8471                           ; 1 bytes @ 0xD
  8472                           
  8473                           
  8474                           ; 1 bytes @ 0xD
  8475  002D                     	ds	1
  8476  002E                     I2C_WriteNBytes@len:	
  8477  002E                     ___lwmod@dividend:	
  8478                           ; 2 bytes @ 0xE
  8479                           
  8480                           
  8481                           ; 2 bytes @ 0xE
  8482  002E                     	ds	1
  8483  002F                     ??___lwtoft:	
  8484                           
  8485                           ; 1 bytes @ 0xF
  8486  002F                     	ds	1
  8487  0030                     ??_I2C_WriteNBytes:	
  8488  0030                     ??___lwmod:	
  8489                           ; 1 bytes @ 0x10
  8490                           
  8491  0030                     ?___ftmul:	
  8492                           ; 1 bytes @ 0x10
  8493                           
  8494  0030                     I2C_WriteNBytes@address:	
  8495                           ; 3 bytes @ 0x10
  8496                           
  8497  0030                     ___ftmul@f1:	
  8498                           ; 1 bytes @ 0x10
  8499                           
  8500                           
  8501                           ; 3 bytes @ 0x10
  8502  0030                     	ds	1
  8503  0031                     ___lwmod@counter:	
  8504                           
  8505                           ; 1 bytes @ 0x11
  8506  0031                     	ds	1
  8507  0032                     ?_sprintf:	
  8508  0032                     sprintf@f:	
  8509                           ; 2 bytes @ 0x12
  8510                           
  8511                           
  8512                           ; 2 bytes @ 0x12
  8513  0032                     	ds	1
  8514  0033                     ___ftmul@f2:	
  8515                           
  8516                           ; 3 bytes @ 0x13
  8517  0033                     	ds	3
  8518  0036                     ??_sprintf:	
  8519  0036                     ??___ftmul:	
  8520                           ; 1 bytes @ 0x16
  8521                           
  8522                           
  8523                           ; 1 bytes @ 0x16
  8524  0036                     	ds	4
  8525  003A                     sprintf@ap:	
  8526  003A                     ___ftmul@exp:	
  8527                           ; 1 bytes @ 0x1A
  8528                           
  8529                           
  8530                           ; 1 bytes @ 0x1A
  8531  003A                     	ds	1
  8532  003B                     sprintf@prec:	
  8533  003B                     ___ftmul@f3_as_product:	
  8534                           ; 1 bytes @ 0x1B
  8535                           
  8536                           
  8537                           ; 3 bytes @ 0x1B
  8538  003B                     	ds	1
  8539  003C                     sprintf@flag:	
  8540                           
  8541                           ; 1 bytes @ 0x1C
  8542  003C                     	ds	1
  8543  003D                     sprintf@val:	
  8544                           
  8545                           ; 2 bytes @ 0x1D
  8546  003D                     	ds	1
  8547  003E                     ___ftmul@cntr:	
  8548                           
  8549                           ; 1 bytes @ 0x1E
  8550  003E                     	ds	1
  8551  003F                     ___ftmul@sign:	
  8552  003F                     sprintf@width:	
  8553                           ; 1 bytes @ 0x1F
  8554                           
  8555                           
  8556                           ; 2 bytes @ 0x1F
  8557  003F                     	ds	1
  8558  0040                     ?___ftdiv:	
  8559  0040                     ?___fttol:	
  8560                           ; 3 bytes @ 0x20
  8561                           
  8562  0040                     ___ftdiv@f2:	
  8563                           ; 4 bytes @ 0x20
  8564                           
  8565  0040                     ___fttol@f1:	
  8566                           ; 3 bytes @ 0x20
  8567                           
  8568                           
  8569                           ; 3 bytes @ 0x20
  8570  0040                     	ds	1
  8571  0041                     sprintf@sp:	
  8572                           
  8573                           ; 1 bytes @ 0x21
  8574  0041                     	ds	1
  8575  0042                     sprintf@c:	
  8576                           
  8577                           ; 1 bytes @ 0x22
  8578  0042                     	ds	1
  8579  0043                     ___ftdiv@f1:	
  8580                           
  8581                           ; 3 bytes @ 0x23
  8582  0043                     	ds	1
  8583  0044                     ??___fttol:	
  8584                           
  8585                           ; 1 bytes @ 0x24
  8586  0044                     	ds	2
  8587  0046                     ??___ftdiv:	
  8588                           
  8589                           ; 1 bytes @ 0x26
  8590  0046                     	ds	2
  8591  0048                     ___fttol@sign1:	
  8592                           
  8593                           ; 1 bytes @ 0x28
  8594  0048                     	ds	1
  8595  0049                     ___fttol@lval:	
  8596                           
  8597                           ; 4 bytes @ 0x29
  8598  0049                     	ds	1
  8599  004A                     ___ftdiv@cntr:	
  8600                           
  8601                           ; 1 bytes @ 0x2A
  8602  004A                     	ds	1
  8603  004B                     ___ftdiv@f3:	
  8604                           
  8605                           ; 3 bytes @ 0x2B
  8606  004B                     	ds	2
  8607  004D                     ___fttol@exp1:	
  8608                           
  8609                           ; 1 bytes @ 0x2D
  8610  004D                     	ds	1
  8611  004E                     ?_abs:	
  8612  004E                     ___ftdiv@exp:	
  8613                           ; 2 bytes @ 0x2E
  8614                           
  8615  004E                     abs@a:	
  8616                           ; 1 bytes @ 0x2E
  8617                           
  8618                           
  8619                           ; 2 bytes @ 0x2E
  8620  004E                     	ds	1
  8621  004F                     ___ftdiv@sign:	
  8622                           
  8623                           ; 1 bytes @ 0x2F
  8624  004F                     	ds	1
  8625  0050                     ??_abs:	
  8626  0050                     ?_SHT3x_CalcRelativeHumidity_F:	
  8627                           ; 1 bytes @ 0x30
  8628                           
  8629  0050                     ?___ftadd:	
  8630                           ; 3 bytes @ 0x30
  8631                           
  8632  0050                     ___ftadd@f1:	
  8633                           ; 3 bytes @ 0x30
  8634                           
  8635                           
  8636                           ; 3 bytes @ 0x30
  8637  0050                     	ds	2
  8638  0052                     ?___awtoft:	
  8639  0052                     ___awtoft@c:	
  8640                           ; 3 bytes @ 0x32
  8641                           
  8642                           
  8643                           ; 2 bytes @ 0x32
  8644  0052                     	ds	1
  8645  0053                     ??_SHT3x_CalcRelativeHumidity_F:	
  8646  0053                     SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat:	
  8647                           ; 1 bytes @ 0x33
  8648                           
  8649  0053                     ___ftadd@f2:	
  8650                           ; 3 bytes @ 0x33
  8651                           
  8652                           
  8653                           ; 3 bytes @ 0x33
  8654  0053                     	ds	2
  8655  0055                     ??___awtoft:	
  8656                           
  8657                           ; 1 bytes @ 0x35
  8658  0055                     	ds	1
  8659  0056                     ??___ftadd:	
  8660                           
  8661                           ; 1 bytes @ 0x36
  8662  0056                     	ds	1
  8663  0057                     ___awtoft@sign:	
  8664                           
  8665                           ; 1 bytes @ 0x37
  8666  0057                     	ds	1
  8667  0058                     ??_UartDisplay:	
  8668                           
  8669                           ; 1 bytes @ 0x38
  8670  0058                     	ds	2
  8671  005A                     ___ftadd@sign:	
  8672                           
  8673                           ; 1 bytes @ 0x3A
  8674  005A                     	ds	1
  8675  005B                     ___ftadd@exp2:	
  8676                           
  8677                           ; 1 bytes @ 0x3B
  8678  005B                     	ds	1
  8679  005C                     ___ftadd@exp1:	
  8680                           
  8681                           ; 1 bytes @ 0x3C
  8682  005C                     	ds	1
  8683  005D                     ?_SHT3x_CalcTemperatureC_F:	
  8684                           
  8685                           ; 3 bytes @ 0x3D
  8686  005D                     	ds	3
  8687  0060                     ??_SHT3x_CalcTemperatureC_F:	
  8688  0060                     SHT3x_CalcTemperatureC_F@TemperatureFloat:	
  8689                           ; 1 bytes @ 0x40
  8690                           
  8691                           
  8692                           ; 3 bytes @ 0x40
  8693  0060                     	ds	3
  8694  0063                     ??_COS_TskMan:	
  8695                           
  8696                           ; 1 bytes @ 0x43
  8697  0063                     	ds	4
  8698  0067                     ??_main:	
  8699                           
  8700                           	psect	maintext
  8701  09F2                     __pmaintext:	
  8702                           ; 1 bytes @ 0x47
  8703 ;;
  8704 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  8705 ;;
  8706 ;; *************** function _main *****************
  8707 ;; Defined at:
  8708 ;;		line 51 in file "main.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : B1F/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels required when called:   13
  8728 ;; This function calls:
  8729 ;;		_COS_Init
  8730 ;;		_COS_TmrHandler
  8731 ;;		_COS_TskMan
  8732 ;;		_SYSTEM_Initialize
  8733 ;;		_TMR2_SetInterruptHandler
  8734 ;; This function is called by:
  8735 ;;		Startup code after reset
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function _main
  8741  09F2                     _main:	
  8742                           
  8743                           ;main.c: 54: SYSTEM_Initialize();
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8747  09F2  3189  217A  3189   	fcall	_SYSTEM_Initialize
  8748                           
  8749                           ;main.c: 55: COS_Init();
  8750  09F5  318D  255B  3189   	fcall	_COS_Init
  8751                           
  8752                           ;main.c: 56: TMR2_SetInterruptHandler(Led2_PWM);
  8753  09F8  30C8               	movlw	low _Led2_PWM
  8754  09F9  0020               	movlb	0	; select bank0
  8755  09FA  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8756  09FB  300E               	movlw	high _Led2_PWM
  8757  09FC  00A5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8758  09FD  3188  203B  3189   	fcall	_TMR2_SetInterruptHandler
  8759                           
  8760                           ;main.c: 62: (INTCONbits.GIE = 1);
  8761  0A00  178B               	bsf	11,7	;volatile
  8762                           
  8763                           ;main.c: 65: (INTCONbits.PEIE = 1);
  8764  0A01  170B               	bsf	11,6	;volatile
  8765  0A02                     l1192:	
  8766                           ;main.c: 73: while (1)
  8767                           
  8768                           
  8769                           ;main.c: 74: {
  8770                           ;main.c: 75: COS_TmrHandler();
  8771  0A02  318F  278A  3189   	fcall	_COS_TmrHandler
  8772                           
  8773                           ;main.c: 77: if (COS_tsk_ena)
  8774  0A05  0022               	movlb	2	; select bank2
  8775  0A06  086E               	movf	_COS_tsk_ena^(0+256),w
  8776  0A07  1903               	btfsc	3,2
  8777  0A08  2A02               	goto	l1192
  8778                           
  8779                           ;main.c: 78: {
  8780                           ;main.c: 79: COS_TskMan();
  8781  0A09  3187  2743  3189   	fcall	_COS_TskMan
  8782  0A0C  2A02               	goto	l1192
  8783  0A0D                     __end_of_main:	
  8784                           
  8785                           	psect	text1
  8786  097A                     __ptext1:	
  8787 ;; *************** function _SYSTEM_Initialize *****************
  8788 ;; Defined at:
  8789 ;;		line 50 in file "mcc_generated_files/mcc.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;		None
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  1    wreg      void 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        0 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    9
  8810 ;; This function calls:
  8811 ;;		_ADC_Initialize
  8812 ;;		_EUSART_Initialize
  8813 ;;		_I2C_Initialize
  8814 ;;		_OSCILLATOR_Initialize
  8815 ;;		_PIN_MANAGER_Initialize
  8816 ;;		_PWM3_Initialize
  8817 ;;		_TMR2_Initialize
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           
  8824                           ;psect for function _SYSTEM_Initialize
  8825  097A                     _SYSTEM_Initialize:	
  8826                           
  8827                           ;mcc.c: 52: I2C_Initialize();
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8831  097A  3188  2032  3189   	fcall	_I2C_Initialize
  8832                           
  8833                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  8834  097D  3187  27C3  3189   	fcall	_PIN_MANAGER_Initialize
  8835                           
  8836                           ;mcc.c: 54: OSCILLATOR_Initialize();
  8837  0980  3197  27DF  3189   	fcall	_OSCILLATOR_Initialize
  8838                           
  8839                           ;mcc.c: 55: ADC_Initialize();
  8840  0983  3188  2005  3189   	fcall	_ADC_Initialize
  8841                           
  8842                           ;mcc.c: 56: PWM3_Initialize();
  8843  0986  3188  205A  3189   	fcall	_PWM3_Initialize
  8844                           
  8845                           ;mcc.c: 57: TMR2_Initialize();
  8846  0989  3189  2165  3189   	fcall	_TMR2_Initialize
  8847                           
  8848                           ;mcc.c: 58: EUSART_Initialize();
  8849  098C  318D  25A1         	fcall	_EUSART_Initialize
  8850  098E  0008               	return
  8851  098F                     __end_of_SYSTEM_Initialize:	
  8852                           
  8853                           	psect	text2
  8854  0965                     __ptext2:	
  8855 ;; *************** function _TMR2_Initialize *****************
  8856 ;; Defined at:
  8857 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      void 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        0 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    8
  8878 ;; This function calls:
  8879 ;;		_TMR2_SetInterruptHandler
  8880 ;; This function is called by:
  8881 ;;		_SYSTEM_Initialize
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           
  8886                           ;psect for function _TMR2_Initialize
  8887  0965                     _TMR2_Initialize:	
  8888                           
  8889                           ;tmr2.c: 69: T2CLKCON = 0x00;
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8893  0965  0020               	movlb	0	; select bank0
  8894  0966  019E               	clrf	30	;volatile
  8895                           
  8896                           ;tmr2.c: 72: T2HLT = 0x00;
  8897  0967  019D               	clrf	29	;volatile
  8898                           
  8899                           ;tmr2.c: 75: T2RST = 0x00;
  8900  0968  019F               	clrf	31	;volatile
  8901                           
  8902                           ;tmr2.c: 78: T2PR = 0x3E;
  8903  0969  303E               	movlw	62
  8904  096A  009B               	movwf	27	;volatile
  8905                           
  8906                           ;tmr2.c: 81: T2TMR = 0x00;
  8907  096B  019A               	clrf	26	;volatile
  8908                           
  8909                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  8910  096C  1090               	bcf	16,1	;volatile
  8911                           
  8912                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  8913  096D  0021               	movlb	1	; select bank1
  8914  096E  1490               	bsf	16,1	;volatile
  8915                           
  8916                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  8917  096F  30FF               	movlw	low _TMR2_DefaultInterruptHandler
  8918  0970  0020               	movlb	0	; select bank0
  8919  0971  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8920  0972  3007               	movlw	high _TMR2_DefaultInterruptHandler
  8921  0973  00A5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8922  0974  3188  203B         	fcall	_TMR2_SetInterruptHandler
  8923                           
  8924                           ;tmr2.c: 93: T2CON = 0xE0;
  8925  0976  30E0               	movlw	224
  8926  0977  0020               	movlb	0	; select bank0
  8927  0978  009C               	movwf	28	;volatile
  8928  0979  0008               	return
  8929  097A                     __end_of_TMR2_Initialize:	
  8930                           
  8931                           	psect	text3
  8932  083B                     __ptext3:	
  8933 ;; *************** function _TMR2_SetInterruptHandler *****************
  8934 ;; Defined at:
  8935 ;;		line 193 in file "mcc_generated_files/tmr2.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  InterruptHan    2    4[BANK0 ] PTR FTN()void 
  8938 ;;		 -> Led2_PWM(1), TMR2_DefaultInterruptHandler(1), 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;Total ram usage:        2 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    7
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_TMR2_Initialize
  8961 ;;		_main
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _TMR2_SetInterruptHandler
  8967  083B                     _TMR2_SetInterruptHandler:	
  8968                           
  8969                           ;tmr2.c: 194: TMR2_InterruptHandler = InterruptHandler;
  8970                           
  8971                           ;incstack = 0
  8972                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8973  083B  0020               	movlb	0	; select bank0
  8974  083C  0825               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  8975  083D  0022               	movlb	2	; select bank2
  8976  083E  00EB               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  8977  083F  0020               	movlb	0	; select bank0
  8978  0840  0824               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  8979  0841  0022               	movlb	2	; select bank2
  8980  0842  00EA               	movwf	_TMR2_InterruptHandler^(0+256)
  8981  0843  0008               	return
  8982  0844                     __end_of_TMR2_SetInterruptHandler:	
  8983                           
  8984                           	psect	text4
  8985  085A                     __ptext4:	
  8986 ;; *************** function _PWM3_Initialize *****************
  8987 ;; Defined at:
  8988 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;		None
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;		None
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  1    wreg      void 
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;Total ram usage:        0 bytes
  9007 ;; Hardware stack levels used:    1
  9008 ;; Hardware stack levels required when called:    7
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_SYSTEM_Initialize
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function _PWM3_Initialize
  9018  085A                     _PWM3_Initialize:	
  9019                           
  9020                           ;pwm3.c: 62: PWM3CON = 0x80;
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  9024  085A  3080               	movlw	128
  9025  085B  002C               	movlb	12	; select bank12
  9026  085C  0099               	movwf	25	;volatile
  9027                           
  9028                           ;pwm3.c: 65: PWM3DCH = 0x1F;
  9029  085D  301F               	movlw	31
  9030  085E  0098               	movwf	24	;volatile
  9031                           
  9032                           ;pwm3.c: 68: PWM3DCL = 0x40;
  9033  085F  3040               	movlw	64
  9034  0860  0097               	movwf	23	;volatile
  9035                           
  9036                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  9037  0861  30CF               	movlw	-49
  9038  0862  0025               	movlb	5	; select bank5
  9039  0863  059E               	andwf	30,f	;volatile
  9040  0864  0008               	return
  9041  0865                     __end_of_PWM3_Initialize:	
  9042                           
  9043                           	psect	text5
  9044  07C3                     __ptext5:	
  9045 ;; *************** function _PIN_MANAGER_Initialize *****************
  9046 ;; Defined at:
  9047 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;		None
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;		None
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  1    wreg      void 
  9054 ;; Registers used:
  9055 ;;		wreg, status,2
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;Total ram usage:        0 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    7
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_SYSTEM_Initialize
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _PIN_MANAGER_Initialize
  9077  07C3                     _PIN_MANAGER_Initialize:	
  9078                           
  9079                           ;pin_manager.c: 60: LATA = 0x00;
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9083  07C3  0022               	movlb	2	; select bank2
  9084  07C4  018C               	clrf	12	;volatile
  9085                           
  9086                           ;pin_manager.c: 61: LATB = 0x00;
  9087  07C5  018D               	clrf	13	;volatile
  9088                           
  9089                           ;pin_manager.c: 62: LATC = 0x00;
  9090  07C6  018E               	clrf	14	;volatile
  9091                           
  9092                           ;pin_manager.c: 67: TRISA = 0x33;
  9093  07C7  3033               	movlw	51
  9094  07C8  0021               	movlb	1	; select bank1
  9095  07C9  008C               	movwf	12	;volatile
  9096                           
  9097                           ;pin_manager.c: 68: TRISB = 0x70;
  9098  07CA  3070               	movlw	112
  9099  07CB  008D               	movwf	13	;volatile
  9100                           
  9101                           ;pin_manager.c: 69: TRISC = 0xDF;
  9102  07CC  30DF               	movlw	223
  9103  07CD  008E               	movwf	14	;volatile
  9104                           
  9105                           ;pin_manager.c: 74: ANSELC = 0xCF;
  9106  07CE  30CF               	movlw	207
  9107  07CF  0023               	movlb	3	; select bank3
  9108  07D0  008E               	movwf	14	;volatile
  9109                           
  9110                           ;pin_manager.c: 75: ANSELB = 0x80;
  9111  07D1  3080               	movlw	128
  9112  07D2  008D               	movwf	13	;volatile
  9113                           
  9114                           ;pin_manager.c: 76: ANSELA = 0x13;
  9115  07D3  3013               	movlw	19
  9116  07D4  008C               	movwf	12	;volatile
  9117                           
  9118                           ;pin_manager.c: 81: WPUB = 0x00;
  9119  07D5  0024               	movlb	4	; select bank4
  9120  07D6  018D               	clrf	13	;volatile
  9121                           
  9122                           ;pin_manager.c: 82: WPUA = 0x00;
  9123  07D7  018C               	clrf	12	;volatile
  9124                           
  9125                           ;pin_manager.c: 83: WPUC = 0x00;
  9126  07D8  018E               	clrf	14	;volatile
  9127                           
  9128                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  9129  07D9  0021               	movlb	1	; select bank1
  9130  07DA  1795               	bsf	21,7	;volatile
  9131                           
  9132                           ;pin_manager.c: 89: ODCONA = 0x00;
  9133  07DB  0025               	movlb	5	; select bank5
  9134  07DC  018C               	clrf	12	;volatile
  9135                           
  9136                           ;pin_manager.c: 90: ODCONB = 0x00;
  9137  07DD  018D               	clrf	13	;volatile
  9138                           
  9139                           ;pin_manager.c: 91: ODCONC = 0x00;
  9140  07DE  018E               	clrf	14	;volatile
  9141                           
  9142                           ;pin_manager.c: 96: SLRCONA = 0x37;
  9143  07DF  3037               	movlw	55
  9144  07E0  0026               	movlb	6	; select bank6
  9145  07E1  008C               	movwf	12	;volatile
  9146                           
  9147                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  9148  07E2  30F0               	movlw	240
  9149  07E3  008D               	movwf	13	;volatile
  9150                           
  9151                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  9152  07E4  30FF               	movlw	255
  9153  07E5  008E               	movwf	14	;volatile
  9154                           
  9155                           ;pin_manager.c: 103: INLVLA = 0x3F;
  9156  07E6  303F               	movlw	63
  9157  07E7  0027               	movlb	7	; select bank7
  9158  07E8  008C               	movwf	12	;volatile
  9159                           
  9160                           ;pin_manager.c: 104: INLVLB = 0xF0;
  9161  07E9  30F0               	movlw	240
  9162  07EA  008D               	movwf	13	;volatile
  9163                           
  9164                           ;pin_manager.c: 105: INLVLC = 0xFF;
  9165  07EB  30FF               	movlw	255
  9166  07EC  008E               	movwf	14	;volatile
  9167                           
  9168                           ;pin_manager.c: 114: RXPPS = 0x0D;
  9169  07ED  300D               	movlw	13
  9170  07EE  003C               	movlb	28	; select bank28
  9171  07EF  00A4               	movwf	36	;volatile
  9172                           
  9173                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  9174  07F0  300C               	movlw	12
  9175  07F1  00A1               	movwf	33	;volatile
  9176                           
  9177                           ;pin_manager.c: 116: RB6PPS = 0x10;
  9178  07F2  3010               	movlw	16
  9179  07F3  003D               	movlb	29	; select bank29
  9180  07F4  009E               	movwf	30	;volatile
  9181                           
  9182                           ;pin_manager.c: 117: RB7PPS = 0x12;
  9183  07F5  3012               	movlw	18
  9184  07F6  009F               	movwf	31	;volatile
  9185                           
  9186                           ;pin_manager.c: 118: RB4PPS = 0x11;
  9187  07F7  3011               	movlw	17
  9188  07F8  009C               	movwf	28	;volatile
  9189                           
  9190                           ;pin_manager.c: 119: RC5PPS = 0x0E;
  9191  07F9  300E               	movlw	14
  9192  07FA  00A5               	movwf	37	;volatile
  9193                           
  9194                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  9195  07FB  300E               	movlw	14
  9196  07FC  003C               	movlb	28	; select bank28
  9197  07FD  00A0               	movwf	32	;volatile
  9198  07FE  0008               	return
  9199  07FF                     __end_of_PIN_MANAGER_Initialize:	
  9200                           
  9201                           	psect	text6
  9202  17DF                     __ptext6:	
  9203 ;; *************** function _OSCILLATOR_Initialize *****************
  9204 ;; Defined at:
  9205 ;;		line 61 in file "mcc_generated_files/mcc.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;		None
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;		None
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  1    wreg      void 
  9212 ;; Registers used:
  9213 ;;		wreg, status,2
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;Total ram usage:        0 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    7
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_SYSTEM_Initialize
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           
  9234                           ;psect for function _OSCILLATOR_Initialize
  9235  17DF                     _OSCILLATOR_Initialize:	
  9236                           
  9237                           ;mcc.c: 64: OSCCON = 0x78;
  9238                           
  9239                           ;incstack = 0
  9240                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9241  17DF  3078               	movlw	120
  9242  17E0  0021               	movlb	1	; select bank1
  9243  17E1  0099               	movwf	25	;volatile
  9244                           
  9245                           ;mcc.c: 66: OSCTUNE = 0x00;
  9246  17E2  0198               	clrf	24	;volatile
  9247                           
  9248                           ;mcc.c: 68: BORCON = 0x00;
  9249  17E3  0022               	movlb	2	; select bank2
  9250  17E4  0196               	clrf	22	;volatile
  9251  17E5  0008               	return
  9252  17E6                     __end_of_OSCILLATOR_Initialize:	
  9253                           
  9254                           	psect	text7
  9255  0832                     __ptext7:	
  9256 ;; *************** function _I2C_Initialize *****************
  9257 ;; Defined at:
  9258 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		wreg, status,2
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:    7
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_SYSTEM_Initialize
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _I2C_Initialize
  9288  0832                     _I2C_Initialize:	
  9289                           
  9290                           ;i2c_master.c: 169: SSP1STAT = 0x00;
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  9294  0832  0024               	movlb	4	; select bank4
  9295  0833  0194               	clrf	20	;volatile
  9296                           
  9297                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  9298  0834  3008               	movlw	8
  9299  0835  0095               	movwf	21	;volatile
  9300                           
  9301                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  9302  0836  0196               	clrf	22	;volatile
  9303                           
  9304                           ;i2c_master.c: 172: SSP1ADD = 0x27;
  9305  0837  3027               	movlw	39
  9306  0838  0092               	movwf	18	;volatile
  9307                           
  9308                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  9309  0839  1295               	bcf	21,5	;volatile
  9310  083A  0008               	return
  9311  083B                     __end_of_I2C_Initialize:	
  9312                           
  9313                           	psect	text8
  9314  0DA1                     __ptext8:	
  9315 ;; *************** function _EUSART_Initialize *****************
  9316 ;; Defined at:
  9317 ;;		line 88 in file "mcc_generated_files/eusart.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;		None
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      void 
  9324 ;; Registers used:
  9325 ;;		wreg, status,2, status,0, pclath, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;Total ram usage:        1 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:    8
  9338 ;; This function calls:
  9339 ;;		_EUSART_SetErrorHandler
  9340 ;;		_EUSART_SetFramingErrorHandler
  9341 ;;		_EUSART_SetOverrunErrorHandler
  9342 ;;		_EUSART_SetRxInterruptHandler
  9343 ;;		_EUSART_SetTxInterruptHandler
  9344 ;; This function is called by:
  9345 ;;		_SYSTEM_Initialize
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           
  9350                           ;psect for function _EUSART_Initialize
  9351  0DA1                     _EUSART_Initialize:	
  9352                           
  9353                           ;eusart.c: 91: PIE1bits.RCIE = 0;
  9354                           
  9355                           ;incstack = 0
  9356                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9357  0DA1  0021               	movlb	1	; select bank1
  9358  0DA2  1290               	bcf	16,5	;volatile
  9359                           
  9360                           ;eusart.c: 92: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  9361  0DA3  30AA               	movlw	low _EUSART_Receive_ISR
  9362  0DA4  0020               	movlb	0	; select bank0
  9363  0DA5  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  9364  0DA6  300C               	movlw	high _EUSART_Receive_ISR
  9365  0DA7  00A5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  9366  0DA8  3197  27CC  318D   	fcall	_EUSART_SetRxInterruptHandler
  9367                           
  9368                           ;eusart.c: 93: PIE1bits.TXIE = 0;
  9369  0DAB  0021               	movlb	1	; select bank1
  9370  0DAC  1210               	bcf	16,4	;volatile
  9371                           
  9372                           ;eusart.c: 94: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
  9373  0DAD  3045               	movlw	low _EUSART_Transmit_ISR
  9374  0DAE  0020               	movlb	0	; select bank0
  9375  0DAF  00A4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  9376  0DB0  300A               	movlw	high _EUSART_Transmit_ISR
  9377  0DB1  00A5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  9378  0DB2  3188  2029  318D   	fcall	_EUSART_SetTxInterruptHandler
  9379                           
  9380                           ;eusart.c: 98: BAUD1CON = 0x08;
  9381  0DB5  3008               	movlw	8
  9382  0DB6  0023               	movlb	3	; select bank3
  9383  0DB7  009F               	movwf	31	;volatile
  9384                           
  9385                           ;eusart.c: 101: RC1STA = 0x90;
  9386  0DB8  3090               	movlw	144
  9387  0DB9  009D               	movwf	29	;volatile
  9388                           
  9389                           ;eusart.c: 104: TX1STA = 0x24;
  9390  0DBA  3024               	movlw	36
  9391  0DBB  009E               	movwf	30	;volatile
  9392                           
  9393                           ;eusart.c: 107: SPBRGL = 0xCF;
  9394  0DBC  30CF               	movlw	207
  9395  0DBD  009B               	movwf	27	;volatile
  9396                           
  9397                           ;eusart.c: 110: SPBRGH = 0x00;
  9398  0DBE  019C               	clrf	28	;volatile
  9399                           
  9400                           ;eusart.c: 113: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  9401  0DBF  3048               	movlw	low _EUSART_DefaultFramingErrorHandler
  9402  0DC0  0020               	movlb	0	; select bank0
  9403  0DC1  00A4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  9404  0DC2  3017               	movlw	high _EUSART_DefaultFramingErrorHandler
  9405  0DC3  00A5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  9406  0DC4  3188  2017  318D   	fcall	_EUSART_SetFramingErrorHandler
  9407                           
  9408                           ;eusart.c: 114: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  9409  0DC7  307B               	movlw	low _EUSART_DefaultOverrunErrorHandler
  9410  0DC8  0020               	movlb	0	; select bank0
  9411  0DC9  00A4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  9412  0DCA  3017               	movlw	high _EUSART_DefaultOverrunErrorHandler
  9413  0DCB  00A5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  9414  0DCC  3188  2020  318D   	fcall	_EUSART_SetOverrunErrorHandler
  9415                           
  9416                           ;eusart.c: 115: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  9417  0DCF  304B               	movlw	low _EUSART_DefaultErrorHandler
  9418  0DD0  0020               	movlb	0	; select bank0
  9419  0DD1  00A4               	movwf	EUSART_SetErrorHandler@interruptHandler
  9420  0DD2  3017               	movlw	high _EUSART_DefaultErrorHandler
  9421  0DD3  00A5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  9422  0DD4  3188  200E         	fcall	_EUSART_SetErrorHandler
  9423                           
  9424                           ;eusart.c: 117: eusartRxLastError.status = 0;
  9425  0DD6  0021               	movlb	1	; select bank1
  9426  0DD7  01CF               	clrf	_eusartRxLastError^(0+128)	;volatile
  9427                           
  9428                           ;eusart.c: 120: eusartTxHead = 0;
  9429  0DD8  01D2               	clrf	_eusartTxHead^(0+128)	;volatile
  9430                           
  9431                           ;eusart.c: 121: eusartTxTail = 0;
  9432  0DD9  01D1               	clrf	_eusartTxTail^(0+128)	;volatile
  9433                           
  9434                           ;eusart.c: 122: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  9435  0DDA  3008               	movlw	8
  9436  0DDB  0020               	movlb	0	; select bank0
  9437  0DDC  00A6               	movwf	??_EUSART_Initialize
  9438  0DDD  0826               	movf	??_EUSART_Initialize,w
  9439  0DDE  0021               	movlb	1	; select bank1
  9440  0DDF  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  9441                           
  9442                           ;eusart.c: 124: eusartRxHead = 0;
  9443  0DE0  0020               	movlb	0	; select bank0
  9444  0DE1  01EB               	clrf	_eusartRxHead	;volatile
  9445                           
  9446                           ;eusart.c: 125: eusartRxTail = 0;
  9447  0DE2  01EA               	clrf	_eusartRxTail	;volatile
  9448                           
  9449                           ;eusart.c: 126: eusartRxCount = 0;
  9450  0DE3  0021               	movlb	1	; select bank1
  9451  0DE4  01D0               	clrf	_eusartRxCount^(0+128)	;volatile
  9452                           
  9453                           ;eusart.c: 129: PIE1bits.RCIE = 1;
  9454  0DE5  1690               	bsf	16,5	;volatile
  9455  0DE6  0008               	return
  9456  0DE7                     __end_of_EUSART_Initialize:	
  9457                           
  9458                           	psect	text9
  9459  0829                     __ptext9:	
  9460 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  9461 ;; Defined at:
  9462 ;;		line 285 in file "mcc_generated_files/eusart.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9465 ;;		 -> EUSART_Transmit_ISR(1), 
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      void 
  9470 ;; Registers used:
  9471 ;;		wreg
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;Total ram usage:        2 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    7
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		_EUSART_Initialize
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _EUSART_SetTxInterruptHandler
  9493  0829                     _EUSART_SetTxInterruptHandler:	
  9494                           
  9495                           ;eusart.c: 286: EUSART_TxDefaultInterruptHandler = interruptHandler;
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  9499  0829  0020               	movlb	0	; select bank0
  9500  082A  0825               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  9501  082B  0022               	movlb	2	; select bank2
  9502  082C  00ED               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  9503  082D  0020               	movlb	0	; select bank0
  9504  082E  0824               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  9505  082F  0022               	movlb	2	; select bank2
  9506  0830  00EC               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  9507  0831  0008               	return
  9508  0832                     __end_of_EUSART_SetTxInterruptHandler:	
  9509                           
  9510                           	psect	text10
  9511  17CC                     __ptext10:	
  9512 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  9513 ;; Defined at:
  9514 ;;		line 289 in file "mcc_generated_files/eusart.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9517 ;;		 -> EUSART_Receive_ISR(1), 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        2 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    7
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_EUSART_Initialize
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _EUSART_SetRxInterruptHandler
  9545  17CC                     _EUSART_SetRxInterruptHandler:	
  9546                           
  9547                           ;eusart.c: 290: EUSART_RxDefaultInterruptHandler = interruptHandler;
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  9551  17CC  0020               	movlb	0	; select bank0
  9552  17CD  0825               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  9553  17CE  00E8               	movwf	_EUSART_RxDefaultInterruptHandler+1
  9554  17CF  0824               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  9555  17D0  00E7               	movwf	_EUSART_RxDefaultInterruptHandler
  9556  17D1  0008               	return
  9557  17D2                     __end_of_EUSART_SetRxInterruptHandler:	
  9558                           
  9559                           	psect	text11
  9560  0820                     __ptext11:	
  9561 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  9562 ;; Defined at:
  9563 ;;		line 277 in file "mcc_generated_files/eusart.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9566 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;		None
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        2 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    7
  9585 ;; This function calls:
  9586 ;;		Nothing
  9587 ;; This function is called by:
  9588 ;;		_EUSART_Initialize
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           
  9593                           ;psect for function _EUSART_SetOverrunErrorHandler
  9594  0820                     _EUSART_SetOverrunErrorHandler:	
  9595                           
  9596                           ;eusart.c: 278: EUSART_OverrunErrorHandler = interruptHandler;
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  9600  0820  0020               	movlb	0	; select bank0
  9601  0821  0825               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  9602  0822  0023               	movlb	3	; select bank3
  9603  0823  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  9604  0824  0020               	movlb	0	; select bank0
  9605  0825  0824               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  9606  0826  0023               	movlb	3	; select bank3
  9607  0827  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  9608  0828  0008               	return
  9609  0829                     __end_of_EUSART_SetOverrunErrorHandler:	
  9610                           
  9611                           	psect	text12
  9612  0817                     __ptext12:	
  9613 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  9614 ;; Defined at:
  9615 ;;		line 273 in file "mcc_generated_files/eusart.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9618 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        2 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    7
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_EUSART_Initialize
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function _EUSART_SetFramingErrorHandler
  9646  0817                     _EUSART_SetFramingErrorHandler:	
  9647                           
  9648                           ;eusart.c: 274: EUSART_FramingErrorHandler = interruptHandler;
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  9652  0817  0020               	movlb	0	; select bank0
  9653  0818  0825               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  9654  0819  0023               	movlb	3	; select bank3
  9655  081A  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  9656  081B  0020               	movlb	0	; select bank0
  9657  081C  0824               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  9658  081D  0023               	movlb	3	; select bank3
  9659  081E  00A4               	movwf	_EUSART_FramingErrorHandler^(0+384)
  9660  081F  0008               	return
  9661  0820                     __end_of_EUSART_SetFramingErrorHandler:	
  9662                           
  9663                           	psect	text13
  9664  080E                     __ptext13:	
  9665 ;; *************** function _EUSART_SetErrorHandler *****************
  9666 ;; Defined at:
  9667 ;;		line 281 in file "mcc_generated_files/eusart.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  interruptHan    2    4[BANK0 ] PTR FTN()void 
  9670 ;;		 -> EUSART_DefaultErrorHandler(1), 
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        2 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    7
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_EUSART_Initialize
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _EUSART_SetErrorHandler
  9698  080E                     _EUSART_SetErrorHandler:	
  9699                           
  9700                           ;eusart.c: 282: EUSART_ErrorHandler = interruptHandler;
  9701                           
  9702                           ;incstack = 0
  9703                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  9704  080E  0020               	movlb	0	; select bank0
  9705  080F  0825               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  9706  0810  0023               	movlb	3	; select bank3
  9707  0811  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  9708  0812  0020               	movlb	0	; select bank0
  9709  0813  0824               	movf	EUSART_SetErrorHandler@interruptHandler,w
  9710  0814  0023               	movlb	3	; select bank3
  9711  0815  00A0               	movwf	_EUSART_ErrorHandler^(0+384)
  9712  0816  0008               	return
  9713  0817                     __end_of_EUSART_SetErrorHandler:	
  9714                           
  9715                           	psect	text14
  9716  0805                     __ptext14:	
  9717 ;; *************** function _ADC_Initialize *****************
  9718 ;; Defined at:
  9719 ;;		line 67 in file "mcc_generated_files/adc.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;		None
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  1    wreg      void 
  9726 ;; Registers used:
  9727 ;;		wreg, status,2
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        0 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    7
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_SYSTEM_Initialize
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           
  9748                           ;psect for function _ADC_Initialize
  9749  0805                     _ADC_Initialize:	
  9750                           
  9751                           ;adc.c: 72: ADCON0 = 0x01;
  9752                           
  9753                           ;incstack = 0
  9754                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9755  0805  3001               	movlw	1
  9756  0806  0021               	movlb	1	; select bank1
  9757  0807  009D               	movwf	29	;volatile
  9758                           
  9759                           ;adc.c: 75: ADCON1 = 0x40;
  9760  0808  3040               	movlw	64
  9761  0809  009E               	movwf	30	;volatile
  9762                           
  9763                           ;adc.c: 78: ADCON2 = 0x00;
  9764  080A  019F               	clrf	31	;volatile
  9765                           
  9766                           ;adc.c: 81: ADRESL = 0x00;
  9767  080B  019B               	clrf	27	;volatile
  9768                           
  9769                           ;adc.c: 84: ADRESH = 0x00;
  9770  080C  019C               	clrf	28	;volatile
  9771  080D  0008               	return
  9772  080E                     __end_of_ADC_Initialize:	
  9773                           
  9774                           	psect	text15
  9775  0743                     __ptext15:	
  9776 ;; *************** function _COS_TskMan *****************
  9777 ;; Defined at:
  9778 ;;		line 133 in file "SourceFiles/COS/COS_Main.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         0       4       0       0       2       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        6 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:   12
  9799 ;; This function calls:
  9800 ;;		_AD_Task
  9801 ;;		_SHT25_StateMachine
  9802 ;;		_UartDisplay
  9803 ;;		___wmul
  9804 ;; This function is called by:
  9805 ;;		_main
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _COS_TskMan
  9811  0743                     _COS_TskMan:	
  9812                           
  9813                           ;COS_Main.c: 135: if ((COS_tsk[COS_tsk_ind].sched & COS_tsk_msk) != 0)
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _COS_TskMan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9817  0743  0021               	movlb	1	; select bank1
  9818  0744  084E               	movf	_COS_tsk_ind^(0+128),w
  9819  0745  0020               	movlb	0	; select bank0
  9820  0746  00E3               	movwf	??_COS_TskMan
  9821  0747  01E4               	clrf	??_COS_TskMan+1
  9822  0748  0863               	movf	??_COS_TskMan,w
  9823  0749  00A4               	movwf	___wmul@multiplier
  9824  074A  0864               	movf	??_COS_TskMan+1,w
  9825  074B  00A5               	movwf	___wmul@multiplier+1
  9826  074C  3003               	movlw	3
  9827  074D  00A6               	movwf	___wmul@multiplicand
  9828  074E  3000               	movlw	0
  9829  074F  00A7               	movwf	___wmul@multiplicand+1
  9830  0750  318A  2229  3187   	fcall	___wmul
  9831  0753  0020               	movlb	0	; select bank0
  9832  0754  0824               	movf	?___wmul,w
  9833  0755  3E02               	addlw	2
  9834  0756  00E5               	movwf	??_COS_TskMan+2
  9835  0757  3000               	movlw	0
  9836  0758  3D25               	addwfc	?___wmul+1,w
  9837  0759  00E6               	movwf	??_COS_TskMan+3
  9838  075A  3020               	movlw	low (_COS_tsk| (0+32768))
  9839  075B  0765               	addwf	??_COS_TskMan+2,w
  9840  075C  0084               	movwf	4
  9841  075D  3090               	movlw	high (_COS_tsk| (0+32768))
  9842  075E  3D66               	addwfc	??_COS_TskMan+3,w
  9843  075F  0085               	movwf	5
  9844  0760  0800               	movf	0,w	;code access
  9845  0761  0569               	andwf	_COS_tsk_msk,w
  9846  0762  1903               	btfsc	3,2
  9847  0763  2F87               	goto	l6437
  9848                           
  9849                           ;COS_Main.c: 136: {
  9850                           ;COS_Main.c: 143: (*COS_tsk[COS_tsk_ind].tptr)();
  9851  0764  0021               	movlb	1	; select bank1
  9852  0765  084E               	movf	_COS_tsk_ind^(0+128),w
  9853  0766  0020               	movlb	0	; select bank0
  9854  0767  00E3               	movwf	??_COS_TskMan
  9855  0768  01E4               	clrf	??_COS_TskMan+1
  9856  0769  0863               	movf	??_COS_TskMan,w
  9857  076A  00A4               	movwf	___wmul@multiplier
  9858  076B  0864               	movf	??_COS_TskMan+1,w
  9859  076C  00A5               	movwf	___wmul@multiplier+1
  9860  076D  3003               	movlw	3
  9861  076E  00A6               	movwf	___wmul@multiplicand
  9862  076F  3000               	movlw	0
  9863  0770  00A7               	movwf	___wmul@multiplicand+1
  9864  0771  318A  2229  3187   	fcall	___wmul
  9865  0774  0020               	movlb	0	; select bank0
  9866  0775  0825               	movf	?___wmul+1,w
  9867  0776  0085               	movwf	5
  9868  0777  0824               	movf	?___wmul,w
  9869  0778  0084               	movwf	4
  9870  0779  3020               	movlw	low (_COS_tsk| (0+32768))
  9871  077A  0784               	addwf	4,f
  9872  077B  3090               	movlw	high (_COS_tsk| (0+32768))
  9873  077C  3D85               	addwfc	5,f
  9874  077D  3F00               	moviw [0]fsr0
  9875  077E  0023               	movlb	3	; select bank3
  9876  077F  00A6               	movwf	_COS_TskMan$2372^(0+384)
  9877  0780  3F01               	moviw [1]fsr0
  9878  0781  00A7               	movwf	(_COS_TskMan$2372+1)^(0+384)
  9879                           
  9880                           ;COS_Main.c: 136: {
  9881                           ;COS_Main.c: 143: (*COS_tsk[COS_tsk_ind].tptr)();
  9882  0782  0827               	movf	(_COS_TskMan$2372+1)^(0+384),w
  9883  0783  008A               	movwf	10
  9884  0784  0826               	movf	_COS_TskMan$2372^(0+384),w
  9885  0785  000A               	callw
  9886  0786  3187               	pagesel	$
  9887  0787                     l6437:	
  9888                           
  9889                           ;COS_Main.c: 149: }
  9890                           ;COS_Main.c: 150: COS_tsk_ind++;
  9891  0787  3001               	movlw	1
  9892  0788  0020               	movlb	0	; select bank0
  9893  0789  00E3               	movwf	??_COS_TskMan
  9894  078A  0863               	movf	??_COS_TskMan,w
  9895  078B  0021               	movlb	1	; select bank1
  9896  078C  07CE               	addwf	_COS_tsk_ind^(0+128),f
  9897                           
  9898                           ;COS_Main.c: 151: if (COS_tsk_ind >= (3+2))
  9899  078D  3005               	movlw	5
  9900  078E  024E               	subwf	_COS_tsk_ind^(0+128),w
  9901  078F  1C03               	skipc
  9902  0790  0008               	return
  9903                           
  9904                           ;COS_Main.c: 152: {
  9905                           ;COS_Main.c: 153: COS_tsk_ena = 0;
  9906  0791  0022               	movlb	2	; select bank2
  9907  0792  01EE               	clrf	_COS_tsk_ena^(0+256)
  9908                           
  9909                           ;COS_Main.c: 154: COS_tsk_ind = 0;
  9910  0793  0021               	movlb	1	; select bank1
  9911  0794  01CE               	clrf	_COS_tsk_ind^(0+128)
  9912                           
  9913                           ;COS_Main.c: 157: if (!((COS_tsk_msk == 0x80) ||
  9914                           ;COS_Main.c: 158: (COS_tsk_msk == 0x40) ||
  9915                           ;COS_Main.c: 159: (COS_tsk_msk == 0x20) ||
  9916                           ;COS_Main.c: 160: (COS_tsk_msk == 0x10) ||
  9917                           ;COS_Main.c: 161: (COS_tsk_msk == 0x08) ||
  9918                           ;COS_Main.c: 162: (COS_tsk_msk == 0x04) ||
  9919                           ;COS_Main.c: 163: (COS_tsk_msk == 0x02) ||
  9920                           ;COS_Main.c: 164: (COS_tsk_msk == 0x01)))
  9921  0795  3080               	movlw	128
  9922  0796  0020               	movlb	0	; select bank0
  9923  0797  0669               	xorwf	_COS_tsk_msk,w
  9924  0798  1903               	btfsc	3,2
  9925  0799  2FB6               	goto	l6459
  9926  079A  3040               	movlw	64
  9927  079B  0669               	xorwf	_COS_tsk_msk,w
  9928  079C  1903               	btfsc	3,2
  9929  079D  2FB6               	goto	l6459
  9930  079E  3020               	movlw	32
  9931  079F  0669               	xorwf	_COS_tsk_msk,w
  9932  07A0  1903               	btfsc	3,2
  9933  07A1  2FB6               	goto	l6459
  9934  07A2  3010               	movlw	16
  9935  07A3  0669               	xorwf	_COS_tsk_msk,w
  9936  07A4  1903               	btfsc	3,2
  9937  07A5  2FB6               	goto	l6459
  9938  07A6  3008               	movlw	8
  9939  07A7  0669               	xorwf	_COS_tsk_msk,w
  9940  07A8  1903               	btfsc	3,2
  9941  07A9  2FB6               	goto	l6459
  9942  07AA  3004               	movlw	4
  9943  07AB  0669               	xorwf	_COS_tsk_msk,w
  9944  07AC  1903               	btfsc	3,2
  9945  07AD  2FB6               	goto	l6459
  9946  07AE  3002               	movlw	2
  9947  07AF  0669               	xorwf	_COS_tsk_msk,w
  9948  07B0  1903               	btfsc	3,2
  9949  07B1  2FB6               	goto	l6459
  9950  07B2  0369               	decf	_COS_tsk_msk,w
  9951  07B3  1903               	btfsc	3,2
  9952  07B4  2FB6               	goto	l6459
  9953  07B5                     l910:	
  9954                           ;COS_Main.c: 165: {
  9955                           ;COS_Main.c: 169: while(1);
  9956                           
  9957  07B5  2FB5               	goto	l910
  9958  07B6                     l6459:	
  9959                           
  9960                           ;COS_Main.c: 171: }
  9961                           ;COS_Main.c: 174: COS_tsk_msk = COS_tsk_msk >> 1;
  9962  07B6  0020               	movlb	0	; select bank0
  9963  07B7  3669               	lsrf	_COS_tsk_msk,w
  9964  07B8  00E3               	movwf	??_COS_TskMan
  9965  07B9  0863               	movf	??_COS_TskMan,w
  9966  07BA  00E9               	movwf	_COS_tsk_msk
  9967                           
  9968                           ;COS_Main.c: 175: if (COS_tsk_msk == 0x00)
  9969  07BB  0869               	movf	_COS_tsk_msk,w
  9970  07BC  1D03               	btfss	3,2
  9971  07BD  0008               	return
  9972                           
  9973                           ;COS_Main.c: 176: {
  9974                           ;COS_Main.c: 177: COS_tsk_msk = 0x80;
  9975  07BE  3080               	movlw	128
  9976  07BF  00E3               	movwf	??_COS_TskMan
  9977  07C0  0863               	movf	??_COS_TskMan,w
  9978  07C1  00E9               	movwf	_COS_tsk_msk
  9979  07C2  0008               	return
  9980  07C3                     __end_of_COS_TskMan:	
  9981                           
  9982                           	psect	text16
  9983  0C71                     __ptext16:	
  9984 ;; *************** function _AD_Task *****************
  9985 ;; Defined at:
  9986 ;;		line 19 in file "SourceFiles/SunSensor/AD.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  str             8    0        unsigned char [8]
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;Total ram usage:        1 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    8
 10007 ;; This function calls:
 10008 ;;		_ADC_GetConversionResult
 10009 ;;		_ADC_SelectChannel
 10010 ;;		_ADC_StartConversion
 10011 ;; This function is called by:
 10012 ;;		_COS_TskMan
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           
 10017                           ;psect for function _AD_Task
 10018  0C71                     _AD_Task:	
 10019                           
 10020                           ;AD.c: 21: UINT_8 str[8];
 10021                           ;AD.c: 23: switch(AD_State)
 10022                           
 10023                           ;incstack = 0
 10024                           ; Regs used in _AD_Task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10025  0C71  2C9D               	goto	l6177
 10026  0C72                     l6157:	
 10027                           ;AD.c: 24: {
 10028                           ;AD.c: 25: case AD_MEASURE_START:
 10029                           
 10030                           
 10031                           ;AD.c: 26: ADC_SelectChannel(4);
 10032  0C72  3004               	movlw	4
 10033  0C73  3188  20C3  318C   	fcall	_ADC_SelectChannel
 10034                           
 10035                           ;AD.c: 27: ADC_StartConversion();
 10036  0C76  3197  2763         	fcall	_ADC_StartConversion
 10037                           
 10038                           ;AD.c: 28: AD_State = AD_MEASURE_GetResult;
 10039  0C78  0021               	movlb	1	; select bank1
 10040  0C79  01BE               	clrf	_AD_State^(0+128)
 10041  0C7A  0ABE               	incf	_AD_State^(0+128),f
 10042                           
 10043                           ;AD.c: 29: break;
 10044  0C7B  0008               	return
 10045  0C7C                     l6163:	
 10046                           ;AD.c: 31: if (ADC_IsConversionDone)
 10047                           
 10048                           
 10049                           ;AD.c: 32: {
 10050                           ;AD.c: 33: AD_Result = ADC_GetConversionResult();
 10051  0C7C  3197  27EE         	fcall	_ADC_GetConversionResult
 10052  0C7E  0020               	movlb	0	; select bank0
 10053  0C7F  0825               	movf	?_ADC_GetConversionResult+1,w
 10054  0C80  0022               	movlb	2	; select bank2
 10055  0C81  00D7               	movwf	(_AD_Result+1)^(0+256)
 10056  0C82  0020               	movlb	0	; select bank0
 10057  0C83  0824               	movf	?_ADC_GetConversionResult,w
 10058  0C84  0022               	movlb	2	; select bank2
 10059  0C85  00D6               	movwf	_AD_Result^(0+256)
 10060                           
 10061                           ;AD.c: 34: IsMeasureDone = 1;
 10062  0C86  0021               	movlb	1	; select bank1
 10063  0C87  01BC               	clrf	AD@IsMeasureDone^(0+128)
 10064  0C88  0ABC               	incf	AD@IsMeasureDone^(0+128),f
 10065                           
 10066                           ;AD.c: 43: AD_State = AD_MEASURE_WAIT;
 10067  0C89  3002               	movlw	2
 10068  0C8A  0020               	movlb	0	; select bank0
 10069  0C8B  00A6               	movwf	??_AD_Task
 10070  0C8C  0826               	movf	??_AD_Task,w
 10071  0C8D  0021               	movlb	1	; select bank1
 10072  0C8E  00BE               	movwf	_AD_State^(0+128)
 10073                           
 10074                           ;AD.c: 44: }
 10075                           ;AD.c: 45: break;
 10076  0C8F  0008               	return
 10077  0C90                     l6169:	
 10078                           ;AD.c: 46: case AD_MEASURE_WAIT:
 10079                           
 10080                           
 10081                           ;AD.c: 47: TimerCounter++;
 10082  0C90  3001               	movlw	1
 10083  0C91  0020               	movlb	0	; select bank0
 10084  0C92  00A6               	movwf	??_AD_Task
 10085  0C93  0826               	movf	??_AD_Task,w
 10086  0C94  0021               	movlb	1	; select bank1
 10087  0C95  07BD               	addwf	AD@TimerCounter^(0+128),f
 10088                           
 10089                           ;AD.c: 48: if (TimerCounter > 50)
 10090  0C96  3033               	movlw	51
 10091  0C97  023D               	subwf	AD@TimerCounter^(0+128),w
 10092  0C98  1C03               	skipc
 10093  0C99  0008               	return
 10094                           
 10095                           ;AD.c: 49: {
 10096                           ;AD.c: 50: TimerCounter = 0;
 10097  0C9A  01BD               	clrf	AD@TimerCounter^(0+128)
 10098                           
 10099                           ;AD.c: 51: AD_State = AD_MEASURE_START;
 10100  0C9B  01BE               	clrf	_AD_State^(0+128)
 10101                           
 10102                           ;AD.c: 56: }
 10103                           
 10104                           ;AD.c: 55: break;
 10105                           
 10106                           ;AD.c: 54: default:
 10107                           
 10108                           ;AD.c: 52: }
 10109                           ;AD.c: 53: break;
 10110  0C9C  0008               	return
 10111  0C9D                     l6177:	
 10112  0C9D  0021               	movlb	1	; select bank1
 10113  0C9E  083E               	movf	_AD_State^(0+128),w
 10114                           
 10115                           ; Switch size 1, requested type "space"
 10116                           ; Number of cases is 3, Range of values is 0 to 2
 10117                           ; switch strategies available:
 10118                           ; Name         Instructions Cycles
 10119                           ; simple_byte           10     6 (average)
 10120                           ; direct_byte           12     6 (fixed)
 10121                           ; jumptable            260     6 (fixed)
 10122                           ;	Chosen strategy is simple_byte
 10123  0C9F  3A00               	xorlw	0	; case 0
 10124  0CA0  1903               	skipnz
 10125  0CA1  2C72               	goto	l6157
 10126  0CA2  3A01               	xorlw	1	; case 1
 10127  0CA3  1903               	skipnz
 10128  0CA4  2C7C               	goto	l6163
 10129  0CA5  3A03               	xorlw	3	; case 2
 10130  0CA6  1903               	skipnz
 10131  0CA7  2C90               	goto	l6169
 10132  0CA8  2CA9               	goto	l1225
 10133  0CA9                     l1225:	
 10134  0CA9  0008               	return
 10135  0CAA                     __end_of_AD_Task:	
 10136                           
 10137                           	psect	text17
 10138  049C                     __ptext17:	
 10139 ;; *************** function _SHT25_StateMachine *****************
 10140 ;; Defined at:
 10141 ;;		line 46 in file "SourceFiles/SunSensor/SHT25.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;		None
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;		None
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      void 
 10148 ;; Registers used:
 10149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;Total ram usage:        5 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:   11
 10162 ;; This function calls:
 10163 ;;		_I2C_ReadNBytes
 10164 ;;		_I2C_WriteNBytes
 10165 ;;		_SHT3x_CalcRelativeHumidity_F
 10166 ;;		_SHT3x_CalcTemperatureC_F
 10167 ;; This function is called by:
 10168 ;;		_COS_TskMan
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           
 10173                           ;psect for function _SHT25_StateMachine
 10174  049C                     _SHT25_StateMachine:	
 10175                           
 10176                           ;SHT25.c: 48: switch(SHT25_State)
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _SHT25_StateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10180  049C  2D49               	goto	l6429
 10181  049D                     l1089:	
 10182                           ;SHT25.c: 49: {
 10183                           ;SHT25.c: 50: case SHT25_MEASURE_INIT:
 10184                           
 10185                           
 10186                           ;SHT25.c: 51: SHT25_State = SHT25_MEASURE_TEMP_0;
 10187  049D  01C4               	clrf	_SHT25_State^(0+128)
 10188  049E  0AC4               	incf	_SHT25_State^(0+128),f
 10189                           
 10190                           ;SHT25.c: 52: break;
 10191  049F  0008               	return
 10192  04A0                     l6385:	
 10193                           ;SHT25.c: 53: case SHT25_MEASURE_TEMP_0:
 10194                           
 10195                           
 10196                           ;SHT25.c: 54: I2C_WriteNBytes(0x44,Command,2);
 10197  04A0  30ED               	movlw	(low (_Command| 0))& (0+255)
 10198  04A1  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10199  04A2  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10200  04A3  0020               	movlb	0	; select bank0
 10201  04A4  00AD               	movwf	I2C_WriteNBytes@data
 10202  04A5  3002               	movlw	2
 10203  04A6  00AE               	movwf	I2C_WriteNBytes@len
 10204  04A7  3000               	movlw	0
 10205  04A8  00AF               	movwf	I2C_WriteNBytes@len+1
 10206  04A9  3044               	movlw	68
 10207  04AA  318B  2333         	fcall	_I2C_WriteNBytes
 10208                           
 10209                           ;SHT25.c: 55: SHT25_State = SHT25_MEASURE_TEMP_WAIT;
 10210  04AC  3003               	movlw	3
 10211  04AD  0021               	movlb	1	; select bank1
 10212  04AE  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10213  04AF  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10214  04B0  00C4               	movwf	_SHT25_State^(0+128)
 10215                           
 10216                           ;SHT25.c: 56: TimerCounter = 0;
 10217  04B1  01A6               	clrf	_TimerCounter^(0+128)
 10218  04B2  01A7               	clrf	(_TimerCounter+1)^(0+128)
 10219                           
 10220                           ;SHT25.c: 59: break;
 10221  04B3  0008               	return
 10222  04B4                     l6391:	
 10223                           ;SHT25.c: 60: case SHT25_MEASURE_TEMP_WAIT:
 10224                           
 10225                           
 10226                           ;SHT25.c: 61: TimerCounter++;
 10227  04B4  3001               	movlw	1
 10228  04B5  07A6               	addwf	_TimerCounter^(0+128),f
 10229  04B6  3000               	movlw	0
 10230  04B7  3DA7               	addwfc	(_TimerCounter+1)^(0+128),f
 10231                           
 10232                           ;SHT25.c: 62: if (TimerCounter > 50)
 10233  04B8  3000               	movlw	0
 10234  04B9  0227               	subwf	(_TimerCounter+1)^(0+128),w
 10235  04BA  3033               	movlw	51
 10236  04BB  1903               	skipnz
 10237  04BC  0226               	subwf	_TimerCounter^(0+128),w
 10238  04BD  1C03               	skipc
 10239  04BE  0008               	return
 10240                           
 10241                           ;SHT25.c: 63: {
 10242                           ;SHT25.c: 64: Command[0] = 0xE0;
 10243  04BF  30E0               	movlw	224
 10244  04C0  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10245  04C1  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10246  04C2  00ED               	movwf	_Command^(0+128)
 10247                           
 10248                           ;SHT25.c: 65: Command[1] = 0x00;
 10249  04C3  01EE               	clrf	(_Command^(0+128)+1)
 10250                           
 10251                           ;SHT25.c: 66: I2C_WriteNBytes(0x44,Command,2);
 10252  04C4  30ED               	movlw	(low (_Command| 0))& (0+255)
 10253  04C5  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10254  04C6  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10255  04C7  0020               	movlb	0	; select bank0
 10256  04C8  00AD               	movwf	I2C_WriteNBytes@data
 10257  04C9  3002               	movlw	2
 10258  04CA  00AE               	movwf	I2C_WriteNBytes@len
 10259  04CB  3000               	movlw	0
 10260  04CC  00AF               	movwf	I2C_WriteNBytes@len+1
 10261  04CD  3044               	movlw	68
 10262  04CE  318B  2333         	fcall	_I2C_WriteNBytes
 10263                           
 10264                           ;SHT25.c: 67: TimerCounter = 0;
 10265  04D0  0021               	movlb	1	; select bank1
 10266  04D1  01A6               	clrf	_TimerCounter^(0+128)
 10267  04D2  01A7               	clrf	(_TimerCounter+1)^(0+128)
 10268                           
 10269                           ;SHT25.c: 68: SHT25_State = SHT25_MEASURE_TEMP_1;
 10270  04D3  3002               	movlw	2
 10271  04D4  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10272  04D5  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10273  04D6  00C4               	movwf	_SHT25_State^(0+128)
 10274                           
 10275                           ;SHT25.c: 69: }
 10276                           ;SHT25.c: 70: break;
 10277  04D7  0008               	return
 10278  04D8                     l6403:	
 10279                           ;SHT25.c: 71: case SHT25_MEASURE_TEMP_1:
 10280                           
 10281                           
 10282                           ;SHT25.c: 72: I2C_ReadNBytes(0x44,RxBuff,6);
 10283  04D8  3062               	movlw	(low (_RxBuff| (0+256)))& (0+255)
 10284  04D9  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10285  04DA  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10286  04DB  0020               	movlb	0	; select bank0
 10287  04DC  00A9               	movwf	I2C_ReadNBytes@data
 10288  04DD  3006               	movlw	6
 10289  04DE  00AA               	movwf	I2C_ReadNBytes@len
 10290  04DF  3000               	movlw	0
 10291  04E0  00AB               	movwf	I2C_ReadNBytes@len+1
 10292  04E1  3044               	movlw	68
 10293  04E2  318A  2280  3184   	fcall	_I2C_ReadNBytes
 10294                           
 10295                           ;SHT25.c: 74: TemperatureRaw_H = RxBuff[0];
 10296  04E5  0022               	movlb	2	; select bank2
 10297  04E6  0862               	movf	_RxBuff^(0+256),w
 10298  04E7  0021               	movlb	1	; select bank1
 10299  04E8  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10300  04E9  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10301  04EA  00C8               	movwf	_TemperatureRaw_H^(0+128)
 10302                           
 10303                           ;SHT25.c: 75: TemperatureRaw_L = RxBuff[1];
 10304  04EB  0022               	movlb	2	; select bank2
 10305  04EC  0863               	movf	(_RxBuff^(0+256)+1),w
 10306  04ED  0021               	movlb	1	; select bank1
 10307  04EE  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10308  04EF  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10309  04F0  00C7               	movwf	_TemperatureRaw_L^(0+128)
 10310                           
 10311                           ;SHT25.c: 76: TemperatureRaw = ((UINT_16)(TemperatureRaw_H) << 8) + TemperatureRaw_L ;
 10312  04F1  0847               	movf	_TemperatureRaw_L^(0+128),w
 10313  04F2  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10314  04F3  01D4               	clrf	(??_SHT25_StateMachine^(0+128)+1)
 10315  04F4  0848               	movf	_TemperatureRaw_H^(0+128),w
 10316  04F5  00D5               	movwf	(??_SHT25_StateMachine+2)^(0+128)
 10317  04F6  01D6               	clrf	((??_SHT25_StateMachine+2)^(0+128)+1)
 10318  04F7  0855               	movf	(??_SHT25_StateMachine+2)^(0+128),w
 10319  04F8  00D6               	movwf	((??_SHT25_StateMachine+2)^(0+128)+1)
 10320  04F9  01D5               	clrf	(??_SHT25_StateMachine+2)^(0+128)
 10321  04FA  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10322  04FB  0755               	addwf	(??_SHT25_StateMachine+2)^(0+128),w
 10323  04FC  00AA               	movwf	_TemperatureRaw^(0+128)
 10324  04FD  0854               	movf	(??_SHT25_StateMachine+1)^(0+128),w
 10325  04FE  3D56               	addwfc	(??_SHT25_StateMachine+3)^(0+128),w
 10326  04FF  00AB               	movwf	(_TemperatureRaw+1)^(0+128)
 10327                           
 10328                           ;SHT25.c: 78: RelativeHumidityRaw_H = RxBuff[3];
 10329  0500  0022               	movlb	2	; select bank2
 10330  0501  0865               	movf	(_RxBuff^(0+256)+3),w
 10331  0502  0021               	movlb	1	; select bank1
 10332  0503  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10333  0504  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10334  0505  00C6               	movwf	_RelativeHumidityRaw_H^(0+128)
 10335                           
 10336                           ;SHT25.c: 79: RelativeHumidityRaw_L = RxBuff[4];
 10337  0506  0022               	movlb	2	; select bank2
 10338  0507  0866               	movf	(_RxBuff^(0+256)+4),w
 10339  0508  0021               	movlb	1	; select bank1
 10340  0509  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10341  050A  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10342  050B  00C5               	movwf	_RelativeHumidityRaw_L^(0+128)
 10343                           
 10344                           ;SHT25.c: 80: RelativeHumidityRaw = ((UINT_16)(RelativeHumidityRaw_H) << 8) + RelativeHu
      +                          midityRaw_L ;
 10345  050C  0845               	movf	_RelativeHumidityRaw_L^(0+128),w
 10346  050D  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10347  050E  01D4               	clrf	(??_SHT25_StateMachine^(0+128)+1)
 10348  050F  0846               	movf	_RelativeHumidityRaw_H^(0+128),w
 10349  0510  00D5               	movwf	(??_SHT25_StateMachine+2)^(0+128)
 10350  0511  01D6               	clrf	((??_SHT25_StateMachine+2)^(0+128)+1)
 10351  0512  0855               	movf	(??_SHT25_StateMachine+2)^(0+128),w
 10352  0513  00D6               	movwf	((??_SHT25_StateMachine+2)^(0+128)+1)
 10353  0514  01D5               	clrf	(??_SHT25_StateMachine+2)^(0+128)
 10354  0515  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10355  0516  0755               	addwf	(??_SHT25_StateMachine+2)^(0+128),w
 10356  0517  00A8               	movwf	_RelativeHumidityRaw^(0+128)
 10357  0518  0854               	movf	(??_SHT25_StateMachine+1)^(0+128),w
 10358  0519  3D56               	addwfc	(??_SHT25_StateMachine+3)^(0+128),w
 10359  051A  00A9               	movwf	(_RelativeHumidityRaw+1)^(0+128)
 10360                           
 10361                           ;SHT25.c: 82: SHT25_State = SHT25_CALC_TEMP_0;
 10362  051B  3006               	movlw	6
 10363  051C  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10364  051D  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10365  051E  00C4               	movwf	_SHT25_State^(0+128)
 10366                           
 10367                           ;SHT25.c: 83: break;
 10368  051F  0008               	return
 10369  0520                     l6419:	
 10370                           ;SHT25.c: 84: case SHT25_CALC_TEMP_0:
 10371                           
 10372                           
 10373                           ;SHT25.c: 85: SensirionTemperature_float = SHT3x_CalcTemperatureC_F();
 10374  0520  318E  2630  3184   	fcall	_SHT3x_CalcTemperatureC_F
 10375  0523  0020               	movlb	0	; select bank0
 10376  0524  085D               	movf	?_SHT3x_CalcTemperatureC_F,w
 10377  0525  0021               	movlb	1	; select bank1
 10378  0526  00A3               	movwf	_SensirionTemperature_float^(0+128)
 10379  0527  0020               	movlb	0	; select bank0
 10380  0528  085E               	movf	?_SHT3x_CalcTemperatureC_F+1,w
 10381  0529  0021               	movlb	1	; select bank1
 10382  052A  00A4               	movwf	(_SensirionTemperature_float+1)^(0+128)
 10383  052B  0020               	movlb	0	; select bank0
 10384  052C  085F               	movf	?_SHT3x_CalcTemperatureC_F+2,w
 10385  052D  0021               	movlb	1	; select bank1
 10386  052E  00A5               	movwf	(_SensirionTemperature_float+2)^(0+128)
 10387                           
 10388                           ;SHT25.c: 86: SensirionRH_float = SHT3x_CalcRelativeHumidity_F();
 10389  052F  318C  2438         	fcall	_SHT3x_CalcRelativeHumidity_F
 10390  0531  0020               	movlb	0	; select bank0
 10391  0532  0850               	movf	?_SHT3x_CalcRelativeHumidity_F,w
 10392  0533  0021               	movlb	1	; select bank1
 10393  0534  00A0               	movwf	_SensirionRH_float^(0+128)
 10394  0535  0020               	movlb	0	; select bank0
 10395  0536  0851               	movf	?_SHT3x_CalcRelativeHumidity_F+1,w
 10396  0537  0021               	movlb	1	; select bank1
 10397  0538  00A1               	movwf	(_SensirionRH_float+1)^(0+128)
 10398  0539  0020               	movlb	0	; select bank0
 10399  053A  0852               	movf	?_SHT3x_CalcRelativeHumidity_F+2,w
 10400  053B  0021               	movlb	1	; select bank1
 10401  053C  00A2               	movwf	(_SensirionRH_float+2)^(0+128)
 10402                           
 10403                           ;SHT25.c: 89: SHT25_State = SHT25_CALC_RH_0;
 10404  053D  3007               	movlw	7
 10405  053E  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10406  053F  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10407  0540  00C4               	movwf	_SHT25_State^(0+128)
 10408                           
 10409                           ;SHT25.c: 90: IsMeasureDone = 1;
 10410  0541  01C3               	clrf	_IsMeasureDone^(0+128)
 10411  0542  0AC3               	incf	_IsMeasureDone^(0+128),f
 10412                           
 10413                           ;SHT25.c: 91: break;
 10414  0543  0008               	return
 10415  0544                     l6425:	
 10416                           ;SHT25.c: 92: case SHT25_CALC_RH_0:
 10417                           
 10418                           
 10419                           ;SHT25.c: 93: SHT25_State = SHT25_MEASURE_TEMP_WAIT;
 10420  0544  3003               	movlw	3
 10421  0545  00D3               	movwf	??_SHT25_StateMachine^(0+128)
 10422  0546  0853               	movf	??_SHT25_StateMachine^(0+128),w
 10423  0547  00C4               	movwf	_SHT25_State^(0+128)
 10424                           
 10425                           ;SHT25.c: 97: }
 10426                           
 10427                           ;SHT25.c: 96: break;
 10428                           
 10429                           ;SHT25.c: 95: default:
 10430                           
 10431                           ;SHT25.c: 94: break;
 10432  0548  0008               	return
 10433  0549                     l6429:	
 10434  0549  0021               	movlb	1	; select bank1
 10435  054A  0844               	movf	_SHT25_State^(0+128),w
 10436                           
 10437                           ; Switch size 1, requested type "space"
 10438                           ; Number of cases is 6, Range of values is 0 to 7
 10439                           ; switch strategies available:
 10440                           ; Name         Instructions Cycles
 10441                           ; simple_byte           19    10 (average)
 10442                           ; direct_byte           22     6 (fixed)
 10443                           ; jumptable            260     6 (fixed)
 10444                           ;	Chosen strategy is simple_byte
 10445  054B  3A00               	xorlw	0	; case 0
 10446  054C  1903               	skipnz
 10447  054D  2C9D               	goto	l1089
 10448  054E  3A01               	xorlw	1	; case 1
 10449  054F  1903               	skipnz
 10450  0550  2CA0               	goto	l6385
 10451  0551  3A03               	xorlw	3	; case 2
 10452  0552  1903               	skipnz
 10453  0553  2CD8               	goto	l6403
 10454  0554  3A01               	xorlw	1	; case 3
 10455  0555  1903               	skipnz
 10456  0556  2CB4               	goto	l6391
 10457  0557  3A05               	xorlw	5	; case 6
 10458  0558  1903               	skipnz
 10459  0559  2D20               	goto	l6419
 10460  055A  3A01               	xorlw	1	; case 7
 10461  055B  1903               	skipnz
 10462  055C  2D44               	goto	l6425
 10463  055D  2D5E               	goto	l1098
 10464  055E                     l1098:	
 10465  055E  0008               	return
 10466  055F                     __end_of_SHT25_StateMachine:	
 10467                           
 10468                           	psect	text18
 10469  0072                     __ptext18:	
 10470 ;; *************** function _UartDisplay *****************
 10471 ;; Defined at:
 10472 ;;		line 28 in file "SourceFiles/SunSensor/UART_Display.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;		None
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;  str             8   10[BANK1 ] unsigned char [8]
 10477 ;;  TempF           3   20[BANK1 ] float 
 10478 ;;  NtcTempF        3    7[BANK1 ] float 
 10479 ;;  HumiF           3    0[BANK1 ] float 
 10480 ;;  NtcTemp         2   18[BANK1 ] unsigned short 
 10481 ;;  Humi            2    5[BANK1 ] unsigned short 
 10482 ;;  Temp            2    3[BANK1 ] unsigned short 
 10483 ;; Return value:  Size  Location     Type
 10484 ;;                  1    wreg      void 
 10485 ;; Registers used:
 10486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10487 ;; Tracked objects:
 10488 ;;		On entry : 0/0
 10489 ;;		On exit  : 0/0
 10490 ;;		Unchanged: 0/0
 10491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Totals:         0       1      23       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;Total ram usage:       24 bytes
 10497 ;; Hardware stack levels used:    1
 10498 ;; Hardware stack levels required when called:    9
 10499 ;; This function calls:
 10500 ;;		_EUSART_Write
 10501 ;;		_GetNtcTemp
 10502 ;;		_GetRelativeHumidity_F
 10503 ;;		_GetTemperatureC_F
 10504 ;;		_IsADMeasureDone
 10505 ;;		_IsSHT31MeasureDone
 10506 ;;		___awtoft
 10507 ;;		___ftge
 10508 ;;		___ftmul
 10509 ;;		___fttol
 10510 ;;		_abs
 10511 ;;		_sprintf
 10512 ;; This function is called by:
 10513 ;;		_COS_TskMan
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _UartDisplay
 10519  0072                     _UartDisplay:	
 10520                           
 10521                           ;UART_Display.c: 30: float TempF;
 10522                           ;UART_Display.c: 31: float HumiF;
 10523                           ;UART_Display.c: 32: float NtcTempF;
 10524                           ;UART_Display.c: 33: UINT_16 Temp;
 10525                           ;UART_Display.c: 34: UINT_16 Humi;
 10526                           ;UART_Display.c: 35: UINT_16 NtcTemp;
 10527                           ;UART_Display.c: 36: UINT_8 str[8];
 10528                           ;UART_Display.c: 38: switch (UART_STATE)
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _UartDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10532  0072  2A45               	goto	l6153
 10533  0073                     l6061:	
 10534                           ;UART_Display.c: 39: {
 10535                           ;UART_Display.c: 40: case UART_TEMP:
 10536                           
 10537                           
 10538                           ;UART_Display.c: 41: if (IsSHT31MeasureDone())
 10539  0073  3197  2778  3180   	fcall	_IsSHT31MeasureDone
 10540  0076  3A00               	xorlw	0
 10541  0077  1903               	skipnz
 10542  0078  2923               	goto	l6089
 10543                           
 10544                           ;UART_Display.c: 42: {
 10545                           ;UART_Display.c: 43: EUSART_Write('T');
 10546  0079  3054               	movlw	84
 10547  007A  318B  235B  3180   	fcall	_EUSART_Write
 10548                           
 10549                           ;UART_Display.c: 44: TempF = GetTemperatureC_F();
 10550  007D  3188  2098  3180   	fcall	_GetTemperatureC_F
 10551  0080  0020               	movlb	0	; select bank0
 10552  0081  0824               	movf	?_GetTemperatureC_F,w
 10553  0082  0021               	movlb	1	; select bank1
 10554  0083  00E7               	movwf	UartDisplay@TempF^(0+128)
 10555  0084  0020               	movlb	0	; select bank0
 10556  0085  0825               	movf	?_GetTemperatureC_F+1,w
 10557  0086  0021               	movlb	1	; select bank1
 10558  0087  00E8               	movwf	(UartDisplay@TempF+1)^(0+128)
 10559  0088  0020               	movlb	0	; select bank0
 10560  0089  0826               	movf	?_GetTemperatureC_F+2,w
 10561  008A  0021               	movlb	1	; select bank1
 10562  008B  00E9               	movwf	(UartDisplay@TempF+2)^(0+128)
 10563                           
 10564                           ;UART_Display.c: 45: Temp = (UINT_16)(TempF * 100);
 10565  008C  0867               	movf	UartDisplay@TempF^(0+128),w
 10566  008D  0020               	movlb	0	; select bank0
 10567  008E  00B3               	movwf	___ftmul@f2
 10568  008F  0021               	movlb	1	; select bank1
 10569  0090  0868               	movf	(UartDisplay@TempF+1)^(0+128),w
 10570  0091  0020               	movlb	0	; select bank0
 10571  0092  00B4               	movwf	___ftmul@f2+1
 10572  0093  0021               	movlb	1	; select bank1
 10573  0094  0869               	movf	(UartDisplay@TempF+2)^(0+128),w
 10574  0095  0020               	movlb	0	; select bank0
 10575  0096  00B5               	movwf	___ftmul@f2+2
 10576  0097  3000               	movlw	0
 10577  0098  00B0               	movwf	___ftmul@f1
 10578  0099  30C8               	movlw	200
 10579  009A  00B1               	movwf	___ftmul@f1+1
 10580  009B  3042               	movlw	66
 10581  009C  00B2               	movwf	___ftmul@f1+2
 10582  009D  3185  255F  3180   	fcall	___ftmul
 10583  00A0  0020               	movlb	0	; select bank0
 10584  00A1  0830               	movf	?___ftmul,w
 10585  00A2  00C0               	movwf	___fttol@f1
 10586  00A3  0831               	movf	?___ftmul+1,w
 10587  00A4  00C1               	movwf	___fttol@f1+1
 10588  00A5  0832               	movf	?___ftmul+2,w
 10589  00A6  00C2               	movwf	___fttol@f1+2
 10590  00A7  3186  26BC  3180   	fcall	___fttol
 10591  00AA  0020               	movlb	0	; select bank0
 10592  00AB  0841               	movf	?___fttol+1,w
 10593  00AC  0021               	movlb	1	; select bank1
 10594  00AD  00D7               	movwf	(UartDisplay@Temp+1)^(0+128)
 10595  00AE  0020               	movlb	0	; select bank0
 10596  00AF  0840               	movf	?___fttol,w
 10597  00B0  0021               	movlb	1	; select bank1
 10598  00B1  00D6               	movwf	UartDisplay@Temp^(0+128)
 10599                           
 10600                           ;UART_Display.c: 46: if (TempF < 0)
 10601  00B2  0867               	movf	UartDisplay@TempF^(0+128),w
 10602  00B3  0020               	movlb	0	; select bank0
 10603  00B4  00A4               	movwf	___ftge@ff1
 10604  00B5  0021               	movlb	1	; select bank1
 10605  00B6  0868               	movf	(UartDisplay@TempF+1)^(0+128),w
 10606  00B7  0020               	movlb	0	; select bank0
 10607  00B8  00A5               	movwf	___ftge@ff1+1
 10608  00B9  0021               	movlb	1	; select bank1
 10609  00BA  0869               	movf	(UartDisplay@TempF+2)^(0+128),w
 10610  00BB  0020               	movlb	0	; select bank0
 10611  00BC  00A6               	movwf	___ftge@ff1+2
 10612  00BD  3000               	movlw	0
 10613  00BE  00A7               	movwf	___ftge@ff2
 10614  00BF  3000               	movlw	0
 10615  00C0  00A8               	movwf	___ftge@ff2+1
 10616  00C1  3000               	movlw	0
 10617  00C2  00A9               	movwf	___ftge@ff2+2
 10618  00C3  318D  251F  3180   	fcall	___ftge
 10619  00C6  1803               	btfsc	3,0
 10620  00C7  28F7               	goto	l6075
 10621                           
 10622                           ;UART_Display.c: 47: {
 10623                           ;UART_Display.c: 48: EUSART_Write('-');
 10624  00C8  302D               	movlw	45
 10625  00C9  318B  235B  3180   	fcall	_EUSART_Write
 10626                           
 10627                           ;UART_Display.c: 49: TempF = abs(TempF);
 10628  00CC  0021               	movlb	1	; select bank1
 10629  00CD  0867               	movf	UartDisplay@TempF^(0+128),w
 10630  00CE  0020               	movlb	0	; select bank0
 10631  00CF  00C0               	movwf	___fttol@f1
 10632  00D0  0021               	movlb	1	; select bank1
 10633  00D1  0868               	movf	(UartDisplay@TempF+1)^(0+128),w
 10634  00D2  0020               	movlb	0	; select bank0
 10635  00D3  00C1               	movwf	___fttol@f1+1
 10636  00D4  0021               	movlb	1	; select bank1
 10637  00D5  0869               	movf	(UartDisplay@TempF+2)^(0+128),w
 10638  00D6  0020               	movlb	0	; select bank0
 10639  00D7  00C2               	movwf	___fttol@f1+2
 10640  00D8  3186  26BC  3180   	fcall	___fttol
 10641  00DB  0020               	movlb	0	; select bank0
 10642  00DC  0841               	movf	?___fttol+1,w
 10643  00DD  00CF               	movwf	abs@a+1
 10644  00DE  0840               	movf	?___fttol,w
 10645  00DF  00CE               	movwf	abs@a
 10646  00E0  3188  20A5  3180   	fcall	_abs
 10647  00E3  0020               	movlb	0	; select bank0
 10648  00E4  084F               	movf	?_abs+1,w
 10649  00E5  00D3               	movwf	___awtoft@c+1
 10650  00E6  084E               	movf	?_abs,w
 10651  00E7  00D2               	movwf	___awtoft@c
 10652  00E8  318A  22A0  3180   	fcall	___awtoft
 10653  00EB  0020               	movlb	0	; select bank0
 10654  00EC  0852               	movf	?___awtoft,w
 10655  00ED  0021               	movlb	1	; select bank1
 10656  00EE  00E7               	movwf	UartDisplay@TempF^(0+128)
 10657  00EF  0020               	movlb	0	; select bank0
 10658  00F0  0853               	movf	?___awtoft+1,w
 10659  00F1  0021               	movlb	1	; select bank1
 10660  00F2  00E8               	movwf	(UartDisplay@TempF+1)^(0+128)
 10661  00F3  0020               	movlb	0	; select bank0
 10662  00F4  0854               	movf	?___awtoft+2,w
 10663  00F5  0021               	movlb	1	; select bank1
 10664  00F6  00E9               	movwf	(UartDisplay@TempF+2)^(0+128)
 10665  00F7                     l6075:	
 10666                           
 10667                           ;UART_Display.c: 50: }
 10668                           ;UART_Display.c: 52: sprintf(str, "%4d" , Temp);
 10669  00F7  3000               	movlw	low (STR_1| (0+32768))
 10670  00F8  0020               	movlb	0	; select bank0
 10671  00F9  00B2               	movwf	sprintf@f
 10672  00FA  3098               	movlw	high (STR_1| (0+32768))
 10673  00FB  00B3               	movwf	sprintf@f+1
 10674  00FC  0021               	movlb	1	; select bank1
 10675  00FD  0857               	movf	(UartDisplay@Temp+1)^(0+128),w
 10676  00FE  0020               	movlb	0	; select bank0
 10677  00FF  00B5               	movwf	?_sprintf+3
 10678  0100  0021               	movlb	1	; select bank1
 10679  0101  0856               	movf	UartDisplay@Temp^(0+128),w
 10680  0102  0020               	movlb	0	; select bank0
 10681  0103  00B4               	movwf	?_sprintf+2
 10682  0104  30DD               	movlw	(low (UartDisplay@str| 0))& (0+255)
 10683  0105  3182  2255  3180   	fcall	_sprintf
 10684                           
 10685                           ;UART_Display.c: 54: EUSART_Write(str[0]);
 10686  0108  0021               	movlb	1	; select bank1
 10687  0109  085D               	movf	UartDisplay@str^(0+128),w
 10688  010A  318B  235B  3180   	fcall	_EUSART_Write
 10689                           
 10690                           ;UART_Display.c: 55: EUSART_Write(str[1]);
 10691  010D  0021               	movlb	1	; select bank1
 10692  010E  085E               	movf	(UartDisplay@str^(0+128)+1),w
 10693  010F  318B  235B  3180   	fcall	_EUSART_Write
 10694                           
 10695                           ;UART_Display.c: 56: EUSART_Write('.');
 10696  0112  302E               	movlw	46
 10697  0113  318B  235B  3180   	fcall	_EUSART_Write
 10698                           
 10699                           ;UART_Display.c: 57: EUSART_Write(str[2]);
 10700  0116  0021               	movlb	1	; select bank1
 10701  0117  085F               	movf	(UartDisplay@str^(0+128)+2),w
 10702  0118  318B  235B  3180   	fcall	_EUSART_Write
 10703                           
 10704                           ;UART_Display.c: 58: EUSART_Write(str[3]);
 10705  011B  0021               	movlb	1	; select bank1
 10706  011C  0860               	movf	(UartDisplay@str^(0+128)+3),w
 10707  011D  318B  235B  3180   	fcall	_EUSART_Write
 10708                           
 10709                           ;UART_Display.c: 59: EUSART_Write(' ');
 10710  0120  3020               	movlw	32
 10711  0121  318B  235B         	fcall	_EUSART_Write
 10712  0123                     l6089:	
 10713                           
 10714                           ;UART_Display.c: 60: }
 10715                           ;UART_Display.c: 61: UART_STATE = UATR_HUMI;
 10716  0123  0021               	movlb	1	; select bank1
 10717  0124  01C0               	clrf	_UART_STATE^(0+128)
 10718  0125  0AC0               	incf	_UART_STATE^(0+128),f
 10719                           
 10720                           ;UART_Display.c: 62: break;
 10721  0126  0008               	return
 10722  0127                     l6091:	
 10723                           ;UART_Display.c: 63: case UATR_HUMI:
 10724                           
 10725                           
 10726                           ;UART_Display.c: 64: if (IsSHT31MeasureDone())
 10727  0127  3197  2778  3180   	fcall	_IsSHT31MeasureDone
 10728  012A  3A00               	xorlw	0
 10729  012B  1903               	skipnz
 10730  012C  2992               	goto	l6113
 10731                           
 10732                           ;UART_Display.c: 65: {
 10733                           ;UART_Display.c: 66: EUSART_Write('H');
 10734  012D  3048               	movlw	72
 10735  012E  318B  235B  3180   	fcall	_EUSART_Write
 10736                           
 10737                           ;UART_Display.c: 67: HumiF = GetRelativeHumidity_F();
 10738  0131  3188  208B  3180   	fcall	_GetRelativeHumidity_F
 10739  0134  0020               	movlb	0	; select bank0
 10740  0135  0824               	movf	?_GetRelativeHumidity_F,w
 10741  0136  0021               	movlb	1	; select bank1
 10742  0137  00D3               	movwf	UartDisplay@HumiF^(0+128)
 10743  0138  0020               	movlb	0	; select bank0
 10744  0139  0825               	movf	?_GetRelativeHumidity_F+1,w
 10745  013A  0021               	movlb	1	; select bank1
 10746  013B  00D4               	movwf	(UartDisplay@HumiF+1)^(0+128)
 10747  013C  0020               	movlb	0	; select bank0
 10748  013D  0826               	movf	?_GetRelativeHumidity_F+2,w
 10749  013E  0021               	movlb	1	; select bank1
 10750  013F  00D5               	movwf	(UartDisplay@HumiF+2)^(0+128)
 10751                           
 10752                           ;UART_Display.c: 68: Humi = (UINT_16)(HumiF * 100);
 10753  0140  0853               	movf	UartDisplay@HumiF^(0+128),w
 10754  0141  0020               	movlb	0	; select bank0
 10755  0142  00B3               	movwf	___ftmul@f2
 10756  0143  0021               	movlb	1	; select bank1
 10757  0144  0854               	movf	(UartDisplay@HumiF+1)^(0+128),w
 10758  0145  0020               	movlb	0	; select bank0
 10759  0146  00B4               	movwf	___ftmul@f2+1
 10760  0147  0021               	movlb	1	; select bank1
 10761  0148  0855               	movf	(UartDisplay@HumiF+2)^(0+128),w
 10762  0149  0020               	movlb	0	; select bank0
 10763  014A  00B5               	movwf	___ftmul@f2+2
 10764  014B  3000               	movlw	0
 10765  014C  00B0               	movwf	___ftmul@f1
 10766  014D  30C8               	movlw	200
 10767  014E  00B1               	movwf	___ftmul@f1+1
 10768  014F  3042               	movlw	66
 10769  0150  00B2               	movwf	___ftmul@f1+2
 10770  0151  3185  255F  3180   	fcall	___ftmul
 10771  0154  0020               	movlb	0	; select bank0
 10772  0155  0830               	movf	?___ftmul,w
 10773  0156  00C0               	movwf	___fttol@f1
 10774  0157  0831               	movf	?___ftmul+1,w
 10775  0158  00C1               	movwf	___fttol@f1+1
 10776  0159  0832               	movf	?___ftmul+2,w
 10777  015A  00C2               	movwf	___fttol@f1+2
 10778  015B  3186  26BC  3180   	fcall	___fttol
 10779  015E  0020               	movlb	0	; select bank0
 10780  015F  0841               	movf	?___fttol+1,w
 10781  0160  0021               	movlb	1	; select bank1
 10782  0161  00D9               	movwf	(UartDisplay@Humi+1)^(0+128)
 10783  0162  0020               	movlb	0	; select bank0
 10784  0163  0840               	movf	?___fttol,w
 10785  0164  0021               	movlb	1	; select bank1
 10786  0165  00D8               	movwf	UartDisplay@Humi^(0+128)
 10787                           
 10788                           ;UART_Display.c: 70: sprintf(str, "%4d" , Humi);
 10789  0166  3000               	movlw	low (STR_1| (0+32768))
 10790  0167  0020               	movlb	0	; select bank0
 10791  0168  00B2               	movwf	sprintf@f
 10792  0169  3098               	movlw	high (STR_1| (0+32768))
 10793  016A  00B3               	movwf	sprintf@f+1
 10794  016B  0021               	movlb	1	; select bank1
 10795  016C  0859               	movf	(UartDisplay@Humi+1)^(0+128),w
 10796  016D  0020               	movlb	0	; select bank0
 10797  016E  00B5               	movwf	?_sprintf+3
 10798  016F  0021               	movlb	1	; select bank1
 10799  0170  0858               	movf	UartDisplay@Humi^(0+128),w
 10800  0171  0020               	movlb	0	; select bank0
 10801  0172  00B4               	movwf	?_sprintf+2
 10802  0173  30DD               	movlw	(low (UartDisplay@str| 0))& (0+255)
 10803  0174  3182  2255  3180   	fcall	_sprintf
 10804                           
 10805                           ;UART_Display.c: 72: EUSART_Write(str[0]);
 10806  0177  0021               	movlb	1	; select bank1
 10807  0178  085D               	movf	UartDisplay@str^(0+128),w
 10808  0179  318B  235B  3180   	fcall	_EUSART_Write
 10809                           
 10810                           ;UART_Display.c: 73: EUSART_Write(str[1]);
 10811  017C  0021               	movlb	1	; select bank1
 10812  017D  085E               	movf	(UartDisplay@str^(0+128)+1),w
 10813  017E  318B  235B  3180   	fcall	_EUSART_Write
 10814                           
 10815                           ;UART_Display.c: 74: EUSART_Write('.');
 10816  0181  302E               	movlw	46
 10817  0182  318B  235B  3180   	fcall	_EUSART_Write
 10818                           
 10819                           ;UART_Display.c: 75: EUSART_Write(str[2]);
 10820  0185  0021               	movlb	1	; select bank1
 10821  0186  085F               	movf	(UartDisplay@str^(0+128)+2),w
 10822  0187  318B  235B  3180   	fcall	_EUSART_Write
 10823                           
 10824                           ;UART_Display.c: 76: EUSART_Write(str[3]);
 10825  018A  0021               	movlb	1	; select bank1
 10826  018B  0860               	movf	(UartDisplay@str^(0+128)+3),w
 10827  018C  318B  235B  3180   	fcall	_EUSART_Write
 10828                           
 10829                           ;UART_Display.c: 77: EUSART_Write(' ');
 10830  018F  3020               	movlw	32
 10831  0190  318B  235B         	fcall	_EUSART_Write
 10832  0192                     l6113:	
 10833                           
 10834                           ;UART_Display.c: 78: }
 10835                           ;UART_Display.c: 79: UART_STATE = UART_NTC;
 10836  0192  3002               	movlw	2
 10837  0193  0020               	movlb	0	; select bank0
 10838  0194  00D8               	movwf	??_UartDisplay
 10839  0195  0858               	movf	??_UartDisplay,w
 10840  0196  0021               	movlb	1	; select bank1
 10841  0197  00C0               	movwf	_UART_STATE^(0+128)
 10842                           
 10843                           ;UART_Display.c: 80: break;
 10844  0198  0008               	return
 10845  0199                     l6115:	
 10846                           ;UART_Display.c: 81: case UART_NTC:
 10847                           
 10848                           
 10849                           ;UART_Display.c: 82: if (IsADMeasureDone())
 10850  0199  3197  2775  3180   	fcall	_IsADMeasureDone
 10851  019C  3A00               	xorlw	0
 10852  019D  1903               	skipnz
 10853  019E  2A31               	goto	l6143
 10854                           
 10855                           ;UART_Display.c: 83: {
 10856                           ;UART_Display.c: 84: EUSART_Write('N');
 10857  019F  304E               	movlw	78
 10858  01A0  318B  235B  3180   	fcall	_EUSART_Write
 10859                           
 10860                           ;UART_Display.c: 85: NtcTempF = GetNtcTemp();
 10861  01A3  3189  21D8  3180   	fcall	_GetNtcTemp
 10862  01A6  0020               	movlb	0	; select bank0
 10863  01A7  0824               	movf	?_GetNtcTemp,w
 10864  01A8  0021               	movlb	1	; select bank1
 10865  01A9  00DA               	movwf	UartDisplay@NtcTempF^(0+128)
 10866  01AA  0020               	movlb	0	; select bank0
 10867  01AB  0825               	movf	?_GetNtcTemp+1,w
 10868  01AC  0021               	movlb	1	; select bank1
 10869  01AD  00DB               	movwf	(UartDisplay@NtcTempF+1)^(0+128)
 10870  01AE  0020               	movlb	0	; select bank0
 10871  01AF  0826               	movf	?_GetNtcTemp+2,w
 10872  01B0  0021               	movlb	1	; select bank1
 10873  01B1  00DC               	movwf	(UartDisplay@NtcTempF+2)^(0+128)
 10874                           
 10875                           ;UART_Display.c: 86: NtcTemp = (UINT_16)(NtcTempF * 100);
 10876  01B2  085A               	movf	UartDisplay@NtcTempF^(0+128),w
 10877  01B3  0020               	movlb	0	; select bank0
 10878  01B4  00B3               	movwf	___ftmul@f2
 10879  01B5  0021               	movlb	1	; select bank1
 10880  01B6  085B               	movf	(UartDisplay@NtcTempF+1)^(0+128),w
 10881  01B7  0020               	movlb	0	; select bank0
 10882  01B8  00B4               	movwf	___ftmul@f2+1
 10883  01B9  0021               	movlb	1	; select bank1
 10884  01BA  085C               	movf	(UartDisplay@NtcTempF+2)^(0+128),w
 10885  01BB  0020               	movlb	0	; select bank0
 10886  01BC  00B5               	movwf	___ftmul@f2+2
 10887  01BD  3000               	movlw	0
 10888  01BE  00B0               	movwf	___ftmul@f1
 10889  01BF  30C8               	movlw	200
 10890  01C0  00B1               	movwf	___ftmul@f1+1
 10891  01C1  3042               	movlw	66
 10892  01C2  00B2               	movwf	___ftmul@f1+2
 10893  01C3  3185  255F  3180   	fcall	___ftmul
 10894  01C6  0020               	movlb	0	; select bank0
 10895  01C7  0830               	movf	?___ftmul,w
 10896  01C8  00C0               	movwf	___fttol@f1
 10897  01C9  0831               	movf	?___ftmul+1,w
 10898  01CA  00C1               	movwf	___fttol@f1+1
 10899  01CB  0832               	movf	?___ftmul+2,w
 10900  01CC  00C2               	movwf	___fttol@f1+2
 10901  01CD  3186  26BC  3180   	fcall	___fttol
 10902  01D0  0020               	movlb	0	; select bank0
 10903  01D1  0841               	movf	?___fttol+1,w
 10904  01D2  0021               	movlb	1	; select bank1
 10905  01D3  00E6               	movwf	(UartDisplay@NtcTemp+1)^(0+128)
 10906  01D4  0020               	movlb	0	; select bank0
 10907  01D5  0840               	movf	?___fttol,w
 10908  01D6  0021               	movlb	1	; select bank1
 10909  01D7  00E5               	movwf	UartDisplay@NtcTemp^(0+128)
 10910                           
 10911                           ;UART_Display.c: 87: if (NtcTempF < 0)
 10912  01D8  085A               	movf	UartDisplay@NtcTempF^(0+128),w
 10913  01D9  0020               	movlb	0	; select bank0
 10914  01DA  00A4               	movwf	___ftge@ff1
 10915  01DB  0021               	movlb	1	; select bank1
 10916  01DC  085B               	movf	(UartDisplay@NtcTempF+1)^(0+128),w
 10917  01DD  0020               	movlb	0	; select bank0
 10918  01DE  00A5               	movwf	___ftge@ff1+1
 10919  01DF  0021               	movlb	1	; select bank1
 10920  01E0  085C               	movf	(UartDisplay@NtcTempF+2)^(0+128),w
 10921  01E1  0020               	movlb	0	; select bank0
 10922  01E2  00A6               	movwf	___ftge@ff1+2
 10923  01E3  3000               	movlw	0
 10924  01E4  00A7               	movwf	___ftge@ff2
 10925  01E5  3000               	movlw	0
 10926  01E6  00A8               	movwf	___ftge@ff2+1
 10927  01E7  3000               	movlw	0
 10928  01E8  00A9               	movwf	___ftge@ff2+2
 10929  01E9  318D  251F  3180   	fcall	___ftge
 10930  01EC  1803               	btfsc	3,0
 10931  01ED  2A05               	goto	l6129
 10932                           
 10933                           ;UART_Display.c: 88: {
 10934                           ;UART_Display.c: 89: EUSART_Write('-');
 10935  01EE  302D               	movlw	45
 10936  01EF  318B  235B  3180   	fcall	_EUSART_Write
 10937                           
 10938                           ;UART_Display.c: 90: NtcTemp = abs(NtcTemp);
 10939  01F2  0021               	movlb	1	; select bank1
 10940  01F3  0866               	movf	(UartDisplay@NtcTemp+1)^(0+128),w
 10941  01F4  0020               	movlb	0	; select bank0
 10942  01F5  00CF               	movwf	abs@a+1
 10943  01F6  0021               	movlb	1	; select bank1
 10944  01F7  0865               	movf	UartDisplay@NtcTemp^(0+128),w
 10945  01F8  0020               	movlb	0	; select bank0
 10946  01F9  00CE               	movwf	abs@a
 10947  01FA  3188  20A5  3180   	fcall	_abs
 10948  01FD  0020               	movlb	0	; select bank0
 10949  01FE  084F               	movf	?_abs+1,w
 10950  01FF  0021               	movlb	1	; select bank1
 10951  0200  00E6               	movwf	(UartDisplay@NtcTemp+1)^(0+128)
 10952  0201  0020               	movlb	0	; select bank0
 10953  0202  084E               	movf	?_abs,w
 10954  0203  0021               	movlb	1	; select bank1
 10955  0204  00E5               	movwf	UartDisplay@NtcTemp^(0+128)
 10956  0205                     l6129:	
 10957                           
 10958                           ;UART_Display.c: 91: }
 10959                           ;UART_Display.c: 93: sprintf(str, "%4d" , NtcTemp);
 10960  0205  3000               	movlw	low (STR_1| (0+32768))
 10961  0206  0020               	movlb	0	; select bank0
 10962  0207  00B2               	movwf	sprintf@f
 10963  0208  3098               	movlw	high (STR_1| (0+32768))
 10964  0209  00B3               	movwf	sprintf@f+1
 10965  020A  0021               	movlb	1	; select bank1
 10966  020B  0866               	movf	(UartDisplay@NtcTemp+1)^(0+128),w
 10967  020C  0020               	movlb	0	; select bank0
 10968  020D  00B5               	movwf	?_sprintf+3
 10969  020E  0021               	movlb	1	; select bank1
 10970  020F  0865               	movf	UartDisplay@NtcTemp^(0+128),w
 10971  0210  0020               	movlb	0	; select bank0
 10972  0211  00B4               	movwf	?_sprintf+2
 10973  0212  30DD               	movlw	(low (UartDisplay@str| 0))& (0+255)
 10974  0213  3182  2255  3180   	fcall	_sprintf
 10975                           
 10976                           ;UART_Display.c: 95: EUSART_Write(str[0]);
 10977  0216  0021               	movlb	1	; select bank1
 10978  0217  085D               	movf	UartDisplay@str^(0+128),w
 10979  0218  318B  235B  3180   	fcall	_EUSART_Write
 10980                           
 10981                           ;UART_Display.c: 96: EUSART_Write(str[1]);
 10982  021B  0021               	movlb	1	; select bank1
 10983  021C  085E               	movf	(UartDisplay@str^(0+128)+1),w
 10984  021D  318B  235B  3180   	fcall	_EUSART_Write
 10985                           
 10986                           ;UART_Display.c: 97: EUSART_Write('.');
 10987  0220  302E               	movlw	46
 10988  0221  318B  235B  3180   	fcall	_EUSART_Write
 10989                           
 10990                           ;UART_Display.c: 98: EUSART_Write(str[2]);
 10991  0224  0021               	movlb	1	; select bank1
 10992  0225  085F               	movf	(UartDisplay@str^(0+128)+2),w
 10993  0226  318B  235B  3180   	fcall	_EUSART_Write
 10994                           
 10995                           ;UART_Display.c: 99: EUSART_Write(str[3]);
 10996  0229  0021               	movlb	1	; select bank1
 10997  022A  0860               	movf	(UartDisplay@str^(0+128)+3),w
 10998  022B  318B  235B  3180   	fcall	_EUSART_Write
 10999                           
 11000                           ;UART_Display.c: 100: EUSART_Write(' ');
 11001  022E  3020               	movlw	32
 11002  022F  318B  235B         	fcall	_EUSART_Write
 11003  0231                     l6143:	
 11004                           
 11005                           ;UART_Display.c: 101: }
 11006                           ;UART_Display.c: 102: UART_STATE = UART_Refresh_Interval;
 11007  0231  3003               	movlw	3
 11008  0232  0020               	movlb	0	; select bank0
 11009  0233  00D8               	movwf	??_UartDisplay
 11010  0234  0858               	movf	??_UartDisplay,w
 11011  0235  0021               	movlb	1	; select bank1
 11012  0236  00C0               	movwf	_UART_STATE^(0+128)
 11013                           
 11014                           ;UART_Display.c: 103: break;
 11015  0237  0008               	return
 11016  0238                     l6145:	
 11017                           ;UART_Display.c: 104: case UART_Refresh_Interval:
 11018                           
 11019                           
 11020                           ;UART_Display.c: 105: TimerCounter++;
 11021  0238  3001               	movlw	1
 11022  0239  0020               	movlb	0	; select bank0
 11023  023A  00D8               	movwf	??_UartDisplay
 11024  023B  0858               	movf	??_UartDisplay,w
 11025  023C  0021               	movlb	1	; select bank1
 11026  023D  07BF               	addwf	UART_Display@TimerCounter^(0+128),f
 11027                           
 11028                           ;UART_Display.c: 106: if (TimerCounter > 50)
 11029  023E  3033               	movlw	51
 11030  023F  023F               	subwf	UART_Display@TimerCounter^(0+128),w
 11031  0240  1C03               	skipc
 11032  0241  0008               	return
 11033                           
 11034                           ;UART_Display.c: 107: {
 11035                           ;UART_Display.c: 108: TimerCounter = 0;
 11036  0242  01BF               	clrf	UART_Display@TimerCounter^(0+128)
 11037                           
 11038                           ;UART_Display.c: 109: UART_STATE = UART_TEMP;
 11039  0243  01C0               	clrf	_UART_STATE^(0+128)
 11040                           
 11041                           ;UART_Display.c: 114: }
 11042                           
 11043                           ;UART_Display.c: 113: break;
 11044                           
 11045                           ;UART_Display.c: 112: default:
 11046                           
 11047                           ;UART_Display.c: 110: }
 11048                           ;UART_Display.c: 111: break;
 11049  0244  0008               	return
 11050  0245                     l6153:	
 11051  0245  0021               	movlb	1	; select bank1
 11052  0246  0840               	movf	_UART_STATE^(0+128),w
 11053                           
 11054                           ; Switch size 1, requested type "space"
 11055                           ; Number of cases is 4, Range of values is 0 to 3
 11056                           ; switch strategies available:
 11057                           ; Name         Instructions Cycles
 11058                           ; simple_byte           13     7 (average)
 11059                           ; direct_byte           14     6 (fixed)
 11060                           ; jumptable            260     6 (fixed)
 11061                           ;	Chosen strategy is simple_byte
 11062  0247  3A00               	xorlw	0	; case 0
 11063  0248  1903               	skipnz
 11064  0249  2873               	goto	l6061
 11065  024A  3A01               	xorlw	1	; case 1
 11066  024B  1903               	skipnz
 11067  024C  2927               	goto	l6091
 11068  024D  3A03               	xorlw	3	; case 2
 11069  024E  1903               	skipnz
 11070  024F  2999               	goto	l6115
 11071  0250  3A01               	xorlw	1	; case 3
 11072  0251  1903               	skipnz
 11073  0252  2A38               	goto	l6145
 11074  0253  2A54               	goto	l1169
 11075  0254                     l1169:	
 11076  0254  0008               	return
 11077  0255                     __end_of_UartDisplay:	
 11078                           
 11079                           	psect	text19
 11080  0255                     __ptext19:	
 11081 ;; *************** function _sprintf *****************
 11082 ;; Defined at:
 11083 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;  sp              1    wreg     PTR unsigned char 
 11086 ;;		 -> UartDisplay@str(8), 
 11087 ;;  f               2   18[BANK0 ] PTR const unsigned char 
 11088 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  sp              1   33[BANK0 ] PTR unsigned char 
 11091 ;;		 -> UartDisplay@str(8), 
 11092 ;;  tmpval          4    0        struct .
 11093 ;;  width           2   31[BANK0 ] int 
 11094 ;;  val             2   29[BANK0 ] unsigned int 
 11095 ;;  cp              2    0        PTR const unsigned char 
 11096 ;;  len             2    0        unsigned int 
 11097 ;;  c               1   34[BANK0 ] char 
 11098 ;;  flag            1   28[BANK0 ] unsigned char 
 11099 ;;  prec            1   27[BANK0 ] char 
 11100 ;;  ap              1   26[BANK0 ] PTR void [1]
 11101 ;;		 -> ?_sprintf(2), 
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  2   18[BANK0 ] int 
 11104 ;; Registers used:
 11105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;Total ram usage:       17 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:    8
 11118 ;; This function calls:
 11119 ;;		___lwdiv
 11120 ;;		___lwmod
 11121 ;;		___wmul
 11122 ;;		_isdigit
 11123 ;; This function is called by:
 11124 ;;		_UartDisplay
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function _sprintf
 11130  0255                     _sprintf:	
 11131                           
 11132                           ;incstack = 0
 11133                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11134                           ;sprintf@sp stored from wreg
 11135  0255  0020               	movlb	0	; select bank0
 11136  0256  00C1               	movwf	sprintf@sp
 11137                           
 11138                           ;doprnt.c: 494: va_list ap;
 11139                           ;doprnt.c: 499: signed char c;
 11140                           ;doprnt.c: 501: int width;
 11141                           ;doprnt.c: 506: signed char prec;
 11142                           ;doprnt.c: 508: unsigned char flag;
 11143                           ;doprnt.c: 523: union {
 11144                           ;doprnt.c: 524: unsigned long vd;
 11145                           ;doprnt.c: 525: double integ;
 11146                           ;doprnt.c: 526: } tmpval;
 11147                           ;doprnt.c: 528: unsigned int val;
 11148                           ;doprnt.c: 529: unsigned len;
 11149                           ;doprnt.c: 530: const char * cp;
 11150                           ;doprnt.c: 533: *ap = __va_start();
 11151  0257  3034               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 11152  0258  00B6               	movwf	??_sprintf
 11153  0259  0836               	movf	??_sprintf,w
 11154  025A  00BA               	movwf	sprintf@ap
 11155  025B                     l5853:	
 11156                           ;doprnt.c: 536: while(c = *f++) {
 11157                           
 11158  025B  0020               	movlb	0	; select bank0
 11159  025C  0833               	movf	sprintf@f+1,w
 11160  025D  00B7               	movwf	??_sprintf+1
 11161  025E  0832               	movf	sprintf@f,w
 11162  025F  00B6               	movwf	??_sprintf
 11163  0260  0AB2               	incf	sprintf@f,f
 11164  0261  1903               	skipnz
 11165  0262  0AB3               	incf	sprintf@f+1,f
 11166  0263  0836               	movf	??_sprintf,w
 11167  0264  0084               	movwf	4
 11168  0265  0837               	movf	??_sprintf+1,w
 11169  0266  0085               	movwf	5
 11170  0267  0800               	movf	0,w	;code access
 11171  0268  00B8               	movwf	??_sprintf+2
 11172  0269  0838               	movf	??_sprintf+2,w
 11173  026A  00C2               	movwf	sprintf@c
 11174  026B  0842               	movf	sprintf@c,w
 11175  026C  1903               	btfsc	3,2
 11176  026D  2BA0               	goto	l5855
 11177                           
 11178                           ;doprnt.c: 538: if(c != '%')
 11179  026E  3025               	movlw	37
 11180  026F  0642               	xorwf	sprintf@c,w
 11181  0270  1903               	btfsc	3,2
 11182  0271  2A7E               	goto	l5779
 11183                           
 11184                           ;doprnt.c: 540: {
 11185                           ;doprnt.c: 541: ((*sp++ = (c)));
 11186  0272  0842               	movf	sprintf@c,w
 11187  0273  00B6               	movwf	??_sprintf
 11188  0274  0841               	movf	sprintf@sp,w
 11189  0275  0086               	movwf	6
 11190  0276  0187               	clrf	7
 11191  0277  0836               	movf	??_sprintf,w
 11192  0278  0081               	movwf	1
 11193  0279  3001               	movlw	1
 11194  027A  00B6               	movwf	??_sprintf
 11195  027B  0836               	movf	??_sprintf,w
 11196  027C  07C1               	addwf	sprintf@sp,f
 11197                           
 11198                           ;doprnt.c: 542: continue;
 11199  027D  2A5B               	goto	l5853
 11200  027E                     l5779:	
 11201                           
 11202                           ;doprnt.c: 543: }
 11203                           ;doprnt.c: 546: width = 0;
 11204  027E  01BF               	clrf	sprintf@width
 11205  027F  01C0               	clrf	sprintf@width+1
 11206                           
 11207                           ;doprnt.c: 548: flag = 0;
 11208  0280  01BC               	clrf	sprintf@flag
 11209                           
 11210                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11211  0281  0832               	movf	sprintf@f,w
 11212  0282  0084               	movwf	4
 11213  0283  0833               	movf	sprintf@f+1,w
 11214  0284  0085               	movwf	5
 11215  0285  0800               	movf	0,w	;code access
 11216  0286  3188  20B4  3182   	fcall	_isdigit
 11217  0289  1C03               	btfss	3,0
 11218  028A  2ABC               	goto	l5795
 11219                           
 11220                           ;doprnt.c: 598: width = 0;
 11221  028B  0020               	movlb	0	; select bank0
 11222  028C  01BF               	clrf	sprintf@width
 11223  028D  01C0               	clrf	sprintf@width+1
 11224  028E                     l5785:	
 11225                           ;doprnt.c: 599: do {
 11226                           
 11227                           
 11228                           ;doprnt.c: 600: width *= 10;
 11229  028E  300A               	movlw	10
 11230  028F  0020               	movlb	0	; select bank0
 11231  0290  00A4               	movwf	___wmul@multiplier
 11232  0291  3000               	movlw	0
 11233  0292  00A5               	movwf	___wmul@multiplier+1
 11234  0293  0840               	movf	sprintf@width+1,w
 11235  0294  00A7               	movwf	___wmul@multiplicand+1
 11236  0295  083F               	movf	sprintf@width,w
 11237  0296  00A6               	movwf	___wmul@multiplicand
 11238  0297  318A  2229  3182   	fcall	___wmul
 11239  029A  0020               	movlb	0	; select bank0
 11240  029B  0825               	movf	?___wmul+1,w
 11241  029C  00C0               	movwf	sprintf@width+1
 11242  029D  0824               	movf	?___wmul,w
 11243  029E  00BF               	movwf	sprintf@width
 11244                           
 11245                           ;doprnt.c: 601: width += *f++ - '0';
 11246  029F  0832               	movf	sprintf@f,w
 11247  02A0  0084               	movwf	4
 11248  02A1  0833               	movf	sprintf@f+1,w
 11249  02A2  0085               	movwf	5
 11250  02A3  0800               	movf	0,w	;code access
 11251  02A4  3ED0               	addlw	208
 11252  02A5  00B6               	movwf	??_sprintf
 11253  02A6  30FF               	movlw	255
 11254  02A7  1803               	skipnc
 11255  02A8  3000               	movlw	0
 11256  02A9  00B7               	movwf	??_sprintf+1
 11257  02AA  0836               	movf	??_sprintf,w
 11258  02AB  07BF               	addwf	sprintf@width,f
 11259  02AC  0837               	movf	??_sprintf+1,w
 11260  02AD  3DC0               	addwfc	sprintf@width+1,f
 11261  02AE  3001               	movlw	1
 11262  02AF  07B2               	addwf	sprintf@f,f
 11263  02B0  3000               	movlw	0
 11264  02B1  3DB3               	addwfc	sprintf@f+1,f
 11265                           
 11266                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11267  02B2  0832               	movf	sprintf@f,w
 11268  02B3  0084               	movwf	4
 11269  02B4  0833               	movf	sprintf@f+1,w
 11270  02B5  0085               	movwf	5
 11271  02B6  0800               	movf	0,w	;code access
 11272  02B7  3188  20B4  3182   	fcall	_isdigit
 11273  02BA  1803               	btfsc	3,0
 11274  02BB  2A8E               	goto	l5785
 11275  02BC                     l5795:	
 11276                           ;doprnt.c: 822: }
 11277                           
 11278                           ;doprnt.c: 813: continue;
 11279                           
 11280                           ;doprnt.c: 802: default:
 11281                           
 11282                           ;doprnt.c: 698: case 'i':
 11283                           ;doprnt.c: 699: break;
 11284                           
 11285                           ;doprnt.c: 697: case 'd':
 11286                           
 11287                           ;doprnt.c: 638: goto alldone;
 11288                           
 11289                           ;doprnt.c: 637: case 0:
 11290                           
 11291                           ;doprnt.c: 608: }
 11292                           ;doprnt.c: 635: switch(c = *f++) {
 11293                           
 11294  02BC  0020               	movlb	0	; select bank0
 11295  02BD  0833               	movf	sprintf@f+1,w
 11296  02BE  00B7               	movwf	??_sprintf+1
 11297  02BF  0832               	movf	sprintf@f,w
 11298  02C0  00B6               	movwf	??_sprintf
 11299  02C1  0AB2               	incf	sprintf@f,f
 11300  02C2  1903               	skipnz
 11301  02C3  0AB3               	incf	sprintf@f+1,f
 11302  02C4  0836               	movf	??_sprintf,w
 11303  02C5  0084               	movwf	4
 11304  02C6  0837               	movf	??_sprintf+1,w
 11305  02C7  0085               	movwf	5
 11306  02C8  0800               	movf	0,w	;code access
 11307  02C9  00C2               	movwf	sprintf@c
 11308                           
 11309                           ; Switch size 1, requested type "space"
 11310                           ; Number of cases is 3, Range of values is 0 to 105
 11311                           ; switch strategies available:
 11312                           ; Name         Instructions Cycles
 11313                           ; simple_byte           10     6 (average)
 11314                           ; direct_byte          218     6 (fixed)
 11315                           ; jumptable            260     6 (fixed)
 11316                           ;	Chosen strategy is simple_byte
 11317  02CA  3A00               	xorlw	0	; case 0
 11318  02CB  1903               	skipnz
 11319  02CC  2BA0               	goto	l5855
 11320  02CD  3A64               	xorlw	100	; case 100
 11321  02CE  1903               	skipnz
 11322  02CF  2AD4               	goto	l5797
 11323  02D0  3A0D               	xorlw	13	; case 105
 11324  02D1  1903               	skipnz
 11325  02D2  2AD4               	goto	l5797
 11326  02D3  2A5B               	goto	l5853
 11327  02D4                     l5797:	
 11328                           
 11329                           ;doprnt.c: 1253: {
 11330                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11331  02D4  0020               	movlb	0	; select bank0
 11332  02D5  083A               	movf	sprintf@ap,w
 11333  02D6  0086               	movwf	6
 11334  02D7  0187               	clrf	7
 11335  02D8  3F40               	moviw [0]fsr1
 11336  02D9  00BD               	movwf	sprintf@val
 11337  02DA  3F41               	moviw [1]fsr1
 11338  02DB  00BE               	movwf	sprintf@val+1
 11339  02DC  3002               	movlw	2
 11340  02DD  00B6               	movwf	??_sprintf
 11341  02DE  0836               	movf	??_sprintf,w
 11342  02DF  07BA               	addwf	sprintf@ap,f
 11343                           
 11344                           ;doprnt.c: 1261: if((int)val < 0) {
 11345  02E0  1FBE               	btfss	sprintf@val+1,7
 11346  02E1  2AEB               	goto	l5807
 11347                           
 11348                           ;doprnt.c: 1262: flag |= 0x03;
 11349  02E2  3003               	movlw	3
 11350  02E3  00B6               	movwf	??_sprintf
 11351  02E4  0836               	movf	??_sprintf,w
 11352  02E5  04BC               	iorwf	sprintf@flag,f
 11353                           
 11354                           ;doprnt.c: 1263: val = -val;
 11355  02E6  09BD               	comf	sprintf@val,f
 11356  02E7  09BE               	comf	sprintf@val+1,f
 11357  02E8  0ABD               	incf	sprintf@val,f
 11358  02E9  1903               	skipnz
 11359  02EA  0ABE               	incf	sprintf@val+1,f
 11360  02EB                     l5807:	
 11361                           
 11362                           ;doprnt.c: 1264: }
 11363                           ;doprnt.c: 1266: }
 11364                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11365  02EB  01C2               	clrf	sprintf@c
 11366  02EC  0AC2               	incf	sprintf@c,f
 11367  02ED  3005               	movlw	5
 11368  02EE  0642               	xorwf	sprintf@c,w
 11369  02EF  1903               	btfsc	3,2
 11370  02F0  2B10               	goto	l5819
 11371  02F1                     l5813:	
 11372                           
 11373                           ;doprnt.c: 1306: if(val < dpowers[c])
 11374  02F1  0842               	movf	sprintf@c,w
 11375  02F2  00B6               	movwf	??_sprintf
 11376  02F3  01B7               	clrf	??_sprintf+1
 11377  02F4  35B6               	lslf	??_sprintf,f
 11378  02F5  0DB7               	rlf	??_sprintf+1,f
 11379  02F6  302F               	movlw	low (_dpowers| (0+32768))
 11380  02F7  0736               	addwf	??_sprintf,w
 11381  02F8  0084               	movwf	4
 11382  02F9  3090               	movlw	high (_dpowers| (0+32768))
 11383  02FA  3D37               	addwfc	??_sprintf+1,w
 11384  02FB  0085               	movwf	5
 11385  02FC  3F00               	moviw [0]fsr0
 11386  02FD  00B8               	movwf	??_sprintf+2
 11387  02FE  3F01               	moviw [1]fsr0
 11388  02FF  00B9               	movwf	??_sprintf+3
 11389  0300  0839               	movf	??_sprintf+3,w
 11390  0301  023E               	subwf	sprintf@val+1,w
 11391  0302  1D03               	skipz
 11392  0303  2B06               	goto	u5085
 11393  0304  0838               	movf	??_sprintf+2,w
 11394  0305  023D               	subwf	sprintf@val,w
 11395  0306                     u5085:	
 11396  0306  1C03               	btfss	3,0
 11397  0307  2B10               	goto	l5819
 11398                           
 11399                           ;doprnt.c: 1307: break;
 11400  0308  3001               	movlw	1
 11401  0309  00B6               	movwf	??_sprintf
 11402  030A  0836               	movf	??_sprintf,w
 11403  030B  07C2               	addwf	sprintf@c,f
 11404  030C  3005               	movlw	5
 11405  030D  0642               	xorwf	sprintf@c,w
 11406  030E  1D03               	btfss	3,2
 11407  030F  2AF1               	goto	l5813
 11408  0310                     l5819:	
 11409                           
 11410                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11411  0310  083F               	movf	sprintf@width,w
 11412  0311  0440               	iorwf	sprintf@width+1,w
 11413  0312  1903               	btfsc	3,2
 11414  0313  2B1C               	goto	l1261
 11415  0314  083C               	movf	sprintf@flag,w
 11416  0315  3903               	andlw	3
 11417  0316  1903               	btfsc	3,2
 11418  0317  2B1C               	goto	l1261
 11419                           
 11420                           ;doprnt.c: 1346: width--;
 11421  0318  30FF               	movlw	255
 11422  0319  07BF               	addwf	sprintf@width,f
 11423  031A  30FF               	movlw	255
 11424  031B  3DC0               	addwfc	sprintf@width+1,f
 11425  031C                     l1261:	
 11426                           
 11427                           ;doprnt.c: 1381: if(width > c)
 11428  031C  0842               	movf	sprintf@c,w
 11429  031D  00B6               	movwf	??_sprintf
 11430  031E  01B7               	clrf	??_sprintf+1
 11431  031F  1BB6               	btfsc	??_sprintf,7
 11432  0320  03B7               	decf	??_sprintf+1,f
 11433  0321  0837               	movf	??_sprintf+1,w
 11434  0322  3A80               	xorlw	128
 11435  0323  00B8               	movwf	??_sprintf+2
 11436  0324  0840               	movf	sprintf@width+1,w
 11437  0325  3A80               	xorlw	128
 11438  0326  0238               	subwf	??_sprintf+2,w
 11439  0327  1D03               	skipz
 11440  0328  2B2B               	goto	u5125
 11441  0329  083F               	movf	sprintf@width,w
 11442  032A  0236               	subwf	??_sprintf,w
 11443  032B                     u5125:	
 11444  032B  1803               	skipnc
 11445  032C  2B38               	goto	l5827
 11446                           
 11447                           ;doprnt.c: 1382: width -= c;
 11448  032D  0020               	movlb	0	; select bank0
 11449  032E  0842               	movf	sprintf@c,w
 11450  032F  00B6               	movwf	??_sprintf
 11451  0330  01B7               	clrf	??_sprintf+1
 11452  0331  1BB6               	btfsc	??_sprintf,7
 11453  0332  03B7               	decf	??_sprintf+1,f
 11454  0333  0836               	movf	??_sprintf,w
 11455  0334  02BF               	subwf	sprintf@width,f
 11456  0335  0837               	movf	??_sprintf+1,w
 11457  0336  3BC0               	subwfb	sprintf@width+1,f
 11458  0337  2B3B               	goto	l5829
 11459  0338                     l5827:	
 11460                           
 11461                           ;doprnt.c: 1383: else
 11462                           ;doprnt.c: 1384: width = 0;
 11463  0338  0020               	movlb	0	; select bank0
 11464  0339  01BF               	clrf	sprintf@width
 11465  033A  01C0               	clrf	sprintf@width+1
 11466  033B                     l5829:	
 11467                           
 11468                           ;doprnt.c: 1422: {
 11469                           ;doprnt.c: 1424: if(width
 11470                           ;doprnt.c: 1428: )
 11471  033B  083F               	movf	sprintf@width,w
 11472  033C  0440               	iorwf	sprintf@width+1,w
 11473  033D  1903               	btfsc	3,2
 11474  033E  2B52               	goto	l5837
 11475  033F                     l5831:	
 11476                           ;doprnt.c: 1429: do
 11477                           
 11478                           
 11479                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 11480  033F  3020               	movlw	32
 11481  0340  00B6               	movwf	??_sprintf
 11482  0341  0841               	movf	sprintf@sp,w
 11483  0342  0086               	movwf	6
 11484  0343  0187               	clrf	7
 11485  0344  0836               	movf	??_sprintf,w
 11486  0345  0081               	movwf	1
 11487  0346  3001               	movlw	1
 11488  0347  00B6               	movwf	??_sprintf
 11489  0348  0836               	movf	??_sprintf,w
 11490  0349  07C1               	addwf	sprintf@sp,f
 11491                           
 11492                           ;doprnt.c: 1431: while(--width);
 11493  034A  30FF               	movlw	255
 11494  034B  07BF               	addwf	sprintf@width,f
 11495  034C  30FF               	movlw	255
 11496  034D  3DC0               	addwfc	sprintf@width+1,f
 11497  034E  083F               	movf	sprintf@width,w
 11498  034F  0440               	iorwf	sprintf@width+1,w
 11499  0350  1D03               	btfss	3,2
 11500  0351  2B3F               	goto	l5831
 11501  0352                     l5837:	
 11502                           
 11503                           ;doprnt.c: 1438: if(flag & 0x03)
 11504  0352  083C               	movf	sprintf@flag,w
 11505  0353  3903               	andlw	3
 11506  0354  1903               	btfsc	3,2
 11507  0355  2B61               	goto	l5843
 11508                           
 11509                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11510  0356  302D               	movlw	45
 11511  0357  00B6               	movwf	??_sprintf
 11512  0358  0841               	movf	sprintf@sp,w
 11513  0359  0086               	movwf	6
 11514  035A  0187               	clrf	7
 11515  035B  0836               	movf	??_sprintf,w
 11516  035C  0081               	movwf	1
 11517  035D  3001               	movlw	1
 11518  035E  00B6               	movwf	??_sprintf
 11519  035F  0836               	movf	??_sprintf,w
 11520  0360  07C1               	addwf	sprintf@sp,f
 11521  0361                     l5843:	
 11522                           
 11523                           ;doprnt.c: 1469: }
 11524                           ;doprnt.c: 1472: prec = c;
 11525  0361  0842               	movf	sprintf@c,w
 11526  0362  00B6               	movwf	??_sprintf
 11527  0363  0836               	movf	??_sprintf,w
 11528  0364  00BB               	movwf	sprintf@prec
 11529  0365                     l5851:	
 11530                           ;doprnt.c: 1474: while(prec--) {
 11531                           
 11532  0365  30FF               	movlw	255
 11533  0366  00B6               	movwf	??_sprintf
 11534  0367  0836               	movf	??_sprintf,w
 11535  0368  07BB               	addwf	sprintf@prec,f
 11536  0369  0A3B               	incf	sprintf@prec,w
 11537  036A  1903               	btfsc	3,2
 11538  036B  2A5B               	goto	l5853
 11539                           
 11540                           ;doprnt.c: 1478: {
 11541                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11542  036C  300A               	movlw	10
 11543  036D  00AC               	movwf	___lwmod@divisor
 11544  036E  3000               	movlw	0
 11545  036F  00AD               	movwf	___lwmod@divisor+1
 11546  0370  083B               	movf	sprintf@prec,w
 11547  0371  00B6               	movwf	??_sprintf
 11548  0372  01B7               	clrf	??_sprintf+1
 11549  0373  35B6               	lslf	??_sprintf,f
 11550  0374  0DB7               	rlf	??_sprintf+1,f
 11551  0375  302F               	movlw	low (_dpowers| (0+32768))
 11552  0376  0736               	addwf	??_sprintf,w
 11553  0377  0084               	movwf	4
 11554  0378  3090               	movlw	high (_dpowers| (0+32768))
 11555  0379  3D37               	addwfc	??_sprintf+1,w
 11556  037A  0085               	movwf	5
 11557  037B  3F00               	moviw [0]fsr0
 11558  037C  00A4               	movwf	___lwdiv@divisor
 11559  037D  3F01               	moviw [1]fsr0
 11560  037E  00A5               	movwf	___lwdiv@divisor+1
 11561  037F  083E               	movf	sprintf@val+1,w
 11562  0380  00A7               	movwf	___lwdiv@dividend+1
 11563  0381  083D               	movf	sprintf@val,w
 11564  0382  00A6               	movwf	___lwdiv@dividend
 11565  0383  318C  2403  3182   	fcall	___lwdiv
 11566  0386  0020               	movlb	0	; select bank0
 11567  0387  0825               	movf	?___lwdiv+1,w
 11568  0388  00AF               	movwf	___lwmod@dividend+1
 11569  0389  0824               	movf	?___lwdiv,w
 11570  038A  00AE               	movwf	___lwmod@dividend
 11571  038B  318B  23D6  3182   	fcall	___lwmod
 11572  038E  0020               	movlb	0	; select bank0
 11573  038F  082C               	movf	?___lwmod,w
 11574  0390  3E30               	addlw	48
 11575  0391  00B8               	movwf	??_sprintf+2
 11576  0392  0838               	movf	??_sprintf+2,w
 11577  0393  00C2               	movwf	sprintf@c
 11578                           
 11579                           ;doprnt.c: 1523: }
 11580                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11581  0394  0842               	movf	sprintf@c,w
 11582  0395  00B6               	movwf	??_sprintf
 11583  0396  0841               	movf	sprintf@sp,w
 11584  0397  0086               	movwf	6
 11585  0398  0187               	clrf	7
 11586  0399  0836               	movf	??_sprintf,w
 11587  039A  0081               	movwf	1
 11588  039B  3001               	movlw	1
 11589  039C  00B6               	movwf	??_sprintf
 11590  039D  0836               	movf	??_sprintf,w
 11591  039E  07C1               	addwf	sprintf@sp,f
 11592  039F  2B65               	goto	l5851
 11593  03A0                     l5855:	
 11594                           ;doprnt.c: 1525: }
 11595                           ;doprnt.c: 1533: }
 11596                           ;doprnt.c: 1535: alldone:
 11597                           
 11598                           
 11599                           ;doprnt.c: 1538: *sp = 0;
 11600  03A0  0020               	movlb	0	; select bank0
 11601  03A1  0841               	movf	sprintf@sp,w
 11602  03A2  0086               	movwf	6
 11603  03A3  0187               	clrf	7
 11604  03A4  0181               	clrf	1
 11605  03A5  0008               	return
 11606  03A6                     __end_of_sprintf:	
 11607                           ;doprnt.c: 1540: return 0;
 11608                           ;	Return value of _sprintf is never used
 11609                           
 11610                           
 11611                           	psect	text20
 11612  08B4                     __ptext20:	
 11613 ;; *************** function _isdigit *****************
 11614 ;; Defined at:
 11615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  c               1    wreg     unsigned char 
 11618 ;; Auto vars:     Size  Location     Type
 11619 ;;  c               1    5[BANK0 ] unsigned char 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;		None               void
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;Total ram usage:        2 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:    7
 11636 ;; This function calls:
 11637 ;;		Nothing
 11638 ;; This function is called by:
 11639 ;;		_sprintf
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           
 11644                           ;psect for function _isdigit
 11645  08B4                     _isdigit:	
 11646                           
 11647                           ;incstack = 0
 11648                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11649                           ;isdigit@c stored from wreg
 11650  08B4  0020               	movlb	0	; select bank0
 11651  08B5  00A5               	movwf	isdigit@c
 11652  08B6  01A4               	clrf	_isdigit$1995
 11653  08B7  303A               	movlw	58
 11654  08B8  0225               	subwf	isdigit@c,w
 11655  08B9  1803               	skipnc
 11656  08BA  28C1               	goto	l5277
 11657  08BB  3030               	movlw	48
 11658  08BC  0225               	subwf	isdigit@c,w
 11659  08BD  1C03               	skipc
 11660  08BE  28C1               	goto	l5277
 11661  08BF  01A4               	clrf	_isdigit$1995
 11662  08C0  0AA4               	incf	_isdigit$1995,f
 11663  08C1                     l5277:	
 11664  08C1  0C24               	rrf	_isdigit$1995,w
 11665  08C2  0008               	return
 11666  08C3                     __end_of_isdigit:	
 11667                           
 11668                           	psect	text21
 11669  0A29                     __ptext21:	
 11670 ;; *************** function ___wmul *****************
 11671 ;; Defined at:
 11672 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;  multiplier      2    4[BANK0 ] unsigned int 
 11675 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;  product         2    8[BANK0 ] unsigned int 
 11678 ;; Return value:  Size  Location     Type
 11679 ;;                  2    4[BANK0 ] unsigned int 
 11680 ;; Registers used:
 11681 ;;		wreg, status,2, status,0
 11682 ;; Tracked objects:
 11683 ;;		On entry : 0/0
 11684 ;;		On exit  : 0/0
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;Total ram usage:        6 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    7
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_COS_TskMan
 11698 ;;		_sprintf
 11699 ;; This function uses a non-reentrant model
 11700 ;;
 11701                           
 11702                           
 11703                           ;psect for function ___wmul
 11704  0A29                     ___wmul:	
 11705                           
 11706                           ;incstack = 0
 11707                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11708  0A29  0020               	movlb	0	; select bank0
 11709  0A2A  01A8               	clrf	___wmul@product
 11710  0A2B  01A9               	clrf	___wmul@product+1
 11711  0A2C                     l5283:	
 11712  0A2C  1C24               	btfss	___wmul@multiplier,0
 11713  0A2D  2A32               	goto	l1276
 11714  0A2E  0826               	movf	___wmul@multiplicand,w
 11715  0A2F  07A8               	addwf	___wmul@product,f
 11716  0A30  0827               	movf	___wmul@multiplicand+1,w
 11717  0A31  3DA9               	addwfc	___wmul@product+1,f
 11718  0A32                     l1276:	
 11719  0A32  3001               	movlw	1
 11720  0A33                     u4275:	
 11721  0A33  35A6               	lslf	___wmul@multiplicand,f
 11722  0A34  0DA7               	rlf	___wmul@multiplicand+1,f
 11723  0A35  0B89               	decfsz	9,f
 11724  0A36  2A33               	goto	u4275
 11725  0A37  3001               	movlw	1
 11726  0A38                     u4285:	
 11727  0A38  36A5               	lsrf	___wmul@multiplier+1,f
 11728  0A39  0CA4               	rrf	___wmul@multiplier,f
 11729  0A3A  0B89               	decfsz	9,f
 11730  0A3B  2A38               	goto	u4285
 11731  0A3C  0824               	movf	___wmul@multiplier,w
 11732  0A3D  0425               	iorwf	___wmul@multiplier+1,w
 11733  0A3E  1D03               	btfss	3,2
 11734  0A3F  2A2C               	goto	l5283
 11735  0A40  0829               	movf	___wmul@product+1,w
 11736  0A41  00A5               	movwf	?___wmul+1
 11737  0A42  0828               	movf	___wmul@product,w
 11738  0A43  00A4               	movwf	?___wmul
 11739  0A44  0008               	return
 11740  0A45                     __end_of___wmul:	
 11741                           
 11742                           	psect	text22
 11743  0BD6                     __ptext22:	
 11744 ;; *************** function ___lwmod *****************
 11745 ;; Defined at:
 11746 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;  divisor         2   12[BANK0 ] unsigned int 
 11749 ;;  dividend        2   14[BANK0 ] unsigned int 
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;  counter         1   17[BANK0 ] unsigned char 
 11752 ;; Return value:  Size  Location     Type
 11753 ;;                  2   12[BANK0 ] unsigned int 
 11754 ;; Registers used:
 11755 ;;		wreg, status,2, status,0
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;Total ram usage:        6 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    7
 11768 ;; This function calls:
 11769 ;;		Nothing
 11770 ;; This function is called by:
 11771 ;;		_sprintf
 11772 ;; This function uses a non-reentrant model
 11773 ;;
 11774                           
 11775                           
 11776                           ;psect for function ___lwmod
 11777  0BD6                     ___lwmod:	
 11778                           
 11779                           ;incstack = 0
 11780                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11781  0BD6  0020               	movlb	0	; select bank0
 11782  0BD7  082C               	movf	___lwmod@divisor,w
 11783  0BD8  042D               	iorwf	___lwmod@divisor+1,w
 11784  0BD9  1903               	btfsc	3,2
 11785  0BDA  2BFE               	goto	l5501
 11786  0BDB  01B1               	clrf	___lwmod@counter
 11787  0BDC  0AB1               	incf	___lwmod@counter,f
 11788  0BDD                     l5491:	
 11789  0BDD  1BAD               	btfsc	___lwmod@divisor+1,7
 11790  0BDE  2BE9               	goto	l5493
 11791  0BDF  3001               	movlw	1
 11792  0BE0                     u4815:	
 11793  0BE0  35AC               	lslf	___lwmod@divisor,f
 11794  0BE1  0DAD               	rlf	___lwmod@divisor+1,f
 11795  0BE2  0B89               	decfsz	9,f
 11796  0BE3  2BE0               	goto	u4815
 11797  0BE4  3001               	movlw	1
 11798  0BE5  00B0               	movwf	??___lwmod
 11799  0BE6  0830               	movf	??___lwmod,w
 11800  0BE7  07B1               	addwf	___lwmod@counter,f
 11801  0BE8  2BDD               	goto	l5491
 11802  0BE9                     l5493:	
 11803  0BE9  082D               	movf	___lwmod@divisor+1,w
 11804  0BEA  022F               	subwf	___lwmod@dividend+1,w
 11805  0BEB  1D03               	skipz
 11806  0BEC  2BEF               	goto	u4835
 11807  0BED  082C               	movf	___lwmod@divisor,w
 11808  0BEE  022E               	subwf	___lwmod@dividend,w
 11809  0BEF                     u4835:	
 11810  0BEF  1C03               	skipc
 11811  0BF0  2BF5               	goto	l5497
 11812  0BF1  082C               	movf	___lwmod@divisor,w
 11813  0BF2  02AE               	subwf	___lwmod@dividend,f
 11814  0BF3  082D               	movf	___lwmod@divisor+1,w
 11815  0BF4  3BAF               	subwfb	___lwmod@dividend+1,f
 11816  0BF5                     l5497:	
 11817  0BF5  3001               	movlw	1
 11818  0BF6                     u4845:	
 11819  0BF6  36AD               	lsrf	___lwmod@divisor+1,f
 11820  0BF7  0CAC               	rrf	___lwmod@divisor,f
 11821  0BF8  0B89               	decfsz	9,f
 11822  0BF9  2BF6               	goto	u4845
 11823  0BFA  3001               	movlw	1
 11824  0BFB  02B1               	subwf	___lwmod@counter,f
 11825  0BFC  1D03               	btfss	3,2
 11826  0BFD  2BE9               	goto	l5493
 11827  0BFE                     l5501:	
 11828  0BFE  082F               	movf	___lwmod@dividend+1,w
 11829  0BFF  00AD               	movwf	?___lwmod+1
 11830  0C00  082E               	movf	___lwmod@dividend,w
 11831  0C01  00AC               	movwf	?___lwmod
 11832  0C02  0008               	return
 11833  0C03                     __end_of___lwmod:	
 11834                           
 11835                           	psect	text23
 11836  0C03                     __ptext23:	
 11837 ;; *************** function ___lwdiv *****************
 11838 ;; Defined at:
 11839 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;  divisor         2    4[BANK0 ] unsigned int 
 11842 ;;  dividend        2    6[BANK0 ] unsigned int 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  quotient        2   10[BANK0 ] unsigned int 
 11845 ;;  counter         1    9[BANK0 ] unsigned char 
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  2    4[BANK0 ] unsigned int 
 11848 ;; Registers used:
 11849 ;;		wreg, status,2, status,0
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11855 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;Total ram usage:        8 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    7
 11862 ;; This function calls:
 11863 ;;		Nothing
 11864 ;; This function is called by:
 11865 ;;		_sprintf
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           
 11870                           ;psect for function ___lwdiv
 11871  0C03                     ___lwdiv:	
 11872                           
 11873                           ;incstack = 0
 11874                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11875  0C03  0020               	movlb	0	; select bank0
 11876  0C04  01AA               	clrf	___lwdiv@quotient
 11877  0C05  01AB               	clrf	___lwdiv@quotient+1
 11878  0C06  0824               	movf	___lwdiv@divisor,w
 11879  0C07  0425               	iorwf	___lwdiv@divisor+1,w
 11880  0C08  1903               	btfsc	3,2
 11881  0C09  2C33               	goto	l5479
 11882  0C0A  01A9               	clrf	___lwdiv@counter
 11883  0C0B  0AA9               	incf	___lwdiv@counter,f
 11884  0C0C                     l5467:	
 11885  0C0C  1BA5               	btfsc	___lwdiv@divisor+1,7
 11886  0C0D  2C18               	goto	l5469
 11887  0C0E  3001               	movlw	1
 11888  0C0F                     u4745:	
 11889  0C0F  35A4               	lslf	___lwdiv@divisor,f
 11890  0C10  0DA5               	rlf	___lwdiv@divisor+1,f
 11891  0C11  0B89               	decfsz	9,f
 11892  0C12  2C0F               	goto	u4745
 11893  0C13  3001               	movlw	1
 11894  0C14  00A8               	movwf	??___lwdiv
 11895  0C15  0828               	movf	??___lwdiv,w
 11896  0C16  07A9               	addwf	___lwdiv@counter,f
 11897  0C17  2C0C               	goto	l5467
 11898  0C18                     l5469:	
 11899  0C18  3001               	movlw	1
 11900  0C19                     u4765:	
 11901  0C19  35AA               	lslf	___lwdiv@quotient,f
 11902  0C1A  0DAB               	rlf	___lwdiv@quotient+1,f
 11903  0C1B  0B89               	decfsz	9,f
 11904  0C1C  2C19               	goto	u4765
 11905  0C1D  0825               	movf	___lwdiv@divisor+1,w
 11906  0C1E  0227               	subwf	___lwdiv@dividend+1,w
 11907  0C1F  1D03               	skipz
 11908  0C20  2C23               	goto	u4775
 11909  0C21  0824               	movf	___lwdiv@divisor,w
 11910  0C22  0226               	subwf	___lwdiv@dividend,w
 11911  0C23                     u4775:	
 11912  0C23  1C03               	skipc
 11913  0C24  2C2A               	goto	l5475
 11914  0C25  0824               	movf	___lwdiv@divisor,w
 11915  0C26  02A6               	subwf	___lwdiv@dividend,f
 11916  0C27  0825               	movf	___lwdiv@divisor+1,w
 11917  0C28  3BA7               	subwfb	___lwdiv@dividend+1,f
 11918  0C29  142A               	bsf	___lwdiv@quotient,0
 11919  0C2A                     l5475:	
 11920  0C2A  3001               	movlw	1
 11921  0C2B                     u4785:	
 11922  0C2B  36A5               	lsrf	___lwdiv@divisor+1,f
 11923  0C2C  0CA4               	rrf	___lwdiv@divisor,f
 11924  0C2D  0B89               	decfsz	9,f
 11925  0C2E  2C2B               	goto	u4785
 11926  0C2F  3001               	movlw	1
 11927  0C30  02A9               	subwf	___lwdiv@counter,f
 11928  0C31  1D03               	btfss	3,2
 11929  0C32  2C18               	goto	l5469
 11930  0C33                     l5479:	
 11931  0C33  082B               	movf	___lwdiv@quotient+1,w
 11932  0C34  00A5               	movwf	?___lwdiv+1
 11933  0C35  082A               	movf	___lwdiv@quotient,w
 11934  0C36  00A4               	movwf	?___lwdiv
 11935  0C37  0008               	return
 11936  0C38                     __end_of___lwdiv:	
 11937                           
 11938                           	psect	text24
 11939  08A5                     __ptext24:	
 11940 ;; *************** function _abs *****************
 11941 ;; Defined at:
 11942 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  a               2   46[BANK0 ] int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;		None
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  2   46[BANK0 ] int 
 11949 ;; Registers used:
 11950 ;;		wreg, status,2, status,0
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;Total ram usage:        4 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    7
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_UartDisplay
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function _abs
 11972  08A5                     _abs:	
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in _abs: [wreg+status,2+status,0]
 11976  08A5  0020               	movlb	0	; select bank0
 11977  08A6  1FCF               	btfss	abs@a+1,7
 11978  08A7  0008               	return
 11979  08A8  094E               	comf	abs@a,w
 11980  08A9  00D0               	movwf	??_abs
 11981  08AA  094F               	comf	abs@a+1,w
 11982  08AB  00D1               	movwf	??_abs+1
 11983  08AC  0AD0               	incf	??_abs,f
 11984  08AD  1903               	skipnz
 11985  08AE  0AD1               	incf	??_abs+1,f
 11986  08AF  0850               	movf	??_abs,w
 11987  08B0  00CE               	movwf	?_abs
 11988  08B1  0851               	movf	??_abs+1,w
 11989  08B2  00CF               	movwf	?_abs+1
 11990  08B3  0008               	return
 11991  08B4                     __end_of_abs:	
 11992                           
 11993                           	psect	text25
 11994  06BC                     __ptext25:	
 11995 ;; *************** function ___fttol *****************
 11996 ;; Defined at:
 11997 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;  f1              3   32[BANK0 ] float 
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;  lval            4   41[BANK0 ] unsigned long 
 12002 ;;  exp1            1   45[BANK0 ] unsigned char 
 12003 ;;  sign1           1   40[BANK0 ] unsigned char 
 12004 ;; Return value:  Size  Location     Type
 12005 ;;                  4   32[BANK0 ] long 
 12006 ;; Registers used:
 12007 ;;		wreg, status,2, status,0
 12008 ;; Tracked objects:
 12009 ;;		On entry : 0/0
 12010 ;;		On exit  : 0/0
 12011 ;;		Unchanged: 0/0
 12012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;Total ram usage:       14 bytes
 12018 ;; Hardware stack levels used:    1
 12019 ;; Hardware stack levels required when called:    7
 12020 ;; This function calls:
 12021 ;;		Nothing
 12022 ;; This function is called by:
 12023 ;;		_UartDisplay
 12024 ;; This function uses a non-reentrant model
 12025 ;;
 12026                           
 12027                           
 12028                           ;psect for function ___fttol
 12029  06BC                     ___fttol:	
 12030                           
 12031                           ;incstack = 0
 12032                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12033  06BC  0020               	movlb	0	; select bank0
 12034  06BD  0840               	movf	___fttol@f1,w
 12035  06BE  00C4               	movwf	??___fttol
 12036  06BF  0841               	movf	___fttol@f1+1,w
 12037  06C0  00C5               	movwf	??___fttol+1
 12038  06C1  0842               	movf	___fttol@f1+2,w
 12039  06C2  00C6               	movwf	??___fttol+2
 12040  06C3  1003               	clrc
 12041  06C4  0D45               	rlf	??___fttol+1,w
 12042  06C5  0D46               	rlf	??___fttol+2,w
 12043  06C6  00C7               	movwf	??___fttol+3
 12044  06C7  0847               	movf	??___fttol+3,w
 12045  06C8  00CD               	movwf	___fttol@exp1
 12046  06C9  084D               	movf	___fttol@exp1,w
 12047  06CA  1D03               	btfss	3,2
 12048  06CB  2ED5               	goto	l5909
 12049  06CC  3000               	movlw	0
 12050  06CD  00C3               	movwf	?___fttol+3
 12051  06CE  3000               	movlw	0
 12052  06CF  00C2               	movwf	?___fttol+2
 12053  06D0  3000               	movlw	0
 12054  06D1  00C1               	movwf	?___fttol+1
 12055  06D2  3000               	movlw	0
 12056  06D3  00C0               	movwf	?___fttol
 12057  06D4  0008               	return
 12058  06D5                     l5909:	
 12059  06D5  0840               	movf	___fttol@f1,w
 12060  06D6  00C4               	movwf	??___fttol
 12061  06D7  0841               	movf	___fttol@f1+1,w
 12062  06D8  00C5               	movwf	??___fttol+1
 12063  06D9  0842               	movf	___fttol@f1+2,w
 12064  06DA  00C6               	movwf	??___fttol+2
 12065  06DB  3017               	movlw	23
 12066  06DC                     u5245:	
 12067  06DC  36C6               	lsrf	??___fttol+2,f
 12068  06DD  0CC5               	rrf	??___fttol+1,f
 12069  06DE  0CC4               	rrf	??___fttol,f
 12070  06DF  0B89               	decfsz	9,f
 12071  06E0  2EDC               	goto	u5245
 12072  06E1  0844               	movf	??___fttol,w
 12073  06E2  00C7               	movwf	??___fttol+3
 12074  06E3  0847               	movf	??___fttol+3,w
 12075  06E4  00C8               	movwf	___fttol@sign1
 12076  06E5  17C1               	bsf	___fttol@f1+1,7
 12077  06E6  30FF               	movlw	255
 12078  06E7  05C0               	andwf	___fttol@f1,f
 12079  06E8  30FF               	movlw	255
 12080  06E9  05C1               	andwf	___fttol@f1+1,f
 12081  06EA  3000               	movlw	0
 12082  06EB  05C2               	andwf	___fttol@f1+2,f
 12083  06EC  0840               	movf	___fttol@f1,w
 12084  06ED  00C9               	movwf	___fttol@lval
 12085  06EE  0841               	movf	___fttol@f1+1,w
 12086  06EF  00CA               	movwf	___fttol@lval+1
 12087  06F0  0842               	movf	___fttol@f1+2,w
 12088  06F1  00CB               	movwf	___fttol@lval+2
 12089  06F2  01CC               	clrf	___fttol@lval+3
 12090  06F3  308E               	movlw	142
 12091  06F4  02CD               	subwf	___fttol@exp1,f
 12092  06F5  1FCD               	btfss	___fttol@exp1,7
 12093  06F6  2F13               	goto	l5929
 12094  06F7  084D               	movf	___fttol@exp1,w
 12095  06F8  3A80               	xorlw	128
 12096  06F9  3E8F               	addlw	143
 12097  06FA  1803               	skipnc
 12098  06FB  2F05               	goto	l5927
 12099  06FC  3000               	movlw	0
 12100  06FD  00C3               	movwf	?___fttol+3
 12101  06FE  3000               	movlw	0
 12102  06FF  00C2               	movwf	?___fttol+2
 12103  0700  3000               	movlw	0
 12104  0701  00C1               	movwf	?___fttol+1
 12105  0702  3000               	movlw	0
 12106  0703  00C0               	movwf	?___fttol
 12107  0704  0008               	return
 12108  0705                     l5927:	
 12109  0705  3001               	movlw	1
 12110  0706                     u5275:	
 12111  0706  36CC               	lsrf	___fttol@lval+3,f
 12112  0707  0CCB               	rrf	___fttol@lval+2,f
 12113  0708  0CCA               	rrf	___fttol@lval+1,f
 12114  0709  0CC9               	rrf	___fttol@lval,f
 12115  070A  0B89               	decfsz	9,f
 12116  070B  2F06               	goto	u5275
 12117  070C  3001               	movlw	1
 12118  070D  00C4               	movwf	??___fttol
 12119  070E  0844               	movf	??___fttol,w
 12120  070F  07CD               	addwf	___fttol@exp1,f
 12121  0710  1903               	btfsc	3,2
 12122  0711  2F2C               	goto	l5937
 12123  0712  2F05               	goto	l5927
 12124  0713                     l5929:	
 12125  0713  3018               	movlw	24
 12126  0714  024D               	subwf	___fttol@exp1,w
 12127  0715  1C03               	skipc
 12128  0716  2F29               	goto	l1532
 12129  0717  3000               	movlw	0
 12130  0718  00C3               	movwf	?___fttol+3
 12131  0719  3000               	movlw	0
 12132  071A  00C2               	movwf	?___fttol+2
 12133  071B  3000               	movlw	0
 12134  071C  00C1               	movwf	?___fttol+1
 12135  071D  3000               	movlw	0
 12136  071E  00C0               	movwf	?___fttol
 12137  071F  0008               	return
 12138  0720                     l5935:	
 12139  0720  3001               	movlw	1
 12140  0721                     u5305:	
 12141  0721  35C9               	lslf	___fttol@lval,f
 12142  0722  0DCA               	rlf	___fttol@lval+1,f
 12143  0723  0DCB               	rlf	___fttol@lval+2,f
 12144  0724  0DCC               	rlf	___fttol@lval+3,f
 12145  0725  0B89               	decfsz	9,f
 12146  0726  2F21               	goto	u5305
 12147  0727  3001               	movlw	1
 12148  0728  02CD               	subwf	___fttol@exp1,f
 12149  0729                     l1532:	
 12150  0729  084D               	movf	___fttol@exp1,w
 12151  072A  1D03               	btfss	3,2
 12152  072B  2F20               	goto	l5935
 12153  072C                     l5937:	
 12154  072C  0848               	movf	___fttol@sign1,w
 12155  072D  1903               	btfsc	3,2
 12156  072E  2F3A               	goto	l5941
 12157  072F  09C9               	comf	___fttol@lval,f
 12158  0730  09CA               	comf	___fttol@lval+1,f
 12159  0731  09CB               	comf	___fttol@lval+2,f
 12160  0732  09CC               	comf	___fttol@lval+3,f
 12161  0733  0AC9               	incf	___fttol@lval,f
 12162  0734  1903               	skipnz
 12163  0735  0ACA               	incf	___fttol@lval+1,f
 12164  0736  1903               	skipnz
 12165  0737  0ACB               	incf	___fttol@lval+2,f
 12166  0738  1903               	skipnz
 12167  0739  0ACC               	incf	___fttol@lval+3,f
 12168  073A                     l5941:	
 12169  073A  084C               	movf	___fttol@lval+3,w
 12170  073B  00C3               	movwf	?___fttol+3
 12171  073C  084B               	movf	___fttol@lval+2,w
 12172  073D  00C2               	movwf	?___fttol+2
 12173  073E  084A               	movf	___fttol@lval+1,w
 12174  073F  00C1               	movwf	?___fttol+1
 12175  0740  0849               	movf	___fttol@lval,w
 12176  0741  00C0               	movwf	?___fttol
 12177  0742  0008               	return
 12178  0743                     __end_of___fttol:	
 12179                           
 12180                           	psect	text26
 12181  0D1F                     __ptext26:	
 12182 ;; *************** function ___ftge *****************
 12183 ;; Defined at:
 12184 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;  ff1             3    4[BANK0 ] float 
 12187 ;;  ff2             3    7[BANK0 ] float 
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;		None
 12190 ;; Return value:  Size  Location     Type
 12191 ;;		None               void
 12192 ;; Registers used:
 12193 ;;		wreg, status,2, status,0
 12194 ;; Tracked objects:
 12195 ;;		On entry : 0/0
 12196 ;;		On exit  : 0/0
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12199 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;Total ram usage:        9 bytes
 12204 ;; Hardware stack levels used:    1
 12205 ;; Hardware stack levels required when called:    7
 12206 ;; This function calls:
 12207 ;;		Nothing
 12208 ;; This function is called by:
 12209 ;;		_UartDisplay
 12210 ;; This function uses a non-reentrant model
 12211 ;;
 12212                           
 12213                           
 12214                           ;psect for function ___ftge
 12215  0D1F                     ___ftge:	
 12216                           
 12217                           ;incstack = 0
 12218                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 12219  0D1F  0020               	movlb	0	; select bank0
 12220  0D20  1FA6               	btfss	___ftge@ff1+2,7
 12221  0D21  2D36               	goto	l5887
 12222  0D22  0924               	comf	___ftge@ff1,w
 12223  0D23  00AA               	movwf	??___ftge
 12224  0D24  0925               	comf	___ftge@ff1+1,w
 12225  0D25  00AB               	movwf	??___ftge+1
 12226  0D26  0926               	comf	___ftge@ff1+2,w
 12227  0D27  00AC               	movwf	??___ftge+2
 12228  0D28  0AAA               	incf	??___ftge,f
 12229  0D29  1903               	skipnz
 12230  0D2A  0AAB               	incf	??___ftge+1,f
 12231  0D2B  1903               	skipnz
 12232  0D2C  0AAC               	incf	??___ftge+2,f
 12233  0D2D  3000               	movlw	0
 12234  0D2E  072A               	addwf	??___ftge,w
 12235  0D2F  00A4               	movwf	___ftge@ff1
 12236  0D30  3000               	movlw	0
 12237  0D31  3D2B               	addwfc	??___ftge+1,w
 12238  0D32  00A5               	movwf	___ftge@ff1+1
 12239  0D33  3080               	movlw	128
 12240  0D34  3D2C               	addwfc	??___ftge+2,w
 12241  0D35  00A6               	movwf	___ftge@ff1+2
 12242  0D36                     l5887:	
 12243  0D36  1FA9               	btfss	___ftge@ff2+2,7
 12244  0D37  2D4C               	goto	l5891
 12245  0D38  0927               	comf	___ftge@ff2,w
 12246  0D39  00AA               	movwf	??___ftge
 12247  0D3A  0928               	comf	___ftge@ff2+1,w
 12248  0D3B  00AB               	movwf	??___ftge+1
 12249  0D3C  0929               	comf	___ftge@ff2+2,w
 12250  0D3D  00AC               	movwf	??___ftge+2
 12251  0D3E  0AAA               	incf	??___ftge,f
 12252  0D3F  1903               	skipnz
 12253  0D40  0AAB               	incf	??___ftge+1,f
 12254  0D41  1903               	skipnz
 12255  0D42  0AAC               	incf	??___ftge+2,f
 12256  0D43  3000               	movlw	0
 12257  0D44  072A               	addwf	??___ftge,w
 12258  0D45  00A7               	movwf	___ftge@ff2
 12259  0D46  3000               	movlw	0
 12260  0D47  3D2B               	addwfc	??___ftge+1,w
 12261  0D48  00A8               	movwf	___ftge@ff2+1
 12262  0D49  3080               	movlw	128
 12263  0D4A  3D2C               	addwfc	??___ftge+2,w
 12264  0D4B  00A9               	movwf	___ftge@ff2+2
 12265  0D4C                     l5891:	
 12266  0D4C  3080               	movlw	128
 12267  0D4D  06A6               	xorwf	___ftge@ff1+2,f
 12268  0D4E  3080               	movlw	128
 12269  0D4F  06A9               	xorwf	___ftge@ff2+2,f
 12270  0D50  0829               	movf	___ftge@ff2+2,w
 12271  0D51  0226               	subwf	___ftge@ff1+2,w
 12272  0D52  1D03               	skipz
 12273  0D53  0008               	return
 12274  0D54  0828               	movf	___ftge@ff2+1,w
 12275  0D55  0225               	subwf	___ftge@ff1+1,w
 12276  0D56  1D03               	skipz
 12277  0D57  0008               	return
 12278  0D58  0827               	movf	___ftge@ff2,w
 12279  0D59  0224               	subwf	___ftge@ff1,w
 12280  0D5A  0008               	return
 12281  0D5B                     __end_of___ftge:	
 12282                           
 12283                           	psect	text27
 12284  0AA0                     __ptext27:	
 12285 ;; *************** function ___awtoft *****************
 12286 ;; Defined at:
 12287 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  c               2   50[BANK0 ] int 
 12290 ;; Auto vars:     Size  Location     Type
 12291 ;;  sign            1   55[BANK0 ] unsigned char 
 12292 ;; Return value:  Size  Location     Type
 12293 ;;                  3   50[BANK0 ] float 
 12294 ;; Registers used:
 12295 ;;		wreg, status,2, status,0, pclath, cstack
 12296 ;; Tracked objects:
 12297 ;;		On entry : 0/0
 12298 ;;		On exit  : 0/0
 12299 ;;		Unchanged: 0/0
 12300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12301 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;Total ram usage:        6 bytes
 12306 ;; Hardware stack levels used:    1
 12307 ;; Hardware stack levels required when called:    8
 12308 ;; This function calls:
 12309 ;;		___ftpack
 12310 ;; This function is called by:
 12311 ;;		_UartDisplay
 12312 ;; This function uses a non-reentrant model
 12313 ;;
 12314                           
 12315                           
 12316                           ;psect for function ___awtoft
 12317  0AA0                     ___awtoft:	
 12318                           
 12319                           ;incstack = 0
 12320                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12321  0AA0  0020               	movlb	0	; select bank0
 12322  0AA1  01D7               	clrf	___awtoft@sign
 12323  0AA2  1FD3               	btfss	___awtoft@c+1,7
 12324  0AA3  2AAB               	goto	l5879
 12325  0AA4  09D2               	comf	___awtoft@c,f
 12326  0AA5  09D3               	comf	___awtoft@c+1,f
 12327  0AA6  0AD2               	incf	___awtoft@c,f
 12328  0AA7  1903               	skipnz
 12329  0AA8  0AD3               	incf	___awtoft@c+1,f
 12330  0AA9  01D7               	clrf	___awtoft@sign
 12331  0AAA  0AD7               	incf	___awtoft@sign,f
 12332  0AAB                     l5879:	
 12333  0AAB  0852               	movf	___awtoft@c,w
 12334  0AAC  00A4               	movwf	___ftpack@arg
 12335  0AAD  0853               	movf	___awtoft@c+1,w
 12336  0AAE  00A5               	movwf	___ftpack@arg+1
 12337  0AAF  01A6               	clrf	___ftpack@arg+2
 12338  0AB0  308E               	movlw	142
 12339  0AB1  00D5               	movwf	??___awtoft
 12340  0AB2  0855               	movf	??___awtoft,w
 12341  0AB3  00A7               	movwf	___ftpack@exp
 12342  0AB4  0857               	movf	___awtoft@sign,w
 12343  0AB5  00D6               	movwf	??___awtoft+1
 12344  0AB6  0856               	movf	??___awtoft+1,w
 12345  0AB7  00A8               	movwf	___ftpack@sign
 12346  0AB8  318F  2725         	fcall	___ftpack
 12347  0ABA  0020               	movlb	0	; select bank0
 12348  0ABB  0824               	movf	?___ftpack,w
 12349  0ABC  00D2               	movwf	?___awtoft
 12350  0ABD  0825               	movf	?___ftpack+1,w
 12351  0ABE  00D3               	movwf	?___awtoft+1
 12352  0ABF  0826               	movf	?___ftpack+2,w
 12353  0AC0  00D4               	movwf	?___awtoft+2
 12354  0AC1  0008               	return
 12355  0AC2                     __end_of___awtoft:	
 12356                           
 12357                           	psect	text28
 12358  1778                     __ptext28:	
 12359 ;; *************** function _IsSHT31MeasureDone *****************
 12360 ;; Defined at:
 12361 ;;		line 138 in file "SourceFiles/SunSensor/SHT25.c"
 12362 ;; Parameters:    Size  Location     Type
 12363 ;;		None
 12364 ;; Auto vars:     Size  Location     Type
 12365 ;;		None
 12366 ;; Return value:  Size  Location     Type
 12367 ;;                  1    wreg      unsigned char 
 12368 ;; Registers used:
 12369 ;;		wreg
 12370 ;; Tracked objects:
 12371 ;;		On entry : 0/0
 12372 ;;		On exit  : 0/0
 12373 ;;		Unchanged: 0/0
 12374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;Total ram usage:        0 bytes
 12380 ;; Hardware stack levels used:    1
 12381 ;; Hardware stack levels required when called:    7
 12382 ;; This function calls:
 12383 ;;		Nothing
 12384 ;; This function is called by:
 12385 ;;		_UartDisplay
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           
 12390                           ;psect for function _IsSHT31MeasureDone
 12391  1778                     _IsSHT31MeasureDone:	
 12392                           
 12393                           ;SHT25.c: 140: return IsMeasureDone;
 12394                           
 12395                           ;incstack = 0
 12396                           ; Regs used in _IsSHT31MeasureDone: [wreg]
 12397  1778  0021               	movlb	1	; select bank1
 12398  1779  0843               	movf	_IsMeasureDone^(0+128),w
 12399  177A  0008               	return
 12400  177B                     __end_of_IsSHT31MeasureDone:	
 12401                           
 12402                           	psect	text29
 12403  1775                     __ptext29:	
 12404 ;; *************** function _IsADMeasureDone *****************
 12405 ;; Defined at:
 12406 ;;		line 75 in file "SourceFiles/SunSensor/AD.c"
 12407 ;; Parameters:    Size  Location     Type
 12408 ;;		None
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;		None
 12411 ;; Return value:  Size  Location     Type
 12412 ;;                  1    wreg      unsigned char 
 12413 ;; Registers used:
 12414 ;;		wreg
 12415 ;; Tracked objects:
 12416 ;;		On entry : 0/0
 12417 ;;		On exit  : 0/0
 12418 ;;		Unchanged: 0/0
 12419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;Total ram usage:        0 bytes
 12425 ;; Hardware stack levels used:    1
 12426 ;; Hardware stack levels required when called:    7
 12427 ;; This function calls:
 12428 ;;		Nothing
 12429 ;; This function is called by:
 12430 ;;		_UartDisplay
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           
 12435                           ;psect for function _IsADMeasureDone
 12436  1775                     _IsADMeasureDone:	
 12437                           
 12438                           ;AD.c: 77: return IsMeasureDone;
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in _IsADMeasureDone: [wreg]
 12442  1775  0021               	movlb	1	; select bank1
 12443  1776  083C               	movf	AD@IsMeasureDone^(0+128),w
 12444  1777  0008               	return
 12445  1778                     __end_of_IsADMeasureDone:	
 12446                           
 12447                           	psect	text30
 12448  0898                     __ptext30:	
 12449 ;; *************** function _GetTemperatureC_F *****************
 12450 ;; Defined at:
 12451 ;;		line 128 in file "SourceFiles/SunSensor/SHT25.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;		None
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;		None
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  3    4[BANK0 ] float 
 12458 ;; Registers used:
 12459 ;;		wreg
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12465 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;Total ram usage:        3 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    7
 12472 ;; This function calls:
 12473 ;;		Nothing
 12474 ;; This function is called by:
 12475 ;;		_UartDisplay
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           
 12480                           ;psect for function _GetTemperatureC_F
 12481  0898                     _GetTemperatureC_F:	
 12482                           
 12483                           ;SHT25.c: 130: return SensirionTemperature_float;
 12484                           
 12485                           ;incstack = 0
 12486                           ; Regs used in _GetTemperatureC_F: [wreg]
 12487  0898  0021               	movlb	1	; select bank1
 12488  0899  0823               	movf	_SensirionTemperature_float^(0+128),w
 12489  089A  0020               	movlb	0	; select bank0
 12490  089B  00A4               	movwf	?_GetTemperatureC_F
 12491  089C  0021               	movlb	1	; select bank1
 12492  089D  0824               	movf	(_SensirionTemperature_float+1)^(0+128),w
 12493  089E  0020               	movlb	0	; select bank0
 12494  089F  00A5               	movwf	?_GetTemperatureC_F+1
 12495  08A0  0021               	movlb	1	; select bank1
 12496  08A1  0825               	movf	(_SensirionTemperature_float+2)^(0+128),w
 12497  08A2  0020               	movlb	0	; select bank0
 12498  08A3  00A6               	movwf	?_GetTemperatureC_F+2
 12499  08A4  0008               	return
 12500  08A5                     __end_of_GetTemperatureC_F:	
 12501                           
 12502                           	psect	text31
 12503  088B                     __ptext31:	
 12504 ;; *************** function _GetRelativeHumidity_F *****************
 12505 ;; Defined at:
 12506 ;;		line 133 in file "SourceFiles/SunSensor/SHT25.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;		None
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;		None
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  3    4[BANK0 ] float 
 12513 ;; Registers used:
 12514 ;;		wreg
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12520 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;Total ram usage:        3 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    7
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_UartDisplay
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           
 12535                           ;psect for function _GetRelativeHumidity_F
 12536  088B                     _GetRelativeHumidity_F:	
 12537                           
 12538                           ;SHT25.c: 135: return SensirionRH_float;
 12539                           
 12540                           ;incstack = 0
 12541                           ; Regs used in _GetRelativeHumidity_F: [wreg]
 12542  088B  0021               	movlb	1	; select bank1
 12543  088C  0820               	movf	_SensirionRH_float^(0+128),w
 12544  088D  0020               	movlb	0	; select bank0
 12545  088E  00A4               	movwf	?_GetRelativeHumidity_F
 12546  088F  0021               	movlb	1	; select bank1
 12547  0890  0821               	movf	(_SensirionRH_float+1)^(0+128),w
 12548  0891  0020               	movlb	0	; select bank0
 12549  0892  00A5               	movwf	?_GetRelativeHumidity_F+1
 12550  0893  0021               	movlb	1	; select bank1
 12551  0894  0822               	movf	(_SensirionRH_float+2)^(0+128),w
 12552  0895  0020               	movlb	0	; select bank0
 12553  0896  00A6               	movwf	?_GetRelativeHumidity_F+2
 12554  0897  0008               	return
 12555  0898                     __end_of_GetRelativeHumidity_F:	
 12556                           
 12557                           	psect	text32
 12558  09D8                     __ptext32:	
 12559 ;; *************** function _GetNtcTemp *****************
 12560 ;; Defined at:
 12561 ;;		line 59 in file "SourceFiles/SunSensor/AD.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;		None
 12564 ;; Auto vars:     Size  Location     Type
 12565 ;;  NtcTemp         3    7[BANK0 ] float 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;                  3    4[BANK0 ] float 
 12568 ;; Registers used:
 12569 ;;		wreg
 12570 ;; Tracked objects:
 12571 ;;		On entry : 0/0
 12572 ;;		On exit  : 0/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;Total ram usage:        6 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; Hardware stack levels required when called:    7
 12582 ;; This function calls:
 12583 ;;		Nothing
 12584 ;; This function is called by:
 12585 ;;		_UartDisplay
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           
 12590                           ;psect for function _GetNtcTemp
 12591  09D8                     _GetNtcTemp:	
 12592                           
 12593                           ;AD.c: 61: float NtcTemp;
 12594                           ;AD.c: 63: if (AD_State > 100)
 12595                           
 12596                           ;incstack = 0
 12597                           ; Regs used in _GetNtcTemp: [wreg]
 12598  09D8  3065               	movlw	101
 12599  09D9  0021               	movlb	1	; select bank1
 12600  09DA  023E               	subwf	_AD_State^(0+128),w
 12601  09DB  1C03               	skipc
 12602  09DC  29E4               	goto	l5867
 12603                           
 12604                           ;AD.c: 64: {
 12605                           ;AD.c: 65: NtcTemp = 25.53;
 12606  09DD  303D               	movlw	61
 12607  09DE  0020               	movlb	0	; select bank0
 12608  09DF  00A7               	movwf	GetNtcTemp@NtcTemp
 12609  09E0  30CC               	movlw	204
 12610  09E1  00A8               	movwf	GetNtcTemp@NtcTemp+1
 12611  09E2  3041               	movlw	65
 12612  09E3  29EA               	goto	L2
 12613  09E4                     l5867:	
 12614                           ;AD.c: 66: }
 12615                           
 12616                           
 12617                           ;AD.c: 67: else
 12618                           ;AD.c: 68: {
 12619                           ;AD.c: 69: NtcTemp = -20.96;
 12620  09E4  30AE               	movlw	174
 12621  09E5  0020               	movlb	0	; select bank0
 12622  09E6  00A7               	movwf	GetNtcTemp@NtcTemp
 12623  09E7  30A7               	movlw	167
 12624  09E8  00A8               	movwf	GetNtcTemp@NtcTemp+1
 12625  09E9  30C1               	movlw	193
 12626  09EA                     L2:	
 12627  09EA  00A9               	movwf	GetNtcTemp@NtcTemp+2
 12628                           
 12629                           ;AD.c: 70: }
 12630                           ;AD.c: 72: return NtcTemp;
 12631  09EB  0827               	movf	GetNtcTemp@NtcTemp,w
 12632  09EC  00A4               	movwf	?_GetNtcTemp
 12633  09ED  0828               	movf	GetNtcTemp@NtcTemp+1,w
 12634  09EE  00A5               	movwf	?_GetNtcTemp+1
 12635  09EF  0829               	movf	GetNtcTemp@NtcTemp+2,w
 12636  09F0  00A6               	movwf	?_GetNtcTemp+2
 12637  09F1  0008               	return
 12638  09F2                     __end_of_GetNtcTemp:	
 12639                           
 12640                           	psect	text33
 12641  0B5B                     __ptext33:	
 12642 ;; *************** function _EUSART_Write *****************
 12643 ;; Defined at:
 12644 ;;		line 173 in file "mcc_generated_files/eusart.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  txData          1    wreg     unsigned char 
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;  txData          1    5[BANK0 ] unsigned char 
 12649 ;; Return value:  Size  Location     Type
 12650 ;;                  1    wreg      void 
 12651 ;; Registers used:
 12652 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12653 ;; Tracked objects:
 12654 ;;		On entry : 0/0
 12655 ;;		On exit  : 0/0
 12656 ;;		Unchanged: 0/0
 12657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;Total ram usage:        2 bytes
 12663 ;; Hardware stack levels used:    1
 12664 ;; Hardware stack levels required when called:    7
 12665 ;; This function calls:
 12666 ;;		Nothing
 12667 ;; This function is called by:
 12668 ;;		_UartDisplay
 12669 ;;		_putch
 12670 ;; This function uses a non-reentrant model
 12671 ;;
 12672                           
 12673                           
 12674                           ;psect for function _EUSART_Write
 12675  0B5B                     _EUSART_Write:	
 12676                           
 12677                           ;incstack = 0
 12678                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12679                           ;EUSART_Write@txData stored from wreg
 12680  0B5B  0020               	movlb	0	; select bank0
 12681  0B5C  00A5               	movwf	EUSART_Write@txData
 12682  0B5D                     l5671:	
 12683                           ;eusart.c: 176: {
 12684                           
 12685                           ;eusart.c: 175: while(0 == eusartTxBufferRemaining)
 12686                           
 12687  0B5D  0021               	movlb	1	; select bank1
 12688  0B5E  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12689  0B5F  1903               	btfsc	3,2
 12690  0B60  2B5D               	goto	l5671
 12691                           
 12692                           ;eusart.c: 177: }
 12693                           ;eusart.c: 179: if(0 == PIE1bits.TXIE)
 12694  0B61  1A10               	btfsc	16,4	;volatile
 12695  0B62  2B68               	goto	l684
 12696                           
 12697                           ;eusart.c: 180: {
 12698                           ;eusart.c: 181: TX1REG = txData;
 12699  0B63  0020               	movlb	0	; select bank0
 12700  0B64  0825               	movf	EUSART_Write@txData,w
 12701  0B65  0023               	movlb	3	; select bank3
 12702  0B66  009A               	movwf	26	;volatile
 12703                           
 12704                           ;eusart.c: 182: }
 12705  0B67  2B80               	goto	l5685
 12706  0B68                     l684:	
 12707                           
 12708                           ;eusart.c: 183: else
 12709                           ;eusart.c: 184: {
 12710                           ;eusart.c: 185: PIE1bits.TXIE = 0;
 12711  0B68  1210               	bcf	16,4	;volatile
 12712                           
 12713                           ;eusart.c: 186: eusartTxBuffer[eusartTxHead++] = txData;
 12714  0B69  0020               	movlb	0	; select bank0
 12715  0B6A  0825               	movf	EUSART_Write@txData,w
 12716  0B6B  00A4               	movwf	??_EUSART_Write
 12717  0B6C  0021               	movlb	1	; select bank1
 12718  0B6D  0852               	movf	_eusartTxHead^(0+128),w
 12719  0B6E  3E4E               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12720  0B6F  0086               	movwf	6
 12721  0B70  3001               	movlw	1	; select bank2/3
 12722  0B71  0087               	movwf	7
 12723  0B72  0020               	movlb	0	; select bank0
 12724  0B73  0824               	movf	??_EUSART_Write,w
 12725  0B74  0081               	movwf	1
 12726  0B75  3001               	movlw	1
 12727  0B76  00A4               	movwf	??_EUSART_Write
 12728  0B77  0824               	movf	??_EUSART_Write,w
 12729  0B78  0021               	movlb	1	; select bank1
 12730  0B79  07D2               	addwf	_eusartTxHead^(0+128),f	;volatile
 12731                           
 12732                           ;eusart.c: 187: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 12733  0B7A  3008               	movlw	8
 12734  0B7B  0252               	subwf	_eusartTxHead^(0+128),w	;volatile
 12735  0B7C  1803               	btfsc	3,0
 12736                           
 12737                           ;eusart.c: 188: {
 12738                           ;eusart.c: 189: eusartTxHead = 0;
 12739  0B7D  01D2               	clrf	_eusartTxHead^(0+128)	;volatile
 12740                           
 12741                           ;eusart.c: 190: }
 12742                           ;eusart.c: 191: eusartTxBufferRemaining--;
 12743  0B7E  3001               	movlw	1
 12744  0B7F  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12745  0B80                     l5685:	
 12746                           
 12747                           ;eusart.c: 192: }
 12748                           ;eusart.c: 193: PIE1bits.TXIE = 1;
 12749  0B80  0021               	movlb	1	; select bank1
 12750  0B81  1610               	bsf	16,4	;volatile
 12751  0B82  0008               	return
 12752  0B83                     __end_of_EUSART_Write:	
 12753                           
 12754                           	psect	text34
 12755  0E30                     __ptext34:	
 12756 ;; *************** function _SHT3x_CalcTemperatureC_F *****************
 12757 ;; Defined at:
 12758 ;;		line 109 in file "SourceFiles/SunSensor/SHT25.c"
 12759 ;; Parameters:    Size  Location     Type
 12760 ;;		None
 12761 ;; Auto vars:     Size  Location     Type
 12762 ;;  TemperatureF    3   64[BANK0 ] float 
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  3   61[BANK0 ] float 
 12765 ;; Registers used:
 12766 ;;		wreg, status,2, status,0, pclath, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12772 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;Total ram usage:        6 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:    9
 12779 ;; This function calls:
 12780 ;;		___ftadd
 12781 ;;		___ftdiv
 12782 ;;		___ftmul
 12783 ;;		___lwtoft
 12784 ;; This function is called by:
 12785 ;;		_SHT25_StateMachine
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           
 12790                           ;psect for function _SHT3x_CalcTemperatureC_F
 12791  0E30                     _SHT3x_CalcTemperatureC_F:	
 12792                           
 12793                           ;SHT25.c: 111: float TemperatureFloat;
 12794                           ;SHT25.c: 113: TemperatureFloat = (float)TemperatureRaw * 175 / 65535 - 45;
 12795                           
 12796                           ;incstack = 0
 12797                           ; Regs used in _SHT3x_CalcTemperatureC_F: [wreg+status,2+status,0+pclath+cstack]
 12798  0E30  3000               	movlw	0
 12799  0E31  0020               	movlb	0	; select bank0
 12800  0E32  00D0               	movwf	___ftadd@f1
 12801  0E33  3034               	movlw	52
 12802  0E34  00D1               	movwf	___ftadd@f1+1
 12803  0E35  30C2               	movlw	194
 12804  0E36  00D2               	movwf	___ftadd@f1+2
 12805  0E37  30FF               	movlw	255
 12806  0E38  00C0               	movwf	___ftdiv@f2
 12807  0E39  307F               	movlw	127
 12808  0E3A  00C1               	movwf	___ftdiv@f2+1
 12809  0E3B  3047               	movlw	71
 12810  0E3C  00C2               	movwf	___ftdiv@f2+2
 12811  0E3D  3000               	movlw	0
 12812  0E3E  00B0               	movwf	___ftmul@f1
 12813  0E3F  302F               	movlw	47
 12814  0E40  00B1               	movwf	___ftmul@f1+1
 12815  0E41  3043               	movlw	67
 12816  0E42  00B2               	movwf	___ftmul@f1+2
 12817  0E43  0021               	movlb	1	; select bank1
 12818  0E44  082B               	movf	(_TemperatureRaw+1)^(0+128),w
 12819  0E45  0020               	movlb	0	; select bank0
 12820  0E46  00AD               	movwf	___lwtoft@c+1
 12821  0E47  0021               	movlb	1	; select bank1
 12822  0E48  082A               	movf	_TemperatureRaw^(0+128),w
 12823  0E49  0020               	movlb	0	; select bank0
 12824  0E4A  00AC               	movwf	___lwtoft@c
 12825  0E4B  3189  2150  318E   	fcall	___lwtoft
 12826  0E4E  0020               	movlb	0	; select bank0
 12827  0E4F  082C               	movf	?___lwtoft,w
 12828  0E50  00B3               	movwf	___ftmul@f2
 12829  0E51  082D               	movf	?___lwtoft+1,w
 12830  0E52  00B4               	movwf	___ftmul@f2+1
 12831  0E53  082E               	movf	?___lwtoft+2,w
 12832  0E54  00B5               	movwf	___ftmul@f2+2
 12833  0E55  3185  255F  318E   	fcall	___ftmul
 12834  0E58  0020               	movlb	0	; select bank0
 12835  0E59  0830               	movf	?___ftmul,w
 12836  0E5A  00C3               	movwf	___ftdiv@f1
 12837  0E5B  0831               	movf	?___ftmul+1,w
 12838  0E5C  00C4               	movwf	___ftdiv@f1+1
 12839  0E5D  0832               	movf	?___ftmul+2,w
 12840  0E5E  00C5               	movwf	___ftdiv@f1+2
 12841  0E5F  3186  2613  318E   	fcall	___ftdiv
 12842  0E62  0020               	movlb	0	; select bank0
 12843  0E63  0840               	movf	?___ftdiv,w
 12844  0E64  00D3               	movwf	___ftadd@f2
 12845  0E65  0841               	movf	?___ftdiv+1,w
 12846  0E66  00D4               	movwf	___ftadd@f2+1
 12847  0E67  0842               	movf	?___ftdiv+2,w
 12848  0E68  00D5               	movwf	___ftadd@f2+2
 12849  0E69  3183  23A6         	fcall	___ftadd
 12850  0E6B  0020               	movlb	0	; select bank0
 12851  0E6C  0850               	movf	?___ftadd,w
 12852  0E6D  00E0               	movwf	SHT3x_CalcTemperatureC_F@TemperatureFloat
 12853  0E6E  0851               	movf	?___ftadd+1,w
 12854  0E6F  00E1               	movwf	SHT3x_CalcTemperatureC_F@TemperatureFloat+1
 12855  0E70  0852               	movf	?___ftadd+2,w
 12856  0E71  00E2               	movwf	SHT3x_CalcTemperatureC_F@TemperatureFloat+2
 12857                           
 12858                           ;SHT25.c: 115: return TemperatureFloat ;
 12859  0E72  0860               	movf	SHT3x_CalcTemperatureC_F@TemperatureFloat,w
 12860  0E73  00DD               	movwf	?_SHT3x_CalcTemperatureC_F
 12861  0E74  0861               	movf	SHT3x_CalcTemperatureC_F@TemperatureFloat+1,w
 12862  0E75  00DE               	movwf	?_SHT3x_CalcTemperatureC_F+1
 12863  0E76  0862               	movf	SHT3x_CalcTemperatureC_F@TemperatureFloat+2,w
 12864  0E77  00DF               	movwf	?_SHT3x_CalcTemperatureC_F+2
 12865  0E78  0008               	return
 12866  0E79                     __end_of_SHT3x_CalcTemperatureC_F:	
 12867                           
 12868                           	psect	text35
 12869  03A6                     __ptext35:	
 12870 ;; *************** function ___ftadd *****************
 12871 ;; Defined at:
 12872 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  f1              3   48[BANK0 ] float 
 12875 ;;  f2              3   51[BANK0 ] float 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  exp1            1   60[BANK0 ] unsigned char 
 12878 ;;  exp2            1   59[BANK0 ] unsigned char 
 12879 ;;  sign            1   58[BANK0 ] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  3   48[BANK0 ] float 
 12882 ;; Registers used:
 12883 ;;		wreg, status,2, status,0, pclath, cstack
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:       13 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    8
 12896 ;; This function calls:
 12897 ;;		___ftpack
 12898 ;; This function is called by:
 12899 ;;		_SHT3x_CalcTemperatureC_F
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           
 12904                           ;psect for function ___ftadd
 12905  03A6                     ___ftadd:	
 12906                           
 12907                           ;incstack = 0
 12908                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12909  03A6  0020               	movlb	0	; select bank0
 12910  03A7  0850               	movf	___ftadd@f1,w
 12911  03A8  00D6               	movwf	??___ftadd
 12912  03A9  0851               	movf	___ftadd@f1+1,w
 12913  03AA  00D7               	movwf	??___ftadd+1
 12914  03AB  0852               	movf	___ftadd@f1+2,w
 12915  03AC  00D8               	movwf	??___ftadd+2
 12916  03AD  1003               	clrc
 12917  03AE  0D57               	rlf	??___ftadd+1,w
 12918  03AF  0D58               	rlf	??___ftadd+2,w
 12919  03B0  00D9               	movwf	??___ftadd+3
 12920  03B1  0859               	movf	??___ftadd+3,w
 12921  03B2  00DC               	movwf	___ftadd@exp1
 12922  03B3  0853               	movf	___ftadd@f2,w
 12923  03B4  00D6               	movwf	??___ftadd
 12924  03B5  0854               	movf	___ftadd@f2+1,w
 12925  03B6  00D7               	movwf	??___ftadd+1
 12926  03B7  0855               	movf	___ftadd@f2+2,w
 12927  03B8  00D8               	movwf	??___ftadd+2
 12928  03B9  1003               	clrc
 12929  03BA  0D57               	rlf	??___ftadd+1,w
 12930  03BB  0D58               	rlf	??___ftadd+2,w
 12931  03BC  00D9               	movwf	??___ftadd+3
 12932  03BD  0859               	movf	??___ftadd+3,w
 12933  03BE  00DB               	movwf	___ftadd@exp2
 12934  03BF  085C               	movf	___ftadd@exp1,w
 12935  03C0  1903               	btfsc	3,2
 12936  03C1  2BCE               	goto	l5301
 12937  03C2  085B               	movf	___ftadd@exp2,w
 12938  03C3  025C               	subwf	___ftadd@exp1,w
 12939  03C4  1803               	skipnc
 12940  03C5  2BD5               	goto	l5305
 12941  03C6  035C               	decf	___ftadd@exp1,w
 12942  03C7  3AFF               	xorlw	255
 12943  03C8  075B               	addwf	___ftadd@exp2,w
 12944  03C9  00D6               	movwf	??___ftadd
 12945  03CA  3019               	movlw	25
 12946  03CB  0256               	subwf	??___ftadd,w
 12947  03CC  1C03               	skipc
 12948  03CD  2BD5               	goto	l5305
 12949  03CE                     l5301:	
 12950  03CE  0853               	movf	___ftadd@f2,w
 12951  03CF  00D0               	movwf	?___ftadd
 12952  03D0  0854               	movf	___ftadd@f2+1,w
 12953  03D1  00D1               	movwf	?___ftadd+1
 12954  03D2  0855               	movf	___ftadd@f2+2,w
 12955  03D3  00D2               	movwf	?___ftadd+2
 12956  03D4  0008               	return
 12957  03D5                     l5305:	
 12958  03D5  085B               	movf	___ftadd@exp2,w
 12959  03D6  1903               	btfsc	3,2
 12960  03D7  0008               	return
 12961  03D8  085C               	movf	___ftadd@exp1,w
 12962  03D9  025B               	subwf	___ftadd@exp2,w
 12963  03DA  1803               	skipnc
 12964  03DB  2BE4               	goto	l5311
 12965  03DC  035B               	decf	___ftadd@exp2,w
 12966  03DD  3AFF               	xorlw	255
 12967  03DE  075C               	addwf	___ftadd@exp1,w
 12968  03DF  00D6               	movwf	??___ftadd
 12969  03E0  3019               	movlw	25
 12970  03E1  0256               	subwf	??___ftadd,w
 12971  03E2  1803               	btfsc	3,0
 12972  03E3  0008               	return
 12973  03E4                     l5311:	
 12974  03E4  3006               	movlw	6
 12975  03E5  00D6               	movwf	??___ftadd
 12976  03E6  0856               	movf	??___ftadd,w
 12977  03E7  00DA               	movwf	___ftadd@sign
 12978  03E8  1BD2               	btfsc	___ftadd@f1+2,7
 12979  03E9  17DA               	bsf	___ftadd@sign,7
 12980  03EA  1BD5               	btfsc	___ftadd@f2+2,7
 12981  03EB  175A               	bsf	___ftadd@sign,6
 12982  03EC  17D1               	bsf	___ftadd@f1+1,7
 12983  03ED  30FF               	movlw	255
 12984  03EE  05D0               	andwf	___ftadd@f1,f
 12985  03EF  30FF               	movlw	255
 12986  03F0  05D1               	andwf	___ftadd@f1+1,f
 12987  03F1  3000               	movlw	0
 12988  03F2  05D2               	andwf	___ftadd@f1+2,f
 12989  03F3  17D4               	bsf	___ftadd@f2+1,7
 12990  03F4  30FF               	movlw	255
 12991  03F5  05D3               	andwf	___ftadd@f2,f
 12992  03F6  30FF               	movlw	255
 12993  03F7  05D4               	andwf	___ftadd@f2+1,f
 12994  03F8  3000               	movlw	0
 12995  03F9  05D5               	andwf	___ftadd@f2+2,f
 12996  03FA  085B               	movf	___ftadd@exp2,w
 12997  03FB  025C               	subwf	___ftadd@exp1,w
 12998  03FC  1803               	skipnc
 12999  03FD  2C20               	goto	l5333
 13000  03FE                     l5323:	
 13001  03FE  3001               	movlw	1
 13002  03FF                     u4395:	
 13003  03FF  35D3               	lslf	___ftadd@f2,f
 13004  0400  0DD4               	rlf	___ftadd@f2+1,f
 13005  0401  0DD5               	rlf	___ftadd@f2+2,f
 13006  0402  0B89               	decfsz	9,f
 13007  0403  2BFF               	goto	u4395
 13008  0404  3001               	movlw	1
 13009  0405  02DB               	subwf	___ftadd@exp2,f
 13010  0406  085B               	movf	___ftadd@exp2,w
 13011  0407  065C               	xorwf	___ftadd@exp1,w
 13012  0408  1903               	skipnz
 13013  0409  2C1B               	goto	l5331
 13014  040A  3001               	movlw	1
 13015  040B  02DA               	subwf	___ftadd@sign,f
 13016  040C  085A               	movf	___ftadd@sign,w
 13017  040D  3907               	andlw	7
 13018  040E  1903               	btfsc	3,2
 13019  040F  2C1B               	goto	l5331
 13020  0410  2BFE               	goto	l5323
 13021  0411                     l5329:	
 13022  0411  3001               	movlw	1
 13023  0412                     u4425:	
 13024  0412  36D2               	lsrf	___ftadd@f1+2,f
 13025  0413  0CD1               	rrf	___ftadd@f1+1,f
 13026  0414  0CD0               	rrf	___ftadd@f1,f
 13027  0415  0B89               	decfsz	9,f
 13028  0416  2C12               	goto	u4425
 13029  0417  3001               	movlw	1
 13030  0418  00D6               	movwf	??___ftadd
 13031  0419  0856               	movf	??___ftadd,w
 13032  041A  07DC               	addwf	___ftadd@exp1,f
 13033  041B                     l5331:	
 13034  041B  085C               	movf	___ftadd@exp1,w
 13035  041C  065B               	xorwf	___ftadd@exp2,w
 13036  041D  1903               	btfsc	3,2
 13037  041E  2C45               	goto	l1472
 13038  041F  2C11               	goto	l5329
 13039  0420                     l5333:	
 13040  0420  085C               	movf	___ftadd@exp1,w
 13041  0421  025B               	subwf	___ftadd@exp2,w
 13042  0422  1803               	skipnc
 13043  0423  2C45               	goto	l1472
 13044  0424                     l5335:	
 13045  0424  3001               	movlw	1
 13046  0425                     u4455:	
 13047  0425  35D0               	lslf	___ftadd@f1,f
 13048  0426  0DD1               	rlf	___ftadd@f1+1,f
 13049  0427  0DD2               	rlf	___ftadd@f1+2,f
 13050  0428  0B89               	decfsz	9,f
 13051  0429  2C25               	goto	u4455
 13052  042A  3001               	movlw	1
 13053  042B  02DC               	subwf	___ftadd@exp1,f
 13054  042C  085B               	movf	___ftadd@exp2,w
 13055  042D  065C               	xorwf	___ftadd@exp1,w
 13056  042E  1903               	skipnz
 13057  042F  2C41               	goto	l5343
 13058  0430  3001               	movlw	1
 13059  0431  02DA               	subwf	___ftadd@sign,f
 13060  0432  085A               	movf	___ftadd@sign,w
 13061  0433  3907               	andlw	7
 13062  0434  1903               	btfsc	3,2
 13063  0435  2C41               	goto	l5343
 13064  0436  2C24               	goto	l5335
 13065  0437                     l5341:	
 13066  0437  3001               	movlw	1
 13067  0438                     u4485:	
 13068  0438  36D5               	lsrf	___ftadd@f2+2,f
 13069  0439  0CD4               	rrf	___ftadd@f2+1,f
 13070  043A  0CD3               	rrf	___ftadd@f2,f
 13071  043B  0B89               	decfsz	9,f
 13072  043C  2C38               	goto	u4485
 13073  043D  3001               	movlw	1
 13074  043E  00D6               	movwf	??___ftadd
 13075  043F  0856               	movf	??___ftadd,w
 13076  0440  07DB               	addwf	___ftadd@exp2,f
 13077  0441                     l5343:	
 13078  0441  085C               	movf	___ftadd@exp1,w
 13079  0442  065B               	xorwf	___ftadd@exp2,w
 13080  0443  1D03               	skipz
 13081  0444  2C37               	goto	l5341
 13082  0445                     l1472:	
 13083  0445  1FDA               	btfss	___ftadd@sign,7
 13084  0446  2C57               	goto	l5347
 13085  0447  30FF               	movlw	255
 13086  0448  06D0               	xorwf	___ftadd@f1,f
 13087  0449  30FF               	movlw	255
 13088  044A  06D1               	xorwf	___ftadd@f1+1,f
 13089  044B  30FF               	movlw	255
 13090  044C  06D2               	xorwf	___ftadd@f1+2,f
 13091  044D  3001               	movlw	1
 13092  044E  07D0               	addwf	___ftadd@f1,f
 13093  044F  3000               	movlw	0
 13094  0450  1803               	skipnc
 13095  0451  3001               	movlw	1
 13096  0452  07D1               	addwf	___ftadd@f1+1,f
 13097  0453  3000               	movlw	0
 13098  0454  1803               	skipnc
 13099  0455  3001               	movlw	1
 13100  0456  07D2               	addwf	___ftadd@f1+2,f
 13101  0457                     l5347:	
 13102  0457  1F5A               	btfss	___ftadd@sign,6
 13103  0458  2C69               	goto	l5351
 13104  0459  30FF               	movlw	255
 13105  045A  06D3               	xorwf	___ftadd@f2,f
 13106  045B  30FF               	movlw	255
 13107  045C  06D4               	xorwf	___ftadd@f2+1,f
 13108  045D  30FF               	movlw	255
 13109  045E  06D5               	xorwf	___ftadd@f2+2,f
 13110  045F  3001               	movlw	1
 13111  0460  07D3               	addwf	___ftadd@f2,f
 13112  0461  3000               	movlw	0
 13113  0462  1803               	skipnc
 13114  0463  3001               	movlw	1
 13115  0464  07D4               	addwf	___ftadd@f2+1,f
 13116  0465  3000               	movlw	0
 13117  0466  1803               	skipnc
 13118  0467  3001               	movlw	1
 13119  0468  07D5               	addwf	___ftadd@f2+2,f
 13120  0469                     l5351:	
 13121  0469  01DA               	clrf	___ftadd@sign
 13122  046A  0850               	movf	___ftadd@f1,w
 13123  046B  07D3               	addwf	___ftadd@f2,f
 13124  046C  0851               	movf	___ftadd@f1+1,w
 13125  046D  3DD4               	addwfc	___ftadd@f2+1,f
 13126  046E  0852               	movf	___ftadd@f1+2,w
 13127  046F  3DD5               	addwfc	___ftadd@f2+2,f
 13128  0470  1FD5               	btfss	___ftadd@f2+2,7
 13129  0471  2C84               	goto	l5361
 13130  0472  30FF               	movlw	255
 13131  0473  06D3               	xorwf	___ftadd@f2,f
 13132  0474  30FF               	movlw	255
 13133  0475  06D4               	xorwf	___ftadd@f2+1,f
 13134  0476  30FF               	movlw	255
 13135  0477  06D5               	xorwf	___ftadd@f2+2,f
 13136  0478  3001               	movlw	1
 13137  0479  07D3               	addwf	___ftadd@f2,f
 13138  047A  3000               	movlw	0
 13139  047B  1803               	skipnc
 13140  047C  3001               	movlw	1
 13141  047D  07D4               	addwf	___ftadd@f2+1,f
 13142  047E  3000               	movlw	0
 13143  047F  1803               	skipnc
 13144  0480  3001               	movlw	1
 13145  0481  07D5               	addwf	___ftadd@f2+2,f
 13146  0482  01DA               	clrf	___ftadd@sign
 13147  0483  0ADA               	incf	___ftadd@sign,f
 13148  0484                     l5361:	
 13149  0484  0853               	movf	___ftadd@f2,w
 13150  0485  00A4               	movwf	___ftpack@arg
 13151  0486  0854               	movf	___ftadd@f2+1,w
 13152  0487  00A5               	movwf	___ftpack@arg+1
 13153  0488  0855               	movf	___ftadd@f2+2,w
 13154  0489  00A6               	movwf	___ftpack@arg+2
 13155  048A  085C               	movf	___ftadd@exp1,w
 13156  048B  00D6               	movwf	??___ftadd
 13157  048C  0856               	movf	??___ftadd,w
 13158  048D  00A7               	movwf	___ftpack@exp
 13159  048E  085A               	movf	___ftadd@sign,w
 13160  048F  00D7               	movwf	??___ftadd+1
 13161  0490  0857               	movf	??___ftadd+1,w
 13162  0491  00A8               	movwf	___ftpack@sign
 13163  0492  318F  2725         	fcall	___ftpack
 13164  0494  0020               	movlb	0	; select bank0
 13165  0495  0824               	movf	?___ftpack,w
 13166  0496  00D0               	movwf	?___ftadd
 13167  0497  0825               	movf	?___ftpack+1,w
 13168  0498  00D1               	movwf	?___ftadd+1
 13169  0499  0826               	movf	?___ftpack+2,w
 13170  049A  00D2               	movwf	?___ftadd+2
 13171  049B  0008               	return
 13172  049C                     __end_of___ftadd:	
 13173                           
 13174                           	psect	text36
 13175  0C38                     __ptext36:	
 13176 ;; *************** function _SHT3x_CalcRelativeHumidity_F *****************
 13177 ;; Defined at:
 13178 ;;		line 119 in file "SourceFiles/SunSensor/SHT25.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;		None
 13181 ;; Auto vars:     Size  Location     Type
 13182 ;;  RelativeHumi    3   51[BANK0 ] float 
 13183 ;; Return value:  Size  Location     Type
 13184 ;;                  3   48[BANK0 ] float 
 13185 ;; Registers used:
 13186 ;;		wreg, status,2, status,0, pclath, cstack
 13187 ;; Tracked objects:
 13188 ;;		On entry : 0/0
 13189 ;;		On exit  : 0/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13192 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;Total ram usage:        6 bytes
 13197 ;; Hardware stack levels used:    1
 13198 ;; Hardware stack levels required when called:    9
 13199 ;; This function calls:
 13200 ;;		___ftdiv
 13201 ;;		___ftmul
 13202 ;;		___lwtoft
 13203 ;; This function is called by:
 13204 ;;		_SHT25_StateMachine
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           
 13209                           ;psect for function _SHT3x_CalcRelativeHumidity_F
 13210  0C38                     _SHT3x_CalcRelativeHumidity_F:	
 13211                           
 13212                           ;SHT25.c: 121: float RelativeHumidityFloat;
 13213                           ;SHT25.c: 123: RelativeHumidityFloat = (float)RelativeHumidityRaw * 100 / 65535;
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _SHT3x_CalcRelativeHumidity_F: [wreg+status,2+status,0+pclath+cstack]
 13217  0C38  30FF               	movlw	255
 13218  0C39  0020               	movlb	0	; select bank0
 13219  0C3A  00C0               	movwf	___ftdiv@f2
 13220  0C3B  307F               	movlw	127
 13221  0C3C  00C1               	movwf	___ftdiv@f2+1
 13222  0C3D  3047               	movlw	71
 13223  0C3E  00C2               	movwf	___ftdiv@f2+2
 13224  0C3F  3000               	movlw	0
 13225  0C40  00B0               	movwf	___ftmul@f1
 13226  0C41  30C8               	movlw	200
 13227  0C42  00B1               	movwf	___ftmul@f1+1
 13228  0C43  3042               	movlw	66
 13229  0C44  00B2               	movwf	___ftmul@f1+2
 13230  0C45  0021               	movlb	1	; select bank1
 13231  0C46  0829               	movf	(_RelativeHumidityRaw+1)^(0+128),w
 13232  0C47  0020               	movlb	0	; select bank0
 13233  0C48  00AD               	movwf	___lwtoft@c+1
 13234  0C49  0021               	movlb	1	; select bank1
 13235  0C4A  0828               	movf	_RelativeHumidityRaw^(0+128),w
 13236  0C4B  0020               	movlb	0	; select bank0
 13237  0C4C  00AC               	movwf	___lwtoft@c
 13238  0C4D  3189  2150  318C   	fcall	___lwtoft
 13239  0C50  0020               	movlb	0	; select bank0
 13240  0C51  082C               	movf	?___lwtoft,w
 13241  0C52  00B3               	movwf	___ftmul@f2
 13242  0C53  082D               	movf	?___lwtoft+1,w
 13243  0C54  00B4               	movwf	___ftmul@f2+1
 13244  0C55  082E               	movf	?___lwtoft+2,w
 13245  0C56  00B5               	movwf	___ftmul@f2+2
 13246  0C57  3185  255F  318C   	fcall	___ftmul
 13247  0C5A  0020               	movlb	0	; select bank0
 13248  0C5B  0830               	movf	?___ftmul,w
 13249  0C5C  00C3               	movwf	___ftdiv@f1
 13250  0C5D  0831               	movf	?___ftmul+1,w
 13251  0C5E  00C4               	movwf	___ftdiv@f1+1
 13252  0C5F  0832               	movf	?___ftmul+2,w
 13253  0C60  00C5               	movwf	___ftdiv@f1+2
 13254  0C61  3186  2613         	fcall	___ftdiv
 13255  0C63  0020               	movlb	0	; select bank0
 13256  0C64  0840               	movf	?___ftdiv,w
 13257  0C65  00D3               	movwf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat
 13258  0C66  0841               	movf	?___ftdiv+1,w
 13259  0C67  00D4               	movwf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat+1
 13260  0C68  0842               	movf	?___ftdiv+2,w
 13261  0C69  00D5               	movwf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat+2
 13262                           
 13263                           ;SHT25.c: 125: return RelativeHumidityFloat ;
 13264  0C6A  0853               	movf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat,w
 13265  0C6B  00D0               	movwf	?_SHT3x_CalcRelativeHumidity_F
 13266  0C6C  0854               	movf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat+1,w
 13267  0C6D  00D1               	movwf	?_SHT3x_CalcRelativeHumidity_F+1
 13268  0C6E  0855               	movf	SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat+2,w
 13269  0C6F  00D2               	movwf	?_SHT3x_CalcRelativeHumidity_F+2
 13270  0C70  0008               	return
 13271  0C71                     __end_of_SHT3x_CalcRelativeHumidity_F:	
 13272                           
 13273                           	psect	text37
 13274  0950                     __ptext37:	
 13275 ;; *************** function ___lwtoft *****************
 13276 ;; Defined at:
 13277 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  c               2   12[BANK0 ] unsigned int 
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;		None
 13282 ;; Return value:  Size  Location     Type
 13283 ;;                  3   12[BANK0 ] float 
 13284 ;; Registers used:
 13285 ;;		wreg, status,2, status,0, pclath, cstack
 13286 ;; Tracked objects:
 13287 ;;		On entry : 0/0
 13288 ;;		On exit  : 0/0
 13289 ;;		Unchanged: 0/0
 13290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13291 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;Total ram usage:        4 bytes
 13296 ;; Hardware stack levels used:    1
 13297 ;; Hardware stack levels required when called:    8
 13298 ;; This function calls:
 13299 ;;		___ftpack
 13300 ;; This function is called by:
 13301 ;;		_SHT3x_CalcTemperatureC_F
 13302 ;;		_SHT3x_CalcRelativeHumidity_F
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           
 13307                           ;psect for function ___lwtoft
 13308  0950                     ___lwtoft:	
 13309                           
 13310                           ;incstack = 0
 13311                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 13312  0950  0020               	movlb	0	; select bank0
 13313  0951  082C               	movf	___lwtoft@c,w
 13314  0952  00A4               	movwf	___ftpack@arg
 13315  0953  082D               	movf	___lwtoft@c+1,w
 13316  0954  00A5               	movwf	___ftpack@arg+1
 13317  0955  01A6               	clrf	___ftpack@arg+2
 13318  0956  308E               	movlw	142
 13319  0957  00AF               	movwf	??___lwtoft
 13320  0958  082F               	movf	??___lwtoft,w
 13321  0959  00A7               	movwf	___ftpack@exp
 13322  095A  01A8               	clrf	___ftpack@sign
 13323  095B  318F  2725         	fcall	___ftpack
 13324  095D  0020               	movlb	0	; select bank0
 13325  095E  0824               	movf	?___ftpack,w
 13326  095F  00AC               	movwf	?___lwtoft
 13327  0960  0825               	movf	?___ftpack+1,w
 13328  0961  00AD               	movwf	?___lwtoft+1
 13329  0962  0826               	movf	?___ftpack+2,w
 13330  0963  00AE               	movwf	?___lwtoft+2
 13331  0964  0008               	return
 13332  0965                     __end_of___lwtoft:	
 13333                           
 13334                           	psect	text38
 13335  055F                     __ptext38:	
 13336 ;; *************** function ___ftmul *****************
 13337 ;; Defined at:
 13338 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 13339 ;; Parameters:    Size  Location     Type
 13340 ;;  f1              3   16[BANK0 ] float 
 13341 ;;  f2              3   19[BANK0 ] float 
 13342 ;; Auto vars:     Size  Location     Type
 13343 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
 13344 ;;  sign            1   31[BANK0 ] unsigned char 
 13345 ;;  cntr            1   30[BANK0 ] unsigned char 
 13346 ;;  exp             1   26[BANK0 ] unsigned char 
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  3   16[BANK0 ] float 
 13349 ;; Registers used:
 13350 ;;		wreg, status,2, status,0, pclath, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13356 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;Total ram usage:       16 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    8
 13363 ;; This function calls:
 13364 ;;		___ftpack
 13365 ;; This function is called by:
 13366 ;;		_SHT3x_CalcTemperatureC_F
 13367 ;;		_SHT3x_CalcRelativeHumidity_F
 13368 ;;		_UartDisplay
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function ___ftmul
 13374  055F                     ___ftmul:	
 13375                           
 13376                           ;incstack = 0
 13377                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 13378  055F  0020               	movlb	0	; select bank0
 13379  0560  0830               	movf	___ftmul@f1,w
 13380  0561  00B6               	movwf	??___ftmul
 13381  0562  0831               	movf	___ftmul@f1+1,w
 13382  0563  00B7               	movwf	??___ftmul+1
 13383  0564  0832               	movf	___ftmul@f1+2,w
 13384  0565  00B8               	movwf	??___ftmul+2
 13385  0566  1003               	clrc
 13386  0567  0D37               	rlf	??___ftmul+1,w
 13387  0568  0D38               	rlf	??___ftmul+2,w
 13388  0569  00B9               	movwf	??___ftmul+3
 13389  056A  0839               	movf	??___ftmul+3,w
 13390  056B  00BA               	movwf	___ftmul@exp
 13391  056C  083A               	movf	___ftmul@exp,w
 13392  056D  1D03               	btfss	3,2
 13393  056E  2D76               	goto	l5413
 13394  056F  3000               	movlw	0
 13395  0570  00B0               	movwf	?___ftmul
 13396  0571  3000               	movlw	0
 13397  0572  00B1               	movwf	?___ftmul+1
 13398  0573  3000               	movlw	0
 13399  0574  00B2               	movwf	?___ftmul+2
 13400  0575  0008               	return
 13401  0576                     l5413:	
 13402  0576  0833               	movf	___ftmul@f2,w
 13403  0577  00B6               	movwf	??___ftmul
 13404  0578  0834               	movf	___ftmul@f2+1,w
 13405  0579  00B7               	movwf	??___ftmul+1
 13406  057A  0835               	movf	___ftmul@f2+2,w
 13407  057B  00B8               	movwf	??___ftmul+2
 13408  057C  1003               	clrc
 13409  057D  0D37               	rlf	??___ftmul+1,w
 13410  057E  0D38               	rlf	??___ftmul+2,w
 13411  057F  00B9               	movwf	??___ftmul+3
 13412  0580  0839               	movf	??___ftmul+3,w
 13413  0581  00BF               	movwf	___ftmul@sign
 13414  0582  083F               	movf	___ftmul@sign,w
 13415  0583  1D03               	btfss	3,2
 13416  0584  2D8C               	goto	l5419
 13417  0585  3000               	movlw	0
 13418  0586  00B0               	movwf	?___ftmul
 13419  0587  3000               	movlw	0
 13420  0588  00B1               	movwf	?___ftmul+1
 13421  0589  3000               	movlw	0
 13422  058A  00B2               	movwf	?___ftmul+2
 13423  058B  0008               	return
 13424  058C                     l5419:	
 13425  058C  083F               	movf	___ftmul@sign,w
 13426  058D  3E7B               	addlw	123
 13427  058E  00B6               	movwf	??___ftmul
 13428  058F  0836               	movf	??___ftmul,w
 13429  0590  07BA               	addwf	___ftmul@exp,f
 13430  0591  0830               	movf	___ftmul@f1,w
 13431  0592  00B6               	movwf	??___ftmul
 13432  0593  0831               	movf	___ftmul@f1+1,w
 13433  0594  00B7               	movwf	??___ftmul+1
 13434  0595  0832               	movf	___ftmul@f1+2,w
 13435  0596  00B8               	movwf	??___ftmul+2
 13436  0597  3010               	movlw	16
 13437  0598                     u4635:	
 13438  0598  36B8               	lsrf	??___ftmul+2,f
 13439  0599  0CB7               	rrf	??___ftmul+1,f
 13440  059A  0CB6               	rrf	??___ftmul,f
 13441  059B  0B89               	decfsz	9,f
 13442  059C  2D98               	goto	u4635
 13443  059D  0836               	movf	??___ftmul,w
 13444  059E  00B9               	movwf	??___ftmul+3
 13445  059F  0839               	movf	??___ftmul+3,w
 13446  05A0  00BF               	movwf	___ftmul@sign
 13447  05A1  0833               	movf	___ftmul@f2,w
 13448  05A2  00B6               	movwf	??___ftmul
 13449  05A3  0834               	movf	___ftmul@f2+1,w
 13450  05A4  00B7               	movwf	??___ftmul+1
 13451  05A5  0835               	movf	___ftmul@f2+2,w
 13452  05A6  00B8               	movwf	??___ftmul+2
 13453  05A7  3010               	movlw	16
 13454  05A8                     u4645:	
 13455  05A8  36B8               	lsrf	??___ftmul+2,f
 13456  05A9  0CB7               	rrf	??___ftmul+1,f
 13457  05AA  0CB6               	rrf	??___ftmul,f
 13458  05AB  0B89               	decfsz	9,f
 13459  05AC  2DA8               	goto	u4645
 13460  05AD  0836               	movf	??___ftmul,w
 13461  05AE  00B9               	movwf	??___ftmul+3
 13462  05AF  0839               	movf	??___ftmul+3,w
 13463  05B0  06BF               	xorwf	___ftmul@sign,f
 13464  05B1  3080               	movlw	128
 13465  05B2  00B6               	movwf	??___ftmul
 13466  05B3  0836               	movf	??___ftmul,w
 13467  05B4  05BF               	andwf	___ftmul@sign,f
 13468  05B5  17B1               	bsf	___ftmul@f1+1,7
 13469  05B6  17B4               	bsf	___ftmul@f2+1,7
 13470  05B7  30FF               	movlw	255
 13471  05B8  05B3               	andwf	___ftmul@f2,f
 13472  05B9  30FF               	movlw	255
 13473  05BA  05B4               	andwf	___ftmul@f2+1,f
 13474  05BB  3000               	movlw	0
 13475  05BC  05B5               	andwf	___ftmul@f2+2,f
 13476  05BD  3000               	movlw	0
 13477  05BE  00BB               	movwf	___ftmul@f3_as_product
 13478  05BF  3000               	movlw	0
 13479  05C0  00BC               	movwf	___ftmul@f3_as_product+1
 13480  05C1  3000               	movlw	0
 13481  05C2  00BD               	movwf	___ftmul@f3_as_product+2
 13482  05C3  3007               	movlw	7
 13483  05C4  00B6               	movwf	??___ftmul
 13484  05C5  0836               	movf	??___ftmul,w
 13485  05C6  00BE               	movwf	___ftmul@cntr
 13486  05C7                     l5431:	
 13487  05C7  1C30               	btfss	___ftmul@f1,0
 13488  05C8  2DCF               	goto	l5435
 13489  05C9  0833               	movf	___ftmul@f2,w
 13490  05CA  07BB               	addwf	___ftmul@f3_as_product,f
 13491  05CB  0834               	movf	___ftmul@f2+1,w
 13492  05CC  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 13493  05CD  0835               	movf	___ftmul@f2+2,w
 13494  05CE  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 13495  05CF                     l5435:	
 13496  05CF  3001               	movlw	1
 13497  05D0                     u4665:	
 13498  05D0  36B2               	lsrf	___ftmul@f1+2,f
 13499  05D1  0CB1               	rrf	___ftmul@f1+1,f
 13500  05D2  0CB0               	rrf	___ftmul@f1,f
 13501  05D3  0B89               	decfsz	9,f
 13502  05D4  2DD0               	goto	u4665
 13503  05D5  3001               	movlw	1
 13504  05D6                     u4675:	
 13505  05D6  35B3               	lslf	___ftmul@f2,f
 13506  05D7  0DB4               	rlf	___ftmul@f2+1,f
 13507  05D8  0DB5               	rlf	___ftmul@f2+2,f
 13508  05D9  0B89               	decfsz	9,f
 13509  05DA  2DD6               	goto	u4675
 13510  05DB  3001               	movlw	1
 13511  05DC  02BE               	subwf	___ftmul@cntr,f
 13512  05DD  1D03               	btfss	3,2
 13513  05DE  2DC7               	goto	l5431
 13514  05DF  3009               	movlw	9
 13515  05E0  00B6               	movwf	??___ftmul
 13516  05E1  0836               	movf	??___ftmul,w
 13517  05E2  00BE               	movwf	___ftmul@cntr
 13518  05E3                     l5443:	
 13519  05E3  1C30               	btfss	___ftmul@f1,0
 13520  05E4  2DEB               	goto	l5447
 13521  05E5  0833               	movf	___ftmul@f2,w
 13522  05E6  07BB               	addwf	___ftmul@f3_as_product,f
 13523  05E7  0834               	movf	___ftmul@f2+1,w
 13524  05E8  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 13525  05E9  0835               	movf	___ftmul@f2+2,w
 13526  05EA  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 13527  05EB                     l5447:	
 13528  05EB  3001               	movlw	1
 13529  05EC                     u4705:	
 13530  05EC  36B2               	lsrf	___ftmul@f1+2,f
 13531  05ED  0CB1               	rrf	___ftmul@f1+1,f
 13532  05EE  0CB0               	rrf	___ftmul@f1,f
 13533  05EF  0B89               	decfsz	9,f
 13534  05F0  2DEC               	goto	u4705
 13535  05F1  3001               	movlw	1
 13536  05F2                     u4715:	
 13537  05F2  36BD               	lsrf	___ftmul@f3_as_product+2,f
 13538  05F3  0CBC               	rrf	___ftmul@f3_as_product+1,f
 13539  05F4  0CBB               	rrf	___ftmul@f3_as_product,f
 13540  05F5  0B89               	decfsz	9,f
 13541  05F6  2DF2               	goto	u4715
 13542  05F7  3001               	movlw	1
 13543  05F8  02BE               	subwf	___ftmul@cntr,f
 13544  05F9  1D03               	btfss	3,2
 13545  05FA  2DE3               	goto	l5443
 13546  05FB  083B               	movf	___ftmul@f3_as_product,w
 13547  05FC  00A4               	movwf	___ftpack@arg
 13548  05FD  083C               	movf	___ftmul@f3_as_product+1,w
 13549  05FE  00A5               	movwf	___ftpack@arg+1
 13550  05FF  083D               	movf	___ftmul@f3_as_product+2,w
 13551  0600  00A6               	movwf	___ftpack@arg+2
 13552  0601  083A               	movf	___ftmul@exp,w
 13553  0602  00B6               	movwf	??___ftmul
 13554  0603  0836               	movf	??___ftmul,w
 13555  0604  00A7               	movwf	___ftpack@exp
 13556  0605  083F               	movf	___ftmul@sign,w
 13557  0606  00B7               	movwf	??___ftmul+1
 13558  0607  0837               	movf	??___ftmul+1,w
 13559  0608  00A8               	movwf	___ftpack@sign
 13560  0609  318F  2725         	fcall	___ftpack
 13561  060B  0020               	movlb	0	; select bank0
 13562  060C  0824               	movf	?___ftpack,w
 13563  060D  00B0               	movwf	?___ftmul
 13564  060E  0825               	movf	?___ftpack+1,w
 13565  060F  00B1               	movwf	?___ftmul+1
 13566  0610  0826               	movf	?___ftpack+2,w
 13567  0611  00B2               	movwf	?___ftmul+2
 13568  0612  0008               	return
 13569  0613                     __end_of___ftmul:	
 13570                           
 13571                           	psect	text39
 13572  0613                     __ptext39:	
 13573 ;; *************** function ___ftdiv *****************
 13574 ;; Defined at:
 13575 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;  f2              3   32[BANK0 ] float 
 13578 ;;  f1              3   35[BANK0 ] float 
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;  f3              3   43[BANK0 ] float 
 13581 ;;  sign            1   47[BANK0 ] unsigned char 
 13582 ;;  exp             1   46[BANK0 ] unsigned char 
 13583 ;;  cntr            1   42[BANK0 ] unsigned char 
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  3   32[BANK0 ] float 
 13586 ;; Registers used:
 13587 ;;		wreg, status,2, status,0, pclath, cstack
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:       16 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    8
 13600 ;; This function calls:
 13601 ;;		___ftpack
 13602 ;; This function is called by:
 13603 ;;		_SHT3x_CalcTemperatureC_F
 13604 ;;		_SHT3x_CalcRelativeHumidity_F
 13605 ;; This function uses a non-reentrant model
 13606 ;;
 13607                           
 13608                           
 13609                           ;psect for function ___ftdiv
 13610  0613                     ___ftdiv:	
 13611                           
 13612                           ;incstack = 0
 13613                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13614  0613  0020               	movlb	0	; select bank0
 13615  0614  0843               	movf	___ftdiv@f1,w
 13616  0615  00C6               	movwf	??___ftdiv
 13617  0616  0844               	movf	___ftdiv@f1+1,w
 13618  0617  00C7               	movwf	??___ftdiv+1
 13619  0618  0845               	movf	___ftdiv@f1+2,w
 13620  0619  00C8               	movwf	??___ftdiv+2
 13621  061A  1003               	clrc
 13622  061B  0D47               	rlf	??___ftdiv+1,w
 13623  061C  0D48               	rlf	??___ftdiv+2,w
 13624  061D  00C9               	movwf	??___ftdiv+3
 13625  061E  0849               	movf	??___ftdiv+3,w
 13626  061F  00CE               	movwf	___ftdiv@exp
 13627  0620  084E               	movf	___ftdiv@exp,w
 13628  0621  1D03               	btfss	3,2
 13629  0622  2E2A               	goto	l5371
 13630  0623  3000               	movlw	0
 13631  0624  00C0               	movwf	?___ftdiv
 13632  0625  3000               	movlw	0
 13633  0626  00C1               	movwf	?___ftdiv+1
 13634  0627  3000               	movlw	0
 13635  0628  00C2               	movwf	?___ftdiv+2
 13636  0629  0008               	return
 13637  062A                     l5371:	
 13638  062A  0840               	movf	___ftdiv@f2,w
 13639  062B  00C6               	movwf	??___ftdiv
 13640  062C  0841               	movf	___ftdiv@f2+1,w
 13641  062D  00C7               	movwf	??___ftdiv+1
 13642  062E  0842               	movf	___ftdiv@f2+2,w
 13643  062F  00C8               	movwf	??___ftdiv+2
 13644  0630  1003               	clrc
 13645  0631  0D47               	rlf	??___ftdiv+1,w
 13646  0632  0D48               	rlf	??___ftdiv+2,w
 13647  0633  00C9               	movwf	??___ftdiv+3
 13648  0634  0849               	movf	??___ftdiv+3,w
 13649  0635  00CF               	movwf	___ftdiv@sign
 13650  0636  084F               	movf	___ftdiv@sign,w
 13651  0637  1D03               	btfss	3,2
 13652  0638  2E40               	goto	l5377
 13653  0639  3000               	movlw	0
 13654  063A  00C0               	movwf	?___ftdiv
 13655  063B  3000               	movlw	0
 13656  063C  00C1               	movwf	?___ftdiv+1
 13657  063D  3000               	movlw	0
 13658  063E  00C2               	movwf	?___ftdiv+2
 13659  063F  0008               	return
 13660  0640                     l5377:	
 13661  0640  3000               	movlw	0
 13662  0641  00CB               	movwf	___ftdiv@f3
 13663  0642  3000               	movlw	0
 13664  0643  00CC               	movwf	___ftdiv@f3+1
 13665  0644  3000               	movlw	0
 13666  0645  00CD               	movwf	___ftdiv@f3+2
 13667  0646  3089               	movlw	137
 13668  0647  074F               	addwf	___ftdiv@sign,w
 13669  0648  00C6               	movwf	??___ftdiv
 13670  0649  0846               	movf	??___ftdiv,w
 13671  064A  02CE               	subwf	___ftdiv@exp,f
 13672  064B  0843               	movf	___ftdiv@f1,w
 13673  064C  00C6               	movwf	??___ftdiv
 13674  064D  0844               	movf	___ftdiv@f1+1,w
 13675  064E  00C7               	movwf	??___ftdiv+1
 13676  064F  0845               	movf	___ftdiv@f1+2,w
 13677  0650  00C8               	movwf	??___ftdiv+2
 13678  0651  3010               	movlw	16
 13679  0652                     u4555:	
 13680  0652  36C8               	lsrf	??___ftdiv+2,f
 13681  0653  0CC7               	rrf	??___ftdiv+1,f
 13682  0654  0CC6               	rrf	??___ftdiv,f
 13683  0655  0B89               	decfsz	9,f
 13684  0656  2E52               	goto	u4555
 13685  0657  0846               	movf	??___ftdiv,w
 13686  0658  00C9               	movwf	??___ftdiv+3
 13687  0659  0849               	movf	??___ftdiv+3,w
 13688  065A  00CF               	movwf	___ftdiv@sign
 13689  065B  0840               	movf	___ftdiv@f2,w
 13690  065C  00C6               	movwf	??___ftdiv
 13691  065D  0841               	movf	___ftdiv@f2+1,w
 13692  065E  00C7               	movwf	??___ftdiv+1
 13693  065F  0842               	movf	___ftdiv@f2+2,w
 13694  0660  00C8               	movwf	??___ftdiv+2
 13695  0661  3010               	movlw	16
 13696  0662                     u4565:	
 13697  0662  36C8               	lsrf	??___ftdiv+2,f
 13698  0663  0CC7               	rrf	??___ftdiv+1,f
 13699  0664  0CC6               	rrf	??___ftdiv,f
 13700  0665  0B89               	decfsz	9,f
 13701  0666  2E62               	goto	u4565
 13702  0667  0846               	movf	??___ftdiv,w
 13703  0668  00C9               	movwf	??___ftdiv+3
 13704  0669  0849               	movf	??___ftdiv+3,w
 13705  066A  06CF               	xorwf	___ftdiv@sign,f
 13706  066B  3080               	movlw	128
 13707  066C  00C6               	movwf	??___ftdiv
 13708  066D  0846               	movf	??___ftdiv,w
 13709  066E  05CF               	andwf	___ftdiv@sign,f
 13710  066F  17C4               	bsf	___ftdiv@f1+1,7
 13711  0670  30FF               	movlw	255
 13712  0671  05C3               	andwf	___ftdiv@f1,f
 13713  0672  30FF               	movlw	255
 13714  0673  05C4               	andwf	___ftdiv@f1+1,f
 13715  0674  3000               	movlw	0
 13716  0675  05C5               	andwf	___ftdiv@f1+2,f
 13717  0676  17C1               	bsf	___ftdiv@f2+1,7
 13718  0677  30FF               	movlw	255
 13719  0678  05C0               	andwf	___ftdiv@f2,f
 13720  0679  30FF               	movlw	255
 13721  067A  05C1               	andwf	___ftdiv@f2+1,f
 13722  067B  3000               	movlw	0
 13723  067C  05C2               	andwf	___ftdiv@f2+2,f
 13724  067D  3018               	movlw	24
 13725  067E  00C6               	movwf	??___ftdiv
 13726  067F  0846               	movf	??___ftdiv,w
 13727  0680  00CA               	movwf	___ftdiv@cntr
 13728  0681                     l5391:	
 13729  0681  3001               	movlw	1
 13730  0682                     u4575:	
 13731  0682  35CB               	lslf	___ftdiv@f3,f
 13732  0683  0DCC               	rlf	___ftdiv@f3+1,f
 13733  0684  0DCD               	rlf	___ftdiv@f3+2,f
 13734  0685  0B89               	decfsz	9,f
 13735  0686  2E82               	goto	u4575
 13736  0687  0842               	movf	___ftdiv@f2+2,w
 13737  0688  0245               	subwf	___ftdiv@f1+2,w
 13738  0689  1D03               	skipz
 13739  068A  2E91               	goto	u4585
 13740  068B  0841               	movf	___ftdiv@f2+1,w
 13741  068C  0244               	subwf	___ftdiv@f1+1,w
 13742  068D  1D03               	skipz
 13743  068E  2E91               	goto	u4585
 13744  068F  0840               	movf	___ftdiv@f2,w
 13745  0690  0243               	subwf	___ftdiv@f1,w
 13746  0691                     u4585:	
 13747  0691  1C03               	skipc
 13748  0692  2E9A               	goto	l5399
 13749  0693  0840               	movf	___ftdiv@f2,w
 13750  0694  02C3               	subwf	___ftdiv@f1,f
 13751  0695  0841               	movf	___ftdiv@f2+1,w
 13752  0696  3BC4               	subwfb	___ftdiv@f1+1,f
 13753  0697  0842               	movf	___ftdiv@f2+2,w
 13754  0698  3BC5               	subwfb	___ftdiv@f1+2,f
 13755  0699  144B               	bsf	___ftdiv@f3,0
 13756  069A                     l5399:	
 13757  069A  3001               	movlw	1
 13758  069B                     u4595:	
 13759  069B  35C3               	lslf	___ftdiv@f1,f
 13760  069C  0DC4               	rlf	___ftdiv@f1+1,f
 13761  069D  0DC5               	rlf	___ftdiv@f1+2,f
 13762  069E  0B89               	decfsz	9,f
 13763  069F  2E9B               	goto	u4595
 13764  06A0  3001               	movlw	1
 13765  06A1  02CA               	subwf	___ftdiv@cntr,f
 13766  06A2  1D03               	btfss	3,2
 13767  06A3  2E81               	goto	l5391
 13768  06A4  084B               	movf	___ftdiv@f3,w
 13769  06A5  00A4               	movwf	___ftpack@arg
 13770  06A6  084C               	movf	___ftdiv@f3+1,w
 13771  06A7  00A5               	movwf	___ftpack@arg+1
 13772  06A8  084D               	movf	___ftdiv@f3+2,w
 13773  06A9  00A6               	movwf	___ftpack@arg+2
 13774  06AA  084E               	movf	___ftdiv@exp,w
 13775  06AB  00C6               	movwf	??___ftdiv
 13776  06AC  0846               	movf	??___ftdiv,w
 13777  06AD  00A7               	movwf	___ftpack@exp
 13778  06AE  084F               	movf	___ftdiv@sign,w
 13779  06AF  00C7               	movwf	??___ftdiv+1
 13780  06B0  0847               	movf	??___ftdiv+1,w
 13781  06B1  00A8               	movwf	___ftpack@sign
 13782  06B2  318F  2725         	fcall	___ftpack
 13783  06B4  0020               	movlb	0	; select bank0
 13784  06B5  0824               	movf	?___ftpack,w
 13785  06B6  00C0               	movwf	?___ftdiv
 13786  06B7  0825               	movf	?___ftpack+1,w
 13787  06B8  00C1               	movwf	?___ftdiv+1
 13788  06B9  0826               	movf	?___ftpack+2,w
 13789  06BA  00C2               	movwf	?___ftdiv+2
 13790  06BB  0008               	return
 13791  06BC                     __end_of___ftdiv:	
 13792                           
 13793                           	psect	text40
 13794  0F25                     __ptext40:	
 13795 ;; *************** function ___ftpack *****************
 13796 ;; Defined at:
 13797 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  arg             3    4[BANK0 ] unsigned um
 13800 ;;  exp             1    7[BANK0 ] unsigned char 
 13801 ;;  sign            1    8[BANK0 ] unsigned char 
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;		None
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  3    4[BANK0 ] float 
 13806 ;; Registers used:
 13807 ;;		wreg, status,2, status,0
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:        8 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    7
 13820 ;; This function calls:
 13821 ;;		Nothing
 13822 ;; This function is called by:
 13823 ;;		___awtoft
 13824 ;;		___ftadd
 13825 ;;		___ftdiv
 13826 ;;		___ftmul
 13827 ;;		___lwtoft
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           
 13832                           ;psect for function ___ftpack
 13833  0F25                     ___ftpack:	
 13834                           
 13835                           ;incstack = 0
 13836                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13837  0F25  0020               	movlb	0	; select bank0
 13838  0F26  0827               	movf	___ftpack@exp,w
 13839  0F27  1903               	btfsc	3,2
 13840  0F28  2F2E               	goto	l5065
 13841  0F29  0826               	movf	___ftpack@arg+2,w
 13842  0F2A  0425               	iorwf	___ftpack@arg+1,w
 13843  0F2B  0424               	iorwf	___ftpack@arg,w
 13844  0F2C  1D03               	skipz
 13845  0F2D  2F3F               	goto	l5071
 13846  0F2E                     l5065:	
 13847  0F2E  3000               	movlw	0
 13848  0F2F  00A4               	movwf	?___ftpack
 13849  0F30  3000               	movlw	0
 13850  0F31  00A5               	movwf	?___ftpack+1
 13851  0F32  3000               	movlw	0
 13852  0F33  00A6               	movwf	?___ftpack+2
 13853  0F34  0008               	return
 13854  0F35                     l5069:	
 13855  0F35  3001               	movlw	1
 13856  0F36  00A9               	movwf	??___ftpack
 13857  0F37  0829               	movf	??___ftpack,w
 13858  0F38  07A7               	addwf	___ftpack@exp,f
 13859  0F39  3001               	movlw	1
 13860  0F3A                     u4095:	
 13861  0F3A  36A6               	lsrf	___ftpack@arg+2,f
 13862  0F3B  0CA5               	rrf	___ftpack@arg+1,f
 13863  0F3C  0CA4               	rrf	___ftpack@arg,f
 13864  0F3D  0B89               	decfsz	9,f
 13865  0F3E  2F3A               	goto	u4095
 13866  0F3F                     l5071:	
 13867  0F3F  30FE               	movlw	254
 13868  0F40  0526               	andwf	___ftpack@arg+2,w
 13869  0F41  1903               	btfsc	3,2
 13870  0F42  2F58               	goto	l1441
 13871  0F43  2F35               	goto	l5069
 13872  0F44                     l5073:	
 13873  0F44  3001               	movlw	1
 13874  0F45  00A9               	movwf	??___ftpack
 13875  0F46  0829               	movf	??___ftpack,w
 13876  0F47  07A7               	addwf	___ftpack@exp,f
 13877  0F48  3001               	movlw	1
 13878  0F49  07A4               	addwf	___ftpack@arg,f
 13879  0F4A  3000               	movlw	0
 13880  0F4B  1803               	skipnc
 13881  0F4C  3001               	movlw	1
 13882  0F4D  07A5               	addwf	___ftpack@arg+1,f
 13883  0F4E  3000               	movlw	0
 13884  0F4F  1803               	skipnc
 13885  0F50  3001               	movlw	1
 13886  0F51  07A6               	addwf	___ftpack@arg+2,f
 13887  0F52  3001               	movlw	1
 13888  0F53                     u4115:	
 13889  0F53  36A6               	lsrf	___ftpack@arg+2,f
 13890  0F54  0CA5               	rrf	___ftpack@arg+1,f
 13891  0F55  0CA4               	rrf	___ftpack@arg,f
 13892  0F56  0B89               	decfsz	9,f
 13893  0F57  2F53               	goto	u4115
 13894  0F58                     l1441:	
 13895  0F58  30FF               	movlw	255
 13896  0F59  0526               	andwf	___ftpack@arg+2,w
 13897  0F5A  1903               	btfsc	3,2
 13898  0F5B  2F65               	goto	l5081
 13899  0F5C  2F44               	goto	l5073
 13900  0F5D                     l5079:	
 13901  0F5D  3001               	movlw	1
 13902  0F5E  02A7               	subwf	___ftpack@exp,f
 13903  0F5F  3001               	movlw	1
 13904  0F60                     u4135:	
 13905  0F60  35A4               	lslf	___ftpack@arg,f
 13906  0F61  0DA5               	rlf	___ftpack@arg+1,f
 13907  0F62  0DA6               	rlf	___ftpack@arg+2,f
 13908  0F63  0B89               	decfsz	9,f
 13909  0F64  2F60               	goto	u4135
 13910  0F65                     l5081:	
 13911  0F65  1BA5               	btfsc	___ftpack@arg+1,7
 13912  0F66  2F6B               	goto	l1448
 13913  0F67  3002               	movlw	2
 13914  0F68  0227               	subwf	___ftpack@exp,w
 13915  0F69  1803               	skipnc
 13916  0F6A  2F5D               	goto	l5079
 13917  0F6B                     l1448:	
 13918  0F6B  1827               	btfsc	___ftpack@exp,0
 13919  0F6C  2F73               	goto	l1449
 13920  0F6D  30FF               	movlw	255
 13921  0F6E  05A4               	andwf	___ftpack@arg,f
 13922  0F6F  307F               	movlw	127
 13923  0F70  05A5               	andwf	___ftpack@arg+1,f
 13924  0F71  30FF               	movlw	255
 13925  0F72  05A6               	andwf	___ftpack@arg+2,f
 13926  0F73                     l1449:	
 13927  0F73  1003               	clrc
 13928  0F74  0CA7               	rrf	___ftpack@exp,f
 13929  0F75  0827               	movf	___ftpack@exp,w
 13930  0F76  00A9               	movwf	??___ftpack
 13931  0F77  01AA               	clrf	??___ftpack+1
 13932  0F78  01AB               	clrf	??___ftpack+2
 13933  0F79  3010               	movlw	16
 13934  0F7A                     u4175:	
 13935  0F7A  35A9               	lslf	??___ftpack,f
 13936  0F7B  0DAA               	rlf	??___ftpack+1,f
 13937  0F7C  0DAB               	rlf	??___ftpack+2,f
 13938  0F7D  0B89               	decfsz	9,f
 13939  0F7E  2F7A               	goto	u4175
 13940  0F7F  0829               	movf	??___ftpack,w
 13941  0F80  04A4               	iorwf	___ftpack@arg,f
 13942  0F81  082A               	movf	??___ftpack+1,w
 13943  0F82  04A5               	iorwf	___ftpack@arg+1,f
 13944  0F83  082B               	movf	??___ftpack+2,w
 13945  0F84  04A6               	iorwf	___ftpack@arg+2,f
 13946  0F85  0828               	movf	___ftpack@sign,w
 13947  0F86  1903               	btfsc	3,2
 13948  0F87  0008               	return
 13949  0F88  17A6               	bsf	___ftpack@arg+2,7
 13950  0F89  0008               	return
 13951  0F8A                     __end_of___ftpack:	
 13952                           
 13953                           	psect	text41
 13954  0B33                     __ptext41:	
 13955 ;; *************** function _I2C_WriteNBytes *****************
 13956 ;; Defined at:
 13957 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;  address         1    wreg     unsigned char 
 13960 ;;  data            1   13[BANK0 ] PTR unsigned char 
 13961 ;;		 -> Command(2), 
 13962 ;;  len             2   14[BANK0 ] unsigned int 
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;  address         1   16[BANK0 ] unsigned char 
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  1    wreg      void 
 13967 ;; Registers used:
 13968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13974 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;Total ram usage:        4 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; Hardware stack levels required when called:   10
 13981 ;; This function calls:
 13982 ;;		_I2C_Close
 13983 ;;		_I2C_MasterWrite
 13984 ;;		_I2C_Open
 13985 ;;		_I2C_SetAddressNackCallback
 13986 ;;		_I2C_SetBuffer
 13987 ;; This function is called by:
 13988 ;;		_SHT25_StateMachine
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991                           
 13992                           
 13993                           ;psect for function _I2C_WriteNBytes
 13994  0B33                     _I2C_WriteNBytes:	
 13995                           
 13996                           ;incstack = 0
 13997                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13998                           ;I2C_WriteNBytes@address stored from wreg
 13999  0B33  0020               	movlb	0	; select bank0
 14000  0B34  00B0               	movwf	I2C_WriteNBytes@address
 14001  0B35                     l5511:	
 14002                           ;i2c_master_example.c: 113: while(!I2C_Open(address));
 14003                           
 14004  0B35  0020               	movlb	0	; select bank0
 14005  0B36  0830               	movf	I2C_WriteNBytes@address,w
 14006  0B37  318D  25E7  318B   	fcall	_I2C_Open
 14007  0B3A  3A00               	xorlw	0
 14008  0B3B  1903               	skipnz
 14009  0B3C  2B35               	goto	l5511
 14010                           
 14011                           ;i2c_master_example.c: 114: I2C_SetBuffer(data,len);
 14012  0B3D  0020               	movlb	0	; select bank0
 14013  0B3E  082D               	movf	I2C_WriteNBytes@data,w
 14014  0B3F  00A4               	movwf	I2C_SetBuffer@buffer
 14015  0B40  3000               	movlw	0
 14016  0B41  00A5               	movwf	I2C_SetBuffer@buffer+1
 14017  0B42  082F               	movf	I2C_WriteNBytes@len+1,w
 14018  0B43  00A7               	movwf	I2C_SetBuffer@bufferSize+1
 14019  0B44  082E               	movf	I2C_WriteNBytes@len,w
 14020  0B45  00A6               	movwf	I2C_SetBuffer@bufferSize
 14021  0B46  3189  213B  318B   	fcall	_I2C_SetBuffer
 14022                           
 14023                           ;i2c_master_example.c: 115: I2C_SetAddressNackCallback((0),(0));
 14024  0B49  3000               	movlw	0
 14025  0B4A  0020               	movlb	0	; select bank0
 14026  0B4B  00A9               	movwf	I2C_SetAddressNackCallback@cb
 14027  0B4C  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 14028  0B4D  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 14029  0B4E  3188  207E  318B   	fcall	_I2C_SetAddressNackCallback
 14030                           
 14031                           ;i2c_master_example.c: 116: I2C_MasterWrite();
 14032  0B51  3197  27A7  318B   	fcall	_I2C_MasterWrite
 14033  0B54                     l5519:	
 14034                           ;i2c_master_example.c: 117: while(I2C_BUSY == I2C_Close());
 14035                           
 14036  0B54  318A  2262  318B   	fcall	_I2C_Close
 14037  0B57  3A01               	xorlw	1
 14038  0B58  1D03               	btfss	3,2
 14039  0B59  0008               	return
 14040  0B5A  2B54               	goto	l5519
 14041  0B5B                     __end_of_I2C_WriteNBytes:	
 14042                           
 14043                           	psect	text42
 14044  087E                     __ptext42:	
 14045 ;; *************** function _I2C_SetAddressNackCallback *****************
 14046 ;; Defined at:
 14047 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
 14048 ;; Parameters:    Size  Location     Type
 14049 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 14050 ;;		 -> Absolute function(1), 
 14051 ;;  ptr             1   11[BANK0 ] PTR void 
 14052 ;;		 -> NULL(0), 
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;		None
 14055 ;; Return value:  Size  Location     Type
 14056 ;;                  1    wreg      void 
 14057 ;; Registers used:
 14058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        4 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    8
 14071 ;; This function calls:
 14072 ;;		_I2C_SetCallback
 14073 ;; This function is called by:
 14074 ;;		_I2C_WriteNBytes
 14075 ;;		_I2C_Read1ByteRegister
 14076 ;;		_I2C_Read2ByteRegister
 14077 ;;		_I2C_Write1ByteRegister
 14078 ;;		_I2C_Write2ByteRegister
 14079 ;;		_I2C_ReadDataBlock
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           
 14084                           ;psect for function _I2C_SetAddressNackCallback
 14085  087E                     _I2C_SetAddressNackCallback:	
 14086                           
 14087                           ;i2c_master.c: 286: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 14088                           
 14089                           ;incstack = 0
 14090                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14091  087E  0020               	movlb	0	; select bank0
 14092  087F  082A               	movf	I2C_SetAddressNackCallback@cb+1,w
 14093  0880  00A5               	movwf	I2C_SetCallback@cb+1
 14094  0881  0829               	movf	I2C_SetAddressNackCallback@cb,w
 14095  0882  00A4               	movwf	I2C_SetCallback@cb
 14096  0883  082B               	movf	I2C_SetAddressNackCallback@ptr,w
 14097  0884  00AC               	movwf	??_I2C_SetAddressNackCallback
 14098  0885  082C               	movf	??_I2C_SetAddressNackCallback,w
 14099  0886  00A6               	movwf	I2C_SetCallback@ptr
 14100  0887  3002               	movlw	2
 14101  0888  318B  2383         	fcall	_I2C_SetCallback
 14102  088A  0008               	return
 14103  088B                     __end_of_I2C_SetAddressNackCallback:	
 14104                           
 14105                           	psect	text43
 14106  0B83                     __ptext43:	
 14107 ;; *************** function _I2C_SetCallback *****************
 14108 ;; Defined at:
 14109 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 14110 ;; Parameters:    Size  Location     Type
 14111 ;;  idx             1    wreg     enum E12128
 14112 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
 14113 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 14114 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 14115 ;;  ptr             1    6[BANK0 ] PTR void 
 14116 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14117 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;  idx             1    8[BANK0 ] enum E12128
 14120 ;; Return value:  Size  Location     Type
 14121 ;;                  1    wreg      void 
 14122 ;; Registers used:
 14123 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14124 ;; Tracked objects:
 14125 ;;		On entry : 0/0
 14126 ;;		On exit  : 0/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14129 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14133 ;;Total ram usage:        5 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; Hardware stack levels required when called:    7
 14136 ;; This function calls:
 14137 ;;		Nothing
 14138 ;; This function is called by:
 14139 ;;		_I2C_SetAddressNackCallback
 14140 ;;		_I2C_SetWriteCollisionCallback
 14141 ;;		_I2C_SetDataNackCallback
 14142 ;;		_I2C_SetTimeoutCallback
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           
 14147                           ;psect for function _I2C_SetCallback
 14148  0B83                     _I2C_SetCallback:	
 14149                           
 14150                           ;incstack = 0
 14151                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 14152                           ;I2C_SetCallback@idx stored from wreg
 14153  0B83  0020               	movlb	0	; select bank0
 14154  0B84  00A8               	movwf	I2C_SetCallback@idx
 14155                           
 14156                           ;i2c_master.c: 306: if(cb)
 14157  0B85  0824               	movf	I2C_SetCallback@cb,w
 14158  0B86  0425               	iorwf	I2C_SetCallback@cb+1,w
 14159  0B87  1903               	btfsc	3,2
 14160  0B88  2B9C               	goto	l5053
 14161                           
 14162                           ;i2c_master.c: 307: {
 14163                           ;i2c_master.c: 308: I2C_Status.callbackTable[idx] = cb;
 14164  0B89  3528               	lslf	I2C_SetCallback@idx,w
 14165  0B8A  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 14166  0B8B  0086               	movwf	6
 14167  0B8C  3001               	movlw	1	; select bank2/3
 14168  0B8D  0087               	movwf	7
 14169  0B8E  0824               	movf	I2C_SetCallback@cb,w
 14170  0B8F  3FC0               	movwi [0]fsr1
 14171  0B90  0825               	movf	I2C_SetCallback@cb+1,w
 14172  0B91  3FC1               	movwi [1]fsr1
 14173                           
 14174                           ;i2c_master.c: 309: I2C_Status.callbackPayload[idx] = ptr;
 14175  0B92  0826               	movf	I2C_SetCallback@ptr,w
 14176  0B93  00A7               	movwf	??_I2C_SetCallback
 14177  0B94  0828               	movf	I2C_SetCallback@idx,w
 14178  0B95  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 14179  0B96  0086               	movwf	6
 14180  0B97  3001               	movlw	1	; select bank2/3
 14181  0B98  0087               	movwf	7
 14182  0B99  0827               	movf	??_I2C_SetCallback,w
 14183  0B9A  0081               	movwf	1
 14184                           
 14185                           ;i2c_master.c: 310: }
 14186  0B9B  0008               	return
 14187  0B9C                     l5053:	
 14188                           
 14189                           ;i2c_master.c: 311: else
 14190                           ;i2c_master.c: 312: {
 14191                           ;i2c_master.c: 313: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 14192  0B9C  3528               	lslf	I2C_SetCallback@idx,w
 14193  0B9D  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 14194  0B9E  0086               	movwf	6
 14195  0B9F  3001               	movlw	1	; select bank2/3
 14196  0BA0  0087               	movwf	7
 14197  0BA1  3049               	movlw	low _I2C_CallbackReturnStop
 14198  0BA2  3FC0               	movwi [0]fsr1
 14199  0BA3  3017               	movlw	high _I2C_CallbackReturnStop
 14200  0BA4  3FC1               	movwi [1]fsr1
 14201                           
 14202                           ;i2c_master.c: 314: I2C_Status.callbackPayload[idx] = (0);
 14203  0BA5  0828               	movf	I2C_SetCallback@idx,w
 14204  0BA6  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 14205  0BA7  0086               	movwf	6
 14206  0BA8  3001               	movlw	1	; select bank2/3
 14207  0BA9  0087               	movwf	7
 14208  0BAA  0181               	clrf	1
 14209  0BAB  0008               	return
 14210  0BAC                     __end_of_I2C_SetCallback:	
 14211                           
 14212                           	psect	text44
 14213  17A7                     __ptext44:	
 14214 ;; *************** function _I2C_MasterWrite *****************
 14215 ;; Defined at:
 14216 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;		None
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;		None
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  1    wreg      enum E92
 14223 ;; Registers used:
 14224 ;;		wreg, status,2, status,0, pclath, cstack
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;Total ram usage:        0 bytes
 14235 ;; Hardware stack levels used:    1
 14236 ;; Hardware stack levels required when called:    9
 14237 ;; This function calls:
 14238 ;;		_I2C_MasterOperation
 14239 ;; This function is called by:
 14240 ;;		_I2C_WriteNBytes
 14241 ;;		_I2C_Read1ByteRegister
 14242 ;;		_I2C_Read2ByteRegister
 14243 ;;		_I2C_Write1ByteRegister
 14244 ;;		_I2C_Write2ByteRegister
 14245 ;;		_I2C_ReadDataBlock
 14246 ;; This function uses a non-reentrant model
 14247 ;;
 14248                           
 14249                           
 14250                           ;psect for function _I2C_MasterWrite
 14251  17A7                     _I2C_MasterWrite:	
 14252                           
 14253                           ;i2c_master.c: 254: return I2C_MasterOperation(0);
 14254                           ;	Return value of _I2C_MasterWrite is never used
 14255                           
 14256                           ;incstack = 0
 14257                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
 14258  17A7  3000               	movlw	0
 14259  17A8  318A  220D         	fcall	_I2C_MasterOperation
 14260  17AA  0008               	return
 14261  17AB                     __end_of_I2C_MasterWrite:	
 14262                           
 14263                           	psect	text45
 14264  0A80                     __ptext45:	
 14265 ;; *************** function _I2C_ReadNBytes *****************
 14266 ;; Defined at:
 14267 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  address         1    wreg     unsigned char 
 14270 ;;  data            1    9[BANK0 ] PTR unsigned char 
 14271 ;;		 -> RxBuff(8), 
 14272 ;;  len             2   10[BANK0 ] unsigned int 
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;  address         1   12[BANK0 ] unsigned char 
 14275 ;; Return value:  Size  Location     Type
 14276 ;;                  1    wreg      void 
 14277 ;; Registers used:
 14278 ;;		wreg, status,2, status,0, pclath, cstack
 14279 ;; Tracked objects:
 14280 ;;		On entry : 0/0
 14281 ;;		On exit  : 0/0
 14282 ;;		Unchanged: 0/0
 14283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14284 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;Total ram usage:        4 bytes
 14289 ;; Hardware stack levels used:    1
 14290 ;; Hardware stack levels required when called:   10
 14291 ;; This function calls:
 14292 ;;		_I2C_Close
 14293 ;;		_I2C_MasterRead
 14294 ;;		_I2C_Open
 14295 ;;		_I2C_SetBuffer
 14296 ;; This function is called by:
 14297 ;;		_SHT25_StateMachine
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           
 14302                           ;psect for function _I2C_ReadNBytes
 14303  0A80                     _I2C_ReadNBytes:	
 14304                           
 14305                           ;incstack = 0
 14306                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
 14307                           ;I2C_ReadNBytes@address stored from wreg
 14308  0A80  0020               	movlb	0	; select bank0
 14309  0A81  00AC               	movwf	I2C_ReadNBytes@address
 14310  0A82                     l5523:	
 14311                           ;i2c_master_example.c: 122: while(!I2C_Open(address));
 14312                           
 14313  0A82  0020               	movlb	0	; select bank0
 14314  0A83  082C               	movf	I2C_ReadNBytes@address,w
 14315  0A84  318D  25E7  318A   	fcall	_I2C_Open
 14316  0A87  3A00               	xorlw	0
 14317  0A88  1903               	skipnz
 14318  0A89  2A82               	goto	l5523
 14319                           
 14320                           ;i2c_master_example.c: 123: I2C_SetBuffer(data,len);
 14321  0A8A  0020               	movlb	0	; select bank0
 14322  0A8B  0829               	movf	I2C_ReadNBytes@data,w
 14323  0A8C  00A4               	movwf	I2C_SetBuffer@buffer
 14324  0A8D  3001               	movlw	1
 14325  0A8E  00A5               	movwf	I2C_SetBuffer@buffer+1
 14326  0A8F  082B               	movf	I2C_ReadNBytes@len+1,w
 14327  0A90  00A7               	movwf	I2C_SetBuffer@bufferSize+1
 14328  0A91  082A               	movf	I2C_ReadNBytes@len,w
 14329  0A92  00A6               	movwf	I2C_SetBuffer@bufferSize
 14330  0A93  3189  213B  318A   	fcall	_I2C_SetBuffer
 14331                           
 14332                           ;i2c_master_example.c: 124: I2C_MasterRead();
 14333  0A96  3197  27A3  318A   	fcall	_I2C_MasterRead
 14334  0A99                     l5527:	
 14335                           ;i2c_master_example.c: 125: while(I2C_BUSY == I2C_Close());
 14336                           
 14337  0A99  318A  2262  318A   	fcall	_I2C_Close
 14338  0A9C  3A01               	xorlw	1
 14339  0A9D  1D03               	btfss	3,2
 14340  0A9E  0008               	return
 14341  0A9F  2A99               	goto	l5527
 14342  0AA0                     __end_of_I2C_ReadNBytes:	
 14343                           
 14344                           	psect	text46
 14345  093B                     __ptext46:	
 14346 ;; *************** function _I2C_SetBuffer *****************
 14347 ;; Defined at:
 14348 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;  buffer          2    4[BANK0 ] PTR void 
 14351 ;;		 -> RxBuff(8), Command(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 14352 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
 14353 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
 14354 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
 14355 ;;  bufferSize      2    6[BANK0 ] unsigned int 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      void 
 14360 ;; Registers used:
 14361 ;;		wreg
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:        4 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    7
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_I2C_WriteNBytes
 14378 ;;		_I2C_ReadNBytes
 14379 ;;		_I2C_Read1ByteRegister
 14380 ;;		_I2C_Read2ByteRegister
 14381 ;;		_I2C_Write1ByteRegister
 14382 ;;		_I2C_Write2ByteRegister
 14383 ;;		_I2C_ReadDataBlock
 14384 ;; This function uses a non-reentrant model
 14385 ;;
 14386                           
 14387                           
 14388                           ;psect for function _I2C_SetBuffer
 14389  093B                     _I2C_SetBuffer:	
 14390                           
 14391                           ;i2c_master.c: 266: if(I2C_Status.bufferFree)
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in _I2C_SetBuffer: [wreg]
 14395  093B  0022               	movlb	2	; select bank2
 14396  093C  1DBD               	btfss	(_I2C_Status^(0+256)+29),3
 14397  093D  0008               	return
 14398                           
 14399                           ;i2c_master.c: 267: {
 14400                           ;i2c_master.c: 268: I2C_Status.data_ptr = buffer;
 14401  093E  0020               	movlb	0	; select bank0
 14402  093F  0825               	movf	I2C_SetBuffer@buffer+1,w
 14403  0940  0022               	movlb	2	; select bank2
 14404  0941  00B8               	movwf	((low ((_I2C_Status| (0+256)+23))+1))^0
 14405  0942  0020               	movlb	0	; select bank0
 14406  0943  0824               	movf	I2C_SetBuffer@buffer,w
 14407  0944  0022               	movlb	2	; select bank2
 14408  0945  00B7               	movwf	(low ((_I2C_Status| (0+256)+23)))^0
 14409                           
 14410                           ;i2c_master.c: 269: I2C_Status.data_length = bufferSize;
 14411  0946  0020               	movlb	0	; select bank0
 14412  0947  0827               	movf	I2C_SetBuffer@bufferSize+1,w
 14413  0948  0022               	movlb	2	; select bank2
 14414  0949  00BA               	movwf	((_I2C_Status+1)^(0+256)+25)
 14415  094A  0020               	movlb	0	; select bank0
 14416  094B  0826               	movf	I2C_SetBuffer@bufferSize,w
 14417  094C  0022               	movlb	2	; select bank2
 14418  094D  00B9               	movwf	(_I2C_Status^(0+256)+25)
 14419                           
 14420                           ;i2c_master.c: 270: I2C_Status.bufferFree = 0;
 14421  094E  11BD               	bcf	(_I2C_Status^(0+256)+29),3
 14422  094F  0008               	return
 14423  0950                     __end_of_I2C_SetBuffer:	
 14424                           
 14425                           	psect	text47
 14426  0DE7                     __ptext47:	
 14427 ;; *************** function _I2C_Open *****************
 14428 ;; Defined at:
 14429 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  address         1    wreg     unsigned char 
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;  address         1    7[BANK0 ] unsigned char 
 14434 ;;  returnValue     1    8[BANK0 ] enum E92
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      enum E92
 14437 ;; Registers used:
 14438 ;;		wreg, status,2, status,0, pclath, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;Total ram usage:        3 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    8
 14451 ;; This function calls:
 14452 ;;		_I2C_MasterClearIrq
 14453 ;;		_I2C_MasterEnableIrq
 14454 ;;		_I2C_MasterOpen
 14455 ;;		_I2C_SetInterruptHandler
 14456 ;; This function is called by:
 14457 ;;		_I2C_WriteNBytes
 14458 ;;		_I2C_ReadNBytes
 14459 ;;		_I2C_Read1ByteRegister
 14460 ;;		_I2C_Read2ByteRegister
 14461 ;;		_I2C_Write1ByteRegister
 14462 ;;		_I2C_Write2ByteRegister
 14463 ;;		_I2C_ReadDataBlock
 14464 ;; This function uses a non-reentrant model
 14465 ;;
 14466                           
 14467                           
 14468                           ;psect for function _I2C_Open
 14469  0DE7                     _I2C_Open:	
 14470                           
 14471                           ;incstack = 0
 14472                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 14473                           ;I2C_Open@address stored from wreg
 14474  0DE7  0020               	movlb	0	; select bank0
 14475  0DE8  00A7               	movwf	I2C_Open@address
 14476                           
 14477                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 14478  0DE9  01A8               	clrf	I2C_Open@returnValue
 14479  0DEA  0AA8               	incf	I2C_Open@returnValue,f
 14480                           
 14481                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 14482  0DEB  0022               	movlb	2	; select bank2
 14483  0DEC  193D               	btfsc	(_I2C_Status^(0+256)+29),2
 14484  0DED  2E2D               	goto	l5131
 14485                           
 14486                           ;i2c_master.c: 181: {
 14487                           ;i2c_master.c: 182: I2C_Status.address = address;
 14488  0DEE  0020               	movlb	0	; select bank0
 14489  0DEF  0827               	movf	I2C_Open@address,w
 14490  0DF0  00A6               	movwf	??_I2C_Open
 14491  0DF1  0826               	movf	??_I2C_Open,w
 14492  0DF2  0022               	movlb	2	; select bank2
 14493  0DF3  00B6               	movwf	(_I2C_Status^(0+256)+22)
 14494                           
 14495                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 14496  0DF4  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 14497                           
 14498                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 14499  0DF5  153D               	bsf	(_I2C_Status^(0+256)+29),2
 14500                           
 14501                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 14502  0DF6  103D               	bcf	(_I2C_Status^(0+256)+29),0
 14503                           
 14504                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 14505  0DF7  300E               	movlw	14
 14506  0DF8  0020               	movlb	0	; select bank0
 14507  0DF9  00A6               	movwf	??_I2C_Open
 14508  0DFA  0826               	movf	??_I2C_Open,w
 14509  0DFB  0022               	movlb	2	; select bank2
 14510  0DFC  00BB               	movwf	(_I2C_Status^(0+256)+27)
 14511                           
 14512                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 14513  0DFD  30F4               	movlw	244
 14514  0DFE  00B4               	movwf	(_I2C_Status^(0+256)+20)
 14515  0DFF  3001               	movlw	1
 14516  0E00  00B5               	movwf	(_I2C_Status^(0+256)+21)
 14517                           
 14518                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 14519  0E01  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 14520                           
 14521                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 14522  0E02  3049               	movlw	low _I2C_CallbackReturnStop
 14523  0E03  00A0               	movwf	_I2C_Status^(0+256)
 14524  0E04  3017               	movlw	high _I2C_CallbackReturnStop
 14525  0E05  00A1               	movwf	(_I2C_Status^(0+256)+1)
 14526                           
 14527                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 14528  0E06  01AC               	clrf	(low ((_I2C_Status| (0+256)+12)))^0
 14529                           
 14530                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 14531  0E07  3049               	movlw	low _I2C_CallbackReturnStop
 14532  0E08  00A2               	movwf	(low ((_I2C_Status| (0+256)+2)))^0
 14533  0E09  3017               	movlw	high _I2C_CallbackReturnStop
 14534  0E0A  00A3               	movwf	((low ((_I2C_Status| (0+256)+2)))^0+1)
 14535                           
 14536                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 14537  0E0B  01AD               	clrf	(low ((_I2C_Status| (0+256)+13)))^0
 14538                           
 14539                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 14540  0E0C  3049               	movlw	low _I2C_CallbackReturnStop
 14541  0E0D  00A4               	movwf	(low ((_I2C_Status| (0+256)+4)))^0
 14542  0E0E  3017               	movlw	high _I2C_CallbackReturnStop
 14543  0E0F  00A5               	movwf	((low ((_I2C_Status| (0+256)+4)))^0+1)
 14544                           
 14545                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 14546  0E10  01AE               	clrf	(low ((_I2C_Status| (0+256)+14)))^0
 14547                           
 14548                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 14549  0E11  3049               	movlw	low _I2C_CallbackReturnStop
 14550  0E12  00A6               	movwf	(low ((_I2C_Status| (0+256)+6)))^0
 14551  0E13  3017               	movlw	high _I2C_CallbackReturnStop
 14552  0E14  00A7               	movwf	((low ((_I2C_Status| (0+256)+6)))^0+1)
 14553                           
 14554                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 14555  0E15  01AF               	clrf	(low ((_I2C_Status| (0+256)+15)))^0
 14556                           
 14557                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 14558  0E16  3002               	movlw	low _I2C_CallbackReturnReset
 14559  0E17  00A8               	movwf	(low ((_I2C_Status| (0+256)+8)))^0
 14560  0E18  3000               	movlw	high _I2C_CallbackReturnReset
 14561  0E19  00A9               	movwf	((low ((_I2C_Status| (0+256)+8)))^0+1)
 14562                           
 14563                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 14564  0E1A  01B0               	clrf	(low ((_I2C_Status| (0+256)+16)))^0
 14565                           
 14566                           ;i2c_master.c: 202: I2C_SetInterruptHandler(I2C_MasterIsr);
 14567  0E1B  3060               	movlw	low _I2C_MasterIsr
 14568  0E1C  0020               	movlb	0	; select bank0
 14569  0E1D  00A4               	movwf	I2C_SetInterruptHandler@InterruptHandler
 14570  0E1E  3017               	movlw	high _I2C_MasterIsr
 14571  0E1F  00A5               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
 14572  0E20  3197  27F7  318D   	fcall	_I2C_SetInterruptHandler
 14573                           
 14574                           ;i2c_master.c: 203: I2C_MasterClearIrq();
 14575  0E23  3197  2766  318D   	fcall	_I2C_MasterClearIrq
 14576                           
 14577                           ;i2c_master.c: 204: I2C_MasterOpen();
 14578  0E26  3188  204F  318D   	fcall	_I2C_MasterOpen
 14579                           
 14580                           ;i2c_master.c: 205: I2C_MasterEnableIrq();
 14581  0E29  3197  2772         	fcall	_I2C_MasterEnableIrq
 14582                           
 14583                           ;i2c_master.c: 206: returnValue = I2C_NOERR;
 14584  0E2B  0020               	movlb	0	; select bank0
 14585  0E2C  01A8               	clrf	I2C_Open@returnValue
 14586  0E2D                     l5131:	
 14587                           
 14588                           ;i2c_master.c: 207: }
 14589                           ;i2c_master.c: 208: return returnValue;
 14590  0E2D  0020               	movlb	0	; select bank0
 14591  0E2E  0828               	movf	I2C_Open@returnValue,w
 14592  0E2F  0008               	return
 14593  0E30                     __end_of_I2C_Open:	
 14594                           
 14595                           	psect	text48
 14596  17F7                     __ptext48:	
 14597 ;; *************** function _I2C_SetInterruptHandler *****************
 14598 ;; Defined at:
 14599 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;  InterruptHan    2    4[BANK0 ] PTR FTN()void 
 14602 ;;		 -> I2C_MasterIsr(1), 
 14603 ;; Auto vars:     Size  Location     Type
 14604 ;;		None
 14605 ;; Return value:  Size  Location     Type
 14606 ;;                  1    wreg      void 
 14607 ;; Registers used:
 14608 ;;		wreg
 14609 ;; Tracked objects:
 14610 ;;		On entry : 0/0
 14611 ;;		On exit  : 0/0
 14612 ;;		Unchanged: 0/0
 14613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;Total ram usage:        2 bytes
 14619 ;; Hardware stack levels used:    1
 14620 ;; Hardware stack levels required when called:    7
 14621 ;; This function calls:
 14622 ;;		Nothing
 14623 ;; This function is called by:
 14624 ;;		_I2C_Open
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           
 14629                           ;psect for function _I2C_SetInterruptHandler
 14630  17F7                     _I2C_SetInterruptHandler:	
 14631                           
 14632                           ;i2c_master.c: 301: MSSP_InterruptHandler = InterruptHandler;
 14633                           
 14634                           ;incstack = 0
 14635                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
 14636  17F7  0020               	movlb	0	; select bank0
 14637  17F8  0825               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
 14638  17F9  0021               	movlb	1	; select bank1
 14639  17FA  00BB               	movwf	(_MSSP_InterruptHandler+1)^(0+128)
 14640  17FB  0020               	movlb	0	; select bank0
 14641  17FC  0824               	movf	I2C_SetInterruptHandler@InterruptHandler,w
 14642  17FD  0021               	movlb	1	; select bank1
 14643  17FE  00BA               	movwf	_MSSP_InterruptHandler^(0+128)
 14644  17FF  0008               	return
 14645  1800                     __end_of_I2C_SetInterruptHandler:	
 14646                           
 14647                           	psect	text49
 14648  084F                     __ptext49:	
 14649 ;; *************** function _I2C_MasterOpen *****************
 14650 ;; Defined at:
 14651 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;		None
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;		None
 14656 ;; Return value:  Size  Location     Type
 14657 ;;                  1    wreg      unsigned char 
 14658 ;; Registers used:
 14659 ;;		wreg, status,2
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;Total ram usage:        0 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; Hardware stack levels required when called:    7
 14672 ;; This function calls:
 14673 ;;		Nothing
 14674 ;; This function is called by:
 14675 ;;		_I2C_Open
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           
 14680                           ;psect for function _I2C_MasterOpen
 14681  084F                     _I2C_MasterOpen:	
 14682                           
 14683                           ;i2c_master.c: 546: if(!SSP1CON1bits.SSPEN)
 14684                           
 14685                           ;incstack = 0
 14686                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
 14687  084F  0024               	movlb	4	; select bank4
 14688  0850  1A95               	btfsc	21,5	;volatile
 14689  0851  0008               	return
 14690                           
 14691                           ;i2c_master.c: 547: {
 14692                           ;i2c_master.c: 548: SSP1STAT = 0x00;
 14693  0852  0194               	clrf	20	;volatile
 14694                           
 14695                           ;i2c_master.c: 549: SSP1CON1 = 0x08;
 14696  0853  3008               	movlw	8
 14697  0854  0095               	movwf	21	;volatile
 14698                           
 14699                           ;i2c_master.c: 550: SSP1CON2 = 0x00;
 14700  0855  0196               	clrf	22	;volatile
 14701                           
 14702                           ;i2c_master.c: 551: SSP1ADD = 0x27;
 14703  0856  3027               	movlw	39
 14704  0857  0092               	movwf	18	;volatile
 14705                           
 14706                           ;i2c_master.c: 552: SSP1CON1bits.SSPEN = 1;
 14707  0858  1695               	bsf	21,5	;volatile
 14708                           
 14709                           ;i2c_master.c: 553: return 1;
 14710                           ;	Return value of _I2C_MasterOpen is never used
 14711  0859  0008               	return
 14712  085A                     __end_of_I2C_MasterOpen:	
 14713                           ;i2c_master.c: 554: }
 14714                           ;i2c_master.c: 555: return 0;
 14715                           ;	Return value of _I2C_MasterOpen is never used
 14716                           
 14717                           
 14718                           	psect	text50
 14719  1772                     __ptext50:	
 14720 ;; *************** function _I2C_MasterEnableIrq *****************
 14721 ;; Defined at:
 14722 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;		None
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;		None
 14727 ;; Return value:  Size  Location     Type
 14728 ;;                  1    wreg      void 
 14729 ;; Registers used:
 14730 ;;		None
 14731 ;; Tracked objects:
 14732 ;;		On entry : 0/0
 14733 ;;		On exit  : 0/0
 14734 ;;		Unchanged: 0/0
 14735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;Total ram usage:        0 bytes
 14741 ;; Hardware stack levels used:    1
 14742 ;; Hardware stack levels required when called:    7
 14743 ;; This function calls:
 14744 ;;		Nothing
 14745 ;; This function is called by:
 14746 ;;		_I2C_Open
 14747 ;;		_I2C_SetTimeOut
 14748 ;; This function uses a non-reentrant model
 14749 ;;
 14750                           
 14751                           
 14752                           ;psect for function _I2C_MasterEnableIrq
 14753  1772                     _I2C_MasterEnableIrq:	
 14754                           
 14755                           ;i2c_master.c: 629: PIE1bits.SSP1IE = 1;
 14756                           
 14757                           ;incstack = 0
 14758                           ; Regs used in _I2C_MasterEnableIrq: []
 14759  1772  0021               	movlb	1	; select bank1
 14760  1773  1590               	bsf	16,3	;volatile
 14761  1774  0008               	return
 14762  1775                     __end_of_I2C_MasterEnableIrq:	
 14763                           
 14764                           	psect	text51
 14765  17A3                     __ptext51:	
 14766 ;; *************** function _I2C_MasterRead *****************
 14767 ;; Defined at:
 14768 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;		None
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;		None
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  1    wreg      enum E92
 14775 ;; Registers used:
 14776 ;;		wreg, status,2, status,0, pclath, cstack
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:        0 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    9
 14789 ;; This function calls:
 14790 ;;		_I2C_MasterOperation
 14791 ;; This function is called by:
 14792 ;;		_I2C_ReadNBytes
 14793 ;; This function uses a non-reentrant model
 14794 ;;
 14795                           
 14796                           
 14797                           ;psect for function _I2C_MasterRead
 14798  17A3                     _I2C_MasterRead:	
 14799                           
 14800                           ;i2c_master.c: 249: return I2C_MasterOperation(1);
 14801                           ;	Return value of _I2C_MasterRead is never used
 14802                           
 14803                           ;incstack = 0
 14804                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
 14805  17A3  3001               	movlw	1
 14806  17A4  318A  220D         	fcall	_I2C_MasterOperation
 14807  17A6  0008               	return
 14808  17A7                     __end_of_I2C_MasterRead:	
 14809                           
 14810                           	psect	text52
 14811  0A0D                     __ptext52:	
 14812 ;; *************** function _I2C_MasterOperation *****************
 14813 ;; Defined at:
 14814 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
 14815 ;; Parameters:    Size  Location     Type
 14816 ;;  read            1    wreg     unsigned char 
 14817 ;; Auto vars:     Size  Location     Type
 14818 ;;  read            1    5[BANK0 ] unsigned char 
 14819 ;;  returnValue     1    6[BANK0 ] enum E92
 14820 ;; Return value:  Size  Location     Type
 14821 ;;                  1    wreg      enum E92
 14822 ;; Registers used:
 14823 ;;		wreg, status,2, status,0, pclath, cstack
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;Total ram usage:        3 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    8
 14836 ;; This function calls:
 14837 ;;		_I2C_MasterStart
 14838 ;; This function is called by:
 14839 ;;		_I2C_MasterRead
 14840 ;;		_I2C_MasterWrite
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           
 14845                           ;psect for function _I2C_MasterOperation
 14846  0A0D                     _I2C_MasterOperation:	
 14847                           
 14848                           ;incstack = 0
 14849                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
 14850                           ;I2C_MasterOperation@read stored from wreg
 14851  0A0D  0020               	movlb	0	; select bank0
 14852  0A0E  00A5               	movwf	I2C_MasterOperation@read
 14853                           
 14854                           ;i2c_master.c: 228: i2c_error_t returnValue = I2C_BUSY;
 14855  0A0F  01A6               	clrf	I2C_MasterOperation@returnValue
 14856  0A10  0AA6               	incf	I2C_MasterOperation@returnValue,f
 14857                           
 14858                           ;i2c_master.c: 229: if(!I2C_Status.busy)
 14859  0A11  0022               	movlb	2	; select bank2
 14860  0A12  18BD               	btfsc	(_I2C_Status^(0+256)+29),1
 14861  0A13  2A26               	goto	l5045
 14862                           
 14863                           ;i2c_master.c: 230: {
 14864                           ;i2c_master.c: 231: I2C_Status.busy = 1;
 14865  0A14  14BD               	bsf	(_I2C_Status^(0+256)+29),1
 14866                           
 14867                           ;i2c_master.c: 232: returnValue = I2C_NOERR;
 14868  0A15  0020               	movlb	0	; select bank0
 14869  0A16  01A6               	clrf	I2C_MasterOperation@returnValue
 14870                           
 14871                           ;i2c_master.c: 234: if(read)
 14872  0A17  0825               	movf	I2C_MasterOperation@read,w
 14873  0A18  1903               	btfsc	3,2
 14874  0A19  2A1E               	goto	l5041
 14875                           
 14876                           ;i2c_master.c: 235: {
 14877                           ;i2c_master.c: 236: I2C_Status.state = I2C_SEND_ADR_READ;
 14878  0A1A  0022               	movlb	2	; select bank2
 14879  0A1B  01BB               	clrf	(_I2C_Status^(0+256)+27)
 14880  0A1C  0ABB               	incf	(_I2C_Status^(0+256)+27),f
 14881                           
 14882                           ;i2c_master.c: 237: }
 14883  0A1D  2A24               	goto	l5043
 14884  0A1E                     l5041:	
 14885                           
 14886                           ;i2c_master.c: 238: else
 14887                           ;i2c_master.c: 239: {
 14888                           ;i2c_master.c: 240: I2C_Status.state = I2C_SEND_ADR_WRITE;
 14889  0A1E  3002               	movlw	2
 14890  0A1F  0020               	movlb	0	; select bank0
 14891  0A20  00A4               	movwf	??_I2C_MasterOperation
 14892  0A21  0824               	movf	??_I2C_MasterOperation,w
 14893  0A22  0022               	movlb	2	; select bank2
 14894  0A23  00BB               	movwf	(_I2C_Status^(0+256)+27)
 14895  0A24                     l5043:	
 14896                           
 14897                           ;i2c_master.c: 241: }
 14898                           ;i2c_master.c: 242: I2C_MasterStart();
 14899  0A24  3197  276F         	fcall	_I2C_MasterStart
 14900  0A26                     l5045:	
 14901                           
 14902                           ;i2c_master.c: 243: }
 14903                           ;i2c_master.c: 244: return returnValue;
 14904  0A26  0020               	movlb	0	; select bank0
 14905  0A27  0826               	movf	I2C_MasterOperation@returnValue,w
 14906  0A28  0008               	return
 14907  0A29                     __end_of_I2C_MasterOperation:	
 14908                           
 14909                           	psect	text53
 14910  176F                     __ptext53:	
 14911 ;; *************** function _I2C_MasterStart *****************
 14912 ;; Defined at:
 14913 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;		None
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;		None
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      void 
 14920 ;; Registers used:
 14921 ;;		None
 14922 ;; Tracked objects:
 14923 ;;		On entry : 0/0
 14924 ;;		On exit  : 0/0
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;Total ram usage:        0 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; Hardware stack levels required when called:    7
 14934 ;; This function calls:
 14935 ;;		Nothing
 14936 ;; This function is called by:
 14937 ;;		_I2C_MasterOperation
 14938 ;; This function uses a non-reentrant model
 14939 ;;
 14940                           
 14941                           
 14942                           ;psect for function _I2C_MasterStart
 14943  176F                     _I2C_MasterStart:	
 14944                           
 14945                           ;i2c_master.c: 591: SSP1CON2bits.SEN = 1;
 14946                           
 14947                           ;incstack = 0
 14948                           ; Regs used in _I2C_MasterStart: []
 14949  176F  0024               	movlb	4	; select bank4
 14950  1770  1416               	bsf	22,0	;volatile
 14951  1771  0008               	return
 14952  1772                     __end_of_I2C_MasterStart:	
 14953                           
 14954                           	psect	text54
 14955  0A62                     __ptext54:	
 14956 ;; *************** function _I2C_Close *****************
 14957 ;; Defined at:
 14958 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;		None
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  returnValue     1    5[BANK0 ] enum E92
 14963 ;; Return value:  Size  Location     Type
 14964 ;;                  1    wreg      enum E92
 14965 ;; Registers used:
 14966 ;;		wreg, status,2, status,0, pclath, cstack
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        2 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    8
 14979 ;; This function calls:
 14980 ;;		_I2C_MasterClearIrq
 14981 ;;		_I2C_MasterClose
 14982 ;;		_I2C_MasterDisableIrq
 14983 ;; This function is called by:
 14984 ;;		_I2C_WriteNBytes
 14985 ;;		_I2C_ReadNBytes
 14986 ;;		_I2C_Read1ByteRegister
 14987 ;;		_I2C_Read2ByteRegister
 14988 ;;		_I2C_Write1ByteRegister
 14989 ;;		_I2C_Write2ByteRegister
 14990 ;;		_I2C_ReadDataBlock
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           
 14995                           ;psect for function _I2C_Close
 14996  0A62                     _I2C_Close:	
 14997                           
 14998                           ;i2c_master.c: 213: i2c_error_t returnValue = I2C_BUSY;
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 15002  0A62  0020               	movlb	0	; select bank0
 15003  0A63  01A5               	clrf	I2C_Close@returnValue
 15004  0A64  0AA5               	incf	I2C_Close@returnValue,f
 15005                           
 15006                           ;i2c_master.c: 214: if(!I2C_Status.busy)
 15007  0A65  0022               	movlb	2	; select bank2
 15008  0A66  18BD               	btfsc	(_I2C_Status^(0+256)+29),1
 15009  0A67  2A7D               	goto	l5161
 15010                           
 15011                           ;i2c_master.c: 215: {
 15012                           ;i2c_master.c: 216: I2C_Status.inUse = 0;
 15013  0A68  113D               	bcf	(_I2C_Status^(0+256)+29),2
 15014                           
 15015                           ;i2c_master.c: 217: I2C_Status.address = 0xff;
 15016  0A69  30FF               	movlw	255
 15017  0A6A  0020               	movlb	0	; select bank0
 15018  0A6B  00A4               	movwf	??_I2C_Close
 15019  0A6C  0824               	movf	??_I2C_Close,w
 15020  0A6D  0022               	movlb	2	; select bank2
 15021  0A6E  00B6               	movwf	(_I2C_Status^(0+256)+22)
 15022                           
 15023                           ;i2c_master.c: 218: I2C_MasterClearIrq();
 15024  0A6F  3197  2766  318A   	fcall	_I2C_MasterClearIrq
 15025                           
 15026                           ;i2c_master.c: 219: I2C_MasterDisableIrq();
 15027  0A72  3197  276C  318A   	fcall	_I2C_MasterDisableIrq
 15028                           
 15029                           ;i2c_master.c: 220: I2C_MasterClose();
 15030  0A75  3197  2769         	fcall	_I2C_MasterClose
 15031                           
 15032                           ;i2c_master.c: 221: returnValue = I2C_Status.error;
 15033  0A77  0022               	movlb	2	; select bank2
 15034  0A78  083C               	movf	(_I2C_Status^(0+256)+28),w
 15035  0A79  0020               	movlb	0	; select bank0
 15036  0A7A  00A4               	movwf	??_I2C_Close
 15037  0A7B  0824               	movf	??_I2C_Close,w
 15038  0A7C  00A5               	movwf	I2C_Close@returnValue
 15039  0A7D                     l5161:	
 15040                           
 15041                           ;i2c_master.c: 222: }
 15042                           ;i2c_master.c: 223: return returnValue;
 15043  0A7D  0020               	movlb	0	; select bank0
 15044  0A7E  0825               	movf	I2C_Close@returnValue,w
 15045  0A7F  0008               	return
 15046  0A80                     __end_of_I2C_Close:	
 15047                           
 15048                           	psect	text55
 15049  176C                     __ptext55:	
 15050 ;; *************** function _I2C_MasterDisableIrq *****************
 15051 ;; Defined at:
 15052 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
 15053 ;; Parameters:    Size  Location     Type
 15054 ;;		None
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;		None
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  1    wreg      void 
 15059 ;; Registers used:
 15060 ;;		None
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;Total ram usage:        0 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    7
 15073 ;; This function calls:
 15074 ;;		Nothing
 15075 ;; This function is called by:
 15076 ;;		_I2C_Close
 15077 ;;		_I2C_SetTimeOut
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           
 15082                           ;psect for function _I2C_MasterDisableIrq
 15083  176C                     _I2C_MasterDisableIrq:	
 15084                           
 15085                           ;i2c_master.c: 639: PIE1bits.SSP1IE = 0;
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _I2C_MasterDisableIrq: []
 15089  176C  0021               	movlb	1	; select bank1
 15090  176D  1190               	bcf	16,3	;volatile
 15091  176E  0008               	return
 15092  176F                     __end_of_I2C_MasterDisableIrq:	
 15093                           
 15094                           	psect	text56
 15095  1769                     __ptext56:	
 15096 ;; *************** function _I2C_MasterClose *****************
 15097 ;; Defined at:
 15098 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;		None
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;		None
 15103 ;; Return value:  Size  Location     Type
 15104 ;;                  1    wreg      void 
 15105 ;; Registers used:
 15106 ;;		None
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;Total ram usage:        0 bytes
 15117 ;; Hardware stack levels used:    1
 15118 ;; Hardware stack levels required when called:    7
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_I2C_Close
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           
 15127                           ;psect for function _I2C_MasterClose
 15128  1769                     _I2C_MasterClose:	
 15129                           
 15130                           ;i2c_master.c: 561: SSP1CON1bits.SSPEN = 0;
 15131                           
 15132                           ;incstack = 0
 15133                           ; Regs used in _I2C_MasterClose: []
 15134  1769  0024               	movlb	4	; select bank4
 15135  176A  1295               	bcf	21,5	;volatile
 15136  176B  0008               	return
 15137  176C                     __end_of_I2C_MasterClose:	
 15138                           
 15139                           	psect	text57
 15140  1766                     __ptext57:	
 15141 ;; *************** function _I2C_MasterClearIrq *****************
 15142 ;; Defined at:
 15143 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
 15144 ;; Parameters:    Size  Location     Type
 15145 ;;		None
 15146 ;; Auto vars:     Size  Location     Type
 15147 ;;		None
 15148 ;; Return value:  Size  Location     Type
 15149 ;;                  1    wreg      void 
 15150 ;; Registers used:
 15151 ;;		None
 15152 ;; Tracked objects:
 15153 ;;		On entry : 0/0
 15154 ;;		On exit  : 0/0
 15155 ;;		Unchanged: 0/0
 15156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;Total ram usage:        0 bytes
 15162 ;; Hardware stack levels used:    1
 15163 ;; Hardware stack levels required when called:    7
 15164 ;; This function calls:
 15165 ;;		Nothing
 15166 ;; This function is called by:
 15167 ;;		_I2C_Open
 15168 ;;		_I2C_Close
 15169 ;; This function uses a non-reentrant model
 15170 ;;
 15171                           
 15172                           
 15173                           ;psect for function _I2C_MasterClearIrq
 15174  1766                     _I2C_MasterClearIrq:	
 15175                           
 15176                           ;i2c_master.c: 644: PIR1bits.SSP1IF = 0;
 15177                           
 15178                           ;incstack = 0
 15179                           ; Regs used in _I2C_MasterClearIrq: []
 15180  1766  0020               	movlb	0	; select bank0
 15181  1767  1190               	bcf	16,3	;volatile
 15182  1768  0008               	return
 15183  1769                     __end_of_I2C_MasterClearIrq:	
 15184                           
 15185                           	psect	text58
 15186  1763                     __ptext58:	
 15187 ;; *************** function _ADC_StartConversion *****************
 15188 ;; Defined at:
 15189 ;;		line 96 in file "mcc_generated_files/adc.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;		None
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;		None
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      void 
 15196 ;; Registers used:
 15197 ;;		None
 15198 ;; Tracked objects:
 15199 ;;		On entry : 0/0
 15200 ;;		On exit  : 0/0
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;Total ram usage:        0 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; Hardware stack levels required when called:    7
 15210 ;; This function calls:
 15211 ;;		Nothing
 15212 ;; This function is called by:
 15213 ;;		_AD_Task
 15214 ;; This function uses a non-reentrant model
 15215 ;;
 15216                           
 15217                           
 15218                           ;psect for function _ADC_StartConversion
 15219  1763                     _ADC_StartConversion:	
 15220                           
 15221                           ;adc.c: 99: ADCON0bits.GO_nDONE = 1;
 15222                           
 15223                           ;incstack = 0
 15224                           ; Regs used in _ADC_StartConversion: []
 15225  1763  0021               	movlb	1	; select bank1
 15226  1764  149D               	bsf	29,1	;volatile
 15227  1765  0008               	return
 15228  1766                     __end_of_ADC_StartConversion:	
 15229                           
 15230                           	psect	text59
 15231  08C3                     __ptext59:	
 15232 ;; *************** function _ADC_SelectChannel *****************
 15233 ;; Defined at:
 15234 ;;		line 88 in file "mcc_generated_files/adc.c"
 15235 ;; Parameters:    Size  Location     Type
 15236 ;;  channel         1    wreg     enum E11990
 15237 ;; Auto vars:     Size  Location     Type
 15238 ;;  channel         1    5[BANK0 ] enum E11990
 15239 ;; Return value:  Size  Location     Type
 15240 ;;                  1    wreg      void 
 15241 ;; Registers used:
 15242 ;;		wreg, status,2, status,0
 15243 ;; Tracked objects:
 15244 ;;		On entry : 0/0
 15245 ;;		On exit  : 0/0
 15246 ;;		Unchanged: 0/0
 15247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;Total ram usage:        2 bytes
 15253 ;; Hardware stack levels used:    1
 15254 ;; Hardware stack levels required when called:    7
 15255 ;; This function calls:
 15256 ;;		Nothing
 15257 ;; This function is called by:
 15258 ;;		_AD_Task
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           
 15263                           ;psect for function _ADC_SelectChannel
 15264  08C3                     _ADC_SelectChannel:	
 15265                           
 15266                           ;incstack = 0
 15267                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 15268                           ;ADC_SelectChannel@channel stored from wreg
 15269  08C3  0020               	movlb	0	; select bank0
 15270  08C4  00A5               	movwf	ADC_SelectChannel@channel
 15271                           
 15272                           ;adc.c: 91: ADCON0bits.CHS = channel;
 15273  08C5  0825               	movf	ADC_SelectChannel@channel,w
 15274  08C6  00A4               	movwf	??_ADC_SelectChannel
 15275  08C7  0DA4               	rlf	??_ADC_SelectChannel,f
 15276  08C8  0DA4               	rlf	??_ADC_SelectChannel,f
 15277  08C9  0021               	movlb	1	; select bank1
 15278  08CA  081D               	movf	29,w	;volatile
 15279  08CB  0020               	movlb	0	; select bank0
 15280  08CC  0624               	xorwf	??_ADC_SelectChannel,w
 15281  08CD  3983               	andlw	-125
 15282  08CE  0624               	xorwf	??_ADC_SelectChannel,w
 15283  08CF  0021               	movlb	1	; select bank1
 15284  08D0  009D               	movwf	29	;volatile
 15285                           
 15286                           ;adc.c: 93: ADCON0bits.ADON = 1;
 15287  08D1  141D               	bsf	29,0	;volatile
 15288  08D2  0008               	return
 15289  08D3                     __end_of_ADC_SelectChannel:	
 15290                           
 15291                           	psect	text60
 15292  17EE                     __ptext60:	
 15293 ;; *************** function _ADC_GetConversionResult *****************
 15294 ;; Defined at:
 15295 ;;		line 109 in file "mcc_generated_files/adc.c"
 15296 ;; Parameters:    Size  Location     Type
 15297 ;;		None
 15298 ;; Auto vars:     Size  Location     Type
 15299 ;;		None
 15300 ;; Return value:  Size  Location     Type
 15301 ;;                  2    4[BANK0 ] unsigned int 
 15302 ;; Registers used:
 15303 ;;		wreg
 15304 ;; Tracked objects:
 15305 ;;		On entry : 0/0
 15306 ;;		On exit  : 0/0
 15307 ;;		Unchanged: 0/0
 15308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15309 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;Total ram usage:        2 bytes
 15314 ;; Hardware stack levels used:    1
 15315 ;; Hardware stack levels required when called:    7
 15316 ;; This function calls:
 15317 ;;		Nothing
 15318 ;; This function is called by:
 15319 ;;		_AD_Task
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323                           
 15324                           ;psect for function _ADC_GetConversionResult
 15325  17EE                     _ADC_GetConversionResult:	
 15326                           
 15327                           ;adc.c: 112: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15328                           
 15329                           ;incstack = 0
 15330                           ; Regs used in _ADC_GetConversionResult: [wreg]
 15331  17EE  0021               	movlb	1	; select bank1
 15332  17EF  081C               	movf	28,w	;volatile
 15333  17F0  0020               	movlb	0	; select bank0
 15334  17F1  00A5               	movwf	?_ADC_GetConversionResult+1
 15335  17F2  0021               	movlb	1	; select bank1
 15336  17F3  081B               	movf	27,w	;volatile
 15337  17F4  0020               	movlb	0	; select bank0
 15338  17F5  00A4               	movwf	?_ADC_GetConversionResult
 15339  17F6  0008               	return
 15340  17F7                     __end_of_ADC_GetConversionResult:	
 15341                           
 15342                           	psect	text61
 15343  0F8A                     __ptext61:	
 15344 ;; *************** function _COS_TmrHandler *****************
 15345 ;; Defined at:
 15346 ;;		line 92 in file "SourceFiles/COS/COS_Main.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;  tempbyte2       1    9[BANK0 ] unsigned char 
 15351 ;;  tempbyte1       1    8[BANK0 ] unsigned char 
 15352 ;; Return value:  Size  Location     Type
 15353 ;;                  1    wreg      void 
 15354 ;; Registers used:
 15355 ;;		wreg, status,2, status,0
 15356 ;; Tracked objects:
 15357 ;;		On entry : 0/0
 15358 ;;		On exit  : 0/0
 15359 ;;		Unchanged: 0/0
 15360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;Total ram usage:        6 bytes
 15366 ;; Hardware stack levels used:    1
 15367 ;; Hardware stack levels required when called:    7
 15368 ;; This function calls:
 15369 ;;		Nothing
 15370 ;; This function is called by:
 15371 ;;		_main
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           
 15376                           ;psect for function _COS_TmrHandler
 15377  0F8A                     _COS_TmrHandler:	
 15378                           
 15379                           ;COS_Main.c: 94: UINT_8 tempbyte1, tempbyte2;
 15380                           ;COS_Main.c: 95: tempbyte2 = TMR1H;
 15381                           
 15382                           ;incstack = 0
 15383                           ; Regs used in _COS_TmrHandler: [wreg+status,2+status,0]
 15384  0F8A  0020               	movlb	0	; select bank0
 15385  0F8B  0817               	movf	23,w	;volatile
 15386  0F8C  00A4               	movwf	??_COS_TmrHandler
 15387  0F8D  0824               	movf	??_COS_TmrHandler,w
 15388  0F8E  00A9               	movwf	COS_TmrHandler@tempbyte2
 15389                           
 15390                           ;COS_Main.c: 96: tempbyte1 = TMR1L;
 15391  0F8F  0816               	movf	22,w	;volatile
 15392  0F90  00A4               	movwf	??_COS_TmrHandler
 15393  0F91  0824               	movf	??_COS_TmrHandler,w
 15394  0F92  00A8               	movwf	COS_TmrHandler@tempbyte1
 15395                           
 15396                           ;COS_Main.c: 97: if (tempbyte2 != TMR1H)
 15397  0F93  0829               	movf	COS_TmrHandler@tempbyte2,w
 15398  0F94  0617               	xorwf	23,w	;volatile
 15399  0F95  1903               	skipnz
 15400  0F96  2F9F               	goto	l899
 15401                           
 15402                           ;COS_Main.c: 98: {
 15403                           ;COS_Main.c: 99: tempbyte2 = TMR1H;
 15404  0F97  0817               	movf	23,w	;volatile
 15405  0F98  00A4               	movwf	??_COS_TmrHandler
 15406  0F99  0824               	movf	??_COS_TmrHandler,w
 15407  0F9A  00A9               	movwf	COS_TmrHandler@tempbyte2
 15408                           
 15409                           ;COS_Main.c: 100: tempbyte1 = TMR1L;
 15410  0F9B  0816               	movf	22,w	;volatile
 15411  0F9C  00A4               	movwf	??_COS_TmrHandler
 15412  0F9D  0824               	movf	??_COS_TmrHandler,w
 15413  0F9E  00A8               	movwf	COS_TmrHandler@tempbyte1
 15414  0F9F                     l899:	
 15415                           
 15416                           ;COS_Main.c: 101: }
 15417                           ;COS_Main.c: 102: COS_tcnt_val = (UINT_16) (tempbyte2 << 8)&0xff00;
 15418  0F9F  0829               	movf	COS_TmrHandler@tempbyte2,w
 15419  0FA0  00A4               	movwf	??_COS_TmrHandler
 15420  0FA1  01A5               	clrf	??_COS_TmrHandler+1
 15421  0FA2  0824               	movf	??_COS_TmrHandler,w
 15422  0FA3  00A5               	movwf	??_COS_TmrHandler+1
 15423  0FA4  01A4               	clrf	??_COS_TmrHandler
 15424  0FA5  3000               	movlw	0
 15425  0FA6  0524               	andwf	??_COS_TmrHandler,w
 15426  0FA7  0021               	movlb	1	; select bank1
 15427  0FA8  00B2               	movwf	_COS_tcnt_val^(0+128)
 15428  0FA9  30FF               	movlw	255
 15429  0FAA  0020               	movlb	0	; select bank0
 15430  0FAB  0525               	andwf	??_COS_TmrHandler+1,w
 15431  0FAC  0021               	movlb	1	; select bank1
 15432  0FAD  00B3               	movwf	(_COS_tcnt_val+1)^(0+128)
 15433                           
 15434                           ;COS_Main.c: 103: COS_tcnt_val = COS_tcnt_val | (UINT_16) (tempbyte1 & 0x00ff);
 15435  0FAE  0832               	movf	_COS_tcnt_val^(0+128),w
 15436  0FAF  0020               	movlb	0	; select bank0
 15437  0FB0  0428               	iorwf	COS_TmrHandler@tempbyte1,w
 15438  0FB1  0021               	movlb	1	; select bank1
 15439  0FB2  00B2               	movwf	_COS_tcnt_val^(0+128)
 15440  0FB3  0833               	movf	(_COS_tcnt_val+1)^(0+128),w
 15441  0FB4  00B3               	movwf	(_COS_tcnt_val+1)^(0+128)
 15442                           
 15443                           ;COS_Main.c: 105: if (((UINT_16) ((UINT_16) COS_tcnt_val - (UINT_16) COS_tcnt_lst) >= (U
      +                          INT_16) 1000))
 15444  0FB5  0930               	comf	_COS_tcnt_lst^(0+128),w
 15445  0FB6  0020               	movlb	0	; select bank0
 15446  0FB7  00A4               	movwf	??_COS_TmrHandler
 15447  0FB8  0021               	movlb	1	; select bank1
 15448  0FB9  0931               	comf	(_COS_tcnt_lst+1)^(0+128),w
 15449  0FBA  0020               	movlb	0	; select bank0
 15450  0FBB  00A5               	movwf	??_COS_TmrHandler+1
 15451  0FBC  0AA4               	incf	??_COS_TmrHandler,f
 15452  0FBD  1903               	skipnz
 15453  0FBE  0AA5               	incf	??_COS_TmrHandler+1,f
 15454  0FBF  0021               	movlb	1	; select bank1
 15455  0FC0  0832               	movf	_COS_tcnt_val^(0+128),w
 15456  0FC1  0020               	movlb	0	; select bank0
 15457  0FC2  0724               	addwf	??_COS_TmrHandler,w
 15458  0FC3  00A6               	movwf	??_COS_TmrHandler+2
 15459  0FC4  0021               	movlb	1	; select bank1
 15460  0FC5  0833               	movf	(_COS_tcnt_val+1)^(0+128),w
 15461  0FC6  0020               	movlb	0	; select bank0
 15462  0FC7  3D25               	addwfc	??_COS_TmrHandler+1,w
 15463  0FC8  00A7               	movwf	??_COS_TmrHandler+3
 15464  0FC9  3003               	movlw	3
 15465  0FCA  0227               	subwf	??_COS_TmrHandler+3,w
 15466  0FCB  30E8               	movlw	232
 15467  0FCC  1903               	skipnz
 15468  0FCD  0226               	subwf	??_COS_TmrHandler+2,w
 15469  0FCE  1C03               	skipc
 15470  0FCF  0008               	return
 15471                           
 15472                           ;COS_Main.c: 106: {
 15473                           ;COS_Main.c: 107: COS_tcnt_lst = COS_tcnt_lst + 1000;
 15474  0FD0  0021               	movlb	1	; select bank1
 15475  0FD1  0830               	movf	_COS_tcnt_lst^(0+128),w
 15476  0FD2  3EE8               	addlw	232
 15477  0FD3  00B0               	movwf	_COS_tcnt_lst^(0+128)
 15478  0FD4  3003               	movlw	3
 15479  0FD5  3D31               	addwfc	(_COS_tcnt_lst+1)^(0+128),w
 15480  0FD6  00B1               	movwf	(_COS_tcnt_lst+1)^(0+128)
 15481                           
 15482                           ;COS_Main.c: 108: COS_ms_tmr++;
 15483  0FD7  3001               	movlw	1
 15484  0FD8  07B6               	addwf	_COS_ms_tmr^(0+128),f
 15485  0FD9  3000               	movlw	0
 15486  0FDA  3DB7               	addwfc	(_COS_ms_tmr+1)^(0+128),f
 15487                           
 15488                           ;COS_Main.c: 110: if (COS_ms_tmr >= 1000)
 15489  0FDB  3003               	movlw	3
 15490  0FDC  0237               	subwf	(_COS_ms_tmr+1)^(0+128),w
 15491  0FDD  30E8               	movlw	232
 15492  0FDE  1903               	skipnz
 15493  0FDF  0236               	subwf	_COS_ms_tmr^(0+128),w
 15494  0FE0  1C03               	skipc
 15495  0FE1  2FE9               	goto	l4773
 15496                           
 15497                           ;COS_Main.c: 111: {
 15498                           ;COS_Main.c: 112: COS_ms_tmr = 0;
 15499  0FE2  01B6               	clrf	_COS_ms_tmr^(0+128)
 15500  0FE3  01B7               	clrf	(_COS_ms_tmr+1)^(0+128)
 15501                           
 15502                           ;COS_Main.c: 113: COS_sec_tmr++;
 15503  0FE4  3001               	movlw	1
 15504  0FE5  0022               	movlb	2	; select bank2
 15505  0FE6  07DE               	addwf	_COS_sec_tmr^(0+256),f	;volatile
 15506  0FE7  3000               	movlw	0
 15507  0FE8  3DDF               	addwfc	(_COS_sec_tmr+1)^(0+256),f	;volatile
 15508  0FE9                     l4773:	
 15509                           
 15510                           ;COS_Main.c: 114: }
 15511                           ;COS_Main.c: 115: COS_tsk_tmr++;
 15512  0FE9  3001               	movlw	1
 15513  0FEA  0021               	movlb	1	; select bank1
 15514  0FEB  07B4               	addwf	_COS_tsk_tmr^(0+128),f
 15515  0FEC  3000               	movlw	0
 15516  0FED  3DB5               	addwfc	(_COS_tsk_tmr+1)^(0+128),f
 15517                           
 15518                           ;COS_Main.c: 116: if ((COS_tsk_tmr >= 10) && (!COS_tsk_ena))
 15519  0FEE  3000               	movlw	0
 15520  0FEF  0235               	subwf	(_COS_tsk_tmr+1)^(0+128),w
 15521  0FF0  300A               	movlw	10
 15522  0FF1  1903               	skipnz
 15523  0FF2  0234               	subwf	_COS_tsk_tmr^(0+128),w
 15524  0FF3  1C03               	skipc
 15525  0FF4  0008               	return
 15526  0FF5  0022               	movlb	2	; select bank2
 15527  0FF6  086E               	movf	_COS_tsk_ena^(0+256),w
 15528  0FF7  1D03               	btfss	3,2
 15529  0FF8  0008               	return
 15530                           
 15531                           ;COS_Main.c: 117: {
 15532                           ;COS_Main.c: 118: COS_tsk_tmr = 0;
 15533  0FF9  0021               	movlb	1	; select bank1
 15534  0FFA  01B4               	clrf	_COS_tsk_tmr^(0+128)
 15535  0FFB  01B5               	clrf	(_COS_tsk_tmr+1)^(0+128)
 15536                           
 15537                           ;COS_Main.c: 119: COS_tsk_ena = 1;
 15538  0FFC  0022               	movlb	2	; select bank2
 15539  0FFD  01EE               	clrf	_COS_tsk_ena^(0+256)
 15540  0FFE  0AEE               	incf	_COS_tsk_ena^(0+256),f
 15541  0FFF  0008               	return
 15542  1000                     __end_of_COS_TmrHandler:	
 15543                           
 15544                           	psect	text62
 15545  0D5B                     __ptext62:	
 15546 ;; *************** function _COS_Init *****************
 15547 ;; Defined at:
 15548 ;;		line 32 in file "SourceFiles/COS/COS_Main.c"
 15549 ;; Parameters:    Size  Location     Type
 15550 ;;		None
 15551 ;; Auto vars:     Size  Location     Type
 15552 ;;  tempbyte2       1    8[BANK0 ] unsigned char 
 15553 ;;  tempbyte1       1    7[BANK0 ] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;                  1    wreg      void 
 15556 ;; Registers used:
 15557 ;;		wreg, status,2, status,0, pclath, cstack
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;Total ram usage:        5 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    8
 15570 ;; This function calls:
 15571 ;;		_COS_TimerSetup
 15572 ;; This function is called by:
 15573 ;;		_main
 15574 ;; This function uses a non-reentrant model
 15575 ;;
 15576                           
 15577                           
 15578                           ;psect for function _COS_Init
 15579  0D5B                     _COS_Init:	
 15580                           
 15581                           ;COS_Main.c: 34: UINT_8 tempbyte1, tempbyte2;
 15582                           ;COS_Main.c: 36: COS_TimerSetup();
 15583                           
 15584                           ;incstack = 0
 15585                           ; Regs used in _COS_Init: [wreg+status,2+status,0+pclath+cstack]
 15586  0D5B  3197  27C6  318D   	fcall	_COS_TimerSetup
 15587                           
 15588                           ;COS_Main.c: 41: COS_tsk_ind = 0;
 15589  0D5E  0021               	movlb	1	; select bank1
 15590  0D5F  01CE               	clrf	_COS_tsk_ind^(0+128)
 15591                           
 15592                           ;COS_Main.c: 42: COS_tsk_msk = 0x80;
 15593  0D60  3080               	movlw	128
 15594  0D61  0020               	movlb	0	; select bank0
 15595  0D62  00A4               	movwf	??_COS_Init
 15596  0D63  0824               	movf	??_COS_Init,w
 15597  0D64  00E9               	movwf	_COS_tsk_msk
 15598                           
 15599                           ;COS_Main.c: 43: COS_tsk_ena = 1;
 15600  0D65  0022               	movlb	2	; select bank2
 15601  0D66  01EE               	clrf	_COS_tsk_ena^(0+256)
 15602  0D67  0AEE               	incf	_COS_tsk_ena^(0+256),f
 15603                           
 15604                           ;COS_Main.c: 44: COS_ms_tmr = 0;
 15605  0D68  0021               	movlb	1	; select bank1
 15606  0D69  01B6               	clrf	_COS_ms_tmr^(0+128)
 15607  0D6A  01B7               	clrf	(_COS_ms_tmr+1)^(0+128)
 15608                           
 15609                           ;COS_Main.c: 45: COS_sec_tmr = 0;
 15610  0D6B  0022               	movlb	2	; select bank2
 15611  0D6C  01DE               	clrf	_COS_sec_tmr^(0+256)	;volatile
 15612  0D6D  01DF               	clrf	(_COS_sec_tmr+1)^(0+256)	;volatile
 15613                           
 15614                           ;COS_Main.c: 46: COS_tsk_tmr = 0;
 15615  0D6E  0021               	movlb	1	; select bank1
 15616  0D6F  01B4               	clrf	_COS_tsk_tmr^(0+128)
 15617  0D70  01B5               	clrf	(_COS_tsk_tmr+1)^(0+128)
 15618                           
 15619                           ;COS_Main.c: 48: tempbyte2 = TMR1H;
 15620  0D71  0020               	movlb	0	; select bank0
 15621  0D72  0817               	movf	23,w	;volatile
 15622  0D73  00A4               	movwf	??_COS_Init
 15623  0D74  0824               	movf	??_COS_Init,w
 15624  0D75  00A8               	movwf	COS_Init@tempbyte2
 15625                           
 15626                           ;COS_Main.c: 49: tempbyte1 = TMR1L;
 15627  0D76  0816               	movf	22,w	;volatile
 15628  0D77  00A4               	movwf	??_COS_Init
 15629  0D78  0824               	movf	??_COS_Init,w
 15630  0D79  00A7               	movwf	COS_Init@tempbyte1
 15631                           
 15632                           ;COS_Main.c: 50: if (tempbyte2 != TMR1H)
 15633  0D7A  0828               	movf	COS_Init@tempbyte2,w
 15634  0D7B  0617               	xorwf	23,w	;volatile
 15635  0D7C  1903               	skipnz
 15636  0D7D  2D86               	goto	l892
 15637                           
 15638                           ;COS_Main.c: 51: {
 15639                           ;COS_Main.c: 52: tempbyte2 = TMR1H;
 15640  0D7E  0817               	movf	23,w	;volatile
 15641  0D7F  00A4               	movwf	??_COS_Init
 15642  0D80  0824               	movf	??_COS_Init,w
 15643  0D81  00A8               	movwf	COS_Init@tempbyte2
 15644                           
 15645                           ;COS_Main.c: 53: tempbyte1 = TMR1L;
 15646  0D82  0816               	movf	22,w	;volatile
 15647  0D83  00A4               	movwf	??_COS_Init
 15648  0D84  0824               	movf	??_COS_Init,w
 15649  0D85  00A7               	movwf	COS_Init@tempbyte1
 15650  0D86                     l892:	
 15651                           
 15652                           ;COS_Main.c: 54: }
 15653                           ;COS_Main.c: 55: COS_tcnt_val = ((UINT_16)tempbyte2 << 8)&0xff00;
 15654  0D86  0828               	movf	COS_Init@tempbyte2,w
 15655  0D87  00A4               	movwf	??_COS_Init
 15656  0D88  01A5               	clrf	??_COS_Init+1
 15657  0D89  0824               	movf	??_COS_Init,w
 15658  0D8A  00A5               	movwf	??_COS_Init+1
 15659  0D8B  01A4               	clrf	??_COS_Init
 15660  0D8C  3000               	movlw	0
 15661  0D8D  0524               	andwf	??_COS_Init,w
 15662  0D8E  0021               	movlb	1	; select bank1
 15663  0D8F  00B2               	movwf	_COS_tcnt_val^(0+128)
 15664  0D90  30FF               	movlw	255
 15665  0D91  0020               	movlb	0	; select bank0
 15666  0D92  0525               	andwf	??_COS_Init+1,w
 15667  0D93  0021               	movlb	1	; select bank1
 15668  0D94  00B3               	movwf	(_COS_tcnt_val+1)^(0+128)
 15669                           
 15670                           ;COS_Main.c: 56: COS_tcnt_val = COS_tcnt_val | ((UINT_16)tempbyte1 & 0x00ff);
 15671  0D95  0832               	movf	_COS_tcnt_val^(0+128),w
 15672  0D96  0020               	movlb	0	; select bank0
 15673  0D97  0427               	iorwf	COS_Init@tempbyte1,w
 15674  0D98  0021               	movlb	1	; select bank1
 15675  0D99  00B2               	movwf	_COS_tcnt_val^(0+128)
 15676  0D9A  0833               	movf	(_COS_tcnt_val+1)^(0+128),w
 15677  0D9B  00B3               	movwf	(_COS_tcnt_val+1)^(0+128)
 15678                           
 15679                           ;COS_Main.c: 57: COS_tcnt_lst = COS_tcnt_val;
 15680  0D9C  0833               	movf	(_COS_tcnt_val+1)^(0+128),w
 15681  0D9D  00B1               	movwf	(_COS_tcnt_lst+1)^(0+128)
 15682  0D9E  0832               	movf	_COS_tcnt_val^(0+128),w
 15683  0D9F  00B0               	movwf	_COS_tcnt_lst^(0+128)
 15684  0DA0  0008               	return
 15685  0DA1                     __end_of_COS_Init:	
 15686                           
 15687                           	psect	text63
 15688  17C6                     __ptext63:	
 15689 ;; *************** function _COS_TimerSetup *****************
 15690 ;; Defined at:
 15691 ;;		line 68 in file "SourceFiles/COS/COS_Main.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;		None
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;		None
 15696 ;; Return value:  Size  Location     Type
 15697 ;;                  1    wreg      void 
 15698 ;; Registers used:
 15699 ;;		wreg, status,2
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;Total ram usage:        0 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; Hardware stack levels required when called:    7
 15712 ;; This function calls:
 15713 ;;		Nothing
 15714 ;; This function is called by:
 15715 ;;		_COS_Init
 15716 ;; This function uses a non-reentrant model
 15717 ;;
 15718                           
 15719                           
 15720                           ;psect for function _COS_TimerSetup
 15721  17C6                     _COS_TimerSetup:	
 15722                           
 15723                           ;COS_Main.c: 72: TMR1H = 0;
 15724                           
 15725                           ;incstack = 0
 15726                           ; Regs used in _COS_TimerSetup: [wreg+status,2]
 15727  17C6  0020               	movlb	0	; select bank0
 15728  17C7  0197               	clrf	23	;volatile
 15729                           
 15730                           ;COS_Main.c: 73: TMR1L = 0;
 15731  17C8  0196               	clrf	22	;volatile
 15732                           
 15733                           ;COS_Main.c: 78: T1CON = 0b00100001;
 15734  17C9  3021               	movlw	33
 15735  17CA  0098               	movwf	24	;volatile
 15736  17CB  0008               	return
 15737  17CC                     __end_of_COS_TimerSetup:	
 15738                           
 15739                           	psect	intentry
 15740  0004                     __pintentry:	
 15741 ;; *************** function _INTERRUPT_InterruptManager *****************
 15742 ;; Defined at:
 15743 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;		None
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;		None
 15748 ;; Return value:  Size  Location     Type
 15749 ;;                  1    wreg      void 
 15750 ;; Registers used:
 15751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15752 ;; Tracked objects:
 15753 ;;		On entry : 0/0
 15754 ;;		On exit  : 0/0
 15755 ;;		Unchanged: 0/0
 15756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;Total ram usage:        1 bytes
 15762 ;; Hardware stack levels used:    1
 15763 ;; Hardware stack levels required when called:    6
 15764 ;; This function calls:
 15765 ;;		Absolute function
 15766 ;;		_EUSART_Receive_ISR
 15767 ;;		_EUSART_Transmit_ISR
 15768 ;;		_I2C_MasterIsr
 15769 ;;		_TMR2_ISR
 15770 ;; This function is called by:
 15771 ;;		Interrupt level 1
 15772 ;; This function uses a non-reentrant model
 15773 ;;
 15774                           
 15775  0004                     _INTERRUPT_InterruptManager:	
 15776                           
 15777                           ;incstack = 0
 15778  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15779                           
 15780                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15781  0005  3180               	pagesel	$
 15782  0006  0020               	movlb	0	; select bank0
 15783  0007  087F               	movf	127,w
 15784  0008  00A3               	movwf	??_INTERRUPT_InterruptManager
 15785                           
 15786                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 15787  0009  1F0B               	btfss	11,6	;volatile
 15788  000A  2846               	goto	i1l478
 15789                           
 15790                           ;interrupt_manager.c: 56: {
 15791                           ;interrupt_manager.c: 57: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 15792  000B  0021               	movlb	1	; select bank1
 15793  000C  1E10               	btfss	16,4	;volatile
 15794  000D  2818               	goto	i1l467
 15795  000E  0020               	movlb	0	; select bank0
 15796  000F  1E10               	btfss	16,4	;volatile
 15797  0010  2818               	goto	i1l467
 15798                           
 15799                           ;interrupt_manager.c: 58: {
 15800                           ;interrupt_manager.c: 59: EUSART_TxDefaultInterruptHandler();
 15801  0011  0022               	movlb	2	; select bank2
 15802  0012  086D               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 15803  0013  008A               	movwf	10
 15804  0014  086C               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 15805  0015  000A               	callw
 15806  0016  3180               	pagesel	$
 15807                           
 15808                           ;interrupt_manager.c: 60: }
 15809  0017  2846               	goto	i1l478
 15810  0018                     i1l467:	
 15811                           
 15812                           ;interrupt_manager.c: 61: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 15813  0018  0021               	movlb	1	; select bank1
 15814  0019  1E90               	btfss	16,5	;volatile
 15815  001A  2824               	goto	i1l469
 15816  001B  0020               	movlb	0	; select bank0
 15817  001C  1E90               	btfss	16,5	;volatile
 15818  001D  2824               	goto	i1l469
 15819                           
 15820                           ;interrupt_manager.c: 62: {
 15821                           ;interrupt_manager.c: 63: EUSART_RxDefaultInterruptHandler();
 15822  001E  0868               	movf	_EUSART_RxDefaultInterruptHandler+1,w
 15823  001F  008A               	movwf	10
 15824  0020  0867               	movf	_EUSART_RxDefaultInterruptHandler,w
 15825  0021  000A               	callw
 15826  0022  3180               	pagesel	$
 15827                           
 15828                           ;interrupt_manager.c: 64: }
 15829  0023  2846               	goto	i1l478
 15830  0024                     i1l469:	
 15831                           
 15832                           ;interrupt_manager.c: 65: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 15833  0024  0021               	movlb	1	; select bank1
 15834  0025  1D91               	btfss	17,3	;volatile
 15835  0026  2831               	goto	i1l471
 15836  0027  0020               	movlb	0	; select bank0
 15837  0028  1D91               	btfss	17,3	;volatile
 15838  0029  2831               	goto	i1l471
 15839                           
 15840                           ;interrupt_manager.c: 66: {
 15841                           ;interrupt_manager.c: 67: MSSP_InterruptHandler();
 15842  002A  0021               	movlb	1	; select bank1
 15843  002B  083B               	movf	(_MSSP_InterruptHandler+1)^(0+128),w
 15844  002C  008A               	movwf	10
 15845  002D  083A               	movf	_MSSP_InterruptHandler^(0+128),w
 15846  002E  000A               	callw
 15847  002F  3180               	pagesel	$
 15848                           
 15849                           ;interrupt_manager.c: 68: }
 15850  0030  2846               	goto	i1l478
 15851  0031                     i1l471:	
 15852                           
 15853                           ;interrupt_manager.c: 69: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 15854  0031  0021               	movlb	1	; select bank1
 15855  0032  1D90               	btfss	16,3	;volatile
 15856  0033  283E               	goto	i1l473
 15857  0034  0020               	movlb	0	; select bank0
 15858  0035  1D90               	btfss	16,3	;volatile
 15859  0036  283E               	goto	i1l473
 15860                           
 15861                           ;interrupt_manager.c: 70: {
 15862                           ;interrupt_manager.c: 71: MSSP_InterruptHandler();
 15863  0037  0021               	movlb	1	; select bank1
 15864  0038  083B               	movf	(_MSSP_InterruptHandler+1)^(0+128),w
 15865  0039  008A               	movwf	10
 15866  003A  083A               	movf	_MSSP_InterruptHandler^(0+128),w
 15867  003B  000A               	callw
 15868  003C  3180               	pagesel	$
 15869                           
 15870                           ;interrupt_manager.c: 72: }
 15871  003D  2846               	goto	i1l478
 15872  003E                     i1l473:	
 15873                           
 15874                           ;interrupt_manager.c: 73: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 15875  003E  0021               	movlb	1	; select bank1
 15876  003F  1C90               	btfss	16,1	;volatile
 15877  0040  2846               	goto	i1l478
 15878  0041  0020               	movlb	0	; select bank0
 15879  0042  1C90               	btfss	16,1	;volatile
 15880  0043  2846               	goto	i1l478
 15881                           
 15882                           ;interrupt_manager.c: 74: {
 15883                           ;interrupt_manager.c: 75: TMR2_ISR();
 15884  0044  3188  20D3         	fcall	_TMR2_ISR
 15885  0046                     i1l478:	
 15886                           ;interrupt_manager.c: 82: else
 15887                           ;interrupt_manager.c: 83: {
 15888                           
 15889                           ;interrupt_manager.c: 80: }
 15890                           ;interrupt_manager.c: 81: }
 15891                           
 15892                           ;interrupt_manager.c: 77: else
 15893                           ;interrupt_manager.c: 78: {
 15894                           
 15895                           ;interrupt_manager.c: 76: }
 15896                           
 15897  0046  0020               	movlb	0	; select bank0
 15898  0047  0823               	movf	??_INTERRUPT_InterruptManager,w
 15899  0048  00FF               	movwf	127
 15900  0049  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15901  004A  0009               	retfie
 15902  004B                     __end_of_INTERRUPT_InterruptManager:	
 15903                           
 15904                           	psect	text65
 15905  08D3                     __ptext65:	
 15906 ;; *************** function _TMR2_ISR *****************
 15907 ;; Defined at:
 15908 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;		None
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;		None
 15913 ;; Return value:  Size  Location     Type
 15914 ;;                  1    wreg      void 
 15915 ;; Registers used:
 15916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;Total ram usage:        0 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    3
 15929 ;; This function calls:
 15930 ;;		_TMR2_CallBack
 15931 ;; This function is called by:
 15932 ;;		_INTERRUPT_InterruptManager
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936                           
 15937                           ;psect for function _TMR2_ISR
 15938  08D3                     _TMR2_ISR:	
 15939                           
 15940                           ;tmr2.c: 167: static volatile unsigned int CountCallBack = 0;
 15941                           ;tmr2.c: 170: PIR1bits.TMR2IF = 0;
 15942                           
 15943                           ;incstack = 0
 15944                           ; Regs used in _TMR2_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15945  08D3  0020               	movlb	0	; select bank0
 15946  08D4  1090               	bcf	16,1	;volatile
 15947                           
 15948                           ;tmr2.c: 173: if (++CountCallBack >= 5)
 15949  08D5  3001               	movlw	1
 15950  08D6  0021               	movlb	1	; select bank1
 15951  08D7  07B8               	addwf	TMR2_ISR@CountCallBack^(0+128),f	;volatile
 15952  08D8  3000               	movlw	0
 15953  08D9  3DB9               	addwfc	(TMR2_ISR@CountCallBack+1)^(0+128),f	;volatile
 15954  08DA  3000               	movlw	0
 15955  08DB  0239               	subwf	(TMR2_ISR@CountCallBack+1)^(0+128),w	;volatile
 15956  08DC  3005               	movlw	5
 15957  08DD  1903               	skipnz
 15958  08DE  0238               	subwf	TMR2_ISR@CountCallBack^(0+128),w	;volatile
 15959  08DF  1C03               	skipc
 15960  08E0  0008               	return
 15961                           
 15962                           ;tmr2.c: 174: {
 15963                           ;tmr2.c: 176: TMR2_CallBack();
 15964  08E1  3188  2044         	fcall	_TMR2_CallBack
 15965                           
 15966                           ;tmr2.c: 179: CountCallBack = 0;
 15967  08E3  0021               	movlb	1	; select bank1
 15968  08E4  01B8               	clrf	TMR2_ISR@CountCallBack^(0+128)	;volatile
 15969  08E5  01B9               	clrf	(TMR2_ISR@CountCallBack+1)^(0+128)	;volatile
 15970  08E6  0008               	return
 15971  08E7                     __end_of_TMR2_ISR:	
 15972                           
 15973                           	psect	text66
 15974  0844                     __ptext66:	
 15975 ;; *************** function _TMR2_CallBack *****************
 15976 ;; Defined at:
 15977 ;;		line 183 in file "mcc_generated_files/tmr2.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;		None
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;		None
 15982 ;; Return value:  Size  Location     Type
 15983 ;;                  1    wreg      void 
 15984 ;; Registers used:
 15985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15986 ;; Tracked objects:
 15987 ;;		On entry : 0/0
 15988 ;;		On exit  : 0/0
 15989 ;;		Unchanged: 0/0
 15990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;Total ram usage:        0 bytes
 15996 ;; Hardware stack levels used:    1
 15997 ;; Hardware stack levels required when called:    2
 15998 ;; This function calls:
 15999 ;;		Absolute function
 16000 ;;		_Led2_PWM
 16001 ;;		_TMR2_DefaultInterruptHandler
 16002 ;; This function is called by:
 16003 ;;		_TMR2_ISR
 16004 ;; This function uses a non-reentrant model
 16005 ;;
 16006                           
 16007                           
 16008                           ;psect for function _TMR2_CallBack
 16009  0844                     _TMR2_CallBack:	
 16010                           
 16011                           ;tmr2.c: 187: if(TMR2_InterruptHandler)
 16012                           
 16013                           ;incstack = 0
 16014                           ; Regs used in _TMR2_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16015  0844  0022               	movlb	2	; select bank2
 16016  0845  086A               	movf	_TMR2_InterruptHandler^(0+256),w
 16017  0846  046B               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 16018  0847  1903               	btfsc	3,2
 16019  0848  0008               	return
 16020                           
 16021                           ;tmr2.c: 188: {
 16022                           ;tmr2.c: 189: TMR2_InterruptHandler();
 16023  0849  086B               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 16024  084A  008A               	movwf	10
 16025  084B  086A               	movf	_TMR2_InterruptHandler^(0+256),w
 16026  084C  000A               	callw
 16027  084D  3188               	pagesel	$
 16028  084E  0008               	return
 16029  084F                     __end_of_TMR2_CallBack:	
 16030                           
 16031                           	psect	text67
 16032  0EC8                     __ptext67:	
 16033 ;; *************** function _Led2_PWM *****************
 16034 ;; Defined at:
 16035 ;;		line 30 in file "SourceFiles/SunSensor/Led.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;		None
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;		None
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  1    wreg      void 
 16042 ;; Registers used:
 16043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        1 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    1
 16056 ;; This function calls:
 16057 ;;		_PWM3_LoadDutyValue
 16058 ;; This function is called by:
 16059 ;;		_main
 16060 ;;		_TMR2_CallBack
 16061 ;; This function uses a non-reentrant model
 16062 ;;
 16063                           
 16064                           
 16065                           ;psect for function _Led2_PWM
 16066  0EC8                     _Led2_PWM:	
 16067                           
 16068                           ;Led.c: 32: switch (BreathState)
 16069                           
 16070                           ;incstack = 0
 16071                           ; Regs used in _Led2_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16072  0EC8  2F12               	goto	i1l5737
 16073  0EC9                     i1l5709:	
 16074                           ;Led.c: 33: {
 16075                           ;Led.c: 34: case 1:
 16076                           
 16077                           
 16078                           ;Led.c: 35: counter++;
 16079  0EC9  3001               	movlw	1
 16080  0ECA  0021               	movlb	1	; select bank1
 16081  0ECB  07AE               	addwf	_counter^(0+128),f
 16082  0ECC  3000               	movlw	0
 16083  0ECD  3DAF               	addwfc	(_counter+1)^(0+128),f
 16084                           
 16085                           ;Led.c: 36: if(counter > 100)
 16086  0ECE  3000               	movlw	0
 16087  0ECF  022F               	subwf	(_counter+1)^(0+128),w
 16088  0ED0  3065               	movlw	101
 16089  0ED1  1903               	skipnz
 16090  0ED2  022E               	subwf	_counter^(0+128),w
 16091  0ED3  1C03               	skipc
 16092  0ED4  2EDA               	goto	i1l5713
 16093                           
 16094                           ;Led.c: 37: {
 16095                           ;Led.c: 38: BreathState = 2;
 16096  0ED5  3002               	movlw	2
 16097  0ED6  00F4               	movwf	??_Led2_PWM
 16098  0ED7  0874               	movf	??_Led2_PWM,w
 16099  0ED8  00EC               	movwf	_BreathState^(0+128)
 16100                           
 16101                           ;Led.c: 39: }
 16102  0ED9  2F1E               	goto	i1l5739
 16103  0EDA                     i1l5713:	
 16104                           
 16105                           ;Led.c: 40: else
 16106                           ;Led.c: 41: {
 16107                           ;Led.c: 42: dutyValue += 8;
 16108  0EDA  3008               	movlw	8
 16109  0EDB  07AC               	addwf	_dutyValue^(0+128),f
 16110  0EDC  3000               	movlw	0
 16111  0EDD  3DAD               	addwfc	(_dutyValue+1)^(0+128),f
 16112                           
 16113                           ;Led.c: 43: }
 16114                           ;Led.c: 44: break;
 16115  0EDE  2F1E               	goto	i1l5739
 16116  0EDF                     i1l5715:	
 16117                           ;Led.c: 45: case 2:
 16118                           
 16119                           
 16120                           ;Led.c: 46: counter++;
 16121  0EDF  3001               	movlw	1
 16122  0EE0  07AE               	addwf	_counter^(0+128),f
 16123  0EE1  3000               	movlw	0
 16124  0EE2  3DAF               	addwfc	(_counter+1)^(0+128),f
 16125                           
 16126                           ;Led.c: 47: if (counter >= (100 + 200))
 16127  0EE3  3001               	movlw	1
 16128  0EE4  022F               	subwf	(_counter+1)^(0+128),w
 16129  0EE5  302C               	movlw	44
 16130  0EE6  1903               	skipnz
 16131  0EE7  022E               	subwf	_counter^(0+128),w
 16132  0EE8  1C03               	skipc
 16133  0EE9  2EEF               	goto	i1l5721
 16134                           
 16135                           ;Led.c: 48: {
 16136                           ;Led.c: 49: BreathState = 3;
 16137  0EEA  3003               	movlw	3
 16138  0EEB  00F4               	movwf	??_Led2_PWM
 16139  0EEC  0874               	movf	??_Led2_PWM,w
 16140  0EED  00EC               	movwf	_BreathState^(0+128)
 16141  0EEE  2EFF               	goto	i1l5727
 16142  0EEF                     i1l5721:	
 16143                           ;Led.c: 53: }
 16144                           
 16145                           ;Led.c: 51: dutyValue = 0;
 16146                           
 16147                           
 16148                           ;Led.c: 54: else
 16149                           ;Led.c: 55: {
 16150                           ;Led.c: 56: if (dutyValue > 0)
 16151  0EEF  082C               	movf	_dutyValue^(0+128),w
 16152  0EF0  042D               	iorwf	(_dutyValue+1)^(0+128),w
 16153  0EF1  1903               	btfsc	3,2
 16154  0EF2  2F1E               	goto	i1l5739
 16155                           
 16156                           ;Led.c: 57: {
 16157                           ;Led.c: 58: if (dutyValue > 4)
 16158  0EF3  3000               	movlw	0
 16159  0EF4  022D               	subwf	(_dutyValue+1)^(0+128),w
 16160  0EF5  3005               	movlw	5
 16161  0EF6  1903               	skipnz
 16162  0EF7  022C               	subwf	_dutyValue^(0+128),w
 16163  0EF8  1C03               	skipc
 16164  0EF9  2EFF               	goto	i1l5727
 16165                           
 16166                           ;Led.c: 59: {
 16167                           ;Led.c: 60: dutyValue-=4;
 16168  0EFA  3004               	movlw	4
 16169  0EFB  02AC               	subwf	_dutyValue^(0+128),f
 16170  0EFC  3000               	movlw	0
 16171  0EFD  3BAD               	subwfb	(_dutyValue+1)^(0+128),f
 16172                           
 16173                           ;Led.c: 61: }
 16174  0EFE  2F1E               	goto	i1l5739
 16175  0EFF                     i1l5727:	
 16176                           
 16177                           ;Led.c: 62: else
 16178                           ;Led.c: 63: {
 16179                           ;Led.c: 64: dutyValue = 0;
 16180  0EFF  01AC               	clrf	_dutyValue^(0+128)
 16181  0F00  01AD               	clrf	(_dutyValue+1)^(0+128)
 16182                           
 16183                           ;Led.c: 65: }
 16184                           ;Led.c: 67: }
 16185                           ;Led.c: 68: }
 16186                           ;Led.c: 69: break;
 16187  0F01  2F1E               	goto	i1l5739
 16188  0F02                     i1l5729:	
 16189                           ;Led.c: 70: case 3:
 16190                           
 16191                           
 16192                           ;Led.c: 71: counter++;
 16193  0F02  3001               	movlw	1
 16194  0F03  07AE               	addwf	_counter^(0+128),f
 16195  0F04  3000               	movlw	0
 16196  0F05  3DAF               	addwfc	(_counter+1)^(0+128),f
 16197                           
 16198                           ;Led.c: 72: if (counter > (100 + 200 + 100))
 16199  0F06  3001               	movlw	1
 16200  0F07  022F               	subwf	(_counter+1)^(0+128),w
 16201  0F08  3091               	movlw	145
 16202  0F09  1903               	skipnz
 16203  0F0A  022E               	subwf	_counter^(0+128),w
 16204  0F0B  1C03               	skipc
 16205  0F0C  2F1E               	goto	i1l5739
 16206                           
 16207                           ;Led.c: 73: {
 16208                           ;Led.c: 74: counter = 0;
 16209  0F0D  01AE               	clrf	_counter^(0+128)
 16210  0F0E  01AF               	clrf	(_counter+1)^(0+128)
 16211                           
 16212                           ;Led.c: 75: BreathState = 1;
 16213  0F0F  01EC               	clrf	_BreathState^(0+128)
 16214  0F10  0AEC               	incf	_BreathState^(0+128),f
 16215                           
 16216                           ;Led.c: 80: }
 16217                           
 16218                           ;Led.c: 79: break;
 16219                           
 16220                           ;Led.c: 78: default:
 16221                           
 16222                           ;Led.c: 76: }
 16223                           ;Led.c: 77: break;
 16224  0F11  2F1E               	goto	i1l5739
 16225  0F12                     i1l5737:	
 16226  0F12  0021               	movlb	1	; select bank1
 16227  0F13  086C               	movf	_BreathState^(0+128),w
 16228                           
 16229                           ; Switch size 1, requested type "space"
 16230                           ; Number of cases is 3, Range of values is 1 to 3
 16231                           ; switch strategies available:
 16232                           ; Name         Instructions Cycles
 16233                           ; simple_byte           10     6 (average)
 16234                           ; direct_byte           15     9 (fixed)
 16235                           ; jumptable            263     9 (fixed)
 16236                           ;	Chosen strategy is simple_byte
 16237  0F14  3A01               	xorlw	1	; case 1
 16238  0F15  1903               	skipnz
 16239  0F16  2EC9               	goto	i1l5709
 16240  0F17  3A03               	xorlw	3	; case 2
 16241  0F18  1903               	skipnz
 16242  0F19  2EDF               	goto	i1l5715
 16243  0F1A  3A01               	xorlw	1	; case 3
 16244  0F1B  1903               	skipnz
 16245  0F1C  2F02               	goto	i1l5729
 16246  0F1D  2F1E               	goto	i1l5739
 16247  0F1E                     i1l5739:	
 16248                           
 16249                           ;Led.c: 82: PWM3_LoadDutyValue(dutyValue);
 16250  0F1E  082D               	movf	(_dutyValue+1)^(0+128),w
 16251  0F1F  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 16252  0F20  082C               	movf	_dutyValue^(0+128),w
 16253  0F21  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 16254  0F22  3189  218F         	fcall	_PWM3_LoadDutyValue
 16255  0F24  0008               	return
 16256  0F25                     __end_of_Led2_PWM:	
 16257                           
 16258                           	psect	text68
 16259  07FF                     __ptext68:	
 16260 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 16261 ;; Defined at:
 16262 ;;		line 197 in file "mcc_generated_files/tmr2.c"
 16263 ;; Parameters:    Size  Location     Type
 16264 ;;		None
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;		None
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  1    wreg      void 
 16269 ;; Registers used:
 16270 ;;		None
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:        0 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; This function calls:
 16283 ;;		Nothing
 16284 ;; This function is called by:
 16285 ;;		_TMR2_Initialize
 16286 ;;		_TMR2_CallBack
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           
 16291                           ;psect for function _TMR2_DefaultInterruptHandler
 16292  07FF                     _TMR2_DefaultInterruptHandler:	
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 16296  07FF  0008               	return
 16297  0800                     __end_of_TMR2_DefaultInterruptHandler:	
 16298                           
 16299                           	psect	text69
 16300  098F                     __ptext69:	
 16301 ;; *************** function _PWM3_LoadDutyValue *****************
 16302 ;; Defined at:
 16303 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;  dutyValue       2    0[COMMON] unsigned int 
 16306 ;; Auto vars:     Size  Location     Type
 16307 ;;		None
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      void 
 16310 ;; Registers used:
 16311 ;;		wreg, status,2, status,0
 16312 ;; Tracked objects:
 16313 ;;		On entry : 0/0
 16314 ;;		On exit  : 0/0
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16317 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;Total ram usage:        4 bytes
 16322 ;; Hardware stack levels used:    1
 16323 ;; This function calls:
 16324 ;;		Nothing
 16325 ;; This function is called by:
 16326 ;;		_Led2_PWM
 16327 ;; This function uses a non-reentrant model
 16328 ;;
 16329                           
 16330                           
 16331                           ;psect for function _PWM3_LoadDutyValue
 16332  098F                     _PWM3_LoadDutyValue:	
 16333                           
 16334                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 16335                           
 16336                           ;incstack = 0
 16337                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 16338  098F  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 16339  0990  00F3               	movwf	??_PWM3_LoadDutyValue+1
 16340  0991  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 16341  0992  00F2               	movwf	??_PWM3_LoadDutyValue
 16342  0993  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 16343  0994  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 16344  0995  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 16345  0996  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 16346  0997  0872               	movf	??_PWM3_LoadDutyValue,w
 16347  0998  002C               	movlb	12	; select bank12
 16348  0999  0098               	movwf	24	;volatile
 16349                           
 16350                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 16351  099A  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 16352  099B  3903               	andlw	3
 16353  099C  00F2               	movwf	??_PWM3_LoadDutyValue
 16354  099D  3005               	movlw	5
 16355  099E                     u423_25:	
 16356  099E  35F2               	lslf	??_PWM3_LoadDutyValue,f
 16357  099F  3EFF               	addlw	-1
 16358  09A0  1D03               	skipz
 16359  09A1  299E               	goto	u423_25
 16360  09A2  3572               	lslf	??_PWM3_LoadDutyValue,w
 16361  09A3  0097               	movwf	23	;volatile
 16362  09A4  0008               	return
 16363  09A5                     __end_of_PWM3_LoadDutyValue:	
 16364                           
 16365                           	psect	text70
 16366  1760                     __ptext70:	
 16367 ;; *************** function _I2C_MasterIsr *****************
 16368 ;; Defined at:
 16369 ;;		line 318 in file "mcc_generated_files/i2c_master.c"
 16370 ;; Parameters:    Size  Location     Type
 16371 ;;		None
 16372 ;; Auto vars:     Size  Location     Type
 16373 ;;		None
 16374 ;; Return value:  Size  Location     Type
 16375 ;;                  1    wreg      void 
 16376 ;; Registers used:
 16377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16378 ;; Tracked objects:
 16379 ;;		On entry : 0/0
 16380 ;;		On exit  : 0/0
 16381 ;;		Unchanged: 0/0
 16382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;Total ram usage:        0 bytes
 16388 ;; Hardware stack levels used:    1
 16389 ;; Hardware stack levels required when called:    5
 16390 ;; This function calls:
 16391 ;;		_I2C_MasterFsm
 16392 ;; This function is called by:
 16393 ;;		_I2C_Open
 16394 ;;		_INTERRUPT_InterruptManager
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           
 16399                           ;psect for function _I2C_MasterIsr
 16400  1760                     _I2C_MasterIsr:	
 16401                           
 16402                           ;i2c_master.c: 320: I2C_MasterFsm();
 16403                           
 16404                           ;incstack = 0
 16405                           ; Regs used in _I2C_MasterIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16406  1760  318B  23AC         	fcall	_I2C_MasterFsm
 16407  1762  0008               	return
 16408  1763                     __end_of_I2C_MasterIsr:	
 16409                           
 16410                           	psect	text71
 16411  0BAC                     __ptext71:	
 16412 ;; *************** function _I2C_MasterFsm *****************
 16413 ;; Defined at:
 16414 ;;		line 323 in file "mcc_generated_files/i2c_master.c"
 16415 ;; Parameters:    Size  Location     Type
 16416 ;;		None
 16417 ;; Auto vars:     Size  Location     Type
 16418 ;;		None
 16419 ;; Return value:  Size  Location     Type
 16420 ;;                  1    wreg      void 
 16421 ;; Registers used:
 16422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16423 ;; Tracked objects:
 16424 ;;		On entry : 0/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;Total ram usage:        3 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    4
 16435 ;; This function calls:
 16436 ;;		_I2C_DO_ADDRESS_NACK
 16437 ;;		_I2C_DO_IDLE
 16438 ;;		_I2C_DO_RCEN
 16439 ;;		_I2C_DO_RESET
 16440 ;;		_I2C_DO_RX
 16441 ;;		_I2C_DO_RX_ACK
 16442 ;;		_I2C_DO_RX_NACK_RESTART
 16443 ;;		_I2C_DO_RX_NACK_STOP
 16444 ;;		_I2C_DO_SEND_ADR_READ
 16445 ;;		_I2C_DO_SEND_ADR_WRITE
 16446 ;;		_I2C_DO_SEND_RESTART
 16447 ;;		_I2C_DO_SEND_RESTART_READ
 16448 ;;		_I2C_DO_SEND_RESTART_WRITE
 16449 ;;		_I2C_DO_SEND_STOP
 16450 ;;		_I2C_DO_TX
 16451 ;;		_I2C_DO_TX_EMPTY
 16452 ;;		_I2C_MasterIsNack
 16453 ;;		i1_I2C_MasterClearIrq
 16454 ;; This function is called by:
 16455 ;;		_I2C_MasterIsr
 16456 ;; This function uses a non-reentrant model
 16457 ;;
 16458                           
 16459                           
 16460                           ;psect for function _I2C_MasterFsm
 16461  0BAC                     _I2C_MasterFsm:	
 16462                           
 16463                           ;i2c_master.c: 325: I2C_MasterClearIrq();
 16464                           
 16465                           ;incstack = 0
 16466                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16467  0BAC  3197  275D  318B   	fcall	i1_I2C_MasterClearIrq
 16468                           
 16469                           ;i2c_master.c: 327: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 16470  0BAF  0022               	movlb	2	; select bank2
 16471  0BB0  1C3D               	btfss	(_I2C_Status^(0+256)+29),0
 16472  0BB1  2BBE               	goto	i1l5955
 16473  0BB2  3197  27BA  318B   	fcall	_I2C_MasterIsNack
 16474  0BB5  3A00               	xorlw	0
 16475  0BB6  1903               	skipnz
 16476  0BB7  2BBE               	goto	i1l5955
 16477                           
 16478                           ;i2c_master.c: 328: {
 16479                           ;i2c_master.c: 329: I2C_Status.state = I2C_ADDRESS_NACK;
 16480  0BB8  300F               	movlw	15
 16481  0BB9  0020               	movlb	0	; select bank0
 16482  0BBA  00A0               	movwf	??_I2C_MasterFsm
 16483  0BBB  0820               	movf	??_I2C_MasterFsm,w
 16484  0BBC  0022               	movlb	2	; select bank2
 16485  0BBD  00BB               	movwf	(_I2C_Status^(0+256)+27)
 16486  0BBE                     i1l5955:	
 16487                           
 16488                           ;i2c_master.c: 330: }
 16489                           ;i2c_master.c: 331: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 16490  0BBE  0022               	movlb	2	; select bank2
 16491  0BBF  083B               	movf	(_I2C_Status^(0+256)+27),w
 16492  0BC0  0020               	movlb	0	; select bank0
 16493  0BC1  00A0               	movwf	??_I2C_MasterFsm
 16494  0BC2  01A1               	clrf	??_I2C_MasterFsm+1
 16495  0BC3  35A0               	lslf	??_I2C_MasterFsm,f
 16496  0BC4  0DA1               	rlf	??_I2C_MasterFsm+1,f
 16497  0BC5  3000               	movlw	low (_fsmStateTable| (0+32768))
 16498  0BC6  0720               	addwf	??_I2C_MasterFsm,w
 16499  0BC7  0084               	movwf	4
 16500  0BC8  3090               	movlw	high (_fsmStateTable| (0+32768))
 16501  0BC9  3D21               	addwfc	??_I2C_MasterFsm+1,w
 16502  0BCA  0085               	movwf	5
 16503  0BCB  3F01               	moviw [1]fsr0
 16504  0BCC  008A               	movwf	10
 16505  0BCD  3F00               	moviw [0]fsr0
 16506  0BCE  000A               	callw
 16507  0BCF  318B               	pagesel	$
 16508  0BD0  0020               	movlb	0	; select bank0
 16509  0BD1  00A2               	movwf	??_I2C_MasterFsm+2
 16510  0BD2  0822               	movf	??_I2C_MasterFsm+2,w
 16511  0BD3  0022               	movlb	2	; select bank2
 16512  0BD4  00BB               	movwf	(_I2C_Status^(0+256)+27)
 16513  0BD5  0008               	return
 16514  0BD6                     __end_of_I2C_MasterFsm:	
 16515                           
 16516                           	psect	text72
 16517  175D                     __ptext72:	
 16518 ;; *************** function i1_I2C_MasterClearIrq *****************
 16519 ;; Defined at:
 16520 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;		None
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;		None
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      void 
 16527 ;; Registers used:
 16528 ;;		None
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;Total ram usage:        0 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; This function calls:
 16541 ;;		Nothing
 16542 ;; This function is called by:
 16543 ;;		_I2C_MasterFsm
 16544 ;; This function uses a non-reentrant model
 16545 ;;
 16546                           
 16547                           
 16548                           ;psect for function i1_I2C_MasterClearIrq
 16549  175D                     i1_I2C_MasterClearIrq:	
 16550                           
 16551                           ;i2c_master.c: 644: PIR1bits.SSP1IF = 0;
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in i1_I2C_MasterClearIrq: []
 16555  175D  0020               	movlb	0	; select bank0
 16556  175E  1190               	bcf	16,3	;volatile
 16557  175F  0008               	return
 16558  1760                     __end_ofi1_I2C_MasterClearIrq:	
 16559                           
 16560                           	psect	text73
 16561  0AC2                     __ptext73:	
 16562 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
 16563 ;; Defined at:
 16564 ;;		line 501 in file "mcc_generated_files/i2c_master.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;		None
 16567 ;; Auto vars:     Size  Location     Type
 16568 ;;		None
 16569 ;; Return value:  Size  Location     Type
 16570 ;;                  1    wreg      enum E12110
 16571 ;; Registers used:
 16572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16573 ;; Tracked objects:
 16574 ;;		On entry : 0/0
 16575 ;;		On exit  : 0/0
 16576 ;;		Unchanged: 0/0
 16577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;Total ram usage:        1 bytes
 16583 ;; Hardware stack levels used:    1
 16584 ;; Hardware stack levels required when called:    3
 16585 ;; This function calls:
 16586 ;;		Absolute function
 16587 ;;		_I2C_CallbackReturnReset
 16588 ;;		_I2C_CallbackReturnStop
 16589 ;;		_I2C_DO_SEND_RESTART
 16590 ;;		_I2C_DO_SEND_STOP
 16591 ;;		_rd1RegCompleteHandler
 16592 ;;		_rd2RegCompleteHandler
 16593 ;;		_rdBlkRegCompleteHandler
 16594 ;;		_wr1RegCompleteHandler
 16595 ;;		_wr2RegCompleteHandler
 16596 ;; This function is called by:
 16597 ;;		_I2C_MasterFsm
 16598 ;; This function uses a non-reentrant model
 16599 ;;
 16600                           
 16601                           
 16602                           ;psect for function _I2C_DO_ADDRESS_NACK
 16603  0AC2                     _I2C_DO_ADDRESS_NACK:	
 16604                           
 16605                           ;i2c_master.c: 503: I2C_Status.addressNackCheck = 0;
 16606                           
 16607                           ;incstack = 0
 16608                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16609  0AC2  0022               	movlb	2	; select bank2
 16610  0AC3  103D               	bcf	(_I2C_Status^(0+256)+29),0
 16611                           
 16612                           ;i2c_master.c: 504: I2C_Status.error = I2C_FAIL;
 16613  0AC4  3002               	movlw	2
 16614  0AC5  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
 16615  0AC6  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
 16616  0AC7  00BC               	movwf	(_I2C_Status^(0+256)+28)
 16617                           
 16618                           ;i2c_master.c: 505: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 16619  0AC8  2ACF               	goto	i1l5665
 16620  0AC9                     i1l5655:	
 16621                           ;i2c_master.c: 506: {
 16622                           ;i2c_master.c: 507: case I2C_RESTART_READ:
 16623                           
 16624                           
 16625                           ;i2c_master.c: 508: case I2C_RESTART_WRITE:
 16626                           ;i2c_master.c: 509: return I2C_DO_SEND_RESTART();
 16627  0AC9  3197  278F         	fcall	_I2C_DO_SEND_RESTART
 16628  0ACB  0008               	return
 16629  0ACC                     i1l5659:	
 16630                           ;i2c_master.c: 510: default:
 16631                           
 16632                           
 16633                           ;i2c_master.c: 511: return I2C_DO_SEND_STOP();
 16634  0ACC  3197  2793         	fcall	_I2C_DO_SEND_STOP
 16635                           
 16636                           ;i2c_master.c: 512: }
 16637  0ACE  0008               	return
 16638  0ACF                     i1l5665:	
 16639  0ACF  0022               	movlb	2	; select bank2
 16640  0AD0  082E               	movf	(low ((_I2C_Status| (0+256)+14)))^0,w
 16641  0AD1  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
 16642  0AD2  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
 16643  0AD3  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 16644  0AD4  3004               	movlw	4
 16645  0AD5  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 16646  0AD6  0086               	movwf	6
 16647  0AD7  3001               	movlw	1	; select bank2/3
 16648  0AD8  0087               	movwf	7
 16649  0AD9  3F41               	moviw [1]fsr1
 16650  0ADA  008A               	movwf	10
 16651  0ADB  3F40               	moviw [0]fsr1
 16652  0ADC  000A               	callw
 16653  0ADD  318A               	pagesel	$
 16654                           
 16655                           ; Switch size 1, requested type "space"
 16656                           ; Number of cases is 2, Range of values is 2 to 3
 16657                           ; switch strategies available:
 16658                           ; Name         Instructions Cycles
 16659                           ; simple_byte            7     4 (average)
 16660                           ; direct_byte           13     9 (fixed)
 16661                           ; jumptable            263     9 (fixed)
 16662                           ;	Chosen strategy is simple_byte
 16663  0ADE  3A02               	xorlw	2	; case 2
 16664  0ADF  1903               	skipnz
 16665  0AE0  2AC9               	goto	i1l5655
 16666  0AE1  3A01               	xorlw	1	; case 3
 16667  0AE2  1903               	skipnz
 16668  0AE3  2AC9               	goto	i1l5655
 16669  0AE4  2ACC               	goto	i1l5659
 16670  0AE5  0008               	return
 16671  0AE6                     __end_of_I2C_DO_ADDRESS_NACK:	
 16672                           
 16673                           	psect	text74
 16674  17B5                     __ptext74:	
 16675 ;; *************** function _I2C_DO_RESET *****************
 16676 ;; Defined at:
 16677 ;;		line 495 in file "mcc_generated_files/i2c_master.c"
 16678 ;; Parameters:    Size  Location     Type
 16679 ;;		None
 16680 ;; Auto vars:     Size  Location     Type
 16681 ;;		None
 16682 ;; Return value:  Size  Location     Type
 16683 ;;                  1    wreg      enum E12110
 16684 ;; Registers used:
 16685 ;;		wreg, status,2
 16686 ;; Tracked objects:
 16687 ;;		On entry : 0/0
 16688 ;;		On exit  : 0/0
 16689 ;;		Unchanged: 0/0
 16690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;Total ram usage:        0 bytes
 16696 ;; Hardware stack levels used:    1
 16697 ;; This function calls:
 16698 ;;		Nothing
 16699 ;; This function is called by:
 16700 ;;		_I2C_MasterFsm
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           
 16705                           ;psect for function _I2C_DO_RESET
 16706  17B5                     _I2C_DO_RESET:	
 16707                           
 16708                           ;i2c_master.c: 497: I2C_Status.busy = 0;
 16709                           
 16710                           ;incstack = 0
 16711                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
 16712  17B5  0022               	movlb	2	; select bank2
 16713  17B6  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 16714                           
 16715                           ;i2c_master.c: 498: I2C_Status.error = I2C_NOERR;
 16716  17B7  01BC               	clrf	(_I2C_Status^(0+256)+28)
 16717                           
 16718                           ;i2c_master.c: 499: return I2C_RESET;
 16719  17B8  300E               	movlw	14
 16720  17B9  0008               	return
 16721  17BA                     __end_of_I2C_DO_RESET:	
 16722                           
 16723                           	psect	text75
 16724  179F                     __ptext75:	
 16725 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
 16726 ;; Defined at:
 16727 ;;		line 489 in file "mcc_generated_files/i2c_master.c"
 16728 ;; Parameters:    Size  Location     Type
 16729 ;;		None
 16730 ;; Auto vars:     Size  Location     Type
 16731 ;;		None
 16732 ;; Return value:  Size  Location     Type
 16733 ;;                  1    wreg      enum E12110
 16734 ;; Registers used:
 16735 ;;		wreg, status,2, status,0, pclath, cstack
 16736 ;; Tracked objects:
 16737 ;;		On entry : 0/0
 16738 ;;		On exit  : 0/0
 16739 ;;		Unchanged: 0/0
 16740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;Total ram usage:        0 bytes
 16746 ;; Hardware stack levels used:    1
 16747 ;; Hardware stack levels required when called:    1
 16748 ;; This function calls:
 16749 ;;		i2c_master@I2C_MasterSendNack
 16750 ;; This function is called by:
 16751 ;;		_I2C_DO_RX
 16752 ;;		_I2C_MasterFsm
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           
 16757                           ;psect for function _I2C_DO_RX_NACK_RESTART
 16758  179F                     _I2C_DO_RX_NACK_RESTART:	
 16759                           
 16760                           ;i2c_master.c: 491: I2C_MasterSendNack();
 16761                           
 16762                           ;incstack = 0
 16763                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 16764  179F  3197  277F         	fcall	i2c_master@I2C_MasterSendNack
 16765                           
 16766                           ;i2c_master.c: 492: return I2C_SEND_RESTART;
 16767  17A1  3009               	movlw	9
 16768  17A2  0008               	return
 16769  17A3                     __end_of_I2C_DO_RX_NACK_RESTART:	
 16770                           
 16771                           	psect	text76
 16772  179B                     __ptext76:	
 16773 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
 16774 ;; Defined at:
 16775 ;;		line 483 in file "mcc_generated_files/i2c_master.c"
 16776 ;; Parameters:    Size  Location     Type
 16777 ;;		None
 16778 ;; Auto vars:     Size  Location     Type
 16779 ;;		None
 16780 ;; Return value:  Size  Location     Type
 16781 ;;                  1    wreg      enum E12110
 16782 ;; Registers used:
 16783 ;;		wreg, status,2, status,0, pclath, cstack
 16784 ;; Tracked objects:
 16785 ;;		On entry : 0/0
 16786 ;;		On exit  : 0/0
 16787 ;;		Unchanged: 0/0
 16788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16793 ;;Total ram usage:        0 bytes
 16794 ;; Hardware stack levels used:    1
 16795 ;; Hardware stack levels required when called:    1
 16796 ;; This function calls:
 16797 ;;		i2c_master@I2C_MasterSendNack
 16798 ;; This function is called by:
 16799 ;;		_I2C_DO_RX
 16800 ;;		_I2C_MasterFsm
 16801 ;; This function uses a non-reentrant model
 16802 ;;
 16803                           
 16804                           
 16805                           ;psect for function _I2C_DO_RX_NACK_STOP
 16806  179B                     _I2C_DO_RX_NACK_STOP:	
 16807                           
 16808                           ;i2c_master.c: 485: I2C_MasterSendNack();
 16809                           
 16810                           ;incstack = 0
 16811                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 16812  179B  3197  277F         	fcall	i2c_master@I2C_MasterSendNack
 16813                           
 16814                           ;i2c_master.c: 486: return I2C_SEND_STOP;
 16815  179D  300A               	movlw	10
 16816  179E  0008               	return
 16817  179F                     __end_of_I2C_DO_RX_NACK_STOP:	
 16818                           
 16819                           	psect	text77
 16820  1797                     __ptext77:	
 16821 ;; *************** function _I2C_DO_RX_ACK *****************
 16822 ;; Defined at:
 16823 ;;		line 476 in file "mcc_generated_files/i2c_master.c"
 16824 ;; Parameters:    Size  Location     Type
 16825 ;;		None
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;		None
 16828 ;; Return value:  Size  Location     Type
 16829 ;;                  1    wreg      enum E12110
 16830 ;; Registers used:
 16831 ;;		wreg, status,2, status,0, pclath, cstack
 16832 ;; Tracked objects:
 16833 ;;		On entry : 0/0
 16834 ;;		On exit  : 0/0
 16835 ;;		Unchanged: 0/0
 16836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;Total ram usage:        0 bytes
 16842 ;; Hardware stack levels used:    1
 16843 ;; Hardware stack levels required when called:    1
 16844 ;; This function calls:
 16845 ;;		i2c_master@I2C_MasterSendAck
 16846 ;; This function is called by:
 16847 ;;		_I2C_MasterFsm
 16848 ;; This function uses a non-reentrant model
 16849 ;;
 16850                           
 16851                           
 16852                           ;psect for function _I2C_DO_RX_ACK
 16853  1797                     _I2C_DO_RX_ACK:	
 16854                           
 16855                           ;i2c_master.c: 478: I2C_MasterSendAck();
 16856                           
 16857                           ;incstack = 0
 16858                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 16859  1797  3197  2783         	fcall	i2c_master@I2C_MasterSendAck
 16860                           
 16861                           ;i2c_master.c: 479: return I2C_RCEN;
 16862  1799  3005               	movlw	5
 16863  179A  0008               	return
 16864  179B                     __end_of_I2C_DO_RX_ACK:	
 16865                           
 16866                           	psect	text78
 16867  1793                     __ptext78:	
 16868 ;; *************** function _I2C_DO_SEND_STOP *****************
 16869 ;; Defined at:
 16870 ;;		line 470 in file "mcc_generated_files/i2c_master.c"
 16871 ;; Parameters:    Size  Location     Type
 16872 ;;		None
 16873 ;; Auto vars:     Size  Location     Type
 16874 ;;		None
 16875 ;; Return value:  Size  Location     Type
 16876 ;;                  1    wreg      enum E12110
 16877 ;; Registers used:
 16878 ;;		wreg, status,2, status,0, pclath, cstack
 16879 ;; Tracked objects:
 16880 ;;		On entry : 0/0
 16881 ;;		On exit  : 0/0
 16882 ;;		Unchanged: 0/0
 16883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16888 ;;Total ram usage:        0 bytes
 16889 ;; Hardware stack levels used:    1
 16890 ;; Hardware stack levels required when called:    1
 16891 ;; This function calls:
 16892 ;;		_I2C_MasterStop
 16893 ;; This function is called by:
 16894 ;;		_I2C_DO_TX
 16895 ;;		_I2C_DO_TX_EMPTY
 16896 ;;		_I2C_DO_ADDRESS_NACK
 16897 ;;		_I2C_MasterFsm
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901                           
 16902                           ;psect for function _I2C_DO_SEND_STOP
 16903  1793                     _I2C_DO_SEND_STOP:	
 16904                           
 16905                           ;i2c_master.c: 472: I2C_MasterStop();
 16906                           
 16907                           ;incstack = 0
 16908                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 16909  1793  3197  2751         	fcall	_I2C_MasterStop
 16910                           
 16911                           ;i2c_master.c: 473: return I2C_IDLE;
 16912  1795  3000               	movlw	0
 16913  1796  0008               	return
 16914  1797                     __end_of_I2C_DO_SEND_STOP:	
 16915                           
 16916                           	psect	text79
 16917  178F                     __ptext79:	
 16918 ;; *************** function _I2C_DO_SEND_RESTART *****************
 16919 ;; Defined at:
 16920 ;;		line 464 in file "mcc_generated_files/i2c_master.c"
 16921 ;; Parameters:    Size  Location     Type
 16922 ;;		None
 16923 ;; Auto vars:     Size  Location     Type
 16924 ;;		None
 16925 ;; Return value:  Size  Location     Type
 16926 ;;                  1    wreg      enum E12110
 16927 ;; Registers used:
 16928 ;;		wreg, status,2, status,0, pclath, cstack
 16929 ;; Tracked objects:
 16930 ;;		On entry : 0/0
 16931 ;;		On exit  : 0/0
 16932 ;;		Unchanged: 0/0
 16933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;Total ram usage:        0 bytes
 16939 ;; Hardware stack levels used:    1
 16940 ;; Hardware stack levels required when called:    1
 16941 ;; This function calls:
 16942 ;;		_I2C_MasterEnableRestart
 16943 ;; This function is called by:
 16944 ;;		_I2C_DO_TX_EMPTY
 16945 ;;		_I2C_DO_ADDRESS_NACK
 16946 ;;		_I2C_MasterFsm
 16947 ;; This function uses a non-reentrant model
 16948 ;;
 16949                           
 16950                           
 16951                           ;psect for function _I2C_DO_SEND_RESTART
 16952  178F                     _I2C_DO_SEND_RESTART:	
 16953                           
 16954                           ;i2c_master.c: 466: I2C_MasterEnableRestart();
 16955                           
 16956                           ;incstack = 0
 16957                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 16958  178F  3197  274E         	fcall	_I2C_MasterEnableRestart
 16959                           
 16960                           ;i2c_master.c: 467: return I2C_SEND_ADR_READ;
 16961  1791  3001               	movlw	1
 16962  1792  0008               	return
 16963  1793                     __end_of_I2C_DO_SEND_RESTART:	
 16964                           
 16965                           	psect	text80
 16966  178B                     __ptext80:	
 16967 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
 16968 ;; Defined at:
 16969 ;;		line 457 in file "mcc_generated_files/i2c_master.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;		None
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;		None
 16974 ;; Return value:  Size  Location     Type
 16975 ;;                  1    wreg      enum E12110
 16976 ;; Registers used:
 16977 ;;		wreg, status,2, status,0, pclath, cstack
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;Total ram usage:        0 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; Hardware stack levels required when called:    1
 16990 ;; This function calls:
 16991 ;;		_I2C_MasterEnableRestart
 16992 ;; This function is called by:
 16993 ;;		_I2C_DO_TX
 16994 ;;		_I2C_MasterFsm
 16995 ;; This function uses a non-reentrant model
 16996 ;;
 16997                           
 16998                           
 16999                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
 17000  178B                     _I2C_DO_SEND_RESTART_WRITE:	
 17001                           
 17002                           ;i2c_master.c: 459: I2C_MasterEnableRestart();
 17003                           
 17004                           ;incstack = 0
 17005                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 17006  178B  3197  274E         	fcall	_I2C_MasterEnableRestart
 17007                           
 17008                           ;i2c_master.c: 460: return I2C_SEND_ADR_WRITE;
 17009  178D  3002               	movlw	2
 17010  178E  0008               	return
 17011  178F                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
 17012                           
 17013                           	psect	text81
 17014  1787                     __ptext81:	
 17015 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
 17016 ;; Defined at:
 17017 ;;		line 451 in file "mcc_generated_files/i2c_master.c"
 17018 ;; Parameters:    Size  Location     Type
 17019 ;;		None
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;		None
 17022 ;; Return value:  Size  Location     Type
 17023 ;;                  1    wreg      enum E12110
 17024 ;; Registers used:
 17025 ;;		wreg, status,2, status,0, pclath, cstack
 17026 ;; Tracked objects:
 17027 ;;		On entry : 0/0
 17028 ;;		On exit  : 0/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;Total ram usage:        0 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    1
 17038 ;; This function calls:
 17039 ;;		_I2C_MasterEnableRestart
 17040 ;; This function is called by:
 17041 ;;		_I2C_DO_TX
 17042 ;;		_I2C_MasterFsm
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _I2C_DO_SEND_RESTART_READ
 17048  1787                     _I2C_DO_SEND_RESTART_READ:	
 17049                           
 17050                           ;i2c_master.c: 453: I2C_MasterEnableRestart();
 17051                           
 17052                           ;incstack = 0
 17053                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 17054  1787  3197  274E         	fcall	_I2C_MasterEnableRestart
 17055                           
 17056                           ;i2c_master.c: 454: return I2C_SEND_ADR_READ;
 17057  1789  3001               	movlw	1
 17058  178A  0008               	return
 17059  178B                     __end_of_I2C_DO_SEND_RESTART_READ:	
 17060                           
 17061                           	psect	text82
 17062  17C0                     __ptext82:	
 17063 ;; *************** function _I2C_DO_RCEN *****************
 17064 ;; Defined at:
 17065 ;;		line 404 in file "mcc_generated_files/i2c_master.c"
 17066 ;; Parameters:    Size  Location     Type
 17067 ;;		None
 17068 ;; Auto vars:     Size  Location     Type
 17069 ;;		None
 17070 ;; Return value:  Size  Location     Type
 17071 ;;                  1    wreg      enum E12110
 17072 ;; Registers used:
 17073 ;;		wreg, status,2, status,0, pclath, cstack
 17074 ;; Tracked objects:
 17075 ;;		On entry : 0/0
 17076 ;;		On exit  : 0/0
 17077 ;;		Unchanged: 0/0
 17078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;Total ram usage:        0 bytes
 17084 ;; Hardware stack levels used:    1
 17085 ;; Hardware stack levels required when called:    1
 17086 ;; This function calls:
 17087 ;;		_I2C_MasterStartRx
 17088 ;; This function is called by:
 17089 ;;		_I2C_MasterFsm
 17090 ;; This function uses a non-reentrant model
 17091 ;;
 17092                           
 17093                           
 17094                           ;psect for function _I2C_DO_RCEN
 17095  17C0                     _I2C_DO_RCEN:	
 17096                           
 17097                           ;i2c_master.c: 406: I2C_Status.addressNackCheck = 0;
 17098                           
 17099                           ;incstack = 0
 17100                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 17101  17C0  0022               	movlb	2	; select bank2
 17102  17C1  103D               	bcf	(_I2C_Status^(0+256)+29),0
 17103                           
 17104                           ;i2c_master.c: 407: I2C_MasterStartRx();
 17105  17C2  3197  2754         	fcall	_I2C_MasterStartRx
 17106                           
 17107                           ;i2c_master.c: 408: return I2C_RX;
 17108  17C4  3004               	movlw	4
 17109  17C5  0008               	return
 17110  17C6                     __end_of_I2C_DO_RCEN:	
 17111                           
 17112                           	psect	text83
 17113  0CE4                     __ptext83:	
 17114 ;; *************** function _I2C_DO_RX *****************
 17115 ;; Defined at:
 17116 ;;		line 380 in file "mcc_generated_files/i2c_master.c"
 17117 ;; Parameters:    Size  Location     Type
 17118 ;;		None
 17119 ;; Auto vars:     Size  Location     Type
 17120 ;;		None
 17121 ;; Return value:  Size  Location     Type
 17122 ;;                  1    wreg      enum E12110
 17123 ;; Registers used:
 17124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17125 ;; Tracked objects:
 17126 ;;		On entry : 0/0
 17127 ;;		On exit  : 0/0
 17128 ;;		Unchanged: 0/0
 17129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17133 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;Total ram usage:        1 bytes
 17135 ;; Hardware stack levels used:    1
 17136 ;; Hardware stack levels required when called:    3
 17137 ;; This function calls:
 17138 ;;		Absolute function
 17139 ;;		_I2C_CallbackReturnReset
 17140 ;;		_I2C_CallbackReturnStop
 17141 ;;		_I2C_DO_RX_NACK_RESTART
 17142 ;;		_I2C_DO_RX_NACK_STOP
 17143 ;;		_I2C_MasterGetRxData
 17144 ;;		_rd1RegCompleteHandler
 17145 ;;		_rd2RegCompleteHandler
 17146 ;;		_rdBlkRegCompleteHandler
 17147 ;;		_wr1RegCompleteHandler
 17148 ;;		_wr2RegCompleteHandler
 17149 ;;		i2c_master@I2C_MasterSendAck
 17150 ;; This function is called by:
 17151 ;;		_I2C_MasterFsm
 17152 ;; This function uses a non-reentrant model
 17153 ;;
 17154                           
 17155                           
 17156                           ;psect for function _I2C_DO_RX
 17157  0CE4                     _I2C_DO_RX:	
 17158                           
 17159                           ;i2c_master.c: 382: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 17160                           
 17161                           ;incstack = 0
 17162                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17163  0CE4  3197  2757  318C   	fcall	_I2C_MasterGetRxData
 17164  0CE7  00FA               	movwf	??_I2C_DO_RX
 17165  0CE8  0022               	movlb	2	; select bank2
 17166  0CE9  0837               	movf	(low ((_I2C_Status| (0+256)+23)))^0,w
 17167  0CEA  0086               	movwf	6
 17168  0CEB  0838               	movf	((low ((_I2C_Status| (0+256)+23))+1))^0,w
 17169  0CEC  0087               	movwf	7
 17170  0CED  087A               	movf	??_I2C_DO_RX,w
 17171  0CEE  0081               	movwf	1
 17172  0CEF  3001               	movlw	1
 17173  0CF0  07B7               	addwf	(low ((_I2C_Status| (0+256)+23)))^0,f
 17174  0CF1  3000               	movlw	0
 17175  0CF2  3DB8               	addwfc	((low ((_I2C_Status| (0+256)+23))+1))^0,f
 17176                           
 17177                           ;i2c_master.c: 383: if(--I2C_Status.data_length)
 17178  0CF3  3001               	movlw	1
 17179  0CF4  02B9               	subwf	(_I2C_Status^(0+256)+25),f
 17180  0CF5  3000               	movlw	0
 17181  0CF6  3BBA               	subwfb	((_I2C_Status+1)^(0+256)+25),f
 17182  0CF7  0839               	movf	(_I2C_Status^(0+256)+25),w
 17183  0CF8  043A               	iorwf	((_I2C_Status+1)^(0+256)+25),w
 17184  0CF9  1903               	btfsc	3,2
 17185  0CFA  2CFF               	goto	i1l298
 17186                           
 17187                           ;i2c_master.c: 384: {
 17188                           ;i2c_master.c: 385: I2C_MasterSendAck();
 17189  0CFB  3197  2783         	fcall	i2c_master@I2C_MasterSendAck
 17190                           
 17191                           ;i2c_master.c: 386: return I2C_RCEN;
 17192  0CFD  3005               	movlw	5
 17193                           
 17194                           ;i2c_master.c: 387: }
 17195  0CFE  0008               	return
 17196  0CFF                     i1l298:	
 17197                           
 17198                           ;i2c_master.c: 388: else
 17199                           ;i2c_master.c: 389: {
 17200                           ;i2c_master.c: 390: I2C_Status.bufferFree = 1;
 17201  0CFF  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 17202                           
 17203                           ;i2c_master.c: 391: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 17204  0D00  2D07               	goto	i1l5607
 17205  0D01                     i1l5597:	
 17206                           ;i2c_master.c: 392: {
 17207                           ;i2c_master.c: 393: case I2C_RESTART_WRITE:
 17208                           
 17209                           
 17210                           ;i2c_master.c: 394: case I2C_RESTART_READ:
 17211                           ;i2c_master.c: 395: return I2C_DO_RX_NACK_RESTART();
 17212  0D01  3197  279F         	fcall	_I2C_DO_RX_NACK_RESTART
 17213  0D03  0008               	return
 17214  0D04                     i1l5601:	
 17215                           ;i2c_master.c: 397: case I2C_CONTINUE:
 17216                           
 17217                           ;i2c_master.c: 396: default:
 17218                           
 17219                           
 17220                           ;i2c_master.c: 398: case I2C_STOP:
 17221                           ;i2c_master.c: 399: return I2C_DO_RX_NACK_STOP();
 17222  0D04  3197  279B         	fcall	_I2C_DO_RX_NACK_STOP
 17223                           
 17224                           ;i2c_master.c: 400: }
 17225  0D06  0008               	return
 17226  0D07                     i1l5607:	
 17227  0D07  0022               	movlb	2	; select bank2
 17228  0D08  082C               	movf	(low ((_I2C_Status| (0+256)+12)))^0,w
 17229  0D09  00FA               	movwf	??_I2C_DO_RX
 17230  0D0A  087A               	movf	??_I2C_DO_RX,w
 17231  0D0B  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 17232  0D0C  0821               	movf	(_I2C_Status+1)^(0+256),w
 17233  0D0D  008A               	movwf	10
 17234  0D0E  0820               	movf	_I2C_Status^(0+256),w
 17235  0D0F  000A               	callw
 17236  0D10  318C               	pagesel	$
 17237                           
 17238                           ; Switch size 1, requested type "space"
 17239                           ; Number of cases is 4, Range of values is 1 to 4
 17240                           ; switch strategies available:
 17241                           ; Name         Instructions Cycles
 17242                           ; simple_byte           13     7 (average)
 17243                           ; direct_byte           17     9 (fixed)
 17244                           ; jumptable            263     9 (fixed)
 17245                           ;	Chosen strategy is simple_byte
 17246  0D11  3A01               	xorlw	1	; case 1
 17247  0D12  1903               	skipnz
 17248  0D13  2D04               	goto	i1l5601
 17249  0D14  3A03               	xorlw	3	; case 2
 17250  0D15  1903               	skipnz
 17251  0D16  2D01               	goto	i1l5597
 17252  0D17  3A01               	xorlw	1	; case 3
 17253  0D18  1903               	skipnz
 17254  0D19  2D01               	goto	i1l5597
 17255  0D1A  3A07               	xorlw	7	; case 4
 17256  0D1B  1903               	skipnz
 17257  0D1C  2D04               	goto	i1l5601
 17258  0D1D  2D04               	goto	i1l5601
 17259  0D1E  0008               	return
 17260  0D1F                     __end_of_I2C_DO_RX:	
 17261                           
 17262                           	psect	text84
 17263  0E79                     __ptext84:	
 17264 ;; *************** function _I2C_DO_TX *****************
 17265 ;; Defined at:
 17266 ;;		line 356 in file "mcc_generated_files/i2c_master.c"
 17267 ;; Parameters:    Size  Location     Type
 17268 ;;		None
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;		None
 17271 ;; Return value:  Size  Location     Type
 17272 ;;                  1    wreg      enum E12110
 17273 ;; Registers used:
 17274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17275 ;; Tracked objects:
 17276 ;;		On entry : 0/0
 17277 ;;		On exit  : 0/0
 17278 ;;		Unchanged: 0/0
 17279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17284 ;;Total ram usage:        4 bytes
 17285 ;; Hardware stack levels used:    1
 17286 ;; Hardware stack levels required when called:    3
 17287 ;; This function calls:
 17288 ;;		Absolute function
 17289 ;;		_I2C_CallbackReturnReset
 17290 ;;		_I2C_CallbackReturnStop
 17291 ;;		_I2C_DO_SEND_RESTART_READ
 17292 ;;		_I2C_DO_SEND_RESTART_WRITE
 17293 ;;		_I2C_DO_SEND_STOP
 17294 ;;		_I2C_MasterIsNack
 17295 ;;		_I2C_MasterSendTxData
 17296 ;;		_rd1RegCompleteHandler
 17297 ;;		_rd2RegCompleteHandler
 17298 ;;		_rdBlkRegCompleteHandler
 17299 ;;		_wr1RegCompleteHandler
 17300 ;;		_wr2RegCompleteHandler
 17301 ;; This function is called by:
 17302 ;;		_I2C_MasterFsm
 17303 ;; This function uses a non-reentrant model
 17304 ;;
 17305                           
 17306                           
 17307                           ;psect for function _I2C_DO_TX
 17308  0E79                     _I2C_DO_TX:	
 17309                           
 17310                           ;i2c_master.c: 358: if(I2C_MasterIsNack())
 17311                           
 17312                           ;incstack = 0
 17313                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17314  0E79  3197  27BA  318E   	fcall	_I2C_MasterIsNack
 17315  0E7C  3A00               	xorlw	0
 17316  0E7D  1D03               	btfss	3,2
 17317  0E7E  2E89               	goto	i1l5571
 17318  0E7F  2EA6               	goto	i1l282
 17319  0E80                     i1l5557:	
 17320                           ;i2c_master.c: 361: {
 17321                           ;i2c_master.c: 362: case I2C_RESTART_READ:
 17322                           
 17323                           ;i2c_master.c: 359: {
 17324                           ;i2c_master.c: 360: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 17325                           
 17326                           
 17327                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_READ();
 17328  0E80  3197  2787         	fcall	_I2C_DO_SEND_RESTART_READ
 17329  0E82  0008               	return
 17330  0E83                     i1l5561:	
 17331                           ;i2c_master.c: 364: case I2C_RESTART_WRITE:
 17332                           
 17333                           
 17334                           ;i2c_master.c: 365: return I2C_DO_SEND_RESTART_WRITE();
 17335  0E83  3197  278B         	fcall	_I2C_DO_SEND_RESTART_WRITE
 17336  0E85  0008               	return
 17337  0E86                     i1l5565:	
 17338                           ;i2c_master.c: 367: case I2C_CONTINUE:
 17339                           
 17340                           ;i2c_master.c: 366: default:
 17341                           
 17342                           
 17343                           ;i2c_master.c: 368: case I2C_STOP:
 17344                           ;i2c_master.c: 369: return I2C_DO_SEND_STOP();
 17345  0E86  3197  2793         	fcall	_I2C_DO_SEND_STOP
 17346                           
 17347                           ;i2c_master.c: 370: }
 17348  0E88  0008               	return
 17349  0E89                     i1l5571:	
 17350  0E89  0022               	movlb	2	; select bank2
 17351  0E8A  082F               	movf	(low ((_I2C_Status| (0+256)+15)))^0,w
 17352  0E8B  00FA               	movwf	??_I2C_DO_TX
 17353  0E8C  087A               	movf	??_I2C_DO_TX,w
 17354  0E8D  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 17355  0E8E  3006               	movlw	6
 17356  0E8F  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 17357  0E90  0086               	movwf	6
 17358  0E91  3001               	movlw	1	; select bank2/3
 17359  0E92  0087               	movwf	7
 17360  0E93  3F41               	moviw [1]fsr1
 17361  0E94  008A               	movwf	10
 17362  0E95  3F40               	moviw [0]fsr1
 17363  0E96  000A               	callw
 17364  0E97  318E               	pagesel	$
 17365                           
 17366                           ; Switch size 1, requested type "space"
 17367                           ; Number of cases is 4, Range of values is 1 to 4
 17368                           ; switch strategies available:
 17369                           ; Name         Instructions Cycles
 17370                           ; simple_byte           13     7 (average)
 17371                           ; direct_byte           17     9 (fixed)
 17372                           ; jumptable            263     9 (fixed)
 17373                           ;	Chosen strategy is simple_byte
 17374  0E98  3A01               	xorlw	1	; case 1
 17375  0E99  1903               	skipnz
 17376  0E9A  2E86               	goto	i1l5565
 17377  0E9B  3A03               	xorlw	3	; case 2
 17378  0E9C  1903               	skipnz
 17379  0E9D  2E80               	goto	i1l5557
 17380  0E9E  3A01               	xorlw	1	; case 3
 17381  0E9F  1903               	skipnz
 17382  0EA0  2E83               	goto	i1l5561
 17383  0EA1  3A07               	xorlw	7	; case 4
 17384  0EA2  1903               	skipnz
 17385  0EA3  2E86               	goto	i1l5565
 17386  0EA4  2E86               	goto	i1l5565
 17387                           
 17388                           ;i2c_master.c: 371: }
 17389  0EA5  0008               	return
 17390  0EA6                     i1l282:	
 17391                           
 17392                           ;i2c_master.c: 372: else
 17393                           ;i2c_master.c: 373: {
 17394                           ;i2c_master.c: 374: I2C_Status.addressNackCheck = 0;
 17395  0EA6  0022               	movlb	2	; select bank2
 17396  0EA7  103D               	bcf	(_I2C_Status^(0+256)+29),0
 17397                           
 17398                           ;i2c_master.c: 375: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 17399  0EA8  0838               	movf	((low ((_I2C_Status| (0+256)+23))+1))^0,w
 17400  0EA9  00FB               	movwf	??_I2C_DO_TX+1
 17401  0EAA  0837               	movf	(low ((_I2C_Status| (0+256)+23)))^0,w
 17402  0EAB  00FA               	movwf	??_I2C_DO_TX
 17403  0EAC  0AB7               	incf	(low ((_I2C_Status| (0+256)+23)))^0,f
 17404  0EAD  1903               	skipnz
 17405  0EAE  0AB8               	incf	((low ((_I2C_Status| (0+256)+23))+1))^0,f
 17406  0EAF  087A               	movf	??_I2C_DO_TX,w
 17407  0EB0  0086               	movwf	6
 17408  0EB1  087B               	movf	??_I2C_DO_TX+1,w
 17409  0EB2  0087               	movwf	7
 17410  0EB3  0801               	movf	1,w
 17411  0EB4  3197  27AB  318E   	fcall	_I2C_MasterSendTxData
 17412                           
 17413                           ;i2c_master.c: 376: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 17414  0EB7  3001               	movlw	1
 17415  0EB8  0022               	movlb	2	; select bank2
 17416  0EB9  02B9               	subwf	(_I2C_Status^(0+256)+25),f
 17417  0EBA  3000               	movlw	0
 17418  0EBB  3BBA               	subwfb	((_I2C_Status+1)^(0+256)+25),f
 17419  0EBC  0839               	movf	(_I2C_Status^(0+256)+25),w
 17420  0EBD  043A               	iorwf	((_I2C_Status+1)^(0+256)+25),w
 17421  0EBE  1D03               	btfss	3,2
 17422  0EBF  2EC2               	goto	i1l5579
 17423  0EC0  3006               	movlw	6
 17424  0EC1  2EC3               	goto	L3
 17425  0EC2                     i1l5579:	
 17426  0EC2  3003               	movlw	3
 17427  0EC3                     L3:	
 17428  0EC3  00FC               	movwf	_I2C_DO_TX$613
 17429  0EC4  3000               	movlw	0
 17430  0EC5  00FD               	movwf	_I2C_DO_TX$613+1
 17431  0EC6  087C               	movf	_I2C_DO_TX$613,w
 17432  0EC7  0008               	return
 17433  0EC8                     __end_of_I2C_DO_TX:	
 17434                           
 17435                           	psect	text85
 17436  17D8                     __ptext85:	
 17437 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 17438 ;; Defined at:
 17439 ;;		line 349 in file "mcc_generated_files/i2c_master.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;		None
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;		None
 17444 ;; Return value:  Size  Location     Type
 17445 ;;                  1    wreg      enum E12110
 17446 ;; Registers used:
 17447 ;;		wreg, status,2, status,0, pclath, cstack
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17457 ;;Total ram usage:        0 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:    1
 17460 ;; This function calls:
 17461 ;;		_I2C_MasterSendTxData
 17462 ;; This function is called by:
 17463 ;;		_I2C_MasterFsm
 17464 ;; This function uses a non-reentrant model
 17465 ;;
 17466                           
 17467                           
 17468                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 17469  17D8                     _I2C_DO_SEND_ADR_WRITE:	
 17470                           
 17471                           ;i2c_master.c: 351: I2C_Status.addressNackCheck = 1;
 17472                           
 17473                           ;incstack = 0
 17474                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 17475  17D8  0022               	movlb	2	; select bank2
 17476  17D9  143D               	bsf	(_I2C_Status^(0+256)+29),0
 17477                           
 17478                           ;i2c_master.c: 352: I2C_MasterSendTxData(I2C_Status.address << 1);
 17479  17DA  3536               	lslf	(_I2C_Status^(0+256)+22),w
 17480  17DB  3197  27AB         	fcall	_I2C_MasterSendTxData
 17481                           
 17482                           ;i2c_master.c: 353: return I2C_TX;
 17483  17DD  3003               	movlw	3
 17484  17DE  0008               	return
 17485  17DF                     __end_of_I2C_DO_SEND_ADR_WRITE:	
 17486                           
 17487                           	psect	text86
 17488  17E6                     __ptext86:	
 17489 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 17490 ;; Defined at:
 17491 ;;		line 342 in file "mcc_generated_files/i2c_master.c"
 17492 ;; Parameters:    Size  Location     Type
 17493 ;;		None
 17494 ;; Auto vars:     Size  Location     Type
 17495 ;;		None
 17496 ;; Return value:  Size  Location     Type
 17497 ;;                  1    wreg      enum E12110
 17498 ;; Registers used:
 17499 ;;		wreg, status,2, status,0, pclath, cstack
 17500 ;; Tracked objects:
 17501 ;;		On entry : 0/0
 17502 ;;		On exit  : 0/0
 17503 ;;		Unchanged: 0/0
 17504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;Total ram usage:        0 bytes
 17510 ;; Hardware stack levels used:    1
 17511 ;; Hardware stack levels required when called:    1
 17512 ;; This function calls:
 17513 ;;		_I2C_MasterSendTxData
 17514 ;; This function is called by:
 17515 ;;		_I2C_MasterFsm
 17516 ;; This function uses a non-reentrant model
 17517 ;;
 17518                           
 17519                           
 17520                           ;psect for function _I2C_DO_SEND_ADR_READ
 17521  17E6                     _I2C_DO_SEND_ADR_READ:	
 17522                           
 17523                           ;i2c_master.c: 344: I2C_Status.addressNackCheck = 1;
 17524                           
 17525                           ;incstack = 0
 17526                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 17527  17E6  0022               	movlb	2	; select bank2
 17528  17E7  143D               	bsf	(_I2C_Status^(0+256)+29),0
 17529                           
 17530                           ;i2c_master.c: 345: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 17531  17E8  1403               	setc
 17532  17E9  0D36               	rlf	(_I2C_Status^(0+256)+22),w
 17533  17EA  3197  27AB         	fcall	_I2C_MasterSendTxData
 17534                           
 17535                           ;i2c_master.c: 346: return I2C_RCEN;
 17536  17EC  3005               	movlw	5
 17537  17ED  0008               	return
 17538  17EE                     __end_of_I2C_DO_SEND_ADR_READ:	
 17539                           
 17540                           	psect	text87
 17541  17B0                     __ptext87:	
 17542 ;; *************** function _I2C_DO_IDLE *****************
 17543 ;; Defined at:
 17544 ;;		line 335 in file "mcc_generated_files/i2c_master.c"
 17545 ;; Parameters:    Size  Location     Type
 17546 ;;		None
 17547 ;; Auto vars:     Size  Location     Type
 17548 ;;		None
 17549 ;; Return value:  Size  Location     Type
 17550 ;;                  1    wreg      enum E12110
 17551 ;; Registers used:
 17552 ;;		wreg, status,2
 17553 ;; Tracked objects:
 17554 ;;		On entry : 0/0
 17555 ;;		On exit  : 0/0
 17556 ;;		Unchanged: 0/0
 17557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;Total ram usage:        0 bytes
 17563 ;; Hardware stack levels used:    1
 17564 ;; This function calls:
 17565 ;;		Nothing
 17566 ;; This function is called by:
 17567 ;;		_I2C_MasterFsm
 17568 ;; This function uses a non-reentrant model
 17569 ;;
 17570                           
 17571                           
 17572                           ;psect for function _I2C_DO_IDLE
 17573  17B0                     _I2C_DO_IDLE:	
 17574                           
 17575                           ;i2c_master.c: 337: I2C_Status.busy = 0;
 17576                           
 17577                           ;incstack = 0
 17578                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 17579  17B0  0022               	movlb	2	; select bank2
 17580  17B1  10BD               	bcf	(_I2C_Status^(0+256)+29),1
 17581                           
 17582                           ;i2c_master.c: 338: I2C_Status.error = I2C_NOERR;
 17583  17B2  01BC               	clrf	(_I2C_Status^(0+256)+28)
 17584                           
 17585                           ;i2c_master.c: 339: return I2C_RESET;
 17586  17B3  300E               	movlw	14
 17587  17B4  0008               	return
 17588  17B5                     __end_of_I2C_DO_IDLE:	
 17589                           
 17590                           	psect	text88
 17591  0AE6                     __ptext88:	
 17592 ;; *************** function _I2C_DO_TX_EMPTY *****************
 17593 ;; Defined at:
 17594 ;;		line 411 in file "mcc_generated_files/i2c_master.c"
 17595 ;; Parameters:    Size  Location     Type
 17596 ;;		None
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;		None
 17599 ;; Return value:  Size  Location     Type
 17600 ;;                  1    wreg      enum E12110
 17601 ;; Registers used:
 17602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17603 ;; Tracked objects:
 17604 ;;		On entry : 0/0
 17605 ;;		On exit  : 0/0
 17606 ;;		Unchanged: 0/0
 17607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;Total ram usage:        1 bytes
 17613 ;; Hardware stack levels used:    1
 17614 ;; Hardware stack levels required when called:    3
 17615 ;; This function calls:
 17616 ;;		Absolute function
 17617 ;;		_I2C_CallbackReturnReset
 17618 ;;		_I2C_CallbackReturnStop
 17619 ;;		_I2C_DO_SEND_RESTART
 17620 ;;		_I2C_DO_SEND_STOP
 17621 ;;		_I2C_MasterSetIrq
 17622 ;;		_rd1RegCompleteHandler
 17623 ;;		_rd2RegCompleteHandler
 17624 ;;		_rdBlkRegCompleteHandler
 17625 ;;		_wr1RegCompleteHandler
 17626 ;;		_wr2RegCompleteHandler
 17627 ;; This function is called by:
 17628 ;;		_I2C_MasterFsm
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           
 17633                           ;psect for function _I2C_DO_TX_EMPTY
 17634  0AE6                     _I2C_DO_TX_EMPTY:	
 17635                           
 17636                           ;i2c_master.c: 413: I2C_Status.bufferFree = 1;
 17637                           
 17638                           ;incstack = 0
 17639                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17640  0AE6  0022               	movlb	2	; select bank2
 17641  0AE7  15BD               	bsf	(_I2C_Status^(0+256)+29),3
 17642                           
 17643                           ;i2c_master.c: 414: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 17644  0AE8  2AF3               	goto	i1l5635
 17645  0AE9                     i1l5619:	
 17646                           ;i2c_master.c: 415: {
 17647                           ;i2c_master.c: 416: case I2C_RESTART_READ:
 17648                           
 17649                           
 17650                           ;i2c_master.c: 417: case I2C_RESTART_WRITE:
 17651                           ;i2c_master.c: 418: return I2C_DO_SEND_RESTART();
 17652  0AE9  3197  278F         	fcall	_I2C_DO_SEND_RESTART
 17653  0AEB  0008               	return
 17654  0AEC                     i1l5623:	
 17655                           ;i2c_master.c: 419: case I2C_CONTINUE:
 17656                           
 17657                           
 17658                           ;i2c_master.c: 420: I2C_MasterSetIrq();
 17659  0AEC  3197  275A         	fcall	_I2C_MasterSetIrq
 17660                           
 17661                           ;i2c_master.c: 421: return I2C_TX;
 17662  0AEE  3003               	movlw	3
 17663  0AEF  0008               	return
 17664  0AF0                     i1l5629:	
 17665                           ;i2c_master.c: 423: case I2C_STOP:
 17666                           
 17667                           ;i2c_master.c: 422: default:
 17668                           
 17669                           
 17670                           ;i2c_master.c: 424: return I2C_DO_SEND_STOP();
 17671  0AF0  3197  2793         	fcall	_I2C_DO_SEND_STOP
 17672                           
 17673                           ;i2c_master.c: 425: }
 17674  0AF2  0008               	return
 17675  0AF3                     i1l5635:	
 17676  0AF3  0022               	movlb	2	; select bank2
 17677  0AF4  082C               	movf	(low ((_I2C_Status| (0+256)+12)))^0,w
 17678  0AF5  00FA               	movwf	??_I2C_DO_TX_EMPTY
 17679  0AF6  087A               	movf	??_I2C_DO_TX_EMPTY,w
 17680  0AF7  00F9               	movwf	I2C_CallbackReturnReset@funPtr
 17681  0AF8  0821               	movf	(_I2C_Status+1)^(0+256),w
 17682  0AF9  008A               	movwf	10
 17683  0AFA  0820               	movf	_I2C_Status^(0+256),w
 17684  0AFB  000A               	callw
 17685  0AFC  318A               	pagesel	$
 17686                           
 17687                           ; Switch size 1, requested type "space"
 17688                           ; Number of cases is 4, Range of values is 1 to 4
 17689                           ; switch strategies available:
 17690                           ; Name         Instructions Cycles
 17691                           ; simple_byte           13     7 (average)
 17692                           ; direct_byte           17     9 (fixed)
 17693                           ; jumptable            263     9 (fixed)
 17694                           ;	Chosen strategy is simple_byte
 17695  0AFD  3A01               	xorlw	1	; case 1
 17696  0AFE  1903               	skipnz
 17697  0AFF  2AF0               	goto	i1l5629
 17698  0B00  3A03               	xorlw	3	; case 2
 17699  0B01  1903               	skipnz
 17700  0B02  2AE9               	goto	i1l5619
 17701  0B03  3A01               	xorlw	1	; case 3
 17702  0B04  1903               	skipnz
 17703  0B05  2AE9               	goto	i1l5619
 17704  0B06  3A07               	xorlw	7	; case 4
 17705  0B07  1903               	skipnz
 17706  0B08  2AEC               	goto	i1l5623
 17707  0B09  2AF0               	goto	i1l5629
 17708  0B0A  0008               	return
 17709  0B0B                     __end_of_I2C_DO_TX_EMPTY:	
 17710                           
 17711                           	psect	text89
 17712  175A                     __ptext89:	
 17713 ;; *************** function _I2C_MasterSetIrq *****************
 17714 ;; Defined at:
 17715 ;;		line 647 in file "mcc_generated_files/i2c_master.c"
 17716 ;; Parameters:    Size  Location     Type
 17717 ;;		None
 17718 ;; Auto vars:     Size  Location     Type
 17719 ;;		None
 17720 ;; Return value:  Size  Location     Type
 17721 ;;                  1    wreg      void 
 17722 ;; Registers used:
 17723 ;;		None
 17724 ;; Tracked objects:
 17725 ;;		On entry : 0/0
 17726 ;;		On exit  : 0/0
 17727 ;;		Unchanged: 0/0
 17728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17733 ;;Total ram usage:        0 bytes
 17734 ;; Hardware stack levels used:    1
 17735 ;; This function calls:
 17736 ;;		Nothing
 17737 ;; This function is called by:
 17738 ;;		_I2C_DO_TX_EMPTY
 17739 ;; This function uses a non-reentrant model
 17740 ;;
 17741                           
 17742                           
 17743                           ;psect for function _I2C_MasterSetIrq
 17744  175A                     _I2C_MasterSetIrq:	
 17745                           
 17746                           ;i2c_master.c: 649: PIR1bits.SSP1IF = 1;
 17747                           
 17748                           ;incstack = 0
 17749                           ; Regs used in _I2C_MasterSetIrq: []
 17750  175A  0020               	movlb	0	; select bank0
 17751  175B  1590               	bsf	16,3	;volatile
 17752  175C  0008               	return
 17753  175D                     __end_of_I2C_MasterSetIrq:	
 17754                           
 17755                           	psect	text90
 17756  17BA                     __ptext90:	
 17757 ;; *************** function _I2C_MasterIsNack *****************
 17758 ;; Defined at:
 17759 ;;		line 599 in file "mcc_generated_files/i2c_master.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;		None
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;		None
 17764 ;; Return value:  Size  Location     Type
 17765 ;;                  1    wreg      unsigned char 
 17766 ;; Registers used:
 17767 ;;		wreg, status,2, status,0
 17768 ;; Tracked objects:
 17769 ;;		On entry : 0/0
 17770 ;;		On exit  : 0/0
 17771 ;;		Unchanged: 0/0
 17772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;Total ram usage:        0 bytes
 17778 ;; Hardware stack levels used:    1
 17779 ;; This function calls:
 17780 ;;		Nothing
 17781 ;; This function is called by:
 17782 ;;		_I2C_MasterFsm
 17783 ;;		_I2C_DO_TX
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           
 17788                           ;psect for function _I2C_MasterIsNack
 17789  17BA                     _I2C_MasterIsNack:	
 17790                           
 17791                           ;i2c_master.c: 601: return SSP1CON2bits.ACKSTAT;
 17792                           
 17793                           ;incstack = 0
 17794                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 17795  17BA  0024               	movlb	4	; select bank4
 17796  17BB  0E16               	swapf	22,w	;volatile
 17797  17BC  0C89               	rrf	9,f
 17798  17BD  0C89               	rrf	9,f
 17799  17BE  3901               	andlw	1
 17800  17BF  0008               	return
 17801  17C0                     __end_of_I2C_MasterIsNack:	
 17802                           
 17803                           	psect	text91
 17804  17AB                     __ptext91:	
 17805 ;; *************** function _I2C_MasterSendTxData *****************
 17806 ;; Defined at:
 17807 ;;		line 569 in file "mcc_generated_files/i2c_master.c"
 17808 ;; Parameters:    Size  Location     Type
 17809 ;;  data            1    wreg     unsigned char 
 17810 ;; Auto vars:     Size  Location     Type
 17811 ;;  data            1    0[COMMON] unsigned char 
 17812 ;; Return value:  Size  Location     Type
 17813 ;;                  1    wreg      void 
 17814 ;; Registers used:
 17815 ;;		wreg
 17816 ;; Tracked objects:
 17817 ;;		On entry : 0/0
 17818 ;;		On exit  : 0/0
 17819 ;;		Unchanged: 0/0
 17820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;Total ram usage:        1 bytes
 17826 ;; Hardware stack levels used:    1
 17827 ;; This function calls:
 17828 ;;		Nothing
 17829 ;; This function is called by:
 17830 ;;		_I2C_DO_SEND_ADR_READ
 17831 ;;		_I2C_DO_SEND_ADR_WRITE
 17832 ;;		_I2C_DO_TX
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           
 17837                           ;psect for function _I2C_MasterSendTxData
 17838  17AB                     _I2C_MasterSendTxData:	
 17839                           
 17840                           ;incstack = 0
 17841                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 17842                           ;I2C_MasterSendTxData@data stored from wreg
 17843  17AB  00F0               	movwf	I2C_MasterSendTxData@data
 17844                           
 17845                           ;i2c_master.c: 571: SSP1BUF = data;
 17846  17AC  0870               	movf	I2C_MasterSendTxData@data,w
 17847  17AD  0024               	movlb	4	; select bank4
 17848  17AE  0091               	movwf	17	;volatile
 17849  17AF  0008               	return
 17850  17B0                     __end_of_I2C_MasterSendTxData:	
 17851                           
 17852                           	psect	text92
 17853  1783                     __ptext92:	
 17854 ;; *************** function i2c_master@I2C_MasterSendAck *****************
 17855 ;; Defined at:
 17856 ;;		line 604 in file "mcc_generated_files/i2c_master.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;		None
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;		None
 17861 ;; Return value:  Size  Location     Type
 17862 ;;                  1    wreg      void 
 17863 ;; Registers used:
 17864 ;;		None
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;Total ram usage:        0 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; This function calls:
 17877 ;;		Nothing
 17878 ;; This function is called by:
 17879 ;;		_I2C_DO_RX
 17880 ;;		_I2C_DO_RX_ACK
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           
 17885                           ;psect for function i2c_master@I2C_MasterSendAck
 17886  1783                     i2c_master@I2C_MasterSendAck:	
 17887                           
 17888                           ;i2c_master.c: 606: SSP1CON2bits.ACKDT = 0;
 17889                           
 17890                           ;incstack = 0
 17891                           ; Regs used in i2c_master@I2C_MasterSendAck: []
 17892  1783  0024               	movlb	4	; select bank4
 17893  1784  1296               	bcf	22,5	;volatile
 17894                           
 17895                           ;i2c_master.c: 607: SSP1CON2bits.ACKEN = 1;
 17896  1785  1616               	bsf	22,4	;volatile
 17897  1786  0008               	return
 17898  1787                     __end_ofi2c_master@I2C_MasterSendAck:	
 17899                           
 17900                           	psect	text93
 17901  1757                     __ptext93:	
 17902 ;; *************** function _I2C_MasterGetRxData *****************
 17903 ;; Defined at:
 17904 ;;		line 564 in file "mcc_generated_files/i2c_master.c"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;		None
 17907 ;; Auto vars:     Size  Location     Type
 17908 ;;		None
 17909 ;; Return value:  Size  Location     Type
 17910 ;;                  1    wreg      unsigned char 
 17911 ;; Registers used:
 17912 ;;		wreg
 17913 ;; Tracked objects:
 17914 ;;		On entry : 0/0
 17915 ;;		On exit  : 0/0
 17916 ;;		Unchanged: 0/0
 17917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;Total ram usage:        0 bytes
 17923 ;; Hardware stack levels used:    1
 17924 ;; This function calls:
 17925 ;;		Nothing
 17926 ;; This function is called by:
 17927 ;;		_I2C_DO_RX
 17928 ;; This function uses a non-reentrant model
 17929 ;;
 17930                           
 17931                           
 17932                           ;psect for function _I2C_MasterGetRxData
 17933  1757                     _I2C_MasterGetRxData:	
 17934                           
 17935                           ;i2c_master.c: 566: return SSP1BUF;
 17936                           
 17937                           ;incstack = 0
 17938                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 17939  1757  0024               	movlb	4	; select bank4
 17940  1758  0811               	movf	17,w	;volatile
 17941  1759  0008               	return
 17942  175A                     __end_of_I2C_MasterGetRxData:	
 17943                           
 17944                           	psect	text94
 17945  177F                     __ptext94:	
 17946 ;; *************** function i2c_master@I2C_MasterSendNack *****************
 17947 ;; Defined at:
 17948 ;;		line 610 in file "mcc_generated_files/i2c_master.c"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;		None
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;		None
 17953 ;; Return value:  Size  Location     Type
 17954 ;;                  1    wreg      void 
 17955 ;; Registers used:
 17956 ;;		None
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;Total ram usage:        0 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; This function calls:
 17969 ;;		Nothing
 17970 ;; This function is called by:
 17971 ;;		_I2C_DO_RX_NACK_STOP
 17972 ;;		_I2C_DO_RX_NACK_RESTART
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           
 17977                           ;psect for function i2c_master@I2C_MasterSendNack
 17978  177F                     i2c_master@I2C_MasterSendNack:	
 17979                           
 17980                           ;i2c_master.c: 612: SSP1CON2bits.ACKDT = 1;
 17981                           
 17982                           ;incstack = 0
 17983                           ; Regs used in i2c_master@I2C_MasterSendNack: []
 17984  177F  0024               	movlb	4	; select bank4
 17985  1780  1696               	bsf	22,5	;volatile
 17986                           
 17987                           ;i2c_master.c: 613: SSP1CON2bits.ACKEN = 1;
 17988  1781  1616               	bsf	22,4	;volatile
 17989  1782  0008               	return
 17990  1783                     __end_ofi2c_master@I2C_MasterSendNack:	
 17991                           
 17992                           	psect	text95
 17993  1754                     __ptext95:	
 17994 ;; *************** function _I2C_MasterStartRx *****************
 17995 ;; Defined at:
 17996 ;;		line 584 in file "mcc_generated_files/i2c_master.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;		None
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;		None
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  1    wreg      void 
 18003 ;; Registers used:
 18004 ;;		None
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;Total ram usage:        0 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; This function calls:
 18017 ;;		Nothing
 18018 ;; This function is called by:
 18019 ;;		_I2C_DO_RCEN
 18020 ;; This function uses a non-reentrant model
 18021 ;;
 18022                           
 18023                           
 18024                           ;psect for function _I2C_MasterStartRx
 18025  1754                     _I2C_MasterStartRx:	
 18026                           
 18027                           ;i2c_master.c: 586: SSP1CON2bits.RCEN = 1;
 18028                           
 18029                           ;incstack = 0
 18030                           ; Regs used in _I2C_MasterStartRx: []
 18031  1754  0024               	movlb	4	; select bank4
 18032  1755  1596               	bsf	22,3	;volatile
 18033  1756  0008               	return
 18034  1757                     __end_of_I2C_MasterStartRx:	
 18035                           
 18036                           	psect	text96
 18037  0002                     __ptext96:	
 18038 ;; *************** function _I2C_CallbackReturnReset *****************
 18039 ;; Defined at:
 18040 ;;		line 526 in file "mcc_generated_files/i2c_master.c"
 18041 ;; Parameters:    Size  Location     Type
 18042 ;;  funPtr          1    9[COMMON] PTR void 
 18043 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18044 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18045 ;; Auto vars:     Size  Location     Type
 18046 ;;		None
 18047 ;; Return value:  Size  Location     Type
 18048 ;;                  1    wreg      enum E97
 18049 ;; Registers used:
 18050 ;;		wreg
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18056 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;Total ram usage:        1 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; This function calls:
 18063 ;;		Nothing
 18064 ;; This function is called by:
 18065 ;;		_I2C_Open
 18066 ;;		_I2C_DO_TX
 18067 ;;		_I2C_DO_RX
 18068 ;;		_I2C_DO_TX_EMPTY
 18069 ;;		_I2C_DO_ADDRESS_NACK
 18070 ;;		_I2C_DO_RX_EMPTY
 18071 ;; This function uses a non-reentrant model
 18072 ;;
 18073                           
 18074                           
 18075                           ;psect for function _I2C_CallbackReturnReset
 18076  0002                     _I2C_CallbackReturnReset:	
 18077                           
 18078                           ;i2c_master.c: 528: return I2C_RESET_LINK;
 18079                           
 18080                           ;incstack = 0
 18081                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 18082  0002  3005               	movlw	5
 18083  0003  0008               	return
 18084  0004                     __end_of_I2C_CallbackReturnReset:	
 18085                           
 18086                           	psect	text97
 18087  1749                     __ptext97:	
 18088 ;; *************** function _I2C_CallbackReturnStop *****************
 18089 ;; Defined at:
 18090 ;;		line 521 in file "mcc_generated_files/i2c_master.c"
 18091 ;; Parameters:    Size  Location     Type
 18092 ;;  funPtr          1    9[COMMON] PTR void 
 18093 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18094 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18095 ;; Auto vars:     Size  Location     Type
 18096 ;;		None
 18097 ;; Return value:  Size  Location     Type
 18098 ;;                  1    wreg      enum E97
 18099 ;; Registers used:
 18100 ;;		wreg
 18101 ;; Tracked objects:
 18102 ;;		On entry : 0/0
 18103 ;;		On exit  : 0/0
 18104 ;;		Unchanged: 0/0
 18105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18106 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18110 ;;Total ram usage:        1 bytes
 18111 ;; Hardware stack levels used:    1
 18112 ;; This function calls:
 18113 ;;		Nothing
 18114 ;; This function is called by:
 18115 ;;		_I2C_Open
 18116 ;;		_I2C_SetCallback
 18117 ;;		i1_I2C_SetCallback
 18118 ;;		_I2C_DO_TX
 18119 ;;		_I2C_DO_RX
 18120 ;;		_I2C_DO_TX_EMPTY
 18121 ;;		_I2C_DO_ADDRESS_NACK
 18122 ;;		_I2C_DO_RX_EMPTY
 18123 ;; This function uses a non-reentrant model
 18124 ;;
 18125                           
 18126                           
 18127                           ;psect for function _I2C_CallbackReturnStop
 18128  1749                     _I2C_CallbackReturnStop:	
 18129                           
 18130                           ;i2c_master.c: 523: return I2C_STOP;
 18131                           
 18132                           ;incstack = 0
 18133                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 18134  1749  3001               	movlw	1
 18135  174A  0008               	return
 18136  174B                     __end_of_I2C_CallbackReturnStop:	
 18137                           
 18138                           	psect	text98
 18139  09BE                     __ptext98:	
 18140 ;; *************** function _rdBlkRegCompleteHandler *****************
 18141 ;; Defined at:
 18142 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;  ptr             1    9[COMMON] PTR void 
 18145 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18146 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;		None
 18149 ;; Return value:  Size  Location     Type
 18150 ;;                  1    wreg      enum E97
 18151 ;; Registers used:
 18152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18153 ;; Tracked objects:
 18154 ;;		On entry : 0/0
 18155 ;;		On exit  : 0/0
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18158 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;Total ram usage:        1 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:    2
 18165 ;; This function calls:
 18166 ;;		_I2C_SetDataCompleteCallback
 18167 ;;		i1_I2C_SetBuffer
 18168 ;; This function is called by:
 18169 ;;		_I2C_ReadDataBlock
 18170 ;;		_I2C_DO_TX
 18171 ;;		_I2C_DO_RX
 18172 ;;		_I2C_DO_TX_EMPTY
 18173 ;;		_I2C_DO_ADDRESS_NACK
 18174 ;;		_I2C_DO_RX_EMPTY
 18175 ;; This function uses a non-reentrant model
 18176 ;;
 18177                           
 18178                           
 18179                           ;psect for function _rdBlkRegCompleteHandler
 18180  09BE                     _rdBlkRegCompleteHandler:	
 18181                           
 18182                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 18183                           
 18184                           ;incstack = 0
 18185                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18186  09BE  0879               	movf	rdBlkRegCompleteHandler@ptr,w
 18187  09BF  3E02               	addlw	2
 18188  09C0  0086               	movwf	6
 18189  09C1  0187               	clrf	7
 18190  09C2  0801               	movf	1,w
 18191  09C3  00F0               	movwf	i1I2C_SetBuffer@buffer
 18192  09C4  3000               	movlw	0
 18193  09C5  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 18194  09C6  0879               	movf	rdBlkRegCompleteHandler@ptr,w
 18195  09C7  0086               	movwf	6
 18196  09C8  0187               	clrf	7
 18197  09C9  3F40               	moviw [0]fsr1
 18198  09CA  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 18199  09CB  3F41               	moviw [1]fsr1
 18200  09CC  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 18201  09CD  3188  2071  3189   	fcall	i1_I2C_SetBuffer
 18202                           
 18203                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 18204  09D0  3000               	movlw	0
 18205  09D1  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 18206  09D2  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 18207  09D3  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 18208  09D4  3188  2065         	fcall	_I2C_SetDataCompleteCallback
 18209                           
 18210                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 18211  09D6  3002               	movlw	2
 18212  09D7  0008               	return
 18213  09D8                     __end_of_rdBlkRegCompleteHandler:	
 18214                           
 18215                           	psect	text99
 18216  0926                     __ptext99:	
 18217 ;; *************** function _wr1RegCompleteHandler *****************
 18218 ;; Defined at:
 18219 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;  ptr             1    9[COMMON] PTR void 
 18222 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18223 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;		None
 18226 ;; Return value:  Size  Location     Type
 18227 ;;                  1    wreg      enum E97
 18228 ;; Registers used:
 18229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18235 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;Total ram usage:        1 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    2
 18242 ;; This function calls:
 18243 ;;		_I2C_SetDataCompleteCallback
 18244 ;;		i1_I2C_SetBuffer
 18245 ;; This function is called by:
 18246 ;;		_I2C_Write1ByteRegister
 18247 ;;		_I2C_DO_TX
 18248 ;;		_I2C_DO_RX
 18249 ;;		_I2C_DO_TX_EMPTY
 18250 ;;		_I2C_DO_ADDRESS_NACK
 18251 ;;		_I2C_DO_RX_EMPTY
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           
 18256                           ;psect for function _wr1RegCompleteHandler
 18257  0926                     _wr1RegCompleteHandler:	
 18258                           
 18259                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 18260                           
 18261                           ;incstack = 0
 18262                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18263  0926  0879               	movf	wr1RegCompleteHandler@ptr,w
 18264  0927  00F0               	movwf	i1I2C_SetBuffer@buffer
 18265  0928  39FF               	andlw	255
 18266  0929  1D03               	skipz
 18267  092A  3000               	movlw	0
 18268  092B  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 18269  092C  3001               	movlw	1
 18270  092D  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 18271  092E  3000               	movlw	0
 18272  092F  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 18273  0930  3188  2071  3189   	fcall	i1_I2C_SetBuffer
 18274                           
 18275                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 18276  0933  3000               	movlw	0
 18277  0934  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 18278  0935  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 18279  0936  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 18280  0937  3188  2065         	fcall	_I2C_SetDataCompleteCallback
 18281                           
 18282                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 18283  0939  3004               	movlw	4
 18284  093A  0008               	return
 18285  093B                     __end_of_wr1RegCompleteHandler:	
 18286                           
 18287                           	psect	text100
 18288  0911                     __ptext100:	
 18289 ;; *************** function _rd2RegCompleteHandler *****************
 18290 ;; Defined at:
 18291 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 18292 ;; Parameters:    Size  Location     Type
 18293 ;;  ptr             1    9[COMMON] PTR void 
 18294 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18295 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18296 ;; Auto vars:     Size  Location     Type
 18297 ;;		None
 18298 ;; Return value:  Size  Location     Type
 18299 ;;                  1    wreg      enum E97
 18300 ;; Registers used:
 18301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18302 ;; Tracked objects:
 18303 ;;		On entry : 0/0
 18304 ;;		On exit  : 0/0
 18305 ;;		Unchanged: 0/0
 18306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18307 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18311 ;;Total ram usage:        1 bytes
 18312 ;; Hardware stack levels used:    1
 18313 ;; Hardware stack levels required when called:    2
 18314 ;; This function calls:
 18315 ;;		_I2C_SetDataCompleteCallback
 18316 ;;		i1_I2C_SetBuffer
 18317 ;; This function is called by:
 18318 ;;		_I2C_Read2ByteRegister
 18319 ;;		_I2C_DO_TX
 18320 ;;		_I2C_DO_RX
 18321 ;;		_I2C_DO_TX_EMPTY
 18322 ;;		_I2C_DO_ADDRESS_NACK
 18323 ;;		_I2C_DO_RX_EMPTY
 18324 ;; This function uses a non-reentrant model
 18325 ;;
 18326                           
 18327                           
 18328                           ;psect for function _rd2RegCompleteHandler
 18329  0911                     _rd2RegCompleteHandler:	
 18330                           
 18331                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 18332                           
 18333                           ;incstack = 0
 18334                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18335  0911  0879               	movf	rd2RegCompleteHandler@ptr,w
 18336  0912  00F0               	movwf	i1I2C_SetBuffer@buffer
 18337  0913  39FF               	andlw	255
 18338  0914  1D03               	skipz
 18339  0915  3000               	movlw	0
 18340  0916  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 18341  0917  3002               	movlw	2
 18342  0918  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 18343  0919  3000               	movlw	0
 18344  091A  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 18345  091B  3188  2071  3189   	fcall	i1_I2C_SetBuffer
 18346                           
 18347                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 18348  091E  3000               	movlw	0
 18349  091F  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 18350  0920  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 18351  0921  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 18352  0922  3188  2065         	fcall	_I2C_SetDataCompleteCallback
 18353                           
 18354                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 18355  0924  3002               	movlw	2
 18356  0925  0008               	return
 18357  0926                     __end_of_rd2RegCompleteHandler:	
 18358                           
 18359                           	psect	text101
 18360  08FC                     __ptext101:	
 18361 ;; *************** function _rd1RegCompleteHandler *****************
 18362 ;; Defined at:
 18363 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;  ptr             1    9[COMMON] PTR void 
 18366 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18367 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;		None
 18370 ;; Return value:  Size  Location     Type
 18371 ;;                  1    wreg      enum E97
 18372 ;; Registers used:
 18373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18374 ;; Tracked objects:
 18375 ;;		On entry : 0/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18379 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;Total ram usage:        1 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    2
 18386 ;; This function calls:
 18387 ;;		_I2C_SetDataCompleteCallback
 18388 ;;		i1_I2C_SetBuffer
 18389 ;; This function is called by:
 18390 ;;		_I2C_Read1ByteRegister
 18391 ;;		_I2C_DO_TX
 18392 ;;		_I2C_DO_RX
 18393 ;;		_I2C_DO_TX_EMPTY
 18394 ;;		_I2C_DO_ADDRESS_NACK
 18395 ;;		_I2C_DO_RX_EMPTY
 18396 ;; This function uses a non-reentrant model
 18397 ;;
 18398                           
 18399                           
 18400                           ;psect for function _rd1RegCompleteHandler
 18401  08FC                     _rd1RegCompleteHandler:	
 18402                           
 18403                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 18404                           
 18405                           ;incstack = 0
 18406                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18407  08FC  0879               	movf	rd1RegCompleteHandler@ptr,w
 18408  08FD  00F0               	movwf	i1I2C_SetBuffer@buffer
 18409  08FE  39FF               	andlw	255
 18410  08FF  1D03               	skipz
 18411  0900  3000               	movlw	0
 18412  0901  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 18413  0902  3001               	movlw	1
 18414  0903  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 18415  0904  3000               	movlw	0
 18416  0905  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 18417  0906  3188  2071  3188   	fcall	i1_I2C_SetBuffer
 18418                           
 18419                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 18420  0909  3000               	movlw	0
 18421  090A  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 18422  090B  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 18423  090C  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 18424  090D  3188  2065         	fcall	_I2C_SetDataCompleteCallback
 18425                           
 18426                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 18427  090F  3002               	movlw	2
 18428  0910  0008               	return
 18429  0911                     __end_of_rd1RegCompleteHandler:	
 18430                           
 18431                           	psect	text102
 18432  08E7                     __ptext102:	
 18433 ;; *************** function _wr2RegCompleteHandler *****************
 18434 ;; Defined at:
 18435 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;  ptr             1    9[COMMON] PTR void 
 18438 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18439 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;		None
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  1    wreg      enum E97
 18444 ;; Registers used:
 18445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18451 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18455 ;;Total ram usage:        1 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    2
 18458 ;; This function calls:
 18459 ;;		_I2C_SetDataCompleteCallback
 18460 ;;		i1_I2C_SetBuffer
 18461 ;; This function is called by:
 18462 ;;		_I2C_Write2ByteRegister
 18463 ;;		_I2C_DO_TX
 18464 ;;		_I2C_DO_RX
 18465 ;;		_I2C_DO_TX_EMPTY
 18466 ;;		_I2C_DO_ADDRESS_NACK
 18467 ;;		_I2C_DO_RX_EMPTY
 18468 ;; This function uses a non-reentrant model
 18469 ;;
 18470                           
 18471                           
 18472                           ;psect for function _wr2RegCompleteHandler
 18473  08E7                     _wr2RegCompleteHandler:	
 18474                           
 18475                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 18476                           
 18477                           ;incstack = 0
 18478                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18479  08E7  0879               	movf	wr2RegCompleteHandler@ptr,w
 18480  08E8  00F0               	movwf	i1I2C_SetBuffer@buffer
 18481  08E9  39FF               	andlw	255
 18482  08EA  1D03               	skipz
 18483  08EB  3000               	movlw	0
 18484  08EC  00F1               	movwf	i1I2C_SetBuffer@buffer+1
 18485  08ED  3002               	movlw	2
 18486  08EE  00F2               	movwf	i1I2C_SetBuffer@bufferSize
 18487  08EF  3000               	movlw	0
 18488  08F0  00F3               	movwf	i1I2C_SetBuffer@bufferSize+1
 18489  08F1  3188  2071  3188   	fcall	i1_I2C_SetBuffer
 18490                           
 18491                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 18492  08F4  3000               	movlw	0
 18493  08F5  00F5               	movwf	I2C_SetDataCompleteCallback@cb
 18494  08F6  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
 18495  08F7  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
 18496  08F8  3188  2065         	fcall	_I2C_SetDataCompleteCallback
 18497                           
 18498                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 18499  08FA  3004               	movlw	4
 18500  08FB  0008               	return
 18501  08FC                     __end_of_wr2RegCompleteHandler:	
 18502                           
 18503                           	psect	text103
 18504  0871                     __ptext103:	
 18505 ;; *************** function i1_I2C_SetBuffer *****************
 18506 ;; Defined at:
 18507 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 18508 ;; Parameters:    Size  Location     Type
 18509 ;;  buffer          2    0[COMMON] PTR void 
 18510 ;;		 -> RxBuff(8), Command(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 18511 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
 18512 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
 18513 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
 18514 ;;  bufferSize      2    2[COMMON] unsigned int 
 18515 ;; Auto vars:     Size  Location     Type
 18516 ;;		None
 18517 ;; Return value:  Size  Location     Type
 18518 ;;                  1    wreg      void 
 18519 ;; Registers used:
 18520 ;;		wreg
 18521 ;; Tracked objects:
 18522 ;;		On entry : 0/0
 18523 ;;		On exit  : 0/0
 18524 ;;		Unchanged: 0/0
 18525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18529 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18530 ;;Total ram usage:        4 bytes
 18531 ;; Hardware stack levels used:    1
 18532 ;; This function calls:
 18533 ;;		Nothing
 18534 ;; This function is called by:
 18535 ;;		_rd1RegCompleteHandler
 18536 ;;		_rd2RegCompleteHandler
 18537 ;;		_wr1RegCompleteHandler
 18538 ;;		_wr2RegCompleteHandler
 18539 ;;		_rdBlkRegCompleteHandler
 18540 ;; This function uses a non-reentrant model
 18541 ;;
 18542                           
 18543                           
 18544                           ;psect for function i1_I2C_SetBuffer
 18545  0871                     i1_I2C_SetBuffer:	
 18546                           
 18547                           ;i2c_master.c: 266: if(I2C_Status.bufferFree)
 18548                           
 18549                           ;incstack = 0
 18550                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 18551  0871  0022               	movlb	2	; select bank2
 18552  0872  1DBD               	btfss	(_I2C_Status^(0+256)+29),3
 18553  0873  0008               	return
 18554                           
 18555                           ;i2c_master.c: 267: {
 18556                           ;i2c_master.c: 268: I2C_Status.data_ptr = buffer;
 18557  0874  0871               	movf	i1I2C_SetBuffer@buffer+1,w
 18558  0875  00B8               	movwf	((low ((_I2C_Status| (0+256)+23))+1))^0
 18559  0876  0870               	movf	i1I2C_SetBuffer@buffer,w
 18560  0877  00B7               	movwf	(low ((_I2C_Status| (0+256)+23)))^0
 18561                           
 18562                           ;i2c_master.c: 269: I2C_Status.data_length = bufferSize;
 18563  0878  0873               	movf	i1I2C_SetBuffer@bufferSize+1,w
 18564  0879  00BA               	movwf	((_I2C_Status+1)^(0+256)+25)
 18565  087A  0872               	movf	i1I2C_SetBuffer@bufferSize,w
 18566  087B  00B9               	movwf	(_I2C_Status^(0+256)+25)
 18567                           
 18568                           ;i2c_master.c: 270: I2C_Status.bufferFree = 0;
 18569  087C  11BD               	bcf	(_I2C_Status^(0+256)+29),3
 18570  087D  0008               	return
 18571  087E                     __end_ofi1_I2C_SetBuffer:	
 18572                           
 18573                           	psect	text104
 18574  0865                     __ptext104:	
 18575 ;; *************** function _I2C_SetDataCompleteCallback *****************
 18576 ;; Defined at:
 18577 ;;		line 274 in file "mcc_generated_files/i2c_master.c"
 18578 ;; Parameters:    Size  Location     Type
 18579 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 18580 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 18581 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 18582 ;;  ptr             1    7[COMMON] PTR void 
 18583 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18584 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;		None
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  1    wreg      void 
 18589 ;; Registers used:
 18590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18596 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18599 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;Total ram usage:        4 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    1
 18603 ;; This function calls:
 18604 ;;		i1_I2C_SetCallback
 18605 ;; This function is called by:
 18606 ;;		_rd1RegCompleteHandler
 18607 ;;		_rd2RegCompleteHandler
 18608 ;;		_wr1RegCompleteHandler
 18609 ;;		_wr2RegCompleteHandler
 18610 ;;		_rdBlkRegCompleteHandler
 18611 ;;		_I2C_Read1ByteRegister
 18612 ;;		_I2C_Read2ByteRegister
 18613 ;;		_I2C_Write1ByteRegister
 18614 ;;		_I2C_Write2ByteRegister
 18615 ;;		_I2C_ReadDataBlock
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           
 18620                           ;psect for function _I2C_SetDataCompleteCallback
 18621  0865                     _I2C_SetDataCompleteCallback:	
 18622                           
 18623                           ;i2c_master.c: 276: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 18624                           
 18625                           ;incstack = 0
 18626                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 18627  0865  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
 18628  0866  00F1               	movwf	i1I2C_SetCallback@cb+1
 18629  0867  0875               	movf	I2C_SetDataCompleteCallback@cb,w
 18630  0868  00F0               	movwf	i1I2C_SetCallback@cb
 18631  0869  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
 18632  086A  00F8               	movwf	??_I2C_SetDataCompleteCallback
 18633  086B  0878               	movf	??_I2C_SetDataCompleteCallback,w
 18634  086C  00F2               	movwf	i1I2C_SetCallback@ptr
 18635  086D  3000               	movlw	0
 18636  086E  318B  230B         	fcall	i1_I2C_SetCallback
 18637  0870  0008               	return
 18638  0871                     __end_of_I2C_SetDataCompleteCallback:	
 18639                           
 18640                           	psect	text105
 18641  0B0B                     __ptext105:	
 18642 ;; *************** function i1_I2C_SetCallback *****************
 18643 ;; Defined at:
 18644 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 18645 ;; Parameters:    Size  Location     Type
 18646 ;;  idx             1    wreg     enum E12128
 18647 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 18648 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 18649 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
 18650 ;;  ptr             1    2[COMMON] PTR void 
 18651 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 18652 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 18653 ;; Auto vars:     Size  Location     Type
 18654 ;;  idx             1    4[COMMON] enum E12128
 18655 ;; Return value:  Size  Location     Type
 18656 ;;                  1    wreg      void 
 18657 ;; Registers used:
 18658 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18659 ;; Tracked objects:
 18660 ;;		On entry : 0/0
 18661 ;;		On exit  : 0/0
 18662 ;;		Unchanged: 0/0
 18663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18664 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18667 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18668 ;;Total ram usage:        5 bytes
 18669 ;; Hardware stack levels used:    1
 18670 ;; This function calls:
 18671 ;;		Nothing
 18672 ;; This function is called by:
 18673 ;;		_I2C_SetDataCompleteCallback
 18674 ;; This function uses a non-reentrant model
 18675 ;;
 18676                           
 18677                           
 18678                           ;psect for function i1_I2C_SetCallback
 18679  0B0B                     i1_I2C_SetCallback:	
 18680                           
 18681                           ;incstack = 0
 18682                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 18683                           ;i1I2C_SetCallback@idx stored from wreg
 18684  0B0B  00F4               	movwf	i1I2C_SetCallback@idx
 18685                           
 18686                           ;i2c_master.c: 306: if(cb)
 18687  0B0C  0870               	movf	i1I2C_SetCallback@cb,w
 18688  0B0D  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 18689  0B0E  1903               	btfsc	3,2
 18690  0B0F  2B23               	goto	i1l5005
 18691                           
 18692                           ;i2c_master.c: 307: {
 18693                           ;i2c_master.c: 308: I2C_Status.callbackTable[idx] = cb;
 18694  0B10  3574               	lslf	i1I2C_SetCallback@idx,w
 18695  0B11  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 18696  0B12  0086               	movwf	6
 18697  0B13  3001               	movlw	1	; select bank2/3
 18698  0B14  0087               	movwf	7
 18699  0B15  0870               	movf	i1I2C_SetCallback@cb,w
 18700  0B16  3FC0               	movwi [0]fsr1
 18701  0B17  0871               	movf	i1I2C_SetCallback@cb+1,w
 18702  0B18  3FC1               	movwi [1]fsr1
 18703                           
 18704                           ;i2c_master.c: 309: I2C_Status.callbackPayload[idx] = ptr;
 18705  0B19  0872               	movf	i1I2C_SetCallback@ptr,w
 18706  0B1A  00F3               	movwf	??i1_I2C_SetCallback
 18707  0B1B  0874               	movf	i1I2C_SetCallback@idx,w
 18708  0B1C  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 18709  0B1D  0086               	movwf	6
 18710  0B1E  3001               	movlw	1	; select bank2/3
 18711  0B1F  0087               	movwf	7
 18712  0B20  0873               	movf	??i1_I2C_SetCallback,w
 18713  0B21  0081               	movwf	1
 18714                           
 18715                           ;i2c_master.c: 310: }
 18716  0B22  0008               	return
 18717  0B23                     i1l5005:	
 18718                           
 18719                           ;i2c_master.c: 311: else
 18720                           ;i2c_master.c: 312: {
 18721                           ;i2c_master.c: 313: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 18722  0B23  3574               	lslf	i1I2C_SetCallback@idx,w
 18723  0B24  3E20               	addlw	(low (_I2C_Status| (0+256)))& (0+255)
 18724  0B25  0086               	movwf	6
 18725  0B26  3001               	movlw	1	; select bank2/3
 18726  0B27  0087               	movwf	7
 18727  0B28  3049               	movlw	low _I2C_CallbackReturnStop
 18728  0B29  3FC0               	movwi [0]fsr1
 18729  0B2A  3017               	movlw	high _I2C_CallbackReturnStop
 18730  0B2B  3FC1               	movwi [1]fsr1
 18731                           
 18732                           ;i2c_master.c: 314: I2C_Status.callbackPayload[idx] = (0);
 18733  0B2C  0874               	movf	i1I2C_SetCallback@idx,w
 18734  0B2D  3E2C               	addlw	(low ((_I2C_Status| (0+256)+12)))& (0+255)
 18735  0B2E  0086               	movwf	6
 18736  0B2F  3001               	movlw	1	; select bank2/3
 18737  0B30  0087               	movwf	7
 18738  0B31  0181               	clrf	1
 18739  0B32  0008               	return
 18740  0B33                     __end_ofi1_I2C_SetCallback:	
 18741                           
 18742                           	psect	text106
 18743  1751                     __ptext106:	
 18744 ;; *************** function _I2C_MasterStop *****************
 18745 ;; Defined at:
 18746 ;;		line 594 in file "mcc_generated_files/i2c_master.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;		None
 18749 ;; Auto vars:     Size  Location     Type
 18750 ;;		None
 18751 ;; Return value:  Size  Location     Type
 18752 ;;                  1    wreg      void 
 18753 ;; Registers used:
 18754 ;;		None
 18755 ;; Tracked objects:
 18756 ;;		On entry : 0/0
 18757 ;;		On exit  : 0/0
 18758 ;;		Unchanged: 0/0
 18759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18764 ;;Total ram usage:        0 bytes
 18765 ;; Hardware stack levels used:    1
 18766 ;; This function calls:
 18767 ;;		Nothing
 18768 ;; This function is called by:
 18769 ;;		_I2C_DO_SEND_STOP
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           
 18774                           ;psect for function _I2C_MasterStop
 18775  1751                     _I2C_MasterStop:	
 18776                           
 18777                           ;i2c_master.c: 596: SSP1CON2bits.PEN = 1;
 18778                           
 18779                           ;incstack = 0
 18780                           ; Regs used in _I2C_MasterStop: []
 18781  1751  0024               	movlb	4	; select bank4
 18782  1752  1516               	bsf	22,2	;volatile
 18783  1753  0008               	return
 18784  1754                     __end_of_I2C_MasterStop:	
 18785                           
 18786                           	psect	text107
 18787  174E                     __ptext107:	
 18788 ;; *************** function _I2C_MasterEnableRestart *****************
 18789 ;; Defined at:
 18790 ;;		line 574 in file "mcc_generated_files/i2c_master.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;		None
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;		None
 18795 ;; Return value:  Size  Location     Type
 18796 ;;                  1    wreg      void 
 18797 ;; Registers used:
 18798 ;;		None
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;Total ram usage:        0 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; This function calls:
 18811 ;;		Nothing
 18812 ;; This function is called by:
 18813 ;;		_I2C_DO_SEND_RESTART_READ
 18814 ;;		_I2C_DO_SEND_RESTART_WRITE
 18815 ;;		_I2C_DO_SEND_RESTART
 18816 ;;		_I2C_DO_RX_EMPTY
 18817 ;; This function uses a non-reentrant model
 18818 ;;
 18819                           
 18820                           
 18821                           ;psect for function _I2C_MasterEnableRestart
 18822  174E                     _I2C_MasterEnableRestart:	
 18823                           
 18824                           ;i2c_master.c: 576: SSP1CON2bits.RSEN = 1;
 18825                           
 18826                           ;incstack = 0
 18827                           ; Regs used in _I2C_MasterEnableRestart: []
 18828  174E  0024               	movlb	4	; select bank4
 18829  174F  1496               	bsf	22,1	;volatile
 18830  1750  0008               	return
 18831  1751                     __end_of_I2C_MasterEnableRestart:	
 18832                           
 18833                           	psect	text108
 18834  0A45                     __ptext108:	
 18835 ;; *************** function _EUSART_Transmit_ISR *****************
 18836 ;; Defined at:
 18837 ;;		line 206 in file "mcc_generated_files/eusart.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;		None
 18840 ;; Auto vars:     Size  Location     Type
 18841 ;;		None
 18842 ;; Return value:  Size  Location     Type
 18843 ;;                  1    wreg      void 
 18844 ;; Registers used:
 18845 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18846 ;; Tracked objects:
 18847 ;;		On entry : 0/0
 18848 ;;		On exit  : 0/0
 18849 ;;		Unchanged: 0/0
 18850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;Total ram usage:        1 bytes
 18856 ;; Hardware stack levels used:    1
 18857 ;; This function calls:
 18858 ;;		Nothing
 18859 ;; This function is called by:
 18860 ;;		_EUSART_Initialize
 18861 ;;		_INTERRUPT_InterruptManager
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           
 18866                           ;psect for function _EUSART_Transmit_ISR
 18867  0A45                     _EUSART_Transmit_ISR:	
 18868                           
 18869                           ;eusart.c: 210: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 18870                           
 18871                           ;incstack = 0
 18872                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 18873  0A45  3008               	movlw	8
 18874  0A46  0021               	movlb	1	; select bank1
 18875  0A47  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18876  0A48  1803               	skipnc
 18877  0A49  2A60               	goto	i1l696
 18878                           
 18879                           ;eusart.c: 211: {
 18880                           ;eusart.c: 212: TX1REG = eusartTxBuffer[eusartTxTail++];
 18881  0A4A  0851               	movf	_eusartTxTail^(0+128),w
 18882  0A4B  3E4E               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18883  0A4C  0086               	movwf	6
 18884  0A4D  3001               	movlw	1	; select bank2/3
 18885  0A4E  0087               	movwf	7
 18886  0A4F  0801               	movf	1,w
 18887  0A50  0023               	movlb	3	; select bank3
 18888  0A51  009A               	movwf	26	;volatile
 18889  0A52  3001               	movlw	1
 18890  0A53  00F0               	movwf	??_EUSART_Transmit_ISR
 18891  0A54  0870               	movf	??_EUSART_Transmit_ISR,w
 18892  0A55  0021               	movlb	1	; select bank1
 18893  0A56  07D1               	addwf	_eusartTxTail^(0+128),f	;volatile
 18894                           
 18895                           ;eusart.c: 213: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 18896  0A57  3008               	movlw	8
 18897  0A58  0251               	subwf	_eusartTxTail^(0+128),w	;volatile
 18898  0A59  1803               	btfsc	3,0
 18899                           
 18900                           ;eusart.c: 214: {
 18901                           ;eusart.c: 215: eusartTxTail = 0;
 18902  0A5A  01D1               	clrf	_eusartTxTail^(0+128)	;volatile
 18903                           
 18904                           ;eusart.c: 216: }
 18905                           ;eusart.c: 217: eusartTxBufferRemaining++;
 18906  0A5B  3001               	movlw	1
 18907  0A5C  00F0               	movwf	??_EUSART_Transmit_ISR
 18908  0A5D  0870               	movf	??_EUSART_Transmit_ISR,w
 18909  0A5E  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18910                           
 18911                           ;eusart.c: 218: }
 18912  0A5F  0008               	return
 18913  0A60                     i1l696:	
 18914                           
 18915                           ;eusart.c: 219: else
 18916                           ;eusart.c: 220: {
 18917                           ;eusart.c: 221: PIE1bits.TXIE = 0;
 18918  0A60  1210               	bcf	16,4	;volatile
 18919  0A61  0008               	return
 18920  0A62                     __end_of_EUSART_Transmit_ISR:	
 18921                           
 18922                           	psect	text109
 18923  0CAA                     __ptext109:	
 18924 ;; *************** function _EUSART_Receive_ISR *****************
 18925 ;; Defined at:
 18926 ;;		line 225 in file "mcc_generated_files/eusart.c"
 18927 ;; Parameters:    Size  Location     Type
 18928 ;;		None
 18929 ;; Auto vars:     Size  Location     Type
 18930 ;;		None
 18931 ;; Return value:  Size  Location     Type
 18932 ;;                  1    wreg      void 
 18933 ;; Registers used:
 18934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18935 ;; Tracked objects:
 18936 ;;		On entry : 0/0
 18937 ;;		On exit  : 0/0
 18938 ;;		Unchanged: 0/0
 18939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;Total ram usage:        0 bytes
 18945 ;; Hardware stack levels used:    1
 18946 ;; Hardware stack levels required when called:    2
 18947 ;; This function calls:
 18948 ;;		Absolute function
 18949 ;;		_EUSART_DefaultErrorHandler
 18950 ;;		_EUSART_DefaultFramingErrorHandler
 18951 ;;		_EUSART_DefaultOverrunErrorHandler
 18952 ;;		_EUSART_RxDataHandler
 18953 ;; This function is called by:
 18954 ;;		_EUSART_Initialize
 18955 ;;		_INTERRUPT_InterruptManager
 18956 ;; This function uses a non-reentrant model
 18957 ;;
 18958                           
 18959                           
 18960                           ;psect for function _EUSART_Receive_ISR
 18961  0CAA                     _EUSART_Receive_ISR:	
 18962                           
 18963                           ;eusart.c: 228: eusartRxStatusBuffer[eusartRxHead].status = 0;
 18964                           
 18965                           ;incstack = 0
 18966                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18967  0CAA  0020               	movlb	0	; select bank0
 18968  0CAB  086B               	movf	_eusartRxHead,w	;volatile
 18969  0CAC  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18970  0CAD  0086               	movwf	6
 18971  0CAE  3001               	movlw	1	; select bank2/3
 18972  0CAF  0087               	movwf	7
 18973  0CB0  0181               	clrf	1
 18974                           
 18975                           ;eusart.c: 230: if(RC1STAbits.FERR){
 18976  0CB1  0023               	movlb	3	; select bank3
 18977  0CB2  1D1D               	btfss	29,2	;volatile
 18978  0CB3  2CC1               	goto	i1l6211
 18979                           
 18980                           ;eusart.c: 231: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 18981  0CB4  0020               	movlb	0	; select bank0
 18982  0CB5  086B               	movf	_eusartRxHead,w	;volatile
 18983  0CB6  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18984  0CB7  0086               	movwf	6
 18985  0CB8  3001               	movlw	1	; select bank2/3
 18986  0CB9  0087               	movwf	7
 18987  0CBA  1481               	bsf	1,1
 18988                           
 18989                           ;eusart.c: 232: EUSART_FramingErrorHandler();
 18990  0CBB  0023               	movlb	3	; select bank3
 18991  0CBC  0825               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 18992  0CBD  008A               	movwf	10
 18993  0CBE  0824               	movf	_EUSART_FramingErrorHandler^(0+384),w
 18994  0CBF  000A               	callw
 18995  0CC0  318C               	pagesel	$
 18996  0CC1                     i1l6211:	
 18997                           
 18998                           ;eusart.c: 233: }
 18999                           ;eusart.c: 235: if(RC1STAbits.OERR){
 19000  0CC1  0023               	movlb	3	; select bank3
 19001  0CC2  1C9D               	btfss	29,1	;volatile
 19002  0CC3  2CD1               	goto	i1l6217
 19003                           
 19004                           ;eusart.c: 236: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 19005  0CC4  0020               	movlb	0	; select bank0
 19006  0CC5  086B               	movf	_eusartRxHead,w	;volatile
 19007  0CC6  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19008  0CC7  0086               	movwf	6
 19009  0CC8  3001               	movlw	1	; select bank2/3
 19010  0CC9  0087               	movwf	7
 19011  0CCA  1501               	bsf	1,2
 19012                           
 19013                           ;eusart.c: 237: EUSART_OverrunErrorHandler();
 19014  0CCB  0023               	movlb	3	; select bank3
 19015  0CCC  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 19016  0CCD  008A               	movwf	10
 19017  0CCE  0822               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 19018  0CCF  000A               	callw
 19019  0CD0  318C               	pagesel	$
 19020  0CD1                     i1l6217:	
 19021                           
 19022                           ;eusart.c: 238: }
 19023                           ;eusart.c: 240: if(eusartRxStatusBuffer[eusartRxHead].status){
 19024  0CD1  0020               	movlb	0	; select bank0
 19025  0CD2  086B               	movf	_eusartRxHead,w	;volatile
 19026  0CD3  3E3E               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19027  0CD4  0086               	movwf	6
 19028  0CD5  3001               	movlw	1	; select bank2/3
 19029  0CD6  0087               	movwf	7
 19030  0CD7  0801               	movf	1,w
 19031  0CD8  1903               	btfsc	3,2
 19032  0CD9  2CE1               	goto	i1l6221
 19033                           
 19034                           ;eusart.c: 241: EUSART_ErrorHandler();
 19035  0CDA  0023               	movlb	3	; select bank3
 19036  0CDB  0821               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 19037  0CDC  008A               	movwf	10
 19038  0CDD  0820               	movf	_EUSART_ErrorHandler^(0+384),w
 19039  0CDE  000A               	callw
 19040  0CDF  318C               	pagesel	$
 19041                           
 19042                           ;eusart.c: 242: } else {
 19043  0CE0  0008               	return
 19044  0CE1                     i1l6221:	
 19045                           
 19046                           ;eusart.c: 243: EUSART_RxDataHandler();
 19047  0CE1  3189  21A5         	fcall	_EUSART_RxDataHandler
 19048  0CE3  0008               	return
 19049  0CE4                     __end_of_EUSART_Receive_ISR:	
 19050                           
 19051                           	psect	text110
 19052  177B                     __ptext110:	
 19053 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 19054 ;; Defined at:
 19055 ;;		line 261 in file "mcc_generated_files/eusart.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;		None
 19058 ;; Auto vars:     Size  Location     Type
 19059 ;;		None
 19060 ;; Return value:  Size  Location     Type
 19061 ;;                  1    wreg      void 
 19062 ;; Registers used:
 19063 ;;		None
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19073 ;;Total ram usage:        0 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; This function calls:
 19076 ;;		Nothing
 19077 ;; This function is called by:
 19078 ;;		_EUSART_Initialize
 19079 ;;		_EUSART_Receive_ISR
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           
 19084                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 19085  177B                     _EUSART_DefaultOverrunErrorHandler:	
 19086                           
 19087                           ;eusart.c: 264: RC1STAbits.CREN = 0;
 19088                           
 19089                           ;incstack = 0
 19090                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 19091  177B  0023               	movlb	3	; select bank3
 19092  177C  121D               	bcf	29,4	;volatile
 19093                           
 19094                           ;eusart.c: 265: RC1STAbits.CREN = 1;
 19095  177D  161D               	bsf	29,4	;volatile
 19096  177E  0008               	return
 19097  177F                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 19098                           
 19099                           	psect	text111
 19100  1748                     __ptext111:	
 19101 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 19102 ;; Defined at:
 19103 ;;		line 259 in file "mcc_generated_files/eusart.c"
 19104 ;; Parameters:    Size  Location     Type
 19105 ;;		None
 19106 ;; Auto vars:     Size  Location     Type
 19107 ;;		None
 19108 ;; Return value:  Size  Location     Type
 19109 ;;                  1    wreg      void 
 19110 ;; Registers used:
 19111 ;;		None
 19112 ;; Tracked objects:
 19113 ;;		On entry : 0/0
 19114 ;;		On exit  : 0/0
 19115 ;;		Unchanged: 0/0
 19116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19121 ;;Total ram usage:        0 bytes
 19122 ;; Hardware stack levels used:    1
 19123 ;; This function calls:
 19124 ;;		Nothing
 19125 ;; This function is called by:
 19126 ;;		_EUSART_Initialize
 19127 ;;		_EUSART_Receive_ISR
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           
 19132                           ;psect for function _EUSART_DefaultFramingErrorHandler
 19133  1748                     _EUSART_DefaultFramingErrorHandler:	
 19134                           
 19135                           ;incstack = 0
 19136                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 19137  1748  0008               	return
 19138  1749                     __end_of_EUSART_DefaultFramingErrorHandler:	
 19139                           
 19140                           	psect	text112
 19141  174B                     __ptext112:	
 19142 ;; *************** function _EUSART_DefaultErrorHandler *****************
 19143 ;; Defined at:
 19144 ;;		line 269 in file "mcc_generated_files/eusart.c"
 19145 ;; Parameters:    Size  Location     Type
 19146 ;;		None
 19147 ;; Auto vars:     Size  Location     Type
 19148 ;;		None
 19149 ;; Return value:  Size  Location     Type
 19150 ;;                  1    wreg      void 
 19151 ;; Registers used:
 19152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19153 ;; Tracked objects:
 19154 ;;		On entry : 0/0
 19155 ;;		On exit  : 0/0
 19156 ;;		Unchanged: 0/0
 19157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19162 ;;Total ram usage:        0 bytes
 19163 ;; Hardware stack levels used:    1
 19164 ;; Hardware stack levels required when called:    1
 19165 ;; This function calls:
 19166 ;;		_EUSART_RxDataHandler
 19167 ;; This function is called by:
 19168 ;;		_EUSART_Initialize
 19169 ;;		_EUSART_Receive_ISR
 19170 ;; This function uses a non-reentrant model
 19171 ;;
 19172                           
 19173                           
 19174                           ;psect for function _EUSART_DefaultErrorHandler
 19175  174B                     _EUSART_DefaultErrorHandler:	
 19176                           
 19177                           ;eusart.c: 270: EUSART_RxDataHandler();
 19178                           
 19179                           ;incstack = 0
 19180                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19181  174B  3189  21A5         	fcall	_EUSART_RxDataHandler
 19182  174D  0008               	return
 19183  174E                     __end_of_EUSART_DefaultErrorHandler:	
 19184                           
 19185                           	psect	text113
 19186  09A5                     __ptext113:	
 19187 ;; *************** function _EUSART_RxDataHandler *****************
 19188 ;; Defined at:
 19189 ;;		line 249 in file "mcc_generated_files/eusart.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;		None
 19192 ;; Auto vars:     Size  Location     Type
 19193 ;;		None
 19194 ;; Return value:  Size  Location     Type
 19195 ;;                  1    wreg      void 
 19196 ;; Registers used:
 19197 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;Total ram usage:        1 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; This function calls:
 19210 ;;		Nothing
 19211 ;; This function is called by:
 19212 ;;		_EUSART_Receive_ISR
 19213 ;;		_EUSART_DefaultErrorHandler
 19214 ;; This function uses a non-reentrant model
 19215 ;;
 19216                           
 19217                           
 19218                           ;psect for function _EUSART_RxDataHandler
 19219  09A5                     _EUSART_RxDataHandler:	
 19220                           
 19221                           ;eusart.c: 251: eusartRxBuffer[eusartRxHead++] = RC1REG;
 19222                           
 19223                           ;incstack = 0
 19224                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 19225  09A5  0023               	movlb	3	; select bank3
 19226  09A6  0819               	movf	25,w	;volatile
 19227  09A7  00F0               	movwf	??_EUSART_RxDataHandler
 19228  09A8  0020               	movlb	0	; select bank0
 19229  09A9  086B               	movf	_eusartRxHead,w
 19230  09AA  3E46               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 19231  09AB  0086               	movwf	6
 19232  09AC  3001               	movlw	1	; select bank2/3
 19233  09AD  0087               	movwf	7
 19234  09AE  0870               	movf	??_EUSART_RxDataHandler,w
 19235  09AF  0081               	movwf	1
 19236  09B0  3001               	movlw	1
 19237  09B1  00F0               	movwf	??_EUSART_RxDataHandler
 19238  09B2  0870               	movf	??_EUSART_RxDataHandler,w
 19239  09B3  07EB               	addwf	_eusartRxHead,f	;volatile
 19240                           
 19241                           ;eusart.c: 252: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 19242  09B4  3008               	movlw	8
 19243  09B5  026B               	subwf	_eusartRxHead,w	;volatile
 19244  09B6  1803               	btfsc	3,0
 19245                           
 19246                           ;eusart.c: 253: {
 19247                           ;eusart.c: 254: eusartRxHead = 0;
 19248  09B7  01EB               	clrf	_eusartRxHead	;volatile
 19249                           
 19250                           ;eusart.c: 255: }
 19251                           ;eusart.c: 256: eusartRxCount++;
 19252  09B8  3001               	movlw	1
 19253  09B9  00F0               	movwf	??_EUSART_RxDataHandler
 19254  09BA  0870               	movf	??_EUSART_RxDataHandler,w
 19255  09BB  0021               	movlb	1	; select bank1
 19256  09BC  07D0               	addwf	_eusartRxCount^(0+128),f	;volatile
 19257  09BD  0008               	return
 19258  09BE                     __end_of_EUSART_RxDataHandler:	
 19259  007E                     btemp	set	126	;btemp
 19260  007E                     int$flags	set	126
 19261  007E                     wtemp0	set	126


Data Sizes:
    Strings     4
    Constant    57
    Data        5
    BSS         127
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      76
    BANK1            80     23      80
    BANK2            80      0      79
    BANK3            80      2       8
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$2348$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$2354$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$2360$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$2366$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    COS_TskMan$2372	const PTR FTN()void  size(2) Largest target is 1
		 -> UartDisplay(), AD_Task(), SHT25_StateMachine(), 

    I2C_DO_TX_EMPTY$2365	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$2360	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$2359	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$2354	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$2353	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2348	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2347	const PTR FTN()enum E12110 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> UartDisplay@str(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1519$tptr	PTR FTN()void  size(2) Largest target is 1
		 -> UartDisplay(), AD_Task(), SHT25_StateMachine(), 

    COS_tsk.tptr	PTR FTN()void  size(2) Largest target is 1
		 -> UartDisplay(), AD_Task(), SHT25_StateMachine(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Led2_PWM(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Led2_PWM(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), Absolute function(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> RxBuff(BANK2[8]), Command(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S239$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12110[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S86$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 8
		 -> RxBuff(BANK2[8]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> Command(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_Led2_PWM
    _Led2_PWM->_PWM3_LoadDutyValue
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_COS_TskMan
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _UartDisplay->___awtoft
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _abs->___fttol
    ___fttol->___ftmul
    ___awtoft->_abs
    _SHT25_StateMachine->_SHT3x_CalcTemperatureC_F
    _SHT3x_CalcTemperatureC_F->___ftadd
    ___ftadd->___ftdiv
    _SHT3x_CalcRelativeHumidity_F->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation
    _AD_Task->_ADC_GetConversionResult
    _AD_Task->_ADC_SelectChannel

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _I2C_MasterIsr->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _COS_TskMan->_UartDisplay

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_COS_TskMan

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52010
                           _COS_Init
                     _COS_TmrHandler
                         _COS_TskMan
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     687
                     _ADC_Initialize
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     513
                                              6 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _COS_TskMan                                           6     6      0   51009
                                             67 BANK0      4     4      0
                                              0 BANK3      2     2      0
                            _AD_Task *
                 _SHT25_StateMachine *
                        _UartDisplay *
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _UartDisplay                                         24    24      0   14985
                                             56 BANK0      1     1      0
                                              0 BANK1     23    23      0
                       _EUSART_Write
                         _GetNtcTemp
              _GetRelativeHumidity_F
                  _GetTemperatureC_F
                    _IsADMeasureDone
                 _IsSHT31MeasureDone
                           ___awtoft
                             ___ftge
                            ___ftmul
                            ___fttol
                                _abs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             25    21      4    4951
                                             18 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2546
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     412
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     421
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     273
                                             46 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     731
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     558
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3176
                                             50 BANK0      6     3      3
                           ___ftpack
                            ___fttol (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) _IsSHT31MeasureDone                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IsADMeasureDone                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetTemperatureC_F                                    3     0      3       0
                                              4 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetRelativeHumidity_F                                3     0      3       0
                                              4 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetNtcTemp                                           6     3      3      37
                                              4 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SHT25_StateMachine                                   5     5      0   33399
                                              0 BANK1      5     5      0
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
       _SHT3x_CalcRelativeHumidity_F
           _SHT3x_CalcTemperatureC_F
 ---------------------------------------------------------------------------------
 (3) _SHT3x_CalcTemperatureC_F                             6     3      3   15770
                                             61 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4498
                                             48 BANK0     13     7      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _SHT3x_CalcRelativeHumidity_F                         6     3      3   11272
                                             48 BANK0      6     3      3
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    3164
                                             12 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4341
                                             16 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    3733
                                             32 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                              4 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteNBytes                                      4     1      3    4363
                                             13 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_SetAddressNackCallback                           4     1      3    2189
                                              9 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C_SetCallback                                      5     2      3    1047
                                              4 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWrite                                      0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadNBytes                                       4     1      3    1994
                                              9 BANK0      4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_SetBuffer                                        4     0      4    1427
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _I2C_Open                                             3     3      0     189
                                              6 BANK0      3     3      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (5) _I2C_SetInterruptHandler                              2     0      2     121
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterRead                                       0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOperation                                  3     3      0      68
                                              4 BANK0      3     3      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Close                                            2     2      0      37
                                              4 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Task                                              9     9      0      31
                                              6 BANK0      1     1      0
            _ADC_GetConversionResult
                  _ADC_SelectChannel
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _COS_TmrHandler                                       6     6      0      70
                                              4 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _COS_Init                                             5     5      0      70
                                              4 BANK0      5     5      0
                     _COS_TimerSetup
 ---------------------------------------------------------------------------------
 (2) _COS_TimerSetup                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0   50446
                                              3 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                      _I2C_MasterIsr *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0     152
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR2_CallBack                                        0     0      0     152
                   Absolute function *
                           _Led2_PWM *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led2_PWM                                            1     1      0     152
                                              4 COMMON     1     1      0
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (11) _PWM3_LoadDutyValue                                  4     2      2     152
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterIsr                                        0     0      0   50294
                      _I2C_MasterFsm
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterFsm                                        3     3      0   50294
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                   _I2C_MasterIsNack
               i1_I2C_MasterClearIrq
 ---------------------------------------------------------------------------------
 (10) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_TX_EMPTY                                     1     1      0   12541
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_TX                                           4     4      0   12609
                                             10 COMMON     4     4      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_SEND_ADR_WRITE                               0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_SEND_ADR_READ                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterSendTxData                                1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_ACK                                       0     0      0       0
        i2c_master@I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX                                           1     1      0   12541
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
        i2c_master@I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (11) i2c_master@I2C_MasterSendAck                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
       i2c_master@I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
       i2c_master@I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (11) i2c_master@I2C_MasterSendNack                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_DO_ADDRESS_NACK                                 1     1      0   12541
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _wr2RegCompleteHandler                               1     0      1    2437
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _wr1RegCompleteHandler                               1     0      1    2437
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rdBlkRegCompleteHandler                             1     0      1    2468
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rd2RegCompleteHandler                               1     0      1    2437
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (11) _rd1RegCompleteHandler                               1     0      1    2437
                                              9 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) i1_I2C_SetBuffer                                     4     0      4     257
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (12) _I2C_SetDataCompleteCallback                         4     1      3    2149
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (13) i1_I2C_SetCallback                                   5     2      3     287
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _I2C_CallbackReturnReset                             1     0      1     325
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _COS_Init
     _COS_TimerSetup
   _COS_TmrHandler
   _COS_TskMan
     _AD_Task *
       _ADC_GetConversionResult
       _ADC_SelectChannel
       _ADC_StartConversion
     _SHT25_StateMachine *
       _I2C_ReadNBytes
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterRead
           _I2C_MasterOperation
             _I2C_MasterStart
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterEnableIrq
           _I2C_MasterOpen
           _I2C_SetInterruptHandler
         _I2C_SetBuffer
       _I2C_WriteNBytes
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterEnableIrq
           _I2C_MasterOpen
           _I2C_SetInterruptHandler
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
       _SHT3x_CalcRelativeHumidity_F
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       _SHT3x_CalcTemperatureC_F
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _UartDisplay *
       _EUSART_Write
       _GetNtcTemp
       _GetRelativeHumidity_F
       _GetTemperatureC_F
       _IsADMeasureDone
       _IsSHT31MeasureDone
       ___awtoft
         ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
         _abs (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
       ___ftge
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     ___wmul *
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _I2C_MasterIsr *
     _I2C_MasterFsm
       _I2C_DO_ADDRESS_NACK *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_DO_IDLE *
       _I2C_DO_RCEN *
         _I2C_MasterStartRx
       _I2C_DO_RESET *
       _I2C_DO_RX *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_RX_NACK_RESTART *
           i2c_master@I2C_MasterSendNack
         _I2C_DO_RX_NACK_STOP *
           i2c_master@I2C_MasterSendNack
         _I2C_MasterGetRxData *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         i2c_master@I2C_MasterSendAck *
       _I2C_DO_RX_ACK *
         i2c_master@I2C_MasterSendAck
       _I2C_DO_RX_NACK_RESTART *
         i2c_master@I2C_MasterSendNack
       _I2C_DO_RX_NACK_STOP *
         i2c_master@I2C_MasterSendNack
       _I2C_DO_SEND_ADR_READ *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_ADR_WRITE *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_RESTART *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_READ *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_WRITE *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_STOP *
         _I2C_MasterStop
       _I2C_DO_TX *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART_READ *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_RESTART_WRITE *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _I2C_MasterIsNack *
         _I2C_MasterSendTxData *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_DO_TX_EMPTY *
         Absolute function(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _I2C_MasterSetIrq *
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
       _I2C_MasterIsNack *
       i1_I2C_MasterClearIrq *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _Led2_PWM *
         _PWM3_LoadDutyValue
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     17      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2       8      11       10.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     101      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     101      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 28 18:17:52 2020

                    ?_EUSART_SetRxInterruptHandler 0024                             ??_I2C_DO_SEND_ADR_READ 0070  
                               __size_of_I2C_Close 001E                   __end_of_TMR2_SetInterruptHandler 0844  
                          ??_I2C_DO_SEND_ADR_WRITE 0071                                        __CFG_CP$OFF 0000  
                              ___wmul@multiplicand 0026                              ??_I2C_DO_SEND_RESTART 0070  
                                      ?_COS_TskMan 0070                                       ___ftadd@exp1 005C  
                                     ___ftadd@exp2 005B                                        __CFG_LVP$ON 0000  
                     __size_of_I2C_MasterOperation 001C                                       ___ftadd@sign 005A  
                    __size_of_I2C_MasterSendTxData 0005                                                l910 07B5  
                                              l684 0B68                                                l892 0D86  
                                              l899 0F9F                                                _PR2 001B  
                                              _abs 08A5                             ??_EUSART_RxDataHandler 0070  
                   ?_EUSART_SetFramingErrorHandler 0024                                    _TMR2_Initialize 0965  
                                     __CFG_BORV$LO 0000                                                wreg 0009  
                                     __CFG_IESO$ON 0000                       ??_I2C_SetAddressNackCallback 002C  
                                  __end_of_AD_Task 0CAA                           ??_I2C_CallbackReturnStop 007A  
                                     _I2C_DO_RESET 17B5                                       __CFG_ZCD$OFF 0000  
                                     ___ftdiv@cntr 004A                        __size_of_SHT25_StateMachine 00C3  
                                     ___ftdiv@sign 004F                                               ?_abs 004E  
                          ??_rd2RegCompleteHandler 007A                                               l1225 0CA9  
                                             l1261 031C                                               l1192 0A02  
                                             l1441 0F58                                               l1169 0254  
                                             l1089 049D                                               l1098 055E  
                                             l1532 0729                                               l1276 0A32  
                                             l1448 0F6B                                               l1472 0445  
                                             l1449 0F73                                               l5041 0A1E  
                                             l5043 0A24                                               l5131 0E2D  
                                             l5045 0A26                                               l5053 0B9C  
                                             l5301 03CE                                               l5071 0F3F  
                                             l5311 03E4                                               l5161 0A7D  
                                             l5081 0F65                                               l5073 0F44  
                                             l5065 0F2E                                               l5305 03D5  
                                             l6113 0192                                               l5331 041B  
                                             l5323 03FE                                               l6115 0199  
                                             l5069 0F35                                               l5413 0576  
                                             l5341 0437                                               l5333 0420  
                                             l5501 0BFE                                               l6061 0073  
                                             l5511 0B35                                               l5079 0F5D  
                                             l5431 05C7                                               l5351 0469  
                                             l5343 0441                                               l5335 0424  
                                             l6143 0231                                               l5361 0484  
                                             l5329 0411                                               l6145 0238  
                                             l6129 0205                                               l6153 0245  
                                             l5523 0A82                                               l5371 062A  
                                             l5443 05E3                                               l5435 05CF  
                                             l5419 058C                                               l5347 0457  
                                             l5283 0A2C                                               l6091 0127  
                                             l6075 00F7                                               l6403 04D8  
                                             l6163 0C7C                                    __end_of_COS_tsk 102F  
                                             l5277 08C1                                               l6157 0C72  
                                             l5527 0A99                                               l5519 0B54  
                                             l5391 0681                                               l5447 05EB  
                                             l5377 0640                                               l6089 0123  
                                             l6425 0544                                               l6169 0C90  
                                             l6177 0C9D                                               l5475 0C2A  
                                             l5467 0C0C                                               l5491 0BDD  
                                             l6419 0520                                               l4773 0FE9  
                                             l5469 0C18                                               l5493 0BE9  
                                             l5813 02F1                                               l6429 0549  
                                             l6437 0787                                               l5399 069A  
                                             l5671 0B5D                                               l5479 0C33  
                                             l5831 033F                                               l5807 02EB  
                                             l6391 04B4                                               l5497 0BF5  
                                             l6385 04A0                                               l5851 0365  
                                             l5843 0361                                               l5827 0338  
                                             l5819 0310                                               l6459 07B6  
                                             l5685 0B80                                               l5941 073A  
                                             l5909 06D5                                               l5837 0352  
                                             l5829 033B                                               l5853 025B  
                                             l5935 0720                                               l5927 0705  
                                             l5855 03A0                                               l5937 072C  
                                             l5929 0713                                               l5785 028E  
                                             l5867 09E4                                               l5891 0D4C  
                                             l5795 02BC                                               l5779 027E  
                                             l5797 02D4                                               l5879 0AAB  
                                             l5887 0D36                                               STR_1 1800  
                                             STR_2 1800                                               STR_3 1800  
                                             _LATA 010C                                               _LATB 010D  
                                             _LATC 010E                                               _T2PR 001B  
                                             u4115 0F53                                               u4135 0F60  
                                             u5125 032B                                               u4175 0F7A  
                                             u4095 0F3A                                               u4425 0412  
                                             u5305 0721                                               u4275 0A33  
                                             u5245 06DC                                               u4285 0A38  
                                             u5085 0306                                               u4455 0425  
                                             u4705 05EC                                               u4555 0652  
                                             u4715 05F2                                               u4635 0598  
                                             u4395 03FF                                               u5275 0706  
                                             u4565 0662                                               u4645 05A8  
                                             u4485 0438                                               u4575 0682  
                                             u4815 0BE0                                               u4585 0691  
                                             u4665 05D0                                               u4745 0C0F  
                                             u4595 069B                                               u4675 05D6  
                                             u4835 0BEF                                               u4765 0C19  
                                             u4845 0BF6                                               u4775 0C23  
                                             u4785 0C2B                                               _TMR2 001A  
                                             _WPUA 020C                                               _WPUB 020D  
                                             _WPUC 020E                            ??_wr2RegCompleteHandler 007A  
                                     __CFG_WRT$OFF 0000                                      __CFG_FCMEN$ON 0000  
                                             abs@a 004E                                               _main 09F2  
                         ?_I2C_CallbackReturnReset 0079                                       ___ftpack@arg 0024  
             __size_ofi2c_master@I2C_MasterSendAck 0004                                       ___ftpack@exp 0027  
                                             fsr0h 0005                                               fsr1h 0007  
                                             indf0 0000                                               fsr0l 0004  
                                             indf1 0001                                               fsr1l 0006  
                                 __end_of_I2C_Open 0E30                                               btemp 007E  
                                    __CFG_BOREN$ON 0000                                               start 004B  
                          _I2C_SetInterruptHandler 17F7                                      __CFG_MCLRE$ON 0000  
                                     ___ftmul@cntr 003E                                       ___ftmul@sign 003F  
                 __size_of_rdBlkRegCompleteHandler 001A                                      _I2C_DO_TX$613 007C  
                                     ___fttol@exp1 004D                                              ??_abs 0050  
                                     ___fttol@lval 0049                                         _GetNtcTemp 09D8  
                                 ?_I2C_MasterClose 0070                                    _I2C_WriteNBytes 0B33  
                 __end_of_SHT3x_CalcTemperatureC_F 0E79                                   __end_of_COS_Init 0DA1  
                                    ?_EUSART_Write 0070                __size_of_I2C_SetAddressNackCallback 000D  
                   __size_of_OSCILLATOR_Initialize 0007                                   ?_I2C_MasterStart 0070  
                                    _I2C_DO_RX_ACK 1797                                   ?_I2C_MasterWrite 0070  
                    __end_of_OSCILLATOR_Initialize 17E6                                              ?_main 0070  
                                  __end_of___ftadd 049C                                      __CFG_WDTE$OFF 0000  
                                  __end_of___ftdiv 06BC                                    __end_of___ftmul 0613  
                                            _T1CON 0018                                    __end_of___fttol 0743  
                                            _T2CON 001C                                              _T2HLT 001D  
                                  __end_of___lwdiv 0C38                                              _T2TMR 001A  
                                            _T2RST 001F                                    __end_of___lwmod 0C03  
                                            i1l282 0EA6                                              i1l471 0031  
                                            i1l473 003E                                              i1l298 0CFF  
                                            i1l467 0018                                              i1l469 0024  
                                            i1l478 0046                                              i1l696 0A60  
                     __size_of_I2C_DO_RX_NACK_STOP 0004                                              _TMR1H 0017  
                                            _TMR1L 0016                                  ??_I2C_DO_TX_EMPTY 007A  
                                            _TRISA 008C                                              _TRISB 008D  
                                            _TRISC 008E                                              _SSPEN 10AD  
                                            _RXPPS 0E24                   __size_of_ADC_GetConversionResult 0009  
                                __end_of_I2C_DO_RX 0D1F                                  __end_of_I2C_DO_TX 0EC8  
                                 __end_of_TMR2_ISR 08E7                                      ___awtoft@sign 0057  
                                  __end_of_dpowers 1039                                  __end_of_I2C_Close 0A80  
                                  __end_of_isdigit 08C3                             __size_of_I2C_MasterFsm 002A  
                           __size_of_I2C_MasterIsr 0003                                      ___ftpack@sign 0028  
                   I2C_MasterOperation@returnValue 0026               __end_ofi2c_master@I2C_MasterSendNack 1783  
            __size_ofi2c_master@I2C_MasterSendNack 0004                       i2c_master@I2C_MasterSendNack 177F  
                          _I2C_MasterEnableRestart 174E                            __end_of_PWM3_Initialize 0865  
                                            pclath 000A                                   ?_I2C_SetCallback 0024  
                            _GetRelativeHumidity_F 088B                       I2C_SetAddressNackCallback@cb 0029  
                                            status 0003                                   __end_of_Led2_PWM 0F25  
                                            wtemp0 007E                                    __end_of_sprintf 03A6  
                                ?_I2C_DO_SEND_STOP 0070                             __size_of_I2C_SetBuffer 0015  
                                ??i1_I2C_SetBuffer 0074                                UartDisplay@NtcTempF 00DA  
                              __size_of_COS_TskMan 0080                                 ??_I2C_DO_SEND_STOP 0070  
                                    _fsmStateTable 1000                                    __initialization 004D  
                                     __end_of_main 0A0D                         __end_of_IsSHT31MeasureDone 177B  
                __size_of_I2C_DO_SEND_RESTART_READ 0004                                   UartDisplay@HumiF 00D3  
                                 UartDisplay@TempF 00E7                          ?_I2C_DO_SEND_RESTART_READ 0070  
                                   ??_EUSART_Write 0024                                     ?_I2C_DO_RX_ACK 0070  
                          __end_of_TMR2_Initialize 097A                                     __CFG_LPBOR$OFF 0000  
                      ?_INTERRUPT_InterruptManager 0070                     ??_EUSART_SetRxInterruptHandler 0026  
                         _TMR2_SetInterruptHandler 083B                                             ??_main 0067  
                                    ___fttol@sign1 0048                       __end_ofi1_I2C_MasterClearIrq 1760  
                                ?_I2C_MasterIsNack 0070                                          ??_AD_Task 0026  
                                   __CFG_PLLEN$OFF 0000                           __size_of_IsADMeasureDone 0003  
                                      _BreathState 00EC                                  ?_I2C_MasterSetIrq 0070  
                               ??_I2C_MasterIsNack 0070                               i1I2C_SetCallback@idx 0074  
                             i1I2C_SetCallback@ptr 0072                                   _SensirionRH_UBP8 015A  
                                   _COS_TmrHandler 0F8A                                 ??_I2C_MasterSetIrq 0070  
        __end_of_EUSART_DefaultFramingErrorHandler 1749         __size_of_EUSART_DefaultFramingErrorHandler 0001  
              ??_EUSART_DefaultFramingErrorHandler 0070                 ?_EUSART_DefaultFramingErrorHandler 0070  
                _EUSART_DefaultFramingErrorHandler 1748                                             _ADCON0 009D  
                                           _ADCON1 009E                                             _ADCON2 009F  
                       _EUSART_OverrunErrorHandler 01A2                    __end_of_I2C_CallbackReturnReset 0004  
                                   _COS_TimerSetup 17C6                                             _ADRESH 009C  
                                           _ADRESL 009B                    __size_of_I2C_CallbackReturnStop 0002  
                    I2C_SetDataCompleteCallback@cb 0075                                    AD@IsMeasureDone 00BC  
                                 __end_of___awtoft 0AC2                                             _ANSELA 018C  
                                           _ANSELB 018D                                             _ANSELC 018E  
                                 __end_of___ftpack 0F8A               __end_of_SHT3x_CalcRelativeHumidity_F 0C71  
            __size_of_SHT3x_CalcRelativeHumidity_F 0039                       _SHT3x_CalcRelativeHumidity_F 0C38  
                                           _BORCON 0116                                             _RC1REG 0199  
                                           _RC1STA 019D                                             _RB4PPS 0E9C  
                                           _RB6PPS 0E9E                                             _RB7PPS 0E9F  
                                           _RC5PPS 0EA5                                             _ODCONA 028C  
                                           _ODCONB 028D                                             _ODCONC 028E  
                                           i1l5005 0B23                                             i1l6211 0CC1  
                                           i1l6221 0CE1                                             i1l6217 0CD1  
                                           i1l5601 0D04                                             i1l5623 0AEC  
                                           i1l5607 0D07                                             i1l5561 0E83  
                                           i1l5721 0EEF                                             i1l5713 0EDA  
                                           i1l5619 0AE9                                             i1l5635 0AF3  
                                           i1l5571 0E89                                             i1l5715 0EDF  
                                           i1l5629 0AF0                                             i1l5565 0E86  
                                           i1l5557 0E80                                             i1l5709 0EC9  
                                           i1l5655 0AC9                                             i1l5727 0EFF  
                                           i1l5665 0ACF                                             i1l5729 0F02  
                                           i1l5737 0F12                                             i1l5579 0EC2  
                                           i1l5659 0ACC                                             i1l5739 0F1E  
                                           i1l5597 0D01                                             i1l5955 0BBE  
                                           _INLVLA 038C                                             _INLVLB 038D  
                                           _INLVLC 038E                                             u423_25 099E  
                                 __end_of___lwtoft 0965                                             _OSCCON 0099  
                        ??_I2C_SetInterruptHandler 0026                                             _SPBRGH 019C  
                                           _SPBRGL 019B                                             _TX1REG 019A  
                                           _SSP1IE 0483                                             _SSP1IF 0083  
                                           _TX1STA 019E                                      ??_UartDisplay 0058  
                              _I2C_MasterEnableIrq 1772                                     __CFG_PWRTE$OFF 0000  
                              _I2C_MasterGetRxData 1757                            __end_of_I2C_WriteNBytes 0B5B  
                                       _Timer2Flag 00CC                                             _RxBuff 0162  
                          __size_of_I2C_ReadNBytes 0020                                             ___ftge 0D1F  
                      __size_of_PWM3_LoadDutyValue 0016                                             ___wmul 0A29  
                                    _I2C_MasterFsm 0BAC                                      _I2C_MasterIsr 1760  
                                        ??___ftadd 0056                                     __CFG_STVREN$ON 0000  
                                        ??___ftdiv 0046                                          ??___ftmul 0036  
                                        ??___fttol 0044                                          ??___lwdiv 0028  
                                      ?_GetNtcTemp 0024                                          ??___lwmod 0030  
                              _EUSART_Transmit_ISR 0A45                                  I2C_SetCallback@cb 0024  
                          __size_of_I2C_MasterRead 0004                            __size_of_I2C_MasterOpen 000B  
                          __size_of_I2C_MasterStop 0003                            __size_of_I2C_Initialize 0009  
                                    _I2C_SetBuffer 093B                       __end_of_I2C_MasterDisableIrq 176F  
                            ___ftmul@f3_as_product 003B                               ?_I2C_MasterEnableIrq 0070  
                           __end_of_COS_TmrHandler 1000                                _I2C_DO_ADDRESS_NACK 0AC2  
                         _SHT3x_CalcTemperatureC_F 0E30                                          ??_isdigit 0024  
                             ?_I2C_MasterGetRxData 0070                                          ?_I2C_Open 0070  
               __end_of_I2C_SetAddressNackCallback 088B                         _I2C_SetAddressNackCallback 087E  
                           __end_of_COS_TimerSetup 17CC                                UART_Display@counter 00C1  
                        ??_I2C_MasterEnableRestart 0070           TMR2_SetInterruptHandler@InterruptHandler 0024  
          I2C_SetInterruptHandler@InterruptHandler 0024                                          ??_sprintf 0036  
                             ?_EUSART_Transmit_ISR 0070                             ?_GetRelativeHumidity_F 0024  
                              _RelativeHumidityRaw 00A8                                   ?_PWM3_Initialize 0070  
                                _SYSTEM_Initialize 097A                      ?_SHT3x_CalcRelativeHumidity_F 0050  
                          __end_of__initialization 006E                                   _TemperatureRaw_H 00C8  
                                 _TemperatureRaw_L 00C7                                          ?_COS_Init 0070  
                                       ___ftadd@f1 0050                                         ___ftadd@f2 0053  
                            __end_of_TMR2_CallBack 084F                                _I2C_MasterOperation 0A0D  
                                       ___ftge@ff1 0024                                         ___ftge@ff2 0027  
                                   _NewMessageFlag 00C2                                 ?_SYSTEM_Initialize 0070  
                             ?_I2C_DO_ADDRESS_NACK 0070                                         ___ftdiv@f1 0043  
                                       ___ftdiv@f2 0040                                         ___ftdiv@f3 004B  
                                       ___awtoft@c 0052               __end_of_EUSART_SetTxInterruptHandler 0832  
            __size_of_EUSART_SetTxInterruptHandler 0009                       _EUSART_SetTxInterruptHandler 0829  
                          _rdBlkRegCompleteHandler 09BE                                         ___ftmul@f1 0030  
                                       ___ftmul@f2 0033                                         ___fttol@f1 0040  
                     __size_of_ADC_StartConversion 0003                                     __pcstackCOMMON 0070  
                                   ?_I2C_MasterFsm 0070                                     ?_I2C_MasterIsr 0070  
                                  ??_I2C_DO_RX_ACK 0070                                       __pidataBANK1 0800  
                           _I2C_CallbackReturnStop 1749                                ??_SYSTEM_Initialize 0027  
                              __end_of_UartDisplay 0255                                          ?_TMR2_ISR 0070  
                                 ?_TMR2_Initialize 0070                                     ?_I2C_SetBuffer 0024  
                   __size_of_I2C_DO_SEND_ADR_WRITE 0007                 __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                    __end_of_I2C_DO_SEND_ADR_WRITE 17DF                                       ??_COS_TskMan 0063  
                                       ___lwtoft@c 002C                         ?_I2C_DO_SEND_RESTART_WRITE 0070  
                             ?_I2C_MasterOperation 0070                              ??_I2C_MasterEnableIrq 0024  
                          _ADC_GetConversionResult 17EE                              ??_I2C_MasterGetRxData 0070  
                                        ?_Led2_PWM 0070                                    ?_COS_TmrHandler 0070  
                                   _OPTION_REGbits 0095                              I2C_ReadNBytes@address 002C  
                                       ??_I2C_Open 0026                               _eusartRxStatusBuffer 013E  
                                  ?_COS_TimerSetup 0070                         __end_of_I2C_MasterClearIrq 1769  
                  ??_EUSART_SetOverrunErrorHandler 0026                          __end_of_SYSTEM_Initialize 098F  
                            ??_EUSART_Transmit_ISR 0070                                       sprintf@width 003F  
                                ??_IsADMeasureDone 0024                                         __pbssBANK0 006A  
                                       __pbssBANK1 00A0                                         __pbssBANK2 0120  
                                   _TemperatureRaw 00AA                               __end_of_EUSART_Write 0B83  
                              __size_of_GetNtcTemp 001A                                      ??_I2C_DO_IDLE 0070  
                   __size_of_rd2RegCompleteHandler 0015                                      ??_I2C_DO_RCEN 0070  
                    __end_of_rd2RegCompleteHandler 0926                       __end_of_I2C_MasterSendTxData 17B0  
                               ?_I2C_MasterSendAck 0070                                  _I2C_MasterStartRx 1754  
                                       ??_COS_Init 0024                     __size_of_wr2RegCompleteHandler 0015  
                            ??_I2C_DO_ADDRESS_NACK 007A                          _SensirionTemperature_UBP8 015C  
                    __end_of_wr2RegCompleteHandler 08FC                        __size_of_EUSART_Receive_ISR 003A  
                              _I2C_DO_RX_NACK_STOP 179B                               i1_I2C_MasterClearIrq 175D  
                            _rd1RegCompleteHandler 08FC                                 ?_I2C_MasterStartRx 0070  
                               __end_of_COS_TskMan 07C3                                   ?_I2C_WriteNBytes 002D  
                           I2C_WriteNBytes@address 0030                              _wr1RegCompleteHandler 0926  
                                       __pmaintext 09F2                                ??_I2C_MasterSendAck 0070  
                         rd1RegCompleteHandler@ptr 0079                                    _COS_TskMan$2372 01A6  
                    ?_EUSART_SetTxInterruptHandler 0024                   _EUSART_TxDefaultInterruptHandler 016C  
                                          ?___ftge 0024                        __end_of_I2C_DO_SEND_RESTART 1793  
                                  _I2C_DO_TX_EMPTY 0AE6                                I2C_SetBuffer@buffer 0024  
                                          ?___wmul 0024                                    __CFG_PPS1WAY$ON 0000  
                                       ??_TMR2_ISR 0075                                  _SensirionRH_float 00A0  
                                       __pintentry 0004                                ??_I2C_MasterStartRx 0070  
                    __size_of_I2C_DO_SEND_ADR_READ 0008                   __size_of_I2C_CallbackReturnReset 0002  
                                        ?___awtoft 0052                                          ?___ftpack 0024  
                     ??_EUSART_DefaultErrorHandler 0071                              ??_I2C_MasterOperation 0024  
                   I2C_SetDataCompleteCallback@ptr 0077                            __size_of_ADC_Initialize 0009  
SHT3x_CalcRelativeHumidity_F@RelativeHumidityFloat 0053                                          ?___lwtoft 002C  
                         ??_I2C_DO_RX_NACK_RESTART 0070                                            _AD_Task 0C71  
                __end_of_I2C_DO_SEND_RESTART_WRITE 178F                               ?_I2C_DO_RX_NACK_STOP 0070  
                                    _eusartRxCount 00D0                                         ??_Led2_PWM 0074  
                                  __CFG_WDTCCS$SWC 0000                                            _COS_tsk 1020  
                       __end_of_SHT25_StateMachine 055F                      __size_of_EUSART_RxDataHandler 0019  
                                  i1_I2C_SetBuffer 0871                                            _OSCTUNE 0098  
                                          _PWM3DCH 0618                                            _PWM3DCL 0617  
                                          _PWM3CON 0619                                            _SSP1ADD 0212  
                                          _SLRCONA 030C                                            _SLRCONB 030D  
                                          _SLRCONC 030E                                            _SSP1BUF 0211  
                         ??_EUSART_SetErrorHandler 0026                          __end_of_I2C_MasterStartRx 1757  
                             I2C_Close@returnValue 0025                       ?_I2C_SetDataCompleteCallback 0075  
                                        _I2C_DO_RX 0CE4                                          _I2C_DO_TX 0E79  
                 __end_of_I2C_DO_SEND_RESTART_READ 178B                                          _I2C_Close 0A62  
                                          _Command 00ED                          ??_rdBlkRegCompleteHandler 007A  
                            ?i1_I2C_MasterClearIrq 0070                                          _I2C_Timer 0158  
                                      _UartDisplay 0072                               _I2C_MasterDisableIrq 176C  
                                  ??_I2C_MasterFsm 0020                                    ??_I2C_MasterIsr 007E  
                             _ADC_InterruptHandler 0160                __size_of_EUSART_DefaultErrorHandler 0003  
                   ??_SHT3x_CalcRelativeHumidity_F 0053                         ??_TMR2_SetInterruptHandler 0026  
                                   _I2C_ReadNBytes 0A80                                __end_of_I2C_DO_IDLE 17B5  
                              __end_of_I2C_DO_RCEN 17C6                                    __size_of___ftge 003C  
                                          ___ftadd 03A6                                            ___ftdiv 0613  
                                  ??_I2C_SetBuffer 0028                                    __size_of___wmul 001C  
                                          ___ftmul 055F                                            ___fttol 06BC  
                                          ___lwdiv 0C03                                            ___lwmod 0BD6  
                          I2C_SetBuffer@bufferSize 0026                                 I2C_ReadNBytes@data 0029  
                                   _I2C_MasterRead 17A3                          ??_ADC_GetConversionResult 0026  
                                   _I2C_MasterOpen 084F                                     _I2C_MasterStop 1751  
                                   _I2C_Initialize 0832                                         ??___awtoft 0055  
                                       ??___ftpack 0029                          __size_of_I2C_DO_SEND_STOP 0004  
                                          __ptext1 097A                                            __ptext2 0965  
                                          __ptext3 083B                                            __ptext4 085A  
                                          __ptext5 07C3                                            __ptext6 17DF  
                                          __ptext7 0832                                            __ptext8 0DA1  
                                          __ptext9 0829                              ??_I2C_DO_RX_NACK_STOP 0070  
                                       ??___lwtoft 002F                                          _AD_Result 0156  
                                          _counter 00AE                                            _dpowers 102F  
                            _OSCILLATOR_Initialize 17DF                                          _T2CONbits 001C  
                                     __size_of_abs 000F                                            _isdigit 08B4  
                               I2C_SetCallback@idx 0028                           __size_of_I2C_MasterClose 0003  
                               _IsSHT31MeasureDone 1778                           ??_PIN_MANAGER_Initialize 0024  
                    I2C_CallbackReturnReset@funPtr 0079                                          _T2HLTbits 001D  
                               I2C_SetCallback@ptr 0026                           wr1RegCompleteHandler@ptr 0079  
                         __size_of_I2C_MasterStart 0003                          i1I2C_SetBuffer@bufferSize 0072  
                         __size_of_I2C_MasterWrite 0004                         __size_of_SYSTEM_Initialize 0015  
                                          _sprintf 0255                                            clrloop0 17D3  
                             end_of_initialization 006E                                          _T2RSTbits 001F  
                              ?_IsSHT31MeasureDone 0070                                         ?_I2C_DO_RX 0070  
                                       ?_I2C_DO_TX 0070              __end_of_EUSART_SetOverrunErrorHandler 0829  
           __size_of_EUSART_SetOverrunErrorHandler 0009                      _EUSART_SetOverrunErrorHandler 0820  
                        __size_of_I2C_MasterIsNack 0006                                         ?_I2C_Close 0070  
                                  _TimeSlotCounter 00CD                             ?_rd1RegCompleteHandler 0079  
                                i1_I2C_SetCallback 0B0B                            __end_of_I2C_DO_TX_EMPTY 0B0B  
                        __size_of_I2C_MasterSetIrq 0003                              ?_I2C_MasterDisableIrq 0070  
                           __end_of_I2C_ReadNBytes 0AA0                                  _EUSART_Initialize 0DA1  
                           ?_wr1RegCompleteHandler 0079                                 ?i1_I2C_SetCallback 0070  
                               ?_EUSART_Initialize 0070                                  _GetTemperatureC_F 0898  
                         __size_of_I2C_SetCallback 0029                             __end_of_I2C_MasterRead 17A7  
                           __end_of_I2C_MasterOpen 085A                         ??_SHT3x_CalcTemperatureC_F 0060  
                           __end_of_I2C_MasterStop 1754                             __end_of_I2C_Initialize 083B  
                               ?_GetTemperatureC_F 0024                                       ??_GetNtcTemp 0027  
                                        _U8Message 00EA                                ??i1_I2C_SetCallback 0073  
                             ??_IsSHT31MeasureDone 0024                                ??_EUSART_Initialize 0026  
                   ??_EUSART_SetTxInterruptHandler 0026                            __end_ofi1_I2C_SetBuffer 087E  
                  __end_of_rdBlkRegCompleteHandler 09D8                               _I2C_MasterSendTxData 17AB  
                                        _SSPDATPPS 0E21                                ??_GetTemperatureC_F 0027  
                  __size_of_I2C_DO_RX_NACK_RESTART 0004                                          _SSPCLKPPS 0E20  
                                 __CFG_FOSC$INTOSC 0000                        ?_I2C_SetAddressNackCallback 0029  
         SHT3x_CalcTemperatureC_F@TemperatureFloat 0060                            ??_GetRelativeHumidity_F 0027  
                            __size_of_EUSART_Write 0028                                _ADC_StartConversion 1763  
                                __size_of_I2C_Open 0049                    __size_of_EUSART_SetErrorHandler 0009  
                       __size_of_I2C_MasterStartRx 0003                          __end_ofi1_I2C_SetCallback 0B33  
                           ??i1_I2C_MasterClearIrq 0070                          __end_of_EUSART_Initialize 0DE7  
                                      _I2C_DO_IDLE 17B0                                 __end_of_GetNtcTemp 09F2  
                                      _I2C_DO_RCEN 17C0                         rdBlkRegCompleteHandler@ptr 0079  
                                      ___ftdiv@exp 004E                                    ?_I2C_ReadNBytes 0029  
                        __end_of_GetTemperatureC_F 08A5                            ?_I2C_CallbackReturnStop 0079  
                       __end_of_PWM3_LoadDutyValue 09A5                           _I2C_DO_SEND_RESTART_READ 1787  
                                __size_of_COS_Init 0046                                        ___ftmul@exp 003A  
                             ?_ADC_StartConversion 0070                       I2C_CallbackReturnStop@funPtr 0079  
                                  ?_I2C_MasterRead 0070                                    ?_I2C_MasterOpen 0070  
                                  ?_I2C_MasterStop 0070                                    ?_I2C_Initialize 0070  
             __end_of_TMR2_DefaultInterruptHandler 0800              __size_of_TMR2_DefaultInterruptHandler 0001  
                     _TMR2_DefaultInterruptHandler 07FF                            _I2C_CallbackReturnReset 0002  
                                   __end_of___ftge 0D5B                 __end_of_EUSART_DefaultErrorHandler 174E  
                       _EUSART_DefaultErrorHandler 174B                                   ??_COS_TmrHandler 0024  
                                   __end_of___wmul 0A45               __size_of_I2C_SetDataCompleteCallback 000C  
                                   AD@TimerCounter 00BD                                       _EUSART_Write 0B5B  
                                __size_of_TMR2_ISR 0014                                     _ADC_Initialize 0805  
                                 ??_COS_TimerSetup 0024                              ?_I2C_MasterSendTxData 0070  
                           ?_OSCILLATOR_Initialize 0070                                    _IsADMeasureDone 1775  
                      ??_I2C_DO_SEND_RESTART_WRITE 0070                                 UartDisplay@NtcTemp 00E5  
                              start_initialization 004D                    __size_of_PIN_MANAGER_Initialize 003C  
                                      __end_of_abs 08B4                                  __size_of_Led2_PWM 005D  
                                  UartDisplay@Humi 00D8                                      ?_I2C_DO_RESET 0070  
                                  UartDisplay@Temp 00D6                                          _ErrorStat 00CA  
                         ?_I2C_SetInterruptHandler 0024       EUSART_SetRxInterruptHandler@interruptHandler 0024  
     EUSART_SetTxInterruptHandler@interruptHandler 0024                                        ??_I2C_DO_RX 007A  
                                      ??_I2C_DO_TX 007A                                i1I2C_SetCallback@cb 0070  
                                ??_I2C_MasterClose 0024                             ??_I2C_MasterDisableIrq 0024  
                                      ??_I2C_Close 0024                                  ??_I2C_MasterStart 0024  
                                ??_I2C_MasterWrite 0027                     __end_of_I2C_CallbackReturnStop 174B  
                           _I2C_DO_RX_NACK_RESTART 179F                                   ?_I2C_DO_TX_EMPTY 0070  
                               _I2C_MasterClearIrq 1766                     ?_EUSART_SetOverrunErrorHandler 0024  
                            ??_ADC_StartConversion 0024                           __size_of_PWM3_Initialize 000B  
                       _EUSART_FramingErrorHandler 01A4                                           ??___ftge 002A  
                                         ??___wmul 0028                             _EUSART_SetErrorHandler 080E  
                                      _CCPTMRSbits 029E                        __end_of_I2C_MasterEnableIrq 1775  
                                     _COS_tcnt_val 00B2                                ?_I2C_MasterClearIrq 0070  
                                     _COS_tcnt_lst 00B0                             __end_of_ADC_Initialize 080E  
                      __end_of_I2C_MasterGetRxData 175A                                        __pdataBANK1 00EA  
                            __end_of_I2C_DO_RX_ACK 179B                      ?_TMR2_DefaultInterruptHandler 0070  
                                 _I2C_DO_SEND_STOP 1793                                  ??_I2C_SetCallback 0027  
                                 ?i1_I2C_SetBuffer 0070                                I2C_Open@returnValue 0028  
                         ?_I2C_MasterEnableRestart 0070                                           ?_AD_Task 0070  
                                __size_of___awtoft 0022                                  __size_of___ftpack 0065  
                           __size_of_TMR2_CallBack 000B                        __end_of_EUSART_Transmit_ISR 0A62  
                            _I2C_DO_SEND_ADR_WRITE 17D8                                          ___latbits 0002  
                                __size_of___lwtoft 0015                                      __pcstackBANK0 0020  
                                    __pcstackBANK1 00D3                                      __pcstackBANK3 01A6  
                                   ??_I2C_DO_RESET 0070                           __size_of_TMR2_Initialize 0015  
                              ?_I2C_MasterSendNack 0070                                       _isdigit$1995 0024  
                     __end_of_I2C_DO_SEND_ADR_READ 17EE                               ??_I2C_MasterClearIrq 0024  
                      __end_of_I2C_DO_ADDRESS_NACK 0AE6                         __size_ofi1_I2C_SetCallback 0028  
                       __end_of_EUSART_Receive_ISR 0CE4                                   _I2C_MasterIsNack 17BA  
                       __size_of_EUSART_Initialize 0046                          _I2C_DO_SEND_RESTART_WRITE 178B  
                                      sprintf@flag 003C                                        sprintf@prec 003B  
                 _EUSART_RxDefaultInterruptHandler 0067                                   _I2C_MasterSetIrq 175A  
                                     ?_UartDisplay 0070                                          __pnvBANK0 0067  
                                        __pnvBANK1 00EF                                          __pnvBANK2 016A  
                                        __pnvBANK3 01A0                         _SensirionTemperature_float 00A3  
                               _SHT25_StateMachine 049C                         __size_of_GetTemperatureC_F 000D  
                            _rd2RegCompleteHandler 0911                              __end_of_fsmStateTable 1020  
                     __end_of_EUSART_RxDataHandler 09BE                                   ___lwdiv@dividend 0026  
                           _PIN_MANAGER_Initialize 07C3                              _wr2RegCompleteHandler 08E7  
                        ??_I2C_CallbackReturnReset 007A                        __end_of_I2C_MasterOperation 0A29  
                             ??_I2C_MasterSendNack 0070                           rd2RegCompleteHandler@ptr 0079  
                                _ADC_SelectChannel 08C3                            __end_of_IsADMeasureDone 1778  
                                        __ptext100 0911                                          __ptext101 08FC  
                                        __ptext110 177B                                          __ptext102 08E7  
                                        __ptext111 1748                                          __ptext103 0871  
                                        __ptext112 174B                                          __ptext104 0865  
                                        __ptext113 09A5                                          __ptext105 0B0B  
                                        __ptext106 1751                                          __ptext107 174E  
                                        __ptext108 0A45                                          __ptext109 0CAA  
                                         ?___ftadd 0050                                           ?___ftdiv 0040  
                              ?_SHT25_StateMachine 0070                                           ?___ftmul 0030  
                                         ?___fttol 0040                                           ?___lwdiv 0024  
                                         ?___lwmod 002C                                    ?_ADC_Initialize 0070  
                                     _eusartRxHead 006B                                 ?_ADC_SelectChannel 0070  
                                     _eusartTxHead 00D2                                       _eusartRxTail 006A  
                           ??_I2C_MasterSendTxData 0070                                       _eusartTxTail 00D1  
                     ??_INTERRUPT_InterruptManager 0023                           __size_of_I2C_WriteNBytes 0028  
                         UART_Display@TimerCounter 00BF                            _eusartTxBufferRemaining 00EF  
                     __size_of_I2C_DO_SEND_RESTART 0004                                           _BAUD1CON 019F  
                  __end_of_I2C_SetInterruptHandler 1800                                           ?_isdigit 0070  
                          I2C_MasterOperation@read 0025                                           _I2C_Open 0DE7  
                              ??_ADC_SelectChannel 0024                                   ___lwdiv@quotient 002A  
                             ??_SHT25_StateMachine 00D3                                  I2C_ReadNBytes@len 002A  
                                         ?_sprintf 0032                                           _T2CLKCON 001E  
                          ??_rd1RegCompleteHandler 007A                                          _dutyValue 00AC  
                                         _AD_State 00BE                                     _eusartRxBuffer 0146  
                          ??_wr1RegCompleteHandler 007A                                     _eusartTxBuffer 014E  
                                   ___wmul@product 0028                                           _COS_Init 0D5B  
                                         _LATAbits 010C             EUSART_SetErrorHandler@interruptHandler 0024  
                                         _LATBbits 010D                                          clear_ram0 17D2  
                                    _TMR2_CallBack 0844                                           _PIE1bits 0090  
                                         _PIE2bits 0091                                  _eusartRxLastError 00CF  
                        __end_of_ADC_SelectChannel 08D3                __size_of_INTERRUPT_InterruptManager 0047  
                                         _PIR1bits 0010                    ??_EUSART_SetFramingErrorHandler 0026  
                                         _PIR2bits 0011                              __end_of_I2C_MasterFsm 0BD6  
                            __end_of_I2C_MasterIsr 1763                        __end_of_I2C_DO_RX_NACK_STOP 179F  
                             __CFG_WDTCPS$WDTCPS1F 0000                                           _SSP1CON1 0215  
                                         _SSP1CON2 0216          __end_of_EUSART_DefaultOverrunErrorHandler 177F  
       __size_of_EUSART_DefaultOverrunErrorHandler 0004                ??_EUSART_DefaultOverrunErrorHandler 0070  
               ?_EUSART_DefaultOverrunErrorHandler 0070                  _EUSART_DefaultOverrunErrorHandler 177B  
                                         _TMR2_ISR 08D3                    __end_of_I2C_MasterEnableRestart 1751  
                                         _SSP1STAT 0214                                      _IsMeasureDone 00C3  
                            __end_of_I2C_SetBuffer 0950                                  ??_PWM3_Initialize 0024  
                                       _ADCON0bits 009D                                  ___wmul@multiplier 0024  
                           ?_I2C_DO_SEND_ADR_WRITE 0070                                           _AddressW 00EB  
                         ADC_SelectChannel@channel 0025                           I2C_MasterSendTxData@data 0070  
              __end_ofi2c_master@I2C_MasterSendAck 1787                        i2c_master@I2C_MasterSendAck 1783  
                                         _Led2_PWM 0EC8                                   __size_of_AD_Task 0039  
                   ??_TMR2_DefaultInterruptHandler 0070                  __size_of_TMR2_SetInterruptHandler 0009  
                        ?_TMR2_SetInterruptHandler 0024                           wr2RegCompleteHandler@ptr 0079  
                   __size_of_GetRelativeHumidity_F 000D                      __end_of_GetRelativeHumidity_F 0898  
                                COS_Init@tempbyte1 0027                                  COS_Init@tempbyte2 0028  
                       ??_I2C_DO_SEND_RESTART_READ 0070                           ?_rdBlkRegCompleteHandler 0079  
                                 ??_I2C_ReadNBytes 002C                                         _I2C_Status 0120  
                                     ?_I2C_DO_IDLE 0070                                       ?_I2C_DO_RCEN 0070  
                                ??_TMR2_Initialize 0026                             ?_rd2RegCompleteHandler 0079  
                                   ?_TMR2_CallBack 0070                                     UartDisplay@str 00DD  
                                 ??_I2C_MasterRead 0027                                I2C_WriteNBytes@data 002D  
                                 ??_I2C_MasterOpen 0024                             ?_wr2RegCompleteHandler 0079  
                                 ??_I2C_MasterStop 0070                                   ??_I2C_Initialize 0024  
                                      _COS_sec_tmr 015E                           ?_ADC_GetConversionResult 0024  
                            i1I2C_SetBuffer@buffer 0070                               __end_of_I2C_DO_RESET 17BA  
                                 ?_IsADMeasureDone 0070                            ??_OSCILLATOR_Initialize 0024  
                              _EUSART_ErrorHandler 01A0                                        _COS_tsk_ena 016E  
                                      _COS_tsk_ind 00CE                                        _COS_tsk_msk 0069  
                                      _COS_tsk_tmr 00B4                               _I2C_DO_SEND_ADR_READ 17E6  
                                 __size_of___ftadd 00F6                                   __size_of___ftdiv 00A9  
                      ?_EUSART_DefaultErrorHandler 0070                                   __size_of___ftmul 00B4  
                                 __size_of___fttol 0087                        __size_of_IsSHT31MeasureDone 0003  
                                 __size_of___lwdiv 0035                                   __size_of___lwmod 002D  
                                         ___awtoft 0AA0                                           ___ftpack 0F25  
                               _PWM3_LoadDutyValue 098F                                           ___lwtoft 0950  
                                  _I2C_MasterClose 1769                      I2C_SetAddressNackCallback@ptr 002B  
                                       sprintf@val 003D                                    I2C_Open@address 0027  
                                  _I2C_MasterStart 176F                                           _checksum 00C9  
                                  _I2C_MasterWrite 17A7                                   __size_of_isdigit 000F  
                                  ___lwdiv@divisor 0024                               _EUSART_RxDataHandler 09A5  
                                     _TimerCounter 00A6                                  ??_I2C_WriteNBytes 0030  
                                  ___lwdiv@counter 0029                                           __ptext10 17CC  
                                         __ptext11 0820                                           __ptext20 08B4  
                                         __ptext12 0817                                           __ptext21 0A29  
                                         __ptext13 080E                                           __ptext30 0898  
                                         __ptext22 0BD6                                           __ptext14 0805  
                                         __ptext31 088B                                           __ptext23 0C03  
                                         __ptext15 0743                                           __ptext40 0F25  
                                         __ptext32 09D8                                           __ptext24 08A5  
                                         __ptext16 0C71                                           __ptext41 0B33  
                                         __ptext33 0B5B                                           __ptext25 06BC  
                                         __ptext17 049C                                           __ptext50 1772  
                                         __ptext42 087E                                           __ptext34 0E30  
                                         __ptext26 0D1F                                           __ptext18 0072  
                                         __ptext51 17A3                                           __ptext43 0B83  
                                         __ptext35 03A6                                           __ptext27 0AA0  
                                         __ptext19 0255                                           __ptext60 17EE  
                                         __ptext52 0A0D                                           __ptext44 17A7  
                                         __ptext36 0C38                                           __ptext28 1778  
                                         __ptext61 0F8A                                           __ptext53 176F  
                                         __ptext45 0A80                                           __ptext37 0950  
                                         __ptext29 1775                                           __ptext70 1760  
                                         __ptext62 0D5B                                           __ptext54 0A62  
                                         __ptext46 093B                                           __ptext38 055F  
                                         __ptext71 0BAC                                           __ptext63 17C6  
                                         __ptext55 176C                                           __ptext47 0DE7  
                                         __ptext39 0613                                           __ptext80 178B  
                                         __ptext72 175D                                           __ptext56 1769  
                                         __ptext48 17F7                                           __ptext81 1787  
                                         __ptext73 0AC2                                           __ptext65 08D3  
                                         __ptext57 1766                                           __ptext49 084F  
                                         __ptext90 17BA                                           __ptext82 17C0  
                                         __ptext74 17B5                                           __ptext66 0844  
                                         __ptext58 1763                                ?_PWM3_LoadDutyValue 0070  
                                         __ptext91 17AB                                           __ptext83 0CE4  
                                         __ptext75 179F                                           __ptext67 0EC8  
                                         __ptext59 08C3                  __size_of_SHT3x_CalcTemperatureC_F 0049  
                                         __ptext92 1783                                           __ptext84 0E79  
                                         __ptext76 179B                                           __ptext68 07FF  
                                         __ptext93 1757                                           __ptext85 17D8  
                                         __ptext77 1797                                           __ptext69 098F  
                                         __ptext94 177F                                           __ptext86 17E6  
                                         __ptext78 1793                                           __ptext95 1754  
                                         __ptext87 17B0                                           __ptext79 178F  
                                         __ptext96 0002                                           __ptext88 0AE6  
                                         __ptext97 1749                                           __ptext89 175A  
                                         __ptext98 09BE                                           __ptext99 0926  
                                     _SSP1CON1bits 0215                                       _SSP1CON2bits 0216  
                        ?_SHT3x_CalcTemperatureC_F 005D                __end_of_I2C_SetDataCompleteCallback 0871  
                      _I2C_SetDataCompleteCallback 0865                                        _SHT25_Fault 00CB  
                          ?_I2C_DO_RX_NACK_RESTART 0070                                   __size_of_sprintf 0151  
                                      _SHT25_State 00C4                           __end_of_I2C_DO_SEND_STOP 1797  
                                    __size_of_main 001B                      __size_ofi1_I2C_MasterClearIrq 0003  
                             __CFG_WDTCWS$WDTCWSSW 0000                            ?_EUSART_SetErrorHandler 0024  
                                  _I2C_SetCallback 0B83                         __size_of_ADC_SelectChannel 0010  
                    ??_I2C_SetDataCompleteCallback 0078                               __size_of_UartDisplay 01E3  
                                       _RC1STAbits 019D                   __size_of_I2C_SetInterruptHandler 0009  
    EUSART_SetOverrunErrorHandler@interruptHandler 0024                               ??_PWM3_LoadDutyValue 0072  
                                         int$flags 007E                              ?_I2C_DO_SEND_ADR_READ 0070  
               __end_of_INTERRUPT_InterruptManager 004B                         _INTERRUPT_InterruptManager 0004  
            __end_of_EUSART_SetFramingErrorHandler 0820             __size_of_EUSART_SetFramingErrorHandler 0009  
                    _EUSART_SetFramingErrorHandler 0817                                       _SSP1STATbits 0214  
                         __end_of_I2C_MasterIsNack 17C0                                         _COS_TskMan 0743  
                         __end_of_I2C_MasterSetIrq 175D                                         _INTCONbits 000B  
                               I2C_WriteNBytes@len 002E                              ?_EUSART_RxDataHandler 0070  
                                       _COS_ms_tmr 00B6                                           isdigit@c 0025  
                   __end_of_I2C_DO_RX_NACK_RESTART 17A3                                  GetNtcTemp@NtcTemp 0027  
                                         intlevel1 0000                                          sprintf@ap 003A  
                                        sprintf@sp 0041                                    ??_TMR2_CallBack 0075  
                 __size_of_I2C_MasterEnableRestart 0003                        __end_of_ADC_StartConversion 1766  
                                 ___lwmod@dividend 002E                            ?_PIN_MANAGER_Initialize 0070  
                  __end_of_ADC_GetConversionResult 17F7                     __end_of_EUSART_SetErrorHandler 0817  
                                __CFG_CLKOUTEN$OFF 0000                                _I2C_DO_SEND_RESTART 178F  
                    __size_of_I2C_MasterDisableIrq 0003                                   ??_ADC_Initialize 0024  
             __end_of_EUSART_SetRxInterruptHandler 17D2              __size_of_EUSART_SetRxInterruptHandler 0006  
                     _EUSART_SetRxInterruptHandler 17CC                                 _EUSART_Receive_ISR 0CAA  
    EUSART_SetFramingErrorHandler@interruptHandler 0024                            __end_of_I2C_MasterClose 176C  
                         __size_of_I2C_DO_TX_EMPTY 0025                        PWM3_LoadDutyValue@dutyValue 0070  
                          __end_of_I2C_MasterStart 1772                            __end_of_I2C_MasterWrite 17AB  
                                    __pstringtext1 1000                                      __pstringtext2 1020  
                                    __pstringtext3 102F                                      __pstringtext4 1800  
                                    __pstringtext5 0000                               ?_I2C_DO_SEND_RESTART 0070  
                                         sprintf@c 0042                                           sprintf@f 0032  
                              ?_EUSART_Receive_ISR 0070                            COS_TmrHandler@tempbyte1 0028  
                          COS_TmrHandler@tempbyte2 0029                                         _UART_STATE 00C0  
                     __size_of_I2C_MasterEnableIrq 0003                                    ___lwmod@divisor 002C  
                            TMR2_ISR@CountCallBack 00B8                       __size_of_I2C_MasterGetRxData 0003  
                                  ___lwmod@counter 0031                            __size_of_COS_TmrHandler 0076  
                                       _TX1STAbits 019E                           __size_ofi1_I2C_SetBuffer 000D  
                      __size_of_I2C_MasterClearIrq 0003                            __size_of_COS_TimerSetup 0006  
                               EUSART_Write@txData 0025                       __size_of_EUSART_Transmit_ISR 001D  
                          __end_of_I2C_SetCallback 0BAC                     __end_of_PIN_MANAGER_Initialize 07FF  
                   __size_of_rd1RegCompleteHandler 0015                      __end_of_rd1RegCompleteHandler 0911  
                           __size_of_I2C_DO_RX_ACK 0004                              _RelativeHumidityRaw_H 00C6  
                            _RelativeHumidityRaw_L 00C5                     __size_of_wr1RegCompleteHandler 0015  
                             ??_EUSART_Receive_ISR 0071                              __size_of_I2C_DO_RESET 0005  
                    __end_of_wr1RegCompleteHandler 093B                              _TMR2_InterruptHandler 016A  
                            _MSSP_InterruptHandler 00BA                       __size_of_I2C_DO_ADDRESS_NACK 0024  
                             __size_of_I2C_DO_IDLE 0005                               __size_of_I2C_DO_RCEN 0006  
                                  _PWM3_Initialize 085A                                 __size_of_I2C_DO_RX 003B  
                               __size_of_I2C_DO_TX 004F  
